         MACRO
&NAME    #ERR  &SIGNAL=,&PREFIX=YES
.*
.**********************************************************************
.*                                                                    *
.* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.  *
.*                     All rights reserved.                           *
.*                                                                    *
.**********************************************************************
.*                                                                    *
.* THIS MACRO GENERATES A CALL TO ZILERR TO WRITE MESSAGES TO THE     *
.* STANDARD OUTPUT FILE.                                              *
.*                                                                    *
.* THIS USES REGISTERS 0, 1, AND 15, AND REQUIRES 13 TO POINT TO      *
.* THE COMMON AREA.                                                   *
.*                                                                    *
.* THE FIRST OPERAND IS THE SEVERITY LEVEL OF THE MESSAGE:            *
.*                                                                    *
.*   0 = INFORMATIONAL                                                *
.*   1 = WARNING                                                      *
.*   2 = ERROR                                                        *
.*   3 = SEVERE                                                       *
.*   4 = FATAL                                                        *
.*   * = ALWAYS PRINT REGARDLESS OF SEVERITY/MSGLEVEL                 *
.*                                                                    *
.*    0 -      INFORMATIONAL: SUPPRESSED BY MSGLEVEL 1, 2 OR 3        *
.*    1 -      WARNING:       SUPPRESSED BY MSGLEVEL 2 OR 3           *
.*    2 -      ERROR:         SUPPRESSED BY MSGLEVEL 3                *
.*    3 -      SEVERE:        NOT SUPPRESSED                          *
.*    4 -      DISASTROUS:    NOT SUPPRESSED                          *
.*    * -      UNCONDITIONAL: NOT SUPPRESSED                          *
.*                                                                    *
.* NOTE THAT 2, 3 AND 4 ALSO CAUSE AN ERROR TO BE SIGNALLED.          *
.*                                                                    *
.* THE REMAINDER OF THE OPERANDS ARE POSITIONALS WHICH DESCRIBE       *
.* PORTIONS OF THE MESSAGE TO BE PRINTED.  THESE CAN BE:              *
.*                                                                    *
.* 'MESSAGE' - A CONSTANT STRING TO BE PRINTED AS IS.                 *
.* REG#      - THE FIXNUM CONTENTS OF A REGISTER.                     *
.* (REG#)    - THE OBJECT POINTED TO BY REGISTER #.                   *
.* N(#11)    - THE OBJECT POINTED TO BY STACK LOCATION AT N OFF #11.  *
.*                                                                    *
.* "REG" MUST BE A REGISTER BETWEEN 2 AND 14.                         *
.*                                                                    *
.* EXAMPLES:                                                          *
.*                                                                    *
.*       #ERR  2,'BAD ARGUMENT',4(#11)                                *
.*       #ERR  2,'THIS FUNCTION REQUIRES',#3,'ARGUMENTS'              *
.*       #ERR  2,'INVALID TYPE FOR',#4                                *
.*                                                                    *
.**********************************************************************
.*
         LCLA  &N,&I,&J,&L
         LCLB  &SGNLERP,&NOPREFP,&SEVTSTP
         LCLC  &SEV,&S,&X,&AROUND,&STR(100),&SL1(100),&SL2(100)
&J       SETA  0
&N       SETA  N'&SYSLIST
&I       SETA  1
&AROUND  SETC  'PAR&SYSNDX'
         AIF   (&N LT 1).ERR1
&SEV     SETC  '&SYSLIST(1)'
         AIF   (K'&SEV GT 1).DEF2
         AIF   ('&SEV' EQ '0').SEV0
         AIF   ('&SEV' EQ '1').SEV1
         AIF   ('&SEV' EQ '2').SEV2
         AIF   ('&SEV' EQ '3').SEV3
         AIF   ('&SEV' EQ '4').SEV4
         AIF   ('&SEV' EQ '*').SEVA
         AGO   .ERR2
.SEV0    ANOP
&S       SETC  '00'
&SGNLERP SETB  0
&SEVTSTP SETB  1
         AGO   .GO
.SEV1    ANOP
&S       SETC  '01'
&SGNLERP SETB  0
&SEVTSTP SETB  1
         AGO   .GO
.SEV2    ANOP
&S       SETC  '02'
&SGNLERP SETB  1
&SEVTSTP SETB  1
         AGO   .GO
.SEV3    ANOP
&S       SETC  '03'
&SGNLERP SETB  1
&SEVTSTP SETB  1
         AGO   .GO
.SEV4    ANOP
&S       SETC  '04'
&SGNLERP SETB  1
&SEVTSTP SETB  1
         AGO   .GO
.SEVA    ANOP
&S       SETC  'FF'
&SGNLERP SETB  0
&SEVTSTP SETB  0
         AGO   .GO
.DEF2    ANOP
&S       SETC  '02'
&SGNLERP SETB  1
&SEVTSTP SETB  1
&I       SETA  0
         AGO   .GO
.GO      ANOP
         AIF   ('&SIGNAL' EQ 'YES').SETZON
         AIF   ('&SIGNAL' EQ 'NO').SETZOFF
         AIF   ('&SIGNAL' NE '').ERR3
         AIF   (&SGNLERP).SETZON
         AGO   .SETZOFF
.SETZON  ANOP
&SGNLERP SETB  1
         AGO   .CKPREF
.SETZOFF ANOP
&SGNLERP SETB  0
.CKPREF  ANOP
         AIF   ('&PREFIX' EQ '').PREFON
         AIF   ('&PREFIX' EQ 'YES').PREFON
         AIF   ('&PREFIX' EQ 'NO').PREFOFF
         AGO   .ERR4
.PREFON  ANOP
&NOPREFP SETB  0
         AGO   .DOIT
.PREFOFF ANOP
&NOPREFP SETB  1
.DOIT    ANOP
         AIF   (&SGNLERP OR (NOT &SEVTSTP)).NOBYP
&NAME    CLI   ZLCMSLVL,X'&S'       IF MSGLEVEL EXCEEDS SEVERITY CODE
         BH    &AROUND              THEN DON'T DISPLAY MESSAGE
         XR    #1,#1                INDICATE CALL TO PRINT MESSAGE
         AGO   .AFTBYP
.NOBYP   ANOP
&NAME    XR    #1,#1                INDICATE CALL TO PRINT MESSAGE
.AFTBYP  ANOP
         L     #15,ZLCERR           GET ADDRESS OF ZILERR
         BALR  #0,#15               BRANCH TO ZILERR
         DC    BL1'&SGNLERP.&NOPREFP.000000',X'&S'  FLAGS/SEVERITY
.*
.* LOOP THROUGH REMAINING POSITIONALS TO GENERATE ARGUMENTS
.*
.LOOP    ANOP
&I       SETA  &I+1
         AIF   (&I GT &N).FIN
&X       SETC  '&SYSLIST(&I)'
&L       SETA  K'&X
         AIF   (&L LT 3).NOTSTR
         AIF   ('&X'(1,1) EQ '''').STRING
         AIF   ('&X'(1,2) EQ 'X''').STRING
.NOTSTR  AIF   ('&X'(1,1) EQ '(').REG
         DC    S(&X)               PARAMETER
         AGO   .LOOP
.REG     ANOP
         DC    S(0&X)              PARAMETER
         AGO   .LOOP
.STRING  ANOP
&J       SETA  &J+1
&STR(&J) SETC  '&X'
&SL1(&J) SETC  '#P&SYSNDX.L&J'
&SL2(&J) SETC  '#P&SYSNDX.E&J'
         DC    S(&SL1(&J))         PARAMETER
         AGO   .LOOP
.FIN     ANOP
         DC    Y(X'0FFF')          END OF PARAMETER LIST
.*
         AIF   (&J EQ 0).SLEND
         AIF   (&SGNLERP).NOAR1
         B     &AROUND             BRANCH AROUND STRINGS
.NOAR1   ANOP
.*
.* LOOP THROUGH LITERAL STRINGS.
.*
&I       SETA  0
.SLOOP   ANOP
&I       SETA  &I+1
         AIF   (&I GT &J).SLEND
         DS    0H
         ORG   *+1                 ALIGN TO BE NOT ON HALFWORD BOUNDARY
&SL1(&I) DC    YL1(##STRING),AL3(&SL2(&I)-*-3)
         AIF   ('&STR(&I)'(1,1) EQ '''').DCC
         DC    &STR(&I)
         AGO   .AFTDCC
.DCC     ANOP
         DC    C&STR(&I)
.AFTDCC  ANOP
&SL2(&I) EQU   *
         AGO   .SLOOP
.SLEND   ANOP
         AIF   (&SEVTSTP AND (NOT &SGNLERP)).USEAR
         AIF   (&J EQ 0).NOAR2
         AIF   (&SGNLERP).NOAR2
.USEAR   ANOP
&AROUND  DS    0H
.NOAR2   ANOP
         MEXIT
.ERR1    MNOTE 12,'MISSING ARGS ON #ERR MACRO'
         MEXIT
.ERR2    MNOTE 12,'INVALID SEVERITY ARG TO #ERR MACRO - &SEV'
         MEXIT
.ERR3    MNOTE 12,'INVALID VALUE FOR SIGNAL KEYWORD, MUST BE YES OR NO'
         MEXIT
.ERR4    MNOTE 12,'INVALID VALUE FOR PREFIX KEYWORD, MUST BE YES OR NO'
         MEXIT
         MEND
