
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; "ZCCFARG"
;;;
;;; This routine compiles closures, i.e. (FUNCTION ...),
;;; and subrs, i.e. (SUBR ...).
;;;
;;; The argument to (FUNCTION ...) or (SUBR ...) must be a symbol
;;; or a valid LAMBDA-expression or LABEL-expression.
;;;
;;;  If (DECLARE (AUTOFUNCALL T)) was specified, and something
;;;  like #'FOO is coded where FOO is unknown, a call to
;;;  ZILXCLO is generated to build a compiled or interpreted
;;;  lexical closure, as the case may be.

;
;  U is either CLOSURE or SUBR.
;  B must be a list of 1 element - the function name.
;  V, S and E have their usual P-code-phase meanings.
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zccfarg (u b v s e)
 (prog (n f c p)
  (or b (go error1))
  (and (cdr b) (go error1))
  (setq n (car b))          ; Function name or LAMBDA, etc. expression.

  (setq p (eq u 'closure))  ; True if a closure is being built.

  (cond
   ((null n)       (go error2))         ; #'NIL - error
   ((consp n)      (go close-lambda))   ; #'(...) - must be LAMBDA-exp
   ((symbolp n)    (go close-symbol))   ; #'FOO - see if we know FOO
   (t              (go error2))         ; #'#<other> - error
  )

close-lambda

  (if (valid-lambda-p n)  ; If LAMBDA expression is valid and usable
   then
      (setq f (zcclamb n p e)) ;Try to compile the LAMBDA expression
      (go close-normal)        ; and generate a compiled closure for it
   else
      (return)               ; else not a valid LAMBDA, do nothing.
   endif
  )

close-symbol

  (if
      (memq n (get '*zilco* 'special-forms))
   then
      (go error3)
   else
   if
      (known-function-p n)   ; If it's a function known to compiler
   then
      (setq f n)             ; Use the function itself
      (go close-normal)      ; and generate a compiled closure for it
   else
      (go close-unknown)     ; otherwise make interpreted closure
   endif
  )

close-normal

  (modq body              ; Code similar to ZCCCALL to make a SUBR.
         (let ((dottedpair (assq f subrs)))  ; Find F if it is in list
           (unless dottedpair                ; If so, return that subr
            (setq dottedpair                 ; Else create a new subr
                 (zilcosym f 'subrs))        ; Add pair to symbol table
           (or (eq (car name) f)             ; If not a recursive call
               (modq subrs dottedpair)))     ; then add it to the list
          `(,u      ,dottedpair ,v ,s)))     ; Generate CLOSURE or SUBR
  (return)

close-unknown

  (unless (get n 'zilxclosed)
   (princ " Function \"")
   (prin1 n)
   (princ "\" unknown.  Funcallable ")
   (princ (if p "closure" "subr"))
   (princ " may be built at run time.")
   (terpri)
   (putprop n t 'zilxclosed))

  (zccevcom `(zilxclo ',n ,p) v s e) ; Compile call to closure maker.
  (return)

error1
  (modq body `(error "Invalid FUNCTION syntax" ,(cons u b)))
  (return)

error2
  (modq body `(error "Invalid FUNCTION name" ,n))
  (return)

error3
  (modq body `(error "Function cannot be passed as argument" ,n))
  (return)

 )
)

(defun valid-lambda-p (x) ; X is a CONS.
 (prog ()
  (if (eq (car x) 'lambda)
   then
      (or (cdr x)  (go not-valid))
      (or (cddr x) (go not-valid))
      (return t)  ; LAMBDA valid and compilable.
   else
   if (eq (car x) 'label)
   then
      (or (cdr x) (go not-valid))
      (or (cddr x) (go not-valid))
      (return (valid-lambda-p (caddr x)))
   else (go not-valid)
   endif
  )
 not-valid
  (modq body
   `(error "Functional arg not a symbol or valid LAMBDA-expression"
           ,x))
  (return nil)
 )
)

(defun known-function-p (x)    ; X is a symbol.
 (if (get '*zilco* 'autofuncall)
  then
     (let* (
            (c (get x 'cautoload))
            (minargs (or (if (and c (symbolp c)) (get c 'minargs))
                         (get x 'minargs)))
           )
           (if minargs t nil)
     )
  else t))

