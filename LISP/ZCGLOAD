
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; "ZCGLOAD"
;

;
; This function generates the code to load the address of the object
; represented by Q into the register indicated by R.
;
; R = a register to contain the address of an object
;
; Q = an object, which can be one of the following:
;
;   NIL  -  the atom NIL
;   T    -  the atom T
;   n    -  where n is a fixnum, being a small fixnum from the table
;   (xxx . yyy)  -  a dotted pair representing a constant atom,
;                   a constant list, or a locally bound variable
;
; In the case where a fixnum is passed,
; this generates code to load a small fixnum (i.e. a fixnum which
; lives in the "small fixnum table").  A direct pointer into the
; table is generated.
;
; Examples:
;
;  Fixnum     Generated code
;  ------     --------------
;   -1         LA  reg,#SFT-1*8   (this might not be implemented)
;    0         LA  reg,#SFT+0*8
;    1         LA  reg,#SFT+1*8
;    2         LA  reg,#SFT+2*8
;
; Get the picture?
;
; In the case where a dotted pair is passed, the object represented
; by the dotted pair may be a constant or a variable binding.
; If it has any of the following properties, it must be the latter:
;
; OFFSET, POSITION, BINDINGTYPE, LEXPRARG
;
; If it doesn't have any of these properties, it must be a constant.
;
; Note: similar code in ZCGGTLOC and ZCGSTATM, unless they've already
;       been modified to call this routine.
;
; The implicit contract in this routine is that no other registers
; can be used while loading the object in question (with the exception
; of register 14, which is specifically omitted from the list of
; eligible registers so it can be used for this purpose).
;
; For the above reason, unbound variables cannot be loaded by this
; function, since the code sequence may involve execution of
; instructions that use other registers if the variable's binding
; cannot be located quickly.
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zcgload (r q)
 (cond
  ((eq q nil)
   (zcgemit 2 () "LR" `(,r ",10") "Load atom NIL.")
  )
  ((eq q t)
   (zcgemit 2 () "LR" `(,r ",8")  "Load atom T.")
  )
  ((fixnump q)
   (zcgemit 4 () "LA" `(,r ,(if (minusp q) ",#SFT" ",#SFT+") ,(* q 8))
                                                   `("Load fixnum " ,q))
  )
  (t
   (let ((o (get (cdr q) 'offset)))
        (if o (zcgload-variable r q o)
              (zcgload-constant r q (where-it-is q)))))))

(defun zcgload-variable (r q o
                         &aux
                         (m (if (> (string-length (car q)) 17)
                                (or (get (cdr q) 'position) (cdr q))
                                (car q)))
                         (c (cond
                             ((get (cdr q) 'lexprarg)
                              `("Get LEXPR argument " ,m))
                             ((get (cdr q) 'position)
                              `("Get function's arg " ,m))
                             (t
                              `("Get local variable " ,m))))
                        )
 (if (get (cdr q) 'lexprarg)
  then
   (if (alistboundp q)
    then
       (zcgemit 4 () "L" "14,0(,11)"   "Get LEXPR stack pointer.")
       (zcgemit 4 () "L" "14,0(,14)" "Get pointer to alist cell.")
       (zcgemit 4 () "L" `(,r ",##CDR(,14)")                    c)
    else
       (zcgemit 4 () "L" "14,0(,11)"   "Get LEXPR stack pointer.")
       (zcgemit 4 () "L" `(,r ",0(,14)")                        c)
    endif
   )
  else
  if (alistboundp q)
  then
     (zcgemit 4 () "L" `("14," ,o "(,11)")
                                     "Get pointer to alist cell.")
     (zcgemit 4 () "L" `(,r ",##CDR(,14)")                      c)
  else
     (zcgemit 4 () "L" `(,r "," ,o "(,11)")                     c)
  endif
 )
)

(defun zcgload-constant (r q l
                         &aux
                         (c1 (cond
                              ((consp   (car q)) "Get address of list.")
                              ((symbolp (car q)) "Get symbol ")
                              ((stringp (car q)) "Get string ")
                              ((fixnump (car q)) "Get fixnum ")
                              ((bigp    (car q)) "Get bignum ")
                              ((floatp  (car q)) "Get flonum ")
                              (t                 "Get atom ")
                             ))
                         (c (if (and (atom (car q))
                                     (< (flatc (car q)) 15))
                                `(,c1 ,(car q))
                                c1))
                        )
 (zcgemit 4 () "L" `(,r "," ,l) c)
)

