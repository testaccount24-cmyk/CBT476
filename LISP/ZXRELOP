
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is a general-purpose compiler transform for relational operator
; functions that take multiple arguments.  For example...
;
; (< 1 2 3 4) --> (AND (LESSP 1 2) (LESSP 2 3) (LESSP 3 4))
;
; There are 2 arguments:  (1) the function name
;                         (2) the name of the primitive binary function
;
; If 1 arg is specified, the result is defined to be T.
;
; e.g. (deftrans < (x) (zxrelop x 'lessp))
;

(defun zxrelop (x func)
 (let (((funname . args) x))
  (cond
   ((null args)
    (zerror "Too few arguments" funname))
   ((null (cdr args))  `t)
   ((null (cddr args)) `(,func . ,args))
   (t (zxrelop-let args func)))))

(defun zxrelop-let (args func)
 (let* (
        (llist   (zxrelop-llist args))
        (letlist (zxrelop-letlist llist))
        (newargs (mapcar #'(lambda (x) (or (car x) (cadr x))) llist))
       )

;;; For example:
;;;
;;;  (ZXRELOP '(< A B (C) (D) E) 'LESSP)
;;;
;;; ARGS    = (A B C D E)
;;; FUNC    = LESSP
;;; LLIST   = ((NIL A) (NIL B) (G1 (C)) (G2 (D)) (NIL E))
;;; LETLIST = (G1 G2)
;;; NEWARGS = (A B G1 G2 E)
;;;
;;; which would result in the following expansion:
;;;
;;; (LET ((G1 (C))
;;;       (G2 (D)))
;;;      (AND (LESSP A B)
;;;           (LESSP B G1)
;;;           (LESSP G1 G2)
;;;           (LESSP G2 E)))
;;;

 `(let ,letlist
       (and . ,(loop for subargs on newargs while (cdr subargs)
                     collect
                     `(,func ,(car subargs) ,(cadr subargs)))))))

(defun zxrelop-llist (args)
 (loop for subargs on (cdr args) while (cdr subargs)
       collect (zxrelop-varpair (car subargs)) into z
       finally (return (nconc (list (zxrelop-varpair (car args)))
                              z
                              (list (zxrelop-varpair (car subargs)))
                       ))))

(defun zxrelop-letlist (llist)
 (loop for i in llist
       when (car i) collect i))

(defun zxrelop-varpair (form)
 (list
       (if (or (atom form)
               (eq (car form) 'quote))
           nil
           (gensym))
       form))

