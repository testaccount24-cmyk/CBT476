
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is the compiler transform for LESSP.
;
; Note: LESSP is the two-argument function underlying the < function.
;

(eval-when (eval)
 (deftrans lessp zxzillt)
)

(defun zxzillt (xform xenv xcon)

 (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; There must be exactly 2 arguments.  If not, skip transform.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ((not (eql (length xform) 3))
   xform)

  (t
   (let* ((arg1 (cadr xform))
          (arg2 (caddr xform))
          (carg1 (zilcocon arg1 nil))
          (carg2 (zilcocon arg2 nil))
         )

         (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If both arguments are constant, perform the test at compile time.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((and carg1 carg2)
           (warn "Evaluating LESSP of two constants at compile time"
                 (car carg1) (car carg2))
           (lessp (car carg1) (car carg2)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; (LESSP x 0) --> (MINUSP x)
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

         ((and carg2
               (numberp (car carg2))
               (zerop (car carg2)))
          `(minusp ,arg1))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; (LESSP 0 x) --> (PLUSP x)
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

         ((and carg1
               (numberp (car carg1))
               (zerop (car carg1)))
          `(plusp ,arg2))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Otherwise, no transformations apply.  Return the original form.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

           (t xform))))))

