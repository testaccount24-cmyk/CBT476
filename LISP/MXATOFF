
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

(eval-when (eval)
 (defun at  macro (x) (mxatoff x))
 (defun off macro (x) (mxatoff x))
)

(defun mxatoff (x)
 (let (((macro . arglist) x))
      (case macro
            (at  (mxatoff-at arglist))
            (off (mxatoff-off arglist))
            (t (zerror "Invalid caller of MXATOFF" macro)))))

;
; (at foo)
; (at (foo :entry))
; (at (foo :exit))
;
; (at foo           (arg1 arg2)      . body)
; (at (foo entry)   (&rest arglist)  . body)
; (at (foo exit)    (value-list)     . body)
; (at (foo entry t) ...) <== don't display "Entering" message
; (at (foo exit t) ...)  <== don't display "Exiting" message
;

(defun mxatoff-at
       ((&optional (funspec (zerror "Missing function name" 'at))
                   (arglist nil arglist?)
         &body body)
       &aux fun where quietp)
 (cond
  ((symbolp funspec)
   (setq fun funspec where :entry))
  ((not (consp funspec))
   (zerror "Invalid AT function spec" funspec))
  ((eql (length funspec) 1)
   (setq fun (car funspec) where :entry))
  ((eql (length funspec) 2)
   (setq fun (car funspec) where (cadr funspec)))
  ((eql (length funspec) 3)
   (setq fun (car funspec) where (cadr funspec) quietp (caddr funspec)))
  (t
   (zerror "Invalid AT function spec" funspec)))
 (cond
  ((not arglist?) ; in which case there's no body either
   (setq body '(nil)))
  ((null body)    ; but arglist without body is not valid
   (zerror "Missing body" 'at)))
 `(ziltrace
   (list ',fun #'(lambda (,(gensym) ,arglist) . ,body) ',quietp)
   ',(case where
           ((entry :entry)
            'entry)
           ((exit :exit)
            'exit)
           (t (zerror "Invalid AT entry/exit spec" where)))))

;
; (off foo)
; (off (foo entry))
; (off (foo exit))
;

(defun mxatoff-off
       ((&optional
                   (funspec (zerror "Missing function name" 'off))
         &rest junk)
       &aux fun where)
 (cond
  (junk
   (zerror "Too many arguments" 'off))
  ((symbolp funspec)
   (setq fun funspec where :entry))
  ((not (consp funspec))
   (zerror "Invalid OFF function spec" funspec))
  ((eql (length funspec) 1)
   (setq fun (car funspec) where :entry))
  ((eql (length funspec) 2)
   (setq fun (car funspec) where (cadr funspec)))
  (t
   (zerror "Invalid OFF function spec" funspec)))
 `(ziltrace
   '(,fun nil nil)
   ',(case where
           ((entry :entry)
            'entry)
           ((exit :exit)
            'exit)
           (t (zerror "Invalid OFF entry/exit spec" where)))))

