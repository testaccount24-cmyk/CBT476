
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;**********************************************************************
;*                                                                    *
;* GEN-END                                                            *
;*                                                                    *
;**********************************************************************

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 05/22/89 - Added setting of "uninterned" bit for symbols.           *
;*                                                                     *
;***********************************************************************
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun zcgend (a)
 (prog (name args zzzsubrs zzzatoms zzzlists)
  (desetq (name args) a)
  (setq zzzsubrs (get (cdr name) 'zzzsubrs)
        zzzatoms (get (cdr name) 'zzzatoms)
        zzzlists (get (cdr name) 'zzzlists))

  (zcgemit 0 "*" " " " " "Return value is in register 15.")

  ; If ALIST pointers were saved, restore them before exiting.

  (when (car fluid-asaved)

        (unless (eq (caar fluid-asaved) 'falist)
         (zerror "Bottom of binding stack not FALIST in ZCGEND"
                fluid-asaved))

        (zcgemit 4 () "L"  `("14," ,(cdar fluid-asaved) "(,11)")
                                      "Load stacked lexical ALIST ptr.")
        (zcgemit 4 () "ST" "14,ZLCFALST"       "Restore lexical ALIST.")
  )
;;(setq fluid-asaved (cdr fluid-asaved)) ; Who cares?

  (when (car special-asaved)

        (unless (eq (caar special-asaved) 'salist)
         (zerror "Bottom of binding stack not SALIST in ZCGEND"
                special-asaved))

        (zcgemit 4 () "L"  `("14," ,(cdar special-asaved) "(,11)")
                                      "Load stacked special ALIST ptr.")
        (zcgemit 4 () "ST" "14,ZLCSALST"       "Restore special ALIST.")
  )
;;(setq special-asaved (cdr special-asaved)) ; Who cares?

  (zcgemit 2 ()      "LR"    "1,11"              "Reset stack pointer.")
  (zcgemit 4 ()      "L"     `("14," ,(+ pdbas 8) "(,1)")
                                              "Restore return address.")
  (zcgemit 4 ()      "LM"    `("11,12," ,pdbas "(1)")
                                    "Restore stack and base registers.")
  (zcgemit 2 ()      "BR"    "14"                   "Return to caller.")
  (zcgemit 0 ()      "SPACE" 3                                      nil)
  (zcgemit 0 zzzstksz "EQU"  stackmax        "Maximum stack size used.")
  (zcgemit 0 ()      "DROP"  12                                     nil)
  (zcgend-drop-more-baseregs)
  (zcgemit 0 ()      "SPACE" 3                                      nil)
;
; Generate pointers to external subroutines.
;
 (if (cdr subrs)
  then
   (zcgemit 'f `(,zzzsubrs "S") "DS" "0A"  "Subroutine pointers.")
   (mapc #'(lambda (x)
            (if (memq (car x) intfuncs)
             then
              (zcgemit 4 (get (cdr x) 'location)
                         "DC"
                         `("A(" ,(cdr x) ")")
                         `("Address of " ,(substr (car x) 1 24)))
             else ; External function call - check name.
              (let*
               ((a (car x))
                (c (or (get a 'cautoload) a)))
               (unless (eq c (cdr x))
                       (princ "Error - invalid function name \"")
                       (princ C)
                       (princ "\"; \"")
                       (princ (cdr x))
                       (princ "\" substituted.")
                       (terpri)))
              (zcgemit 4 (get (cdr x) 'location)
                         "DC"
                         `("V(" ,(cdr x) ")")
                         `("Entry point for " ,(substr (car x) 1 19)))
             endif
            )
            (zcgemit 8 () "DC" `("CL8'" ,(cdr x) "'") nil)
            (remprop (cdr x) 'location))
        (cdr subrs))

   (zcgemit 0 `(,zzzsubrs "E") "EQU" "*"    "End of subroutines.")
  else
  if zzzsubrs
  then
   (zcgemit 'f `(,zzzsubrs "S") "DS"  "0A"   "Subroutine pointers.")
   (zcgemit 0  `(,zzzsubrs "E") "EQU" "*"    "End of subroutines.")
  endif
 )
;
; Relocatable object pointers begin here.
;
  (if zzzatoms
   then
      (zcgemit 'f `(,zzzatoms "S") "DS" "0A" "Atom pointers.")
   else
   if (and (not main) zzzlists)
   then
      (zcgemit 'f `(,zzzlists "S") "DS" "0A" "Object pointers.")
   endif
  )
;
; Generate pointers to lists.
; Only those lists with the "REFERENCED" property (i.e. those which
; have been defined directly in the executable code rather than just
; being a sublist of another list) will be processed.
;
  (loop for x in (cdr lists)
        when (get (cdr x) 'referenced)
          do (zcgend-output-offset x main))
;
; Generate pointers to atoms.  These will be used by ZILSINT to do
; load-time relocation and symbol interning.
;
; Note that symbols which are unbound lexical variables are placed
; before other symbols, in order, so that code that handles unbound
; variables may analyze them properly.
;
  (if main
   then
     (loop for x in (cdr numatoms) do (zcgend-output-offset x t))
     (loop for x in (cdr fluid-unbounds) do (zcgend-output-offset x t))
     (loop for x in (cdr alfatoms)
           when (get (cdr x) 'real)
           unless (assq (car x) (cdr fluid-unbounds))
               do (zcgend-output-offset x t))
     (if zzzatoms
         (zcgemit 0 `(,zzzatoms "E") "EQU" "*"  "End of atoms."))

     (zcgend-do-base-stuff) ; End ZCGEMIT's, adjust for base registers.

    ;
    ; Generate constant lists here.
    ;
     (if zzzlists
         (zcgenout `(,zzzlists "S") "DS" "0A" "Lists."))
     (dolist (x (cdr alllists))
             (zcgend-gen-list x (cdr name)))
     (if zzzlists
         (zcgenout `(,zzzlists "E") "EQU" "*" "End of lists."))
   else              ; MAIN=NO - atoms referenced by location pointers
                     ;           into the main function/program code...
                     ;           these are relocated by ZILSINT

    (loop for x in (cdr fluid-unbounds) do(zcgend-output-offset x nil))
    (loop for x in (cdr atoms)
          unless (assq (car x) (cdr fluid-unbounds))
              do (zcgend-output-offset x nil))
    (if zzzlists
        (zcgemit 0 `(,zzzlists "E") "EQU" "*"  "End of pointers."))

    (zcgend-do-base-stuff) ; End ZCGEMIT's, adjust for base registers.

   endif
  )

;
; Generate the constant atoms here.
;
  (if main
   then
 ;
 ; Generate constant numeric atoms.
 ;
    (mapc #'(lambda (x) (zcgend-gen-number (car x) (cdr x)))
          (cdr numatoms))
;
; Generate constant bignums.
;
    (mapc #'(lambda (x) (zcgend-gen-bignum (car x) (cdr x)))
          (cdr numatoms))
;
; Generate constant strings.
;
    (mapc #'(lambda (x) (zcgend-gen-string (car x) (cdr x)))
          (cdr numatoms))
;
; Generate constant symbols.
;
    (loop for x in (cdr alfatoms)
          when (get (cdr x) 'real)
            do (zcgend-gen-symbol (car x) (cdr x)))

  ) ; end IF
 ) ; end PROG
) ; end DEFUN ZCGEND

;**********************************************************************

;;; (defun zcgend-drop-more-baseregs ()
;;;  (let ((b (get (car name) 'basereg)))
;;;       (when (integerp b)
;;;             (when (> b 1)
;;;                   (zcgenout nil "DROP" 7 nil)
;;;                   (when (> b 2)
;;;                         (zcgenout nil "DROP" 6 nil)
;;;                         (when (> b 3)
;;;                               (zcgenout nil "DROP" 5 nil)
;;; ))))))

(defun zcgend-drop-more-baseregs ()
 (push 'drop codelist)
)

;**********************************************************************

(defun zcgend-do-base-stuff ()

;;;
;;; At this point we take all the code collected by calls to ZCGEMIT
;;; and generate it.  We must check to see if the addressability
;;; exceeds 4K.
;;;
;;; Possible code length ranges (note this include the "DS 0D" above,
;;; which itself is not addressable):
;;;
;;;   Code size          Number of base registers
;;;
;;;     0  -  4096                    1  (12)
;;;  4097  -  8192                    2  (12,7)
;;;  8193  - 12288                    3  (12,7,6)
;;; 12289  - 16384                    4  (12,7,6,5)
;;;
;;; If the code size exceeds 16384, we cannot compile the function.
;;;
;;; Note, however, than when the code size exceeds 4096 we are
;;; forced to add an overhead amount for insertion of instructions
;;; to load additional base registers.  Let N be the number of NIL's
;;; inserted into the code list by ZCGBASE.  Then...
;;;
;;; If code size is between 0 and 4096, no change required.
;;; If code size is between 4097 and 8192,
;;;   add 4*(N+1) to allow for the "LA 7,4095(,12)" instructions.
;;;   If the result exceeds 8192, add another 12, because we have to
;;;   switch to "LM 6,7,xxx" and have 2 adcons and a brancharound.
;;; If code size is between 8193 and 12288,
;;;   add 4*(N+4) to allow for the "LM 6,7,xxx", 2 adcons & branch.
;;;   If the result exceeds 12288, add another 4, because we have to
;;;   switch to "LM 5,7,xxx" and have one more adcons.
;;; If code size is between 12289 and 16384,
;;;   add 4*(N+5) to allow for the "LM 5,7,xxx", 3 adcons & branch.
;;;   If the result exceeds 16384, we've blown it.  Can't compile.
;;;

 (let ((f (cdr name))
       (n (loop for x in codelist count (null x)))
       (baseno)
       (basecode)
       (lbl1)
       (lbl2)
      )
   (cond
    ((<= codelen 4096)
     (setq baseno 1))
    ((<= codelen 8192)
     (setq baseno 2)
     (incf codelen (* 4 (1+ n)))
     (when (> codelen 8192)
           (setq baseno 3)
           (incf codelen 12)
           (when (> codelen 12288)
                 (setq baseno 4))))
    ((<= codelen 12288)
     (setq baseno 3)
     (incf codelen (* 4 (+ n 4)))
     (when (> codelen 12288)
           (setq baseno 4)
           (incf codelen 4)
           (when (> codelen 16384)
                 (setq baseno 5))))
    ((<= codelen 16384)
     (setq baseno 4)
     (incf codelen (* 4 (+ n 5)))
     (when (> codelen 16384)
           (setq baseno 5))))

;;;
;;; Now that we have determined the number of base registers,
;;; before we start outputting the code in CODELIST, generate
;;; code to initialize the base registers.
;;;

 (case baseno
  ((3 4)
   (setq lbl1 (gensym) lbl2 (gensym))
   (zcgenout nil "B" lbl2 "Branch around base adcons.")
   (let ((adcons
           (case baseno
                (3 (string-append "A(" f "+8192,"
                                       f "+4096)"))
                (4 (string-append "A(" f "+12288,"
                                       f "+8192,"
                                       f "+4096)"))
         )))
    (zcgenout lbl1 "DC" adcons nil)
    (zcgenout lbl2 "DS" "0H"   nil)
   )
  )
 )

 (setq basecode
  (case baseno
   (1 nil)
   (2 (list nil "LA" "7,4095(,12)"   "Load second base register."))
   (3 (list nil "LM" `("6,7," ,lbl1) "Load additional base registers."))
   (4 (list nil "LM" `("5,7," ,lbl1) "Load additional base registers."))
   (t (zerror "Can't compile function, code would exceed 16K bytes"
             (car name)))))

 (when basecode
  (zcgenout (car basecode) (cadr basecode)
            (caddr basecode) (cadddr basecode))
  (case baseno
   (2 (zcgenout nil "USING " `(,f "+4095,7") nil))
   (3 (zcgenout nil "USING " `(,f "+4096,7,6") nil))
   (4 (zcgenout nil "USING " `(,f "+4096,7,6,5") nil))
  )
  (loop for c on codelist
    when (null (car c))
      do (rplaca c basecode)
    when (eq (car c) 'drop)
      do (rplaca c (case baseno
                         (2 `(nil "DROP" "7" nil))
                         (3 `(nil "DROP" "7,6" nil))
                         (4 `(nil "DROP" "7,6,5" nil)))))
 )

 (loop for x in (nreverse codelist)
   unless (atom x)
   do (zcgenout (car x) (cadr x) (caddr x) (cadddr x)))

;
; The following is inserted for documentation, to aid in locating the
; end of code that must be directly addressable, and to provide a
; check that we are computing the code size correctly.
;
  (zcgenout nil      "SPACE"  1     nil)
;;(zcgenout (gensym) "EQU" `(,f "+" ,codelen) "Estimated code offset.")

  (zcgcodck f codelen) ; Check estimated code length.

;
; Align rest of code to doubleword boundary.
;
  (zcgenout nil      "DS"     "0D"  nil)
  (zcgenout nil      "SPACE"  1     nil)
 )
)

;**********************************************************************

(defun zcgend-gen-list (l naym) ; Generate code for constant lists.
 (prog (lcar lcdr)
       (or (car l)
           (zerror "Null list found embedded in list of lists"))
       (setq lcar (genlist-elem (caar l) naym))
       (if   (null (cdar l))
        then
             (zcgenout (cdr l) "DC" `(,.lcar ",A(0)") nil)
        else
        if   (atom (cdar l))
        then
             (setq lcdr (genlist-elem (cdar l) naym)) ; dotted pair
             (zcgenout (cdr l) "DC" `(,.lcar "," . ,lcdr) nil)
        else
             (zcgenout (cdr l) "DC" `(,.lcar ",A(*-" ,naym "+4)") nil)
             (zcgend-gen-list (cons (cdar l) nil) naym)
        endif
       )))

(defun genlist-elem (e naym)
 (cond
  ((null e) (ncons "A(0)"))
  ((eq e t) (ncons "A(1)"))
  (t `("A(" ,(cdr (cond
                   ((symbolp e) (assq     e alfatoms))
                   ((atom e)    (assoc    e numatoms))
                   (t           (assq     e alllists))
                  ))                                   "-" ,naym ")"))
 )
)

;**********************************************************************

(defun zcgend-gen-number (x1 x2)
 (cond
  ((fixnump x1)
   (zcgenout x2  "DS" "0A" `("Fixnum " ,x1))
   (zcgenout nil "DC" `("YL1(##FIXNUM),AL3(0),F'" ,x1 "'")      nil)
  )
  ((sfloatp x1)
   (zcgenout x2  "DS" "0A" `("Flonum " ,x1))
   (zcgenout nil "DC" `("YL1(##SFLOAT),AL3(0),F'" ,(mkfixnum x1) "'")
             nil)
  )
  ((dfloatp x1)
   (let (((a . b) (mkfixnum x1)))
    (zcgenout x2  "DS" "0A" `("Flonum " ,x1))
    (zcgenout nil "DC" `("YL1(##DFLOAT),AL3(0),F'" ,a "'") nil)
    (zcgenout nil "DC" `("F'" ,a "," ,b "'")               nil)
   )
  )
  (t nil)))

;**********************************************************************

(defun zcgend-gen-bignum (x1 x2)
 (prog (numlen numlist biglen)
     (cond
      ((bigp x1)
       (setq numlen  (flatc x1)
             numlist (biglist x1)
             biglen  (* 4 (length numlist)))
       (zcgenout x2  "DS" "0A" (if (< numlen 18)
                                  `("Bignum " ,x1)
                                  "Bignum"))
       (zcgenout nil "DC" `("YL1(##BIGNUM),AL3(" ,biglen ")")       nil)
       (loop for n in numlist do
        (zcgenout nil "DC" `("F'" ,n "'") "Bignum digit")
       )
      )
      (t nil)
     )))

;**********************************************************************

; This subroutine generates pointers to atoms.  Note that these pointers
; are actually offsets that get resolved by ZILSINT.

(defun zcgend-output-offset (x mainp)
 (zcgemit 4
           (where-it-is x)
           "DC"
           (if mainp
               `("A(" ,(cdr x) "-" ,(cdr name) ")")
               `("A(" ,(cdr name) "-" ,(cdr x) ")")
           )
           (cond
            ((consp   (car x))      "Offset of list")
            ((stringp (car x))      "Offset of string")
            ((fixnump (car x))      `("Offset of fixnum " ,(car x)))
            ((bigp    (car x))      "Offset of bignum")
            ((sfloatp (car x))      `("Offset of flonum " ,(car x)))
            ((dfloatp (car x))      "Offset of flonum")
            ((< (get (cdr x) 'length) 14)
                                    `("Offset of symbol " ,(car x)))
            (t                      "Offset of symbol...")))
 (remprop (cdr x) 'location)
)

;**********************************************************************

; This subroutine generates constant symbols.
; Each member of the list ALFATOMS is passed to this routine.

(defun zcgend-gen-symbol (x1 x2)
 (let ((q (get x2 'quoted)))
  (zcgenout x2 "DS" "0A" (if (< (length q) 19) `("Symbol " ,x1)    nil))

  ; The following if we are NOT generating the hash code of the
  ; symbol into the module at compile time.
;;;
;;(zcgenout nil "DC" "YL1(##SYMBOL),7X'00'"                         nil)
;;;
  ; The following if we ARE generating the hash code of the
  ; symbol into the module at compile time.

  ; But what about the version number of the hash code?
  ; We need to correlate this with the code in ZILINTN if we do it.

  (zcgenout nil "DC"
                (if (zilspkg x1) ; If "interned"
                    "YL1(##SYMBOL,0,0,##FWHASH)"
                    ; else "uninterned" (e.g. a gensym)
                    "YL1(##SYMBOL,0,0,##FWGSYM)")
                nil)

  (zcgenout nil "DC" `("F'" ,(sxhash x1) "'")        "Symbol hash code")

  (zcgend-build-string nil q (string-length (symbol-name x1)))
 )
)

;**********************************************************************

; This subroutine generates constant strings.
; Each member of the list NUMATOMS is passed to this routine.

(defun zcgend-gen-string (x1 x2)
 (if (stringp x1)
     (zcgend-build-string x2 (get x2 'quoted) (string-length x1)))
)

;**********************************************************************

; This subroutine builds string text.  If the string text
; is too long to fit on one assembler statement, a special routine
; is executed to build the output.  This is an exception to the rule
; that all code generation uses zcgenout to build assembler code.

(defun zcgend-build-string (g q s)
  (prog (l)
   (setq l (length q))
   (zcgenout g       "DS" "0A"               "Align string to fullword")
   (zcgenout nil     "DC" "YL1(##STRING)"            "String type bits")
   (zcgenout nil     "DC" `("AL3(" ,s ")")              "String length")

   (and (zerop s) (return (zcgenout nil "DC" "X'00'" "(Null string)")))
   (and (< l 55)  (return (zcgenout nil "DC" (cons "C" q) nil)))

                                 ; Process all characters in quoted rep.
   (setq q (cdr q))              ; Strip off initial quote mark.
  start-new-card
   (princ "         DC    C'" 'code) ; Generate opcode
                                     ; and begin character string
  loop
   (cond
        ((null (cdr q))  ; Final quote mark - can't move to next line
         (princ (car q) 'code)
         (terpri 'code)
         (return nil))
        ((> (zgetfpo 'code) 69) ; Near the end of the card image?
         (princ "'" 'code)      ; End this piece of the string
         (terpri 'code)         ; Go to next card
         (go start-new-card))
        ((or (eq (car q) '|'|) (eq (car q) '|&|)) ; Doubled character.
         (princ (car q) 'code)     ; Print it.
         (princ (cadr q) 'code)    ; The next must be another ' or &.
         (setq q (cddr q))
         (go loop))
        (t
         (princ (car q) 'code)    ; Generate a character of the name.
         (setq q (cdr q))
         (go loop)))))

