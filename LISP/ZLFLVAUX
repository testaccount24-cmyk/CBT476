
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; ZIL 1.3 flavor system - November 1987
;
; More FLAVORS functions.
;

(include #.(zil-source-member zlflvstr))  ; Flavor defstruct.

;
; Need this to compile calls to SEND in this module.
;

(defmacro send (&rest args) `(funcall . ,args))

;
;***********************************************************************
;*                                                                     *
;* DESCRIBE:                                                           *
;*                                                                     *
;***********************************************************************
;

(defun describe (object)
 (send object :describe))

;
;***********************************************************************
;*                                                                     *
;* DESCRIBE-FLAVOR:                                                    *
;*                                                                     *
;***********************************************************************
;

(defmacro flavordump (&rest slots)
 `(progn . ,(mapcar #'flavordump1 slots)))

(eval-when (compile eval)
 (defun flavordump1 (slot)
  `(format t "~&~A~2%~S~2%" ,(string-append slot ":")
                             (,(concat "FLAVOR-" slot) flavor)))
)

(defun describe-flavor (flavor-name)
 (let ((flavor (zil-get-flavor flavor-name)))
      (flavordump
           name
           instance-variables
           instance-keywords
           instance-initializers
           all-instance-variables
           all-instance-keywords
           all-instance-initializers
           component-flavors
           included-flavors
           combined-methods
           primary-methods
           before-methods
           after-methods
           default-methods
           wrapper-methods
           component-flavor-list
           included-flavor-list
           all-flavor-list
           dependent-flavor-list
           required-instance-variables
           required-methods
           method-combination-list
           init-plist
           default-init-plist
           init-keywords
           which-operations
           initialized
      )
      flavor-name))

;
;***********************************************************************
;*                                                                     *
;* FUNCALL-SELF :                                                      *
;*                                                                     *
;***********************************************************************
;

(xdefmacro funcall-self (message &rest args)
 `(funcall self ,message . ,args))

(xdefmacro send-self (message &rest args)
 `(send self ,message . ,args))

;
;***********************************************************************
;*                                                                     *
;* GET-HANDLER-FOR:                                                    *
;*                                                                     *
;***********************************************************************
;

(defun get-handler-for (object message)
 (send object :get-handler-for message))

;
;***********************************************************************
;*                                                                     *
;* SET-IN-INSTANCE:                                                    *
;*                                                                     *
;***********************************************************************
;

(defun set-in-instance (instance symbol value)
 (send instance :set-in-instance symbol value))

;
;***********************************************************************
;*                                                                     *
;* SYMEVAL-IN-INSTANCE:                                                *
;*                                                                     *
;***********************************************************************
;

(defun symeval-in-instance (instance symbol &optional no-error-p)
 (send instance :symeval-in-instance symbol no-error-p))

;;;
;;; SETF method for SYMEVAL-IN-INSTANCE
;;;

(defun (symeval-in-instance setfmethod) (place value)
 (unless (eql (length place) 3)
         (zerror "Invalid SETF syntax" place))
 `(set-in-instance ,(cadr place) ,(caddr place) ,value))

;
; Not implemented yet:
;
; Functions
;
;   lexpr-funcall-self
;   recompile-flavor
;
; Macros
;
;   compile-flavor-methods
;
; Variables
;
;   *flavor-compilations*
;
