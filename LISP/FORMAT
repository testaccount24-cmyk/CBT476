
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;; Reference:  Steele, pp. 385-407.

;;;
;;; This is the new implementation of FORMAT.  There are several
;;; functions that comprise it - all their names begin by convention
;;; with the characters ZFM.
;;;
;;; ZFMPARS - takes a FORMAT string and parses it into the form that
;;;           is used by the FORMAT executor.  This may be invoked
;;;           by the FORMAT compiler transform, if and when it is
;;;           written.
;;;
;;; ZFMEXEC - the FORMAT executor.  Unlike FORMAT, this function
;;;           takes a fixed number of args and the output of the
;;;           FORMAT string parser.
;;;
;;; ZFMNENG - converts an integer to English word form.
;;;
;;; ZFMNROM - converts an integer to Roman numeral form.
;;;
;;; See the source code for the above functions, and possibly others,
;;; for more information.
;;;
;;; Note: We may also decide to write a function FORMATL as follows:
;;;
;;; (defun formatl (dest string args)
;;;  (zfmexec dest (zfmpars string) args))
;;;
;;; such that FORMAT could be defined as:
;;;
;;; (defun format (dest string &rest args)
;;;  (formatl dest string args))
;;;
;;; In this way, functions like ERROR and Y-OR-N-P could be defined
;;; such that they invoked FORMAT as follows:
;;;
;;; (defun y-or-n-p (string &rest args)
;;;  ...
;;;  (formatl t string args)
;;;  ...
;;; )
;;;
;;; instead of the standard
;;;
;;;  ...
;;;  (apply #'format t string args)
;;;  ...
;;;
;;; ... unless we have a compiler transform for APPLY that can
;;;     handle that.  But probably we will have
;;;
;;; (defun y-or-n-p (string &rest args)
;;;  ...
;;;  (zfmexec t (zfmpars string) args)
;;;  ...
;;; )
;;;
;;; ... assuming that we don't optimize the arg to Y-OR-N-P for
;;;     efficiency (only if optimizing speed over space, of course).
;;;

(defun format (dest string &rest args)
 (zfmexec dest (zfmpars string) args)
)

;
; The following insures that when you load the source version of
; FORMAT from this file, the other files get loaded automatically
; from the same file.  Not applicable to compilation.
;

(eval-when (eval)
 (declare (special *loadfile*))
 (let* ((loadfile (with-open-file (l *loadfile*) (zildsni l)))
        (loadpds
         (substr loadfile 1 (1- (index loadfile "(" #|)|#))))
       )
  (load (string-append "'" loadpds "(zfmpars)'"))
  (load (string-append "'" loadpds "(zfmexec)'"))
 )
)

