
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; Note:  This looks awfully similar to ZCGCLOS, doesn't it?
;;;


;**********************************************************************
;*                                                                    *
;* "ZCGSUBR"
;*                                                                    *
;**********************************************************************

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 05/01/88 - More arguments to ZCGSTVRS.                              *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zcgsubr (a) ;
 (prog
       (b   ; the name of the function to make a SUBR out of
        v   ; an item to receive the value if SETQ is involved
        s   ; the target of the value to be set
        r   ; a register to be used
        l   ; a location label for the V-con associated with the subr
        c   ; comments string
       )
       (desetq (b v s) a)
       (setq r (zcgresv '\15) ) ; Value is always in this register.
       (zcgresv '\1)
       (zcgresv '\2)
       (zcgresv '\14)
       (setq c `("Load address of " ,(cdr b)))
;
; Note that B is a dotted pair with the function name and a symbol.
;
       (if (eq (car b) (car name))
        then
         (zcgemit 2 () "LR" "1,12"                                    c)
        else
         (setq l (or (get (cdr b) 'location)
                     (putprop (cdr b) (gensym) 'location)))
         (zcgemit 4 () "L" `("1," ,l)                                 c)
        endif
       )
       (zcgemit 4 () "L"    "15,ZLCCONS"         "Get address of CONS.")
       (zcgemit 2 () "XR"   "2,2"   "Alist component is zero for SUBR.")
       (zcgemit 2 () "BALR" "14,15"         "Call CONS to make a SUBR.")
       (zcgemit 4 () "MVI"  "##TYPE(15),##SUBR"
                            `("SUBR of " ,(string-substr (car b) 1 27)))
;
; At this point the return value will be in register 15.
;
       (zcgstvrs r v s nil)  ; Store reg into SETQ variables if any.
       (zcgsttrg r s)        ; Set target to register if any.
       (zcgrels '\1)         ; Free the register.
       (zcgrels '\2)         ; Free the register.
       (zcgrels '\14)        ; Free the register.
 )
)
