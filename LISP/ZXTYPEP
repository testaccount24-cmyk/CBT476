
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is the compiler transform for TYPEP.
;

;;;
;;; Note to Macsyma installers:  Do NOT use (TYPEP X 'INTEGER)!!!
;;; (TYPEP X 'INTEGER) transforms to (INTEGERP X), which compiles
;;; into a call to the Macsyma function INTEGERP.
;;;

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 06/21/88 - Support for transforming (TYPEP 'foo).                   *
;*                                                                     *
;***********************************************************************
;

(defun zxtypep (xform xenv xcon)
 (case (length xform)
       (2  (zxtypep-1arg xform xenv xcon))  ; TYPEP with 1 argument
       (3  (zxtypep-2arg xform xenv xcon))  ; TYPEP with 2 arguments
       (t  xform)))

(defun zxtypep-1arg (xform xenv xcon)
 (let* ((arg1 (cadr xform))
        (carg1 (zilcocon arg1 nil))
       )

       (cond

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; If the argument is a constant, perform the test at compile time.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        (carg1
         (warn "Evaluating TYPEP of one constant at compile time"
               (car carg1))
         `',(typep (car carg1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Otherwise, no transformations apply.  Return the original form.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        (t xform))))


(defun zxtypep-2arg (xform xenv xcon)

 (let* ((arg1 (cadr xform))
        (arg2 (caddr xform))
        (carg1 (zilcocon arg1 nil))
        (carg2 (zilcocon arg2 nil))
       )

       (cond

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; If both arguments are constant, perform the test at compile time.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

       ((and carg1 carg2)
        (warn "Evaluating TYPEP of two constants at compile time"
              (car carg1) (car carg2))
        (typep (car carg1) (car carg2)))  ; Always T or NIL.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; If argument 2 is a constant, and argument 1 is not,
;; then optimize the call.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        ((and carg2 (not carg1))
         (zxtypep-optimize arg1 (car carg2)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Otherwise, no transformations apply.  Return the original form.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        (t xform))))

(defun zxtypep-optimize (arg carg)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Optimize all the cases of (TYPEP <arg1> '<arg2>) where <arg2> is
  ;; a known type that can be compiled inline efficiently.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 (case carg

       ((atom)       `(atom    ,arg))
       ((list)       `(listp    ,arg))
       ((cons)       `(consp    ,arg))
       ((symbol)     `(symbolp  ,arg))
       ((fixnum)     `(fixnump  ,arg))
       ((float
         flonum)     `(floatp   ,arg))
       ((
         short-float
         single-float
        )            `(sfloatp  ,arg))
       ((
         double-float
        )            `(dfloatp  ,arg))
       ((bignum)     `(bigp     ,arg))
       ((integer)    `(integerp ,arg))
       ((string)     `(stringp  ,arg))
       ((vector)     `(vectorp  ,arg))
       ((compiled-function
         code)       `(codep    ,arg))
       ((subr)       `(subrp    ,arg))
       ((closure)    `(closurep ,arg))
       ((funarg)     `(funargp  ,arg))
       ((struct
         defstruct
         structure)  `(structp  ,arg))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Otherwise, no transformations apply.  Reconstruct TYPEP call.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

       (otherwise    `(typep ,arg ',carg))))

