
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 06/17/88 - Support for multiple values.                             *
;*                                                                     *
;* 11/04/88 - Support for AT and OFF.  See MXATOFF for details.        *
;*                                                                     *
;***********************************************************************
;
(eval-when (eval)
 (defmacro trace   (&rest x) `(ziltrace ',x 'trace))
 (defmacro untrace (&rest x) `(ziltrace ',x 'untrace))
 (defun    at      macro (x) (mxatoff x))
 (defun    off     macro (x) (mxatoff x))
)

(eval-when (compile)
 (defmacro tracerprop () ''subr))

(eval-when (eval)
 (defmacro tracerprop () ''expr))

(declare (special *trace* *trace-indent*))

(defstruct trace
           function-name
           function-property
           function-code
           function-hook
           function-entry
           function-exit
           function-entry-quietp
           function-exit-quietp
           features
)

(defun ziltrace (fl whatfor)
 (case whatfor
  (trace    (ziltrace-trace fl))   ; FL is a list of functions
  (untrace  (ziltrace-untrace fl)) ; FL is a list of functions
  (pp       (ziltrace-getfun fl))  ; FL is a single function
  (entry    (ziltrace-entry  fl))  ; FL is a list (tfun efun quietp)
  (exit     (ziltrace-exit   fl))  ; FL is a list (tfun efun quietp)
  (t        (zerror "Invalid second arg to ZILTRACE" whatfor))))

(defun ziltrace-assq (fn)
 (unless (symbolp fn)
         (zerror "Function name to be traced not a symbol" fn))
 (let ((tf (assq fn *trace*)))
      (cond
       ((null tf) nil)
       ((neq (trace-function-hook (cdr tf)) (get fn (tracerprop)))
        (format t "~&Function ~S became untraced when redefined.~%"
                  fn)
        (setq *trace* (delq tf *trace*))
        nil)
       (t
        tf))))

(defun ziltrace-getfun (function) ; Interface used by ZILPP.
                                  ; The arg is a symbol, not a list.
                                  ; Returns a list (prop . code)
 (let ((the-one (ziltrace-assq function)))
      (if the-one
          (cons (trace-function-property (cdr the-one))
                (trace-function-code (cdr the-one)))
          nil)))

(defun ziltrace-trace (fl)
 (cond
      ((null fl) (loop for tf in *trace*
                       when (ziltrace-assq (car tf))
                       collect (car tf)))
      ((atom fl) (zerror "Invalid TRACE function list" fl))
      (t         (mapcan #'ziltrace-trace1 fl)
                 )))

(defun ziltrace-trace1 (fn &aux (ff nil)) ; This traces one function.
 (cond
  ((ziltrace-assq fn)
   (format t "~&Function ~S is already being traced.~%" fn)
   nil)
  (t
   (let (((fp fc) (getl fn '(subr expr fexpr |SPECIAL FORM| macro))))
    (case fp
     ((fexpr |SPECIAL FORM| macro)
      (format t "~&Unable to trace ~S ~A.~%" fp fn)
      nil)
     ((subr expr)
      (let* ((fs (make-trace :function-name         fn
                             :function-property     fp
                             :function-code         fc
                             :function-hook         nil
                             :function-entry        nil
                             :function-exit         nil
                             :function-entry-quietp nil
                             :function-exit-quietp  nil
                             :features              ff
                 ))
             (fh #'(lambda (&rest fa) (trace-encapsulate fs fa)))
            )
            (setf (trace-function-hook fs) fh)
            (push (cons fn fs) *trace*)
            (remprop fn fp)
            ;
            ; There's an exposure here if an interrupt takes place,
            ; particularly if an EXPR is traced.
            ;
            (setf (get fn (tracerprop)) fh)
            (ncons fn)))
     (otherwise
      (cond
       ((zevauto fn nil)
        (ziltrace-trace1 fn))
       (t
        (format t "~&Unable to trace ~A, function not defined.~%" fn)
        nil))))))))

(defun trace-encapsulate (fs fa &aux fv)
 (let ((fn  (trace-function-name fs))
    ;;;(fp  (trace-function-property fs))
       (fc  (trace-function-code fs))
    ;;;(fh  (trace-function-hook fs))
       (fe  (trace-function-entry fs))
       (fx  (trace-function-exit fs))
       (feq (trace-function-entry-quietp fs))
       (fxq (trace-function-exit-quietp fs))
    ;;;(ff  (trace-features fs))
      )
  (let ((*trace-indent* (1+ *trace-indent*)))
       (trace-enter fe fn fa feq *trace-indent*)
    ;;;(when ff (trace-enter-features ff))
       (setq fv (multiple-value-list (zilapply fc fa nil fn)))
       (trace-exit fx fn fv fxq *trace-indent*)
    ;;;(when ff (trace-exit-features ff))
       (values-list fv))))

(defun ziltrace-untrace (fl)
 (cond
      ((null fl) (let ((funs (mapcar #'car *trace*)))
                      (mapcan #'ziltrace-untrace1 funs)))

      ((atom fl) (zerror "Invalid UNTRACE function list" fl))
      (t         (mapcan #'ziltrace-untrace1 fl))))

(defun ziltrace-untrace1 (f) ; This untraces one function.
 (let ((the-one (ziltrace-assq f)))
      (cond
       (the-one
        (remprop f (tracerprop))
         ;
         ; There's an exposure here if an interrupt takes place,
         ; particularly if an EXPR is traced.
         ;
        (setf (get f (trace-function-property (cdr the-one)))
              (trace-function-code (cdr the-one)))
        (setq *trace* (delq the-one *trace*))
        (ncons f))
       (t
        (format t "~&Function ~A was not being traced.~%" f)
        nil))))

;
; x = user exit function (AT ...), if any
; f = function name being traced
; l = argument list or values list
; q = if non-NIL, suppress entry/exit message
; i = indent
;

(defun trace-enter (x f l q i)
 (cond
  (x
   (unless q (format t "~&~V@A;At entry to ~S.~%" i "" f))
   (funcall x f l))
  (t
   (format t "~&~V@A;Enter ~S ~:S~&" i "" f l))))

(defun trace-exit (x f l q i)
 (cond
  (x
   (unless q (format t "~&~V@A;At exit from ~S.~%" i "" f))
   (funcall x f l))
  (t
   (format t "~&~V@A;Exit ~S: ~{~S~Â¬, ~}~&" i "" f l))))

(defun ziltrace-entry ((fn exp quietp))
 (ziltrace-make-entry-function fn exp quietp))

(defun ziltrace-exit ((fn exp quietp))
 (ziltrace-make-exit-function fn exp quietp))

(defun ziltrace-make-entry-function (fn exp quietp)
 (let ((the-one (ziltrace-assq fn)))
  (cond
   (the-one
    (setf (trace-function-entry        (cdr the-one)) exp)
    (setf (trace-function-entry-quietp (cdr the-one)) quietp)
    fn
   )
   ((null exp)
    (format t "~&Function ~A was not being traced.~%" fn)
    nil)
   ((ziltrace-trace1 fn)
    (ziltrace-make-entry-function fn exp quietp)))))

(defun ziltrace-make-exit-function (fn exp quietp)
 (let ((the-one (ziltrace-assq fn)))
  (cond
   (the-one
    (setf (trace-function-exit        (cdr the-one)) exp)
    (setf (trace-function-exit-quietp (cdr the-one)) quietp)
    fn
   )
   ((null exp)
    (format t "~&Function ~A was not being traced.~%" fn)
    nil)
   ((ziltrace-trace1 fn)
    (ziltrace-make-exit-function fn exp quietp)))))

