
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; SYMEVAL
;;;
;;; Argument 1 (required) - the symbol to be evaluated.
;;;
;;; Note:
;;;
;;; Arg 1 is expected to be a symbol other than T or NIL.
;;;
;;; Features no longer supported by SYMEVAL:
;;;
;;;
;;; (A) Optional alist argument (was used only by EVAL, who no longer
;;;     calls SYMEVAL).
;;;
;;; (B)        If the variable is unbound, before we signal an error
;;;            we do the following:
;;;              (1) If the variable is a keyword, we return the
;;;                  variable itself as the value.  Since ZIL does not
;;;                  have a package system, a symbol is considered to
;;;                  be a keyword if its first character is a colon.
;;;                  Kludge, but necessary.
;;;              (2) If the variable has an AUTOVALUE property, we
;;;                  process it much like the AUTOLOAD property of
;;;                  function names... if it is a string, the file
;;;                  of that name is loaded; if it is a list, the
;;;                  list is evaluated as a form.  The AUTOVALUE
;;;                  property cannot be a symbol.
;;;
;;; END of unsupported features.
;;;
;;;            Completely recoded to use the new ZEVSYM function,
;;;            which we need to support the new autobinding feature
;;;            under the compiler.
;;;
;;;            Also, no extra features are supported.  If the
;;;            variable does not have a current binding, it is
;;;            considered unbound.  Only the evaluator itself is
;;;            allowed to assume other values (CSETQ, OBLIST, ALIST,
;;;            keywords, etc.).
;;;
;;;
;;; When shallow binding is implemented, this version of the function
;;; will disappear, to be replaced by an assembler-coded function
;;; (and an inline-coded compiler-generated code sequence as well)
;;; which will load the value cell of the symbol and test it for
;;; unboundedness.  Something like this:
;;;
;;;  L    14,=A(symbol)
;;;  ICM  reg,15,##PVALUE(14)
;;;  BMR  reg
;;;
;;; or, if symbol-autoloading is to be supported by BOUNDP:
;;;
;;;  L    14,=A(symbol)
;;;  ICM  reg,15,##PVALUE(14)
;;;  BALR 0,0      ... so the handler knows where to return to
;;;  BMR  reg      ... or whatever, to branch to unbound-variable
;;;                ... handling in error-signalling mode
;;;                ... which will reissue the ICM to set condition code
;;;
;;; Also see SET and BOUNDP.
;;;
;;; We should also ditch that optional second operand.
;;;

(defun symeval (x)
 (let ((binding (zevsym x)))
      (if (consp binding)
          (cdr binding)
          (zerror "Variable has no value" x))))

