
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; The macro expander for the back quote.
;
; (rdrmacro '|`| 'zrmbq)
; (defmacro |`| (a) (mxbq a))
;
; 06/27/86 - Support for backquoted vectors.
;

(defload car zcar)

(defmacro backquote () ''|`| )
(defmacro comma     () ''|,| )
(defmacro comma-at  () ''|,@|)
(defmacro comma-dot () ''|,.|)

(defmacro is-a-splicer (x) ; Determine which kind of expansion we need.
 `(and (consp ,x)
       (or (eq (car ,x) (comma-at))
           (eq (car ,x) (comma-dot)))))

(defun mxbq (x)
 (cond
  ((vectorp x)                    `(zmvector ,(mxbq (vlist x))))
  ((atom x)                       (mxbq-atom x))
  ((eq (car x) (comma))           (cadr x))
  ((eq (car x) (comma-at))
   (zerror "Syntax error: ,@ not in backquoted list"))
  ((eq (car x) (comma-dot))
   (zerror "Syntax error: ,. not in backquoted list"))
  ((eq (car x) (backquote))       (mxbq (mxbq (cadr x))))
  ((null (cdr x))                 (if   (is-a-splicer (car x))
                                      (mxbq-nconc x)
                                      (mxbq-list  x)))
  ((or (atom (cdr x))
       (eq (cadr x) (comma))
       (eq (cadr x) (comma-at))
       (eq (cadr x) (comma-dot))) `(cons ,(mxbq (car x))
                                         ,(mxbq (cdr x))))
  ((any-splicers x)               (mxbq-nconc x))
  (t                              (mxbq-list  x))))

(defun mxbq-atom (x)
 (cond
  ((or (null x) (eq x t))  x)
  ((symbolp x)             `(quote ,x))
  (t                       x)))

(defun any-splicers (x) ; See if there are any ,@'s or ,.'s present.
 (prog (a)
  loop (or x (return nil))
       (and (atom x) (return nil))
       (setq a (car x))
       (and (eq a (comma)) (return nil))
       (and (eq a (comma-at))
        (zerror "Syntax error: ,@ cannot follow dot in backquoted list"))
       (and (eq a (comma-dot))
        (zerror "Syntax error: ,. cannot follow dot in backquoted list"))
       (and (is-a-splicer a) (return t))
       (setq x (cdr x))
       (go loop)))

(defun mxbq-list (x)
 (let ((a (mapbq (subr mxbq-list1) x)))
      (if   (car a)
            `(list* . ,(nreverse a))
            `(list  . ,(nreverse (cdr a))))))

(defun mxbq-list1 (x)
 (cond
  ((vectorp x)            ; Embedded vectors are implicitly backquoted.
                            `(zmvector ,(mxbq (vlist x))))
  ((atom x)                 (mxbq-atom x))
  ((eq (car x) (comma))     (cadr x))
  ((eq (car x) (backquote)) (mxbq (mxbq (cadr x))))
  (t                        ; Embedded lists are implicitly backquoted.
                            (mxbq x))))

(defun mxbq-nconc (x)
 (let ((a (mapbq (subr mxbq-nconc1) x)))
      (if (car a)     ; ends in dotted pair, extract from (LIST xxx)
          `(nconc ,.(nreverse (cdr a)) ,(cadar a))
          `(nconc . ,(nreverse (cdr a))))))

(defun mxbq-nconc1 (x)
 (cond
  ((vectorp x)           ; Embedded vectors are implicitly backquoted.
                        `(list `(zmvector ,(mxbq (vlist x)))))
  ((atom x)                 `(list ,(mxbq-atom x)))
  ((eq (car x) (comma))     `(list ,(cadr x)))
  ((eq (car x) (comma-at))  `(append ,(cadr x))) ; Must copy list.      .
  ((eq (car x) (comma-dot)) (cadr x))          ; OK to destroy the list.
  ((eq (car x) (backquote)) `(list ,(mxbq (mxbq (cadr x)))))
  (t                        ; Embedded lists are implicitly backquoted.
                            `(list ,(mxbq x)))))

(defun mapbq (f x)
 (prog (a z w)
  loop (or x (go finish))
       (when (or (atom x)
                 (eq (setq a (car x)) (comma)))
             (setq w (funcall f x))
             (go finish))
       (when (eq a (comma-at))
        (zerror "Syntax error: ,@ cannot follow dot in backquoted list"))
       (when (eq a (comma-dot))
        (zerror "Syntax error: ,. cannot follow dot in backquoted list"))
       (push (funcall f a) z)
       (setq x (cdr x))
       (go loop)
 finish
       (return (cons w z))))

