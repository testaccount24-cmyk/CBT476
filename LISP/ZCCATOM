
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;; This compiles code to retrieve the value of an (unquoted) atom.

;;; If the variable is self-evaluating, then it is a constant.
;;; If the variable is a "keyword", then it is a constant.
;;; Else if it is a local variable, then use that.
;;; Otherwise it is a kind of unbound variable, unless it's a
;;; keyword, in which case it's self-evaluating.

;;; If it's an unbound variable, it may still be lexically known
;;; if this is an internal function (funarg).  We must scan the
;;; lexical environment to see if this is the case.  Note that
;;; if the variable is SPECIAL, no lexical enclosing is applicable.

; "b" is the atom in question.
; Note that NIL can never be passed to this routine.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zccatom (b v s e &aux a)
 (cond
  ((and (null v) (null s))                 ; See if atom is not used
   (modq body `(setnil nil ,v ,s))         ; If not, gen dummy code
  )
  ((or (eq b t) (not (symbolp b)))         ; See if self-evaluating
   (zccconst b v s e)                      ; If it is, get constant
  )
  ((eq (pbind b) b)                        ; If it's a keyword (:FOO) or
                                           ; otherwise self-evaluating
   (zccconst b v s e)                      ; compile as a constant atom
  )

  ;
  ; If variable found in list of local bindings, then compile it as
  ; a local reference.
  ;
  ; Even if the variable is declared SPECIAL, we do it the same way
  ; at this point.  The code generator will tell if the binding has
  ; to be SPECIAL.
  ;
  ; This does not apply to lexically scoped variables inside a FUNARG.
  ; Those must be compiled as if they were unbound, but the associated
  ; bindings are marked... see ZILCOAUV.
  ;

  ((setq a (assq b (zilcec-bindings (car e)))) ; If a bound variable
   (modq body `(getlocal ,a ,v ,s))
   (putprop (cdr a) t 'used)               ; Mark it referenced
   (unless (get (cdr a) 'set)              ; If not set, force init'n
           (putprop (cdr a) t 'mustinit))
  )

  ;
  ; If not locally bound, generate a kind of "unbound variable"
  ; reference.  It may be a truly lexical one, but it will be
  ; compiled as an unbound one.  ZILCOAUV handles those details.
  ;

  (t
   (let ((a (zilcoauv b e)))               ; Create atom & binding 4 it
        (modq body `(getvar ,b ,v ,s))     ; Generate pseudocode for it
        (putprop (cdr a) t 'used)          ; Mark it referenced
        (putprop (cdr a) t 'mustinit)      ; Force initialization
   ))))

