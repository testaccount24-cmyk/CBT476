
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;**********************************************************************
;
; Standard MACLIB header for all ZILCO compiler modules.
;
;**********************************************************************
;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 03/22/88 - Added declarations for new modules ZCGIASSQ and ZCGIMEMQ *
;* 03/28/88 - Added declarations for new module ZCGSGOTO.              *
;* 04/06/88 - Added declarations for new module ZCCVALGO.              *
;* 04/10/88 - Removed the following variables from the SPECIAL list:   *
;*            PROGVARS, GOLIST, PROGEXIT                               *
;* 04/25/88 - Support for determination of superfluous initializations *
;*            of PROG and &AUX variables to NIL.  This involves two    *
;*            new fields in the contour that are used to detect cases  *
;*            of a variable unconditionally being set before it is     *
;*            ever referenced.  This is an extension of, and replaces, *
;*            the SETQ-initialization-hacking scheme used in ZCCPROG.  *
;*            This also requires a new P-code form, CSETNIL, and a new *
;*            code generator module, ZCGCSNIL.                         *
;* 04/28/88 - ZCGSTPRM is obsolete; now part of ZCGSTVRS.              *
;* 05/01/88 - ZCGSTVRS takes more arguments.                           *
;* 05/13/88 - Added DEFARGS for ZXARITH and ZXRELOP.                   *
;* 06/06/88 - Extended ZILCEC structure to support BLOCK and TAGBODY.  *
;*            Added DEFARGS for new compiler routines to support       *
;*            multiple values and new special forms.                   *
;* 06/10/88 - Added ZCGMVINI for multiple value support.               *
;* 06/13/88 - Added ZCCTHROW for multiple value support.               *
;* 06/16/88 - Added ZILCOMVP for multiple value support.               *
;* 06/23/88 - Removed support for PROG and RETURN.                     *
;*                                                                     *
;***********************************************************************
;
; *** MACRO DEFINITIONS FOR ZILCO ET AL. ***
;

(eval-when (compile)
           (princ "Loading ZILCO macros.")
           (terpri)
)

;
; MODQ attaches a list to the end of a string of lists
; representing a body of pseudocode or whatever else.
; PUSHing onto the beginning of the list and NREVERSEing it later
; would be better.
;

(defmacro modq (x y) ; add a statement to the given list
 `(nconc ,x (ncons ,y))
)

(defmacro notp (x)   ; test if a predicate is a (NOT xxx) form.
 (if (atom x)
     `(and (consp ,x) (eq (car ,x) 'not))
     (let ((g (gensym)))
          `(let ((,g ,x))
                (and (consp ,g) (eq (car ,g) 'not))))))

(defmacro predp (x)   ; test if a predicate is a (foo-p xxx) form.
 (if (atom x)
     `(and (consp ,x)
           (symbolp (car ,x))
           (get (car ,x) 'predicate))
     (let ((g (gensym)))
          `(let ((,g ,x))
                (and (consp ,g)
                     (symbolp (car ,g))
                     (get (car ,g) 'predicate))))))

(defmacro alistboundp (pair)
 `(eq (cdr (get (cdr ,pair) 'bindingtype)) t))

(defmacro where-it-is (q)
 `(or (get (cdr ,q) 'location)
      (putprop (cdr ,q) (gensym) 'location)))

(declare (special
  alfatoms alllists allsubrs alone argbase atoms body cc codelen
  codelist debug fluid-asaved fluid-unbounds intfuncs lastarg lists
  main name numatoms parms pdbas pdmax procs program regs restofit
  special-asaved special-freevars special-unbounds stack stackmax
  subrs tailrecur zdef zzzconp zzzcont zzzstksz
 ))

(defstruct zilcec             ; Compilation environment contour.
                              ; ZCCMKENV is the function that builds it,
                              ; but other functions set the fields.
           type               ; DEFUN, LAMBDA, PROG, etc., etc.
           creator            ; Contour of lexical encloser for funargs
           bindings           ; Locally bound variable bindings
           specials           ; Variables declared SPECIAL
                              ; (be they for bindings or pervasive)
           go-tags            ; Tags for PROG contour
           return-tags        ; (formerly PROGEXIT) BLOCK/PROG RETURNs
           lexpr-arg          ; Name of arg for LEXPR contour
           tempcond           ; "Temporarily conditional" flag  04/25/88
           permcond           ; "Permanently conditional" flag  04/25/88
           block-name         ; Name of block for PROG/BLOCK

;;;
;;; The following have been replaced by SPECIALS:
;;;
;;;        local-specials     ; Variables locally declared SPECIAL
;;;                           ; (for bindings)
;;;        pervasive-specials ; Variables pervasively declared SPECIAL
;;;                           ; (for references only, not bindings)
;;;

   ;;; More fields will be added as time goes on, mainly for ;;;
   ;;; new types of declarations that will be supported..... ;;;

)

;;;
;;; The following maps the contents of the special variable CC.
;;;

(defmacro cc-extendedp (x) `(cddr ,x))
(defmacro cc-true-op   (x) `(car ,x))
(defmacro cc-false-op  (x) `(cadr ,x))
(defmacro cc-out-op    (x) `(caddr ,x))
(defmacro cc-out-logic (x) `(cadddr ,x))
(defmacro cc-emit-code (x) `(car (cddddr ,x)))

(defargs ZCCAND     4 4 nil)
(defargs ZCCATOM    4 4 nil)
(defargs ZCCBIND    2 2 nil)
(defargs ZCCBLOCK   4 4 nil)   ; 06/06/88
(defargs ZCCCALL    5 5 nil)
(defargs ZCCCATCH   4 4 nil)
(defargs ZCCCOND    4 4 nil)
(defargs ZCCCONST   4 4 nil)
(defargs ZCCDCL     4 4 nil)
(defargs ZCCDEF     4 4 nil)
(defargs ZCCEVAL    5 5 nil)
(defargs ZCCEVCOM   4 4 nil)
(defargs ZCCEXPR    5 5 nil)
(defargs ZCCFARG    5 5 nil)
(defargs ZCCFAST    5 5 nil)
(defargs ZCCFCALL   4 4 nil)
(defargs ZCCFUNC    4 4 nil)
(defargs ZCCGO      2 2 nil)
(defargs ZCCLAMA    4 4 nil)
(defargs ZCCLAMB    3 3 nil)
(defargs ZCCLEXFN   5 5 nil)
(defargs ZCCMKCEC   2 2 nil)
(defargs ZCCMVBND   4 4 nil)
(defargs ZCCMVLST   4 4 nil)
(defargs ZCCNOT     4 4 nil)
(defargs ZCCOR      4 4 nil)
(defargs ZCCPRED    1 1 nil)
(defargs ZCCPROGN   4 4 nil)
(defargs ZCCQUOTE   4 4 nil)
(defargs ZCCRETF    2 2 nil)   ; 06/06/88
(defargs ZCCSETQ    4 4 nil)
(defargs ZCCTBODY   4 4 nil)   ; 06/06/88
(defargs ZCCTHROW   4 4 nil)   ; 06/13/88
(defargs ZCCUWP     4 4 nil)
(defargs ZCCVALGO   2 2 nil)
(defargs ZCCVALS    4 4 nil)   ; 06/06/88
(defargs ZCGAVAIL   1 1 nil)
(defargs ZCGBASE    2 2 nil)
(defargs ZCGBCALL   1 1 nil)
(defargs ZCGBEGIN   1 1 nil)
(defargs ZCGBIND    1 1 nil)
(defargs ZCGBLAM    1 1 nil)
(defargs ZCGBTAG    1 1 nil)
(defargs ZCGBUWP    1 1 nil)
(defargs ZCGCALL    1 1 nil)
(defargs ZCGCLOS    1 1 nil)
(defargs ZCGCODCK   2 2 nil)
(defargs ZCGCSNIL   1 1 nil)   ; 04/25/88
(defargs ZCGDEF     1 1 nil)
(defargs ZCGELAM    1 1 nil)
(defargs ZCGEND     1 1 nil)
(defargs ZCGEMIT    5 5 nil)
(defargs ZCGENOUT   4 4 nil)
(defargs ZCGERROR   1 1 nil)
(defargs ZCGETAG    1 1 nil)
(defargs ZCGEUWP    1 1 nil)
(defargs ZCGGETIT   1 1 nil)
(defargs ZCGGTARG   2 2 nil)
(defargs ZCGGTBST   1 1 nil)
(defargs ZCGGTREG   0 0 nil)
(defargs ZCGGTVAR   1 1 nil)
(defargs ZCGIASSQ   5 5 nil)
(defargs ZCGIMEMQ   5 5 nil)
(defargs ZCGINEXT   5 5 nil)
(defargs ZCGINLIN   1 1 nil)
(defargs ZCGIPRED   4 4 nil)
(defargs ZCGKEY     1 1 nil)
(defargs ZCGLABEL   1 1 nil)
(defargs ZCGLOAD    2 2 nil)
(defargs ZCGMVINI   1 1 nil)
(defargs ZCGOPT     1 1 nil)
(defargs ZCGRECUR   1 1 nil)
(defargs ZCGRELS    1 1 nil)
(defargs ZCGRESV    1 1 nil)
(defargs ZCGSGOTO   1 1 nil)
(defargs ZCGSTOPT   1 1 nil)
(defargs ZCGSTTRG   2 2 nil)
(defargs ZCGSTVRS   4 4 nil)
(defargs ZCGSUBR    1 1 nil)
(defargs ZILCOADD   2 2 nil)
(defargs ZILCOARG   2 2 nil)
(defargs ZILCOAUV   2 2 nil)
(defargs ZILCOCOM   3 3 nil)
(defargs ZILCOCON   2 2 nil)
(defargs ZILCODCL   3 3 nil)
(defargs ZILCOERR   1 1 nil)
(defargs ZILCOGEN   1 1 nil)
(defargs ZILCOINT   0 0 nil)
(defargs ZILCOMEX   2 2 nil)
(defargs ZILCOMOD   2 2 nil)
(defargs ZILCOMVP   2 2 nil)  ; 06/16/88
(defargs ZILCOQUO   1 1 nil)
(defargs ZILCOSEG   3 3 nil)
(defargs ZILCOSYM   2 2 nil)
(defargs ZILCOTRN   2 2 nil)
(defargs ZILCOVTA   1 1 nil)

(defargs ZXARITH    3 4 nil)
(defargs ZXRELOP    2 2 nil)

(eval-when (compile)
           (princ "ZILCO preprocessing complete.")
           (terpri)
)
;
; *** END MACRO DEFINITIONS ***
;

;
; Obsolete compiler modules ***
;

;(defargs ZCCPROG    4 4 nil)
;(defargs ZCCRETN    2 2 nil)
;(defargs ZCGBPROG   1 1 nil)
;(defargs ZCGECALL   1 1 nil)
;(defargs ZCGENLST   2 2 nil)
;(defargs ZCGEPROG   1 1 nil)
;(defargs ZCCFPRT    3 3 nil)
;(defargs ZCGFREE    0 0 nil)
;(defargs ZCGGTLOC   1 1 nil)
;(defargs ZCGGTPRM   1 1 nil)
;(defargs ZCGLCVAR   1 1 nil)
;(defargs ZCGSETT    1 1 nil)
;(defargs ZCGSMALL   1 1 nil)
;(defargs ZCGSTATM   1 1 nil)
;(defargs ZCGSTLST   1 1 nil)
;(defargs ZCGSTNIL   1 1 nil)
;(defargs ZCGSTPRM   3 3 nil)  ; 04/28/88

