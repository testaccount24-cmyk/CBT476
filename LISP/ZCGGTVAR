
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;**********************************************************************
;*                                                                    *
;* GEN-GETVAR                                                         *
;*                                                                    *
;**********************************************************************

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 05/01/88 - More arguments to ZCGSTVRS.                              *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun zcggtvar (z) ; Get the value of a free variable from "ALIST"
 (prog
       (b   ; the main argument of the code generator function
        v   ; an item to receive the value if SETQ is involved
        s   ; the target of the value to be set
        sp  ; the atom pair representing the variable if SPECIAL
        fp  ; the atom pair representing the variable if FLUID
        a   ; the atom pair representing the variable
        r   ; a register to be used
        o   ; an offset to be generated
        lbl ; a label to be branched to
        sub ; if subroutine ZILVSYM is needed
        var ; the variable name to be generated for comments
       )

  ; B is the ATOMIC name of the unbound variable to get.

  (desetq (b v s) z)
  (or v s (return nil)) ; No side effects, so do nothing if no V/S
  (setq sp (assq b (cdr special-unbounds))
        fp (assq b (cdr fluid-unbounds)))
  (if (and sp fp)
      (zerror
      "Compiler error - free variable to access both special and fluid"
             v))
  (setq a (or sp fp
       (zerror "Compiler error - free variable to access not found" b)))
  (setq r (zcggtbst s)) ; Get a register, preferably \15 if target is T.
  (setq o (get (cdr a) 'pointer))
  (princ "Note - reference to non-local ")
  (princ (cond
          (sp 'special)
          (fp 'lexical)
          (t "(and undeclared)")))
  (princ " variable ")
  (prin1 b)
  (terpri)

  (setq var (if (> (string-length (car a)) 23) (cdr a) (car a)))

  (zcgemit 4 () "L" `("14," ,o "(,11)")   "Get pointer to alist cell.")
  (zcgemit 4 () "L" `(,r ",##CDR(,14)")        `("Get value of " ,var))

  (when sp                       ; If variable declared SPECIAL...

  ; If subr ZILVSYM doesn't already exist, create it.

   (or (setq sub (assq 'zilvsym subrs))
       (modq subrs (setq sub (zilcosym 'zilvsym 'subrs))))

   (zcgemit 4 () "C" `(,r ",ZLCUNBND")     "If variable not bound")
   (zcgemit 4 () "BNE" (setq lbl (gensym)) "then...")
   (zcgemit 4 () "L" `("2," ,(or (get (cdr a) 'location)
                                 (putprop (cdr a) (gensym) 'location)
                             ))                " get address of symbol")
   (zcgemit 4 () "L" `("15," ,(or (get (cdr sub) 'location)
                                  (putprop (cdr sub) (gensym) 'location)
                              ))             " get address of ZILVSYM")
   (zcgemit 4 () "LA" `("1," ,(car pdmax) "(,11)") " get stack pointer")
   (zcgemit 2 () "BALR" "14,15"  " call ZILVSYM")

   (zcgbase name nil) ; Reload additional base registers if necessary.

   (zcgemit 4 () "ST"  `("15," ,o "(,11)")
                                         " store binding cell on stack")
   (zcgemit 4 () "L"   `(,r ",##CDR(,15)")      `("Get value of " ,var))
   (zcgemit 0 lbl "DS"  "0H"                                        nil)

  )

  (zcgstvrs r v s nil)  ; Store reg into SETQ variables if any.
  (zcgsttrg r s)        ; Set target to register if any.
 )
)

