
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is equivalent to Common LISP (REMOVE A B :TEST #'EQL)
;

(defun remql (a b &optional c)

 ; a = the object to be searched for.
 ; b = the list to delete it from.
 ; c = a count of occurrences, default = delete all occurrences.

 (prog (d x z)
       (setq d nil
             z nil)
       (when c
             (unless (fixnump c)
                     (zerror "Invalid REMQL count argument" c))
             (unless (plusp c) (return b)))
  loop (unless b (return z))
  ;
  ; Warning - no check for atomic b (sublist of arg2)
  ;
       (if   (eql a (zcar b))
        then
             (when c
                   (when (zerop (setq c (1- c)))
                         (if z (rplacd d (cdr b))
                               (setq z (cdr b)))
                         (return z)))
        else
             (setq x (ncons (zcar b)))
             (if d (rplacd d x)
                   (setq z x))
             (setq d x)
        endif
       )
       (setq b (cdr b))
       (go loop)))

