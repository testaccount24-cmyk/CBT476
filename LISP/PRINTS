
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; "PRINT-TO-STRING"
;;;

;
; (PRINTS object NIL) - creates a string like PRINC.
;
; (PRINTS object T  ) - creates a string like PRIN1.
;

;
;***********************************************************************
;*                                                                     *
;* This is a complete replacement for the old PRINx-TO-STRING,         *
;* using streams.                                                      *
;*                                                                     *
;***********************************************************************
;

(include #.(zil-source-member zcsdfstr)) ; Stream structures.

(defun prints (object &optional escape)

 (unless (boundp '*print-case*)
  (zcpexec nil nil #.%%%charpos) ; Force setting of *print-...* vars
 )

 (let ((stringlist nil)
       (stream (make-stream :identifier "Print String" :type 'string))
      )
      (setf (stream-output-function stream)
            #'(lambda (char) (push (string char) stringlist)))
      (setf (stream-princ-function stream)
            #'(lambda (string) (push string stringlist)))
      ;;;(write object :stream stream :escape escape)
      (zcpexec object stream (if escape #.%%%prin1 #.%%%princ))
      (string-appendl (nreverse stringlist))))

;;; Old code, no longer in use. ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; (eval-when (compile eval)
;  (defvar lp  "("               "left  list      parenthesis")
;  (defvar rp  ")"               "right list      parenthesis")
;  (defvar lvp "#("              "left  vector    parenthesis")
;  (defvar rvp ")"               "right vector    parenthesis")
;  (defvar lsp "#<STRUCT "       "left  structure parenthesis")
;  (defvar rsp ">"               "right structure parenthesis")
;  (defvar lfp "#<FUNARG "       "left  funarg    parenthesis")
;  (defvar rfp ">"               "right funarg    parenthesis")
; )
;
; (declare (special *prints-list*))
;
; (defmacro prout (a)
;  `(push ,a *prints-list*)
; )
;
; (defun prints (a &optional s)
;  (let ((*prints-list* nil))
;       (prins a s)
;       (string-appendl (nreverse *prints-list*))))
;
; (defun prins (a s)
;  (cond
;   ((or (and (atom a) (not (vecp a)))
;        (eq a (zilunbnd))
;        (eq a (rmnil))
;    )               (prout (tostring a s)))
;   ((vectorp a)     (prout #.lvp)
;                    (prins-flat (vlist a) s)
;                    (prout #.rvp))
;   ((structp a)     (prout #.lsp)
;                    (prins-flat (vlist a) s)
;                    (prout #.rsp))
;   ((funargp a)     (prout #.lfp)
;                    (prins (funfun a) s)
;                    ;;;;;; (funenv a) does not get printed.
;                    (prout #.rfp))
;   (t               (prout #.lp)
;                    (prins-flat a s)
;                    (prout #.rp))))
;
; (defun prins-flat (a s)
;  (when a
;   (prog ()
;    loop
;        (prins (zcar a) s)
;        (setq a (cdr a))
;        (cond
;         ((null a)
;          (return nil))
;         ((atom a)
;          (prout " . ")
;          (prins a s))
;         (t
;          (prout " ")
;          (go loop))))))
