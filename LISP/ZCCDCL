
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
;***********************************************************************
;*                                                                     *
;* This functions handles the DECLARE special form, when it occurs     *
;* within a function (not at top-level).                               *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zccdcl (b    ;  the (headless) body of the DECLARE form
               v    ;  any variables to be SETQ'd by the form (illegal)
               s    ;  the target of the value (must be NIL)
               e    ;  the environment
              )

;
; All non-top-level declarations are handled by ZCCLAMA
; (and ZCCPROG) when they process bodies
; that are supposed to contain them.
;
; If a DECLARE occurs elsewhere, it is an error.
;

 (modq body `(error
              "DECLARE positioned illegally within form" ,b))

)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; The following piece of code is the old ZIL 1.2 non-top-level-declare
; processor.  I am keeping it around so it can be scavenged for
; useful processing.
;
;
;(defun zccdcl-process (a e)  ; a is a subform within the DECLARE,
;                             ; e.g. (SPECIAL FOO BAR)
; (cond
;  ((null a) nil)
;  ((atom a) (modq body `(error "Illegal DECLARE subform" ,a)))
;  (t (case (car a)
;           ((special fluid)
;                       (dolist (x (cdr a))
;                               (zccdcl-process-vardecl x (car a) e)))
;           (t          (cterpri)
;                       (princ "DECLARE (") (prin1 (car a))
;                       (princ ") not handled by the ZIL compiler.")
;                       (terpri)
;                       nil)))))
;
;(defun zccdcl-process-vardecl (a d e) ; process symbol declaration
; ;
; ; The only variable declarations recognized are SPECIAL and FLUID.
; ;
; ; SPECIAL means the variable is a Common LISP dynamically scoped
; ; variable, which does not get captured by closures.  A SPECIAL
; ; variable may be unbound in a function that references it, which
; ; is not an error unless an attempt is made to access its value.
; ;
; ; FLUID means the variable is "pseudolexical"; it may be dynamically
; ; scoped in reality, but it is intended to emulate Common LISP
; ; lexical scoping, and gets captured by closures.  It is an error
; ; for a FLUID variable to be unbound ON ENTRY to a function that
; ; references it (either for access or update).
; ;
; (cond
;  ((not (symbolp a))
;   (modq body `(error "Invalid DECLARE SPECIAL/FLUID variable" ,a)))
;  (t
;   ;
;   ; Eventually, replace with search of contours in "e" for variable.
;   ;
;   (let ((p (or (assq a palist) (assq a parms)))
;         (q))
;    (cond
;     (p
;
;        (setq q (zilcoadd a nil));Add the variable to the list of atoms.
;        (putprop (cdr q) t 'real) ; We know it'll be really used.
;
;        ; This being a locally-declared-special variable,
;        ; we do NOT add it to either "freevars" list.
;
;        ; Mark the function as having special/fluid variables
;        ; declared - ZCGBEGIN uses this minimal information.
;
;        (putprop (cdr name) t 'specialdeclare) ; Mark this function.
;
;        ; Trying to declare (SPECIAL FOO) when FOO has already been
;        ; declared FLUID (or vice versa) is an error.
;
;        (when (get (cdr p) (if (eq d 'special) 'fluid 'special))
;              (modq body
;                `(error "Conflicting SPECIAL/FLUID declarations" ,a)))
;
;        (putprop (cdr p) t d)) ; Mark this occurrence special or fluid.
;
;     (t (cterpri)
;        (princ "DECLARE ")
;        (princ d)
;        (princ " variable ")
;        (prin1 a)
;        (princ " not locally bound; declaration ignored.")
;        (terpri)
;        nil))))))
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
