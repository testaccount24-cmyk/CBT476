
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; ZCCPRED
;;;

;
; This function takes a predicate (as occurring in a COND, AND or OR)
; and returns an equivalent form by doing the following to it:
;
; (1) macroexpanding it
; (2) converting NULL to NOT
; (3) eliminating nested negations (NOT/NULL)
;
; so that, for example, (NOT (NULL X)) is transformed to X
; (NULL (FOO)) --> (NOT (FOO))
; and (NOT (CONSP X)) --> (NOT (NOT (ATOM X))) --> (ATOM X)
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zccpred (form)
 (cond
  ((atom form) form)
  ((not (symbolp (car form))) form)
  ((and (or (get (car form) 'cmacro)
            (get (car form) 'macro))
        (not (get (car form) 'cexpr)))
   (zccpred (zilcomex form nil)))
  ((eq (car form) 'null)    (zccpred `(not . ,(cdr form))))
  ((eq (car form) 'not)
   (let (
         (notargs (cdr form))
        )
    (cond
     ((null notargs)
      (modq body '(error "Missing argument" not/null))
      form)
     ((cdr notargs)
      (modq body `(error "Too many arguments" (not/null . ,notargs)))
      form)
     (t
      (let (
            (newarg (zccpred (car notargs)))
           )
           (if (and (consp newarg)
                    (eq (car newarg) 'not)
                    (cdr newarg))
               (cadr newarg)
               (list (car form) newarg)))))))
  (t form)))

