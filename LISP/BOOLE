
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

(defun boole (op &rest ints)
 (cond
  ((or (null ints) (null (cdr ints)))
   (zerror "Too few arguments" 'boole))
  ((null (cddr ints))
   (zilbool op (zcar ints) (zcadr ints)))
  (t
   (prog (v)
         (setq v (zcar ints))
     loop
         (or (setq ints (cdr ints))
             (return v))
         (setq v (zilbool op v (zcar ints)))
         (go loop)))))

; ZILBOOL is assembler code that corresponds to the following...

;;; (defun zilbool (op int1 int2)
;;;  (case op
;;;        (#B0000   #X00000000)
;;;        (#B0001   (logand int1 int2))
;;;        (#B0010   (logand (lognot int1) int2))
;;;        (#B0011   int2)
;;;        (#B0100   (logand int1 (lognot int2)))
;;;        (#B0101   int1)
;;;        (#B0110   (logxor int1 int2))
;;;        (#B0111   (logior int1 int2))
;;;        (#B1000   (lognot (logior int1 int2)))
;;;        (#B1001   (lognot (logxor int1 int2)))
;;;        (#B1010   (lognot int1))
;;;        (#B1011   (logior (lognot int1) int2))
;;;        (#B1100   (lognot int2))
;;;        (#B1101   (logior int1 (lognot int2)))
;;;        (#B1110   (lognot (logand int1 int2)))
;;;        (#B1111   -1)
;;;        (t (error "Invalid BOOLE operator" op))))
;;;
;;; (defmacro lognot (i)
;;;  `(logxor ,i -1)
;;; )
;;;
