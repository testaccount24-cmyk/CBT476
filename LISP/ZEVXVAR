
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; "ZEVXVAR"
;;;
;;; This function processes run-time DEFVAR.
;;;
;;; It receives 4 arguments: (1) the variable symbol (arg 1 to DEFVAR)
;;;                          (2) either a constant initial value, or
;;;                              a function of no arguments which can
;;;                              be called to establish an initial value
;;;                          (3) a boolean which specifies whether the
;;;                              second argument is a constant or a
;;;                              "thunk" (function of no arguments).
;;;                          (4) the documentation string.
;;;
;;; The syntax of DEFVAR is:
;;;
;;;  (DEFVAR variable &optional value documentation)
;;;
;
; Processing:
;
;  When (DEFVAR variable) is specified, with no value...
;
;              If the variable already has a SPECIAL binding,
;              no action is taken.
;
;              Otherwise, the variable is proclaimed to be SPECIAL
;              (whatever form that takes).
;
;              If the variable is not already SPECIALly bound,
;              its binding cell is filled in with a binding, consisting
;              of a CONS of the symbol with its new value.
;
;  When (DEFVAR variable value ...) is specified...
;
;              If the variable already has a SPECIAL binding,
;              no action is taken.
;
;              Otherwise, the variable is proclaimed to be SPECIAL
;              (whatever form that takes).
;
;              If the variable is not already SPECIALly bound,
;              its binding cell is filled in with a binding, consisting
;              of a CONS of the symbol with its new value.
;
;              If there is a documentation string, it is made the
;              value of the variable's DOCUMENTATION property.
;
;              (The documentation is not added if the variable is
;              already present in the environment.)
;

;;;
;;; The current deep binding scheme implements fake value cells
;;; (actually binding cells) for global variables.  This consists of a
;;; BINDING property on the property list of the symbol.
;;;
;;; When shallow binding is implemented, processing will probably be
;;; along these lines:
;;;
;;; (defvar var) ... only proclaims var to be special.
;;;
;;; (defvar var val) ... if var's value cell contains "unbound",
;;;                      then store val into var's value cell,
;;;                      else do nothing (except possibly for
;;;                      issuing a warning).
;;;
;;; None of this (get '*defvar* 'defvar) nonsense will be done.
;;;


(eval-when (compile eval load)
 (defmacro specialp (var)
  `(get ,var 'special))

 (defmacro documentation (var)
  `(get ,var 'documentation))

)

(defun zevxvar (var &optional (thunkp nil thunkp?)
                              (valfun nil valfun?)
                              (doc nil doc?)
                    &aux cell)
  (when (or (not (symbolp var))    ; Must be a symbol
            (eq (pbind var) var))  ; that doesn't self-evaluate
        (zerror "Invalid DEFVAR variable" var))
  (or (null doc?)
      (stringp doc)
      (zerror `("Invalid DEFVAR documentation string for " ,var) doc))
;
; For shallow binding, we could just use BOUNDP, except that we don't
; want BOUNDP to be autoloading in that case.  A good reason not to
; let BOUNDP be autoloading (makes code generation simpler anyhow).
; Otherwise, maybe we can have a non-autoloading BOUNDP especially
; for this purpose?
;
; After all, autoload avoidance seems to be the main reason I didn't
; just call ZEVSYM here.  But another reason is that if there is
; already a "valueless" binding, I want to know that.
;
  (setq cell (or (assq var (special-alist))   ; Variable already bound
                 (pbind var)))                ; (locally or globally)
  (if (or (null cell) (eq cell (zilunbnd)))
   then                               ; Not bound yet - assign it now.
        ;
        ; (proclaim `(special ,var))
        ;
        (setf (specialp var) t)

        (setpbind var
                  (cons var (if valfun?
                                (if thunkp (funcall valfun) valfun)
                                (zilunbnd))))

        (when doc?
              (setf (documentation var) doc))

   else
   if   (eq (cdr cell) (zilunbnd))  ; Assume that it's...
   then                             ; Already DEFVAR'd without a value.

        (when valfun?
              (rplacd cell (if thunkp (funcall valfun) valfun)))

        (when doc?
              (setf (documentation var) doc))

   else
        (when (lessp (msglevel) 2)
              (princ "Warning: The variable ")
              (prin1 var)
              (princ " already has a value of ")
              ;
              ; For shallow binding, (prin1 (symbol-value var))
              ;
              (prin1 (cdr cell))
              (princ ".")
              (terpri)
              (when valfun?
                    (princ "The new value ")
                    (princ
                     (if doc?
                         "and the documentation are ignored."
                         "is ignored."))
                    (terpri)))
   endif
  )
 var
)

