
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;   In ZIL 1.2, MAKUNBOUND deleted one occurrence of a
;;;   variable from the alist, or removed current variable
;;;   binding if there was no binding on the alist.
;;;
;;;   With deep binding, MAKUNBOUND changes the current binding cell
;;;   of a variable to be "valueless".
;;;
;;;            Deep binding scheme implements fake value cells
;;;            (actually binding cells) for global variables.
;;;            This consists of a BINDING property on the property
;;;            list of the symbol.
;;;
;;; Note: Shallow binding implementation will replace this function
;;;       with a simple (usually compiled inline) operation to bash
;;;       the symbol's value cell with a different UNBOUND marker.
;;;

(defun makunbound (x)
 (unless (symbolp x)
         (zerror "Argument to MAKUNBOUND is not a symbol" x))
 (let ((binding (zevsym x)))
      (when (consp binding)              ; Constants cannot be unbound.
            (rplacd binding (zilunbnd))))
 x
)

(defload makunbound makunbou)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Old code, no longer in use.
;
;(let ((z (get '*defvar* 'defvar))) ; Look at DEFVAR'd variables.
;     (when (memq x z)              ; If variable is on DEFVAR list
;           (putprop '*defvar* (delq x z) 'defvar)))
;                                   ; then remove it from DEFVAR list.
;(prog (a b c)
;      (setq a (special-alist) b nil)
; loop (or a (go tryglobal))        ; When alist exhausted, try global.
;      (if (eq x (caar a))          ; When variable ASSQ-located,
;       then                        ; we have to remove it...
;        (rplacd (car a) (zilunbnd)); clobber this pair
;        (if b                      ; Check pointer to previous alist
;         then                      ;  cell; if we have one, then...
;          (rplacd b (cdr a))       ; splice pair out of alist
;         else                      ; otherwise...
;          (setf (special-alist)    ; nothing to bash, so set new alist
;                (cdr a))
;        )
;        (return x)                 ; That's it, we're through
;       else                        ;
;        (setq b a a (cdr a))       ; Otherwise bump down the alist
;        (go loop))                 ; keeping a pointer to last cell.
;tryglobal                          ; Here if no dynamic value.
;  (when (setq c (get x 'binding))  ; If variable has a global value,
;        (unless (consp c)
;                (zerror "Bad BINDING property found by MAKUNBOUND" x c))
;        (remprop x 'binding)       ; then remove it
;        (rplacd c (zilunbnd))      ; and clobber the binding cell.
;  )                                ;
;  (return x)                       ; Return the variable itself.
;))
;
; (defload car zcar)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

