
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************


;;;
;;; ZIL 1.3 FLAVORS system - November 1987
;;;

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 06/20/88 - Support for multiple values.                             *
;*                                                                     *
;***********************************************************************
;
;
;***********************************************************************
;*                                                                     *
;* Flavor system initialization.                                       *
;*                                                                     *
;* Define the VANILLA-FLAVOR flavor.                                   *
;*                                                                     *
;***********************************************************************
;

(eval-when (compile)
 (zlflavor)                     ; Load the FLAVORS functions.
)

(include #.(zil-source-member zcsdfstr)) ; Read/print/stream defs.
(include #.(zil-source-member zlflvstr)) ; Flavor defstruct.

(defflavor vanilla-flavor
           ()                   ; No instance variables
           ()                   ; No component flavors
           :no-vanilla-flavor   ; Options
)

#|---------------------------------------------------------------------

 The following is not active now, but will be when a true Common LISP
 printer function is established - some day.

-----------------------------------------------------------------------

(defmacro %llprint (a stream level escape)
;;;
;`(write ,a :stream ,stream :escape ,escape :level ,level)
;;;
 (let ((ga (gensym))
       (gs (gensym))
      )
      `(let (
             (,ga ,a)
             (,gs ,stream)
             (*print-level* ,level)
            )
            (declare (special *print-level*))
            (if ,escape
                (prin1 ,ga ,gs)
                (princ ,ga ,gs)))))

(declare (special *print-level* *print-length* *print-escape*))

;
; Default :PRINT-SELF method.
;

(defmethod (vanilla-flavor :print-self)
           (&optional (file nil)
                      (prindepth 0)
                      (slashify-p *print-escape*))
 (let (
       (level (if *print-level* (- (1+ *print-level*) prindepth)))
      )
      (princ    "#<Instance of flavor " file)
      (%llprint (flavor-name *flavor*)  file level slashify-p)
      (princ    " "                     file)
      (%llprint (maknum self)           file level slashify-p)
      (princ    ">"                     file)
      self       ; Dunno what else to return.
))

---------------------------------------------------------------------|#

;
; Default :PRINT-SELF method.
;

(defmethod (vanilla-flavor :print-self)
           (&optional file prindepth slashify-p)
 (let ((b (if slashify-p #.%%%prin1 #.%%%princ)))
  (when prindepth
        (warn
     "Warning: Argument 2 to :PRINT-SELF method (depth) ignored by ZIL."
        ))
        (zcprint "#<Instance of flavor " file b)
        (zcprint (flavor-name *flavor*)  file b)
        (zcprint " "                     file b)
        (zcprint (maknum self)           file b)
        (zcprint ">"                     file b)
        self       ; Dunno what else to return.
))

;
; Default :DESCRIBE method.
;

(defmethod (vanilla-flavor :describe)
           ()
 (let (
       (vars (flavor-all-instance-variables *flavor*))
       (coms (flavor-component-flavor-list *flavor*))
       (incs (flavor-included-flavor-list *flavor*))
       (alls (flavor-all-flavor-list *flavor*))
      )
  (send self ':print-self)
  (princ " is an object of flavor ")
  (prin1 (flavor-name *flavor*))
  (princ ".")
  (terpri)
  (if coms
   then
     (princ "It directly or indirectly depends upon component flavors:")
     (loop for com in coms do
      (cterpri)
      (princ "         ")
      (prin1 com)
      (terpri)
     )
   else
     (princ "It has no component flavors.")
     (terpri)
   endif
  )
  (if incs
   then
     (princ "It directly or indirectly depends upon included flavors:")
     (loop for inc in incs do
      (cterpri)
      (princ "         ")
      (prin1 inc)
      (terpri)
     )
   else
     (princ "It has no included flavors.")
     (terpri)
   endif
  )
  (if alls
   then
     (princ "Thus, it directly or indirectly depends upon flavors:")
     (loop for all in alls do
      (cterpri)
      (princ "         ")
      (prin1 all)
      (terpri)
     )
   else
     (princ "Thus, it has no other flavors.")
     (terpri)
   endif
  )
  (if vars
   then
      (princ "It has instance variable values:")
      (loop for var in vars do
       (cterpri)
       (princ "         ")
       (prin1 var)
       (princ "   ")
       (let ((binding (assq var (special-alist))))
            (princ "   ")
            (prin1 (if binding (cdr binding) (zilunbnd))))
       (terpri)
      )
   else
      (princ "It has no instance variable values.")
      (terpri)
   endif
  )
  (values) ; Dunno what else to return.
 )
)

;
; Default :GET-HANDLER-FOR method.
;

(defmethod (vanilla-flavor :get-handler-for)
           (message)
 (cdr (assq message (flavor-combined-methods *flavor*)))
)

;
; Default :WHICH-OPERATIONS method.
;

(defmethod (vanilla-flavor :which-operations)
           ()
 (or (flavor-which-operations *flavor*)
     (setf (flavor-which-operations *flavor*)
           (mapcar #'car (flavor-combined-methods *flavor*))))
)

;
; Default :EVAL-INSIDE-YOURSELF method.
;

(defmethod (vanilla-flavor :eval-inside-yourself)
           (form)
 (eval form)
)

;
; Default :FUNCALL-INSIDE-YOURSELF method.
;

(defmethod (vanilla-flavor :funcall-inside-yourself)
           (function &rest args)
 (zilapply function args)
)

;
;***********************************************************************
;*                                                                     *
;* The following messages are for compatibility with the NIL           *
;* implementation of FLAVORS.                                          *
;*                                                                     *
;***********************************************************************
;
;
; Default :SEND-IF-HANDLES method.
;
; Note that the first argument to a message handling method is the
; message name.
;

(defmethod (vanilla-flavor :send-if-handles)
           (&rest margs)
 (or margs
    (zerror "Required message arg missing for :SEND-IF-HANDLES message"))
 (let ((h (get-handler-for self (car margs))))
      (if h
          ; (send self message . args)
          (zilapply h margs)
          nil
      )))

;
; Default :OPERATION-HANDLED-P method.
;

(defmethod (vanilla-flavor :operation-handled-p)
           (message)
 (if (assq message (flavor-combined-methods *flavor*)) t nil)
)

;
; Default :EQUAL method.
;

(defmethod (vanilla-flavor :equal)
           (other-object)
 (eq self other-object)
)

;
; Default :SYMEVAL-IN-INSTANCE method.
;

(defmethod (vanilla-flavor :symeval-in-instance)
           (symbol &optional no-error-p)
 (cond
  ((boundp symbol)
   (symeval symbol))
  (no-error-p
   nil)
  (t
   (zerror "SYMEVAL-IN-INSTANCE variable not bound in instance" symbol)
  )))

;
; Default :SET-IN-INSTANCE method.
;

(defmethod (vanilla-flavor :set-in-instance)
           (symbol value)
 (cond
  ((assq symbol (special-alist))
   (set symbol value))
  (t
   (zerror "SET-IN-INSTANCE variable not bound in instance" symbol))))

;
; Default :SXHASH method.
;

(defmethod (vanilla-flavor :sxhash)
           ()
 (sxhash (flavor-name *flavor*))  ; That's what NIL does.
)

;
; Default :EVAL method.
;

(defmethod (vanilla-flavor :eval)
           ()
 (zerror "Instances of this flavor cannot be evaluated"
         (flavor-name *flavor*) self)
)

;
; The following NIL-implementation messages are not supported:
;
; :funcall,
; :exhibit-self, :select-nth, :store-nth,
; :pp-dispatch, :pp-anaphor-dispatch
;
