
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; ZEVSET
;
; This function takes 2 args - (1) a variable, (2) a value
; - and
; returns a binding cell holding the new value, i.e. a CONS whose
; CAR is the variable and whose CDR is the value.
;
; Notes: Arg 1 must be a symbol - no error checking is done.
;

;;;
;;; The current deep binding scheme implements fake value cells
;;; (actually binding cells) for global variables.
;;; This consists of a BINDING property on the property
;;; list of the symbol.
;;;
;;; When we implement shallow binding, this function will probably
;;; go away entirely.  Only the evaluator's implementation of SETQ
;;; will do "alist-searching", and probably doesn't even call ZEVSET
;;; to do the job anyhow for lexically scoped variables.
;;;


(eval-when (compile load eval)
 (defmacro specialp (var)
  `(get ,var 'special)
 )
)

(defun zevset (var val &aux p)
 (if (setq p (assq var (special-alist)))
  then
     (rplacd p val)         ; If found on alist, bash the alist binding
  else
  if                        ; Else look for global binding "cell"
     (neq (setq p (pbind var)) (zilunbnd))
  then
     (rplacd p val)         ; If found, bash it
  else

;;; The automatic proclaiming of a previously unbound variable as
;;; SPECIAL when it is set is not done here.  Such is done only for
;;; interpretive SETQ.  This is for consistency with VAX NIL and
;;; other LISPs that run Macsyma, which is sensitive to the setting
;;; of the SPECIAL property.

;;;; (unless (specialp var)               ; No warn if declared special.
;;;;  (warn "Assigning value to assumed new SPECIAL variable" var)
;;;;  (setf (specialp var) t)
;;;; )
     (setpbind var (setq p (cons var val)))
     p
  endif
 )
)

