
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;; 12/16/88 - (typep x 'character) --> (characterp x)

(include #.(zil-source-member zlflvstr)) ; FLAVOR defstruct.

(defun typep (a &optional (b nil b?))
 (cond
  ((not b?)         (typep-1 a))
  (t                (typep-2 a b))
 )
)

;
; TYPEP with one argument.
;

(defun typep-1 (a)
 (cond
  ((consp a)    'list)
  ((symbolp a)  'symbol)
  ((fixnump a)  'fixnum)
  ((bigp a)     'bignum)
  ((sfloatp a)  'single-float)
  ((dfloatp a)  'double-float)
  ((stringp a)  'string)
  ((vectorp a)  'vector)
  ((subrp a)    'subr)
  ((closurep a) 'closure)
  ((funargp a)  'funarg)
  ((structp a)  (let ((x (vref a 0)))
                     (cond
                      ((eq x 'zil-flavor-instance)
                       (zil-flavor-instance-flavor-name a))
                      ((symbolp x)
                       x)
                      (t
                       'structure))))
  (t            'atom)
 )
)

;
; TYPEP with two arguments.
;

(defun typep-2 (a b)
 (cond
  ((null b)     nil)
  ((eq b t)     t)
  ((consp b)    (typep-2-list a b))
  ((symbolp b)  (typep-2-atom a b))
  (t            (zerror "Unknown second arg to TYPEP" b))))

(defun typep-2-atom (a b)
 (case b
       ((atom)       (atom     a))
       ((list)       (listp    a))
       ((cons)       (consp    a))
       ((symbol)     (symbolp  a))
       ((fixnum)     (fixnump  a))
       ((float
         flonum)     (floatp   a))
       ((
         short-float
         single-float
        )            (sfloatp  a))
       ((
         double-float
        )            (dfloatp  a))
       ((bignum)     (bigp     a))
       ((integer)    (integerp a))
       ((string)     (stringp  a))
       ((vector)     (vectorp  a))
       ((compiled-function
         code)       (codep    a))
       ((subr)       (subrp    a))
       ((closure)    (closurep a))
       ((funarg)     (funargp  a))
       ((struct
         defstruct
         structure)  (structp  a))
       ((character)  (characterp a))
       (t
        (and (structp a)
             (or (eq (vref a 0) b)
                 (and (eq (vref a 0) 'zil-flavor-instance)
                      (eq (zil-flavor-instance-flavor-name a) b)))))))


(defun typep-2-list (a b)
 (case (car b)
  ((or)
   (some   #'(lambda (x) (typep-2 a x)) (cdr b)))
  ((and)
   (every  #'(lambda (x) (typep-2 a x)) (cdr b)))
  ((not)
   (not (typep-2 a (cadr b))))
  ((member)
   (if (member a (cdr b)) t nil))
  ((satisfies)
   (if (funcall (cadr b) a) t nil))
  (t
   (warn "Unknown second arg to TYPEP" b)
   nil)))

