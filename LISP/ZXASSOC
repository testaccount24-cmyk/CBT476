
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is the compiler transform function for ASSOC.
;
; Currently, inline code is always generated (except in the
; case of :TEST #'EQ, when a call to ASSQ is generated, which
; compiles inline anyhow).
;

(eval-when (eval)
 (deftrans assoc zxassoc)
)

(defmacro local-variable-p (x)       ; Please, x must be a symbol.
 `(and (symbolp ,x) (memq ,x xenv)))

(defun zxassoc (xform xenv xcon)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Note that there must be at least 2 arguments.  If there are fewer,
  ;; no transformation is done.  However, if there are more, then GETK
  ;; will signal an error for invalid keywords,
  ;; and this will cause the transformation to fail, which in the
  ;; compiler has the effect of suppressing the transformation.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 (cond
  ((lessp (length xform) 3)
   xform)

  (t
   (let* (
          (arg1 (cadr xform))
          (arg2 (caddr xform))
          (rest (cdddr xform))
          (rest-length (length rest))
          (test      (getk rest ':test))
          (test-not  (getk rest ':test-not))
          (key       (getk rest ':key))
          (expected-length (+ (if test 2 0)
                              (if test-not 2 0)
                              (if key 2 0)))
         )
    (zxassoc-optimize xform xenv xcon arg1 arg2
                       rest-length expected-length
                       (car test) (car test-not) (car key)
                       test test-not key)))))

(defun zxassoc-optimize (xform xenv xcon arg1 arg2
                                          rest-length expected-length
                                          test test-not key
                                          test? test-not? key?)
 (let (
       (carg1  (zilcocon arg1 nil))
       (carg2  (zilcocon arg2 nil))
       (ctest     (if test?     (zxassoc-confun test)))
       (ctest-not (if test-not? (zxassoc-confun test-not)))
       (ckey      (if key?      (zxassoc-confun key)))
      )

      (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If the length of the &rest argument is such that more keys were
  ;; specified than expected, then suppress the transformation.
  ;;
  ;; Checking for keys is done this way to allow for the possibility
  ;; of non-constant key names, :allow-other-keys, etc.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

       ((> rest-length expected-length)
        (warn "Nonstandard or unexpected keyword args to ASSOC" xform)
        xform)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If all arguments are constant, perform the test at compile time.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

       ((and carg1
             carg2
             (or (not test?) ctest)
             (or (not test-not?) ctest-not)
             (or (not key?) ckey)
        )
        (warn "Evaluating ASSOC with constant args at compile time"
              xform)
        `',(eval xform))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If :TEST is #'EQ or 'EQ, and no other keywords are specified,
  ;; then transform the call to ASSQ.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

       ((and test?
             (not test-not?)
             (not key?)
             (eq (car ctest) 'eq))
        `(assq ,arg1 ,arg2))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If both :TEST and :TEST-NOT specified, error.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

       ((and test? test-not?)
        (zerror "Both :TEST and :TEST-NOT keywords given to ASSOC"
                xform))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Otherwise, transform the call to inline code.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

     (t
      (let (
            (loop  (gensym))
            (true  (gensym))
            (arglist    nil)
            (lambdalist nil)
            (elt   (gensym))
            (item)
            (alist)
            (ftest)
            (fkey)
            (comparison)
           )
       (cond
        ((or carg1 (local-variable-p arg1))
         (setq item arg1))
        (t
         (let ((g (gensym)))
              (push arg1 arglist)
              (push g lambdalist)
              (setq item g))))
       (let ((g (gensym)))
            (push arg2 arglist)
            (push g lambdalist)
            (setq alist g))
       (cond
        (ctest
         (setq ftest ctest))
        ((not test?)
         (setq ftest '(eql)))
        ((local-variable-p test)
         (setq ftest `(funcall ,test)))
        (t
         (let ((g (gensym)))
              (push test arglist)
              (push g lambdalist)
              (setq ftest `(funcall ,g)))))
       (cond
        (ctest-not
         (setq ftest ctest-not))
        ((and test-not? (local-variable-p test-not))
         (setq ftest `(funcall ,test-not)))
        (test-not?
         (let ((g (gensym)))
              (push test-not arglist)
              (push g lambdalist)
              (setq ftest `(funcall ,g)))))
       (cond
        (ckey
         (setq fkey ckey))
        ((not key?)
         (setq fkey '(progn)))
        ((local-variable-p key)
         (setq fkey `(funcall ,key)))
        (t
         (let ((g (gensym)))
              (push key arglist)
              (push g lambdalist)
              (setq fkey `(funcall ,g)))))

       ; There is some doubt about the meaning of the :key.
       ; See the source of ASSOC for possible interpretations.

       (setq comparison
             (let ((x `(,@ftest ,item (,@fkey (zcar ,elt)))))
                  (if test-not? `(not ,x) x)))

       `((lambda ,(nreverse lambdalist)
                 (and ,alist
                  (prog (,elt)
                   ,loop
                        (cond
                         ((and (setq ,elt (zcar ,alist))
                               ,comparison)
                          (go ,true))
                         ((setq ,alist (cdr ,alist))
                          (go ,loop))
                         (t
                          (return nil)))
                   ,true
                        (return ,elt))))
         ,.(nreverse arglist)))))))


(defun zxassoc-confun (x)
 (cond
  ((and (consp x)
        (consp (cdr x))
        (null  (cddr x))
        (memq (car x) '(function quote)))
   (ncons (cadr x)))
  (t
   (zilcocon x nil))))

