
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;; ZILCOSEG

;;;
;;; This function performs "function segmentation", which is a means
;;; of splitting up the body of a function into a series of subfunctions
;;; that are small enough to compile without exhausting the supply of
;;; base registers.
;;;
;;; Segmentation proceeds as follows:
;;;
;;; (1) The body of the function is "flattened out":
;;;
;;;     (a) The body is fully macroexpanded.
;;;
;;;     (b) All PROGN's are replaced with their bodies, which are
;;;         spliced into the main body (a list of forms).
;;;
;;;     (c) Each atom or "constant" form (i.e. (QUOTE something))
;;;         is removed from the body unless it is the last form of
;;;         the body (i.e. the return value).
;;;
;;;  Step (1) is no longer required, as the body has been
;;;  fully macroexpanded, compiler-transformed, and PROGN-flattened
;;;  by the time ZILCOSEG sees it.
;;;
;;; (2) The resultant "flattened" body is "segmented":
;;;
;;;     (a) The number of forms per segment is determined by taking
;;;         the number of segments desired (specified in a DECLARE)
;;;         and dividing the total number of forms by this value.
;;;
;;;     (b) The forms in the body are then used to build new functions
;;;         named "name segment 1", "name segment 2", etc., which
;;;         contain forms 1-n, n+1-2n, etc. of the flattened body.
;;;
;;;     (c) The original function definition is replaced with one
;;;         that calls the functions built above in return.
;;;
;;; Caveats:
;;;
;;;  The function should take no arguments, otherwise a problem is
;;;  created with variable bindings having to be referenced in the
;;;  built functions.
;;;
;;; This function is called from ZCCFUNC with the following operands:
;;;
;;; (ZILCOSEG
;;;          funname    -  the symbol naming the function to segment.
;;;          lambdaexp  -  the lambda expression being the function def.
;;;          segmentno  -  the number of segments desired.
;;; )
;;;
;;; Note that it is permissible for the number of segments to be 1.
;;; In this case the user may wish to separate the program code from
;;; the data (LISP objects) for more addressability.
;;;
;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 04/11/88 - Cleaned up code including "Warning:" prefix on warning.  *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zilcoseg (funname lambdaexp segmentno)
 (let (((nil arglist . bodd) lambdaexp))
  (unless (null arglist)
          (warn "Segmenting a function with a non-null arglist"
                funname))
  `(lambda ,arglist
           . ,(segmentize funname bodd segmentno))))

(defun segmentize (fun bod seg)
 (let* ((length (length bod))
        (seglen (cond
                 ((> seg length)
                  (setq seg length)
                  1)
                 (t
                  (+ (/ length seg) (if (zerop (\\ length seg)) 0 1)))))
       )
       (do ((bod bod (cdr bod))
            (s 0)
            (segcount 0)
            (endflag nil)
            z
            segment
           )
           (endflag (nreverse z))
           (cond
            ((null bod)
             (setq endflag t s seglen))
            (t
             (push (car bod) segment)
             (setq s (1+ s))))
           (when (and segment (>= s seglen))
            (push `((label ,(concat fun " SEGMENT " (incf segcount))
                           (lambda () . ,(nreverse segment))))
                  z)
            (setq segment nil s 0)))))

;;; Obsolete code follows...

;;; Arg 2 to SEGMENTIZE used to be...
;;;;;;;;;;;;;;;;;;;;;;;;;;(flatten-body (mapcar #'fexpand bodd) t)
;;;
;
;(defun flatten-body (bodd save-last-form-p)
; (let ((lastform (if save-last-form-p (last bodd) nil)))
;       (mapcon #'(lambda (l &aux (x (car l)))
;                         (cond
;                          ((and (or (atom x)
;                                    (and (eq (car x) 'quote)
;                                         (consp (cdr x))))
;                                (or (not save-last-form-p)
;                                    (neq l lastform)))
;                           nil)
;                          ((and (consp x) (eq (car x) 'progn))
;                           (flatten-body (cdr x)
;                                         (eq l lastform)))
;                          (t
;                           (ncons x))))
;               bodd)))
