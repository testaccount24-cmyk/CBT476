
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

(defun mapcan1 (fun lis) ; Case of 1 list.
 (cond
  ((null lis) nil)
  ((atom lis) (zerror "Argument 2 to MAPCAN not a list" lis))
  (t
   (prog (v)
         (setq v nil)
    loop
         (setq v (nconc v (funcall fun (car lis))))
         (unless (setq lis (cdr lis))
                 (return v))
         (go loop)
   ))))

(defun mapcan (fun &rest lists) ; Case of multiple lists.
 (cond
  ((null lists)       nil)
  ((null (cdr lists)) (mapcan1 fun (car lists)))
  (t
   (dolist (list lists)
           (unless (listp list)
                   (zerror "Non-list passed to MAPCAN" list)))
   (prog (v)
         (setq v nil)
    loop (when (mapor #'null lists) (return v))
         (setq v (nconc v (zilapply fun (mapcar #'car lists))))
         (setq lists (mapcar #'cdr lists))
         (go loop)))))

(defload car zcar)

