
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is the compiler transform for GCD2.
;

(eval-when (eval)
 (deftrans gcd2 zxgcd2)
)

(defun zxgcd2 (xform xenv xcon &aux (l (length xform)))

 (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; There must be 2 arguments.  If not, skip transform.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ((not (eql l 3))
   xform)

  (t
   (let* (
          (arg1 (cadr xform))
          (arg2 (caddr xform))
          (carg1 (zilcocon arg1 nil))
          (carg2 (zilcocon arg2 nil))
         )
         (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If the arguments are constant, perform the test at compile time.
  ;;
  ;; Note: If errors (like wrong argument type) occur, the compiler
  ;;       transform mechanism will trap the error and suppress
  ;;       the transformation.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((and carg1 carg2)
           (warn "Performing compile-time GCD" arg1 arg2)
           (gcd (car carg1) (car carg2)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Errors:
  ;;
  ;; (GCD2 not-an-integer x)
  ;; (GCD2 x not-an-integer)
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((and carg1 (not (integerp (car carg1))))
           (zerror "Non-integer first argument to GCD" xform))

          ((and carg2 (not (integerp (car carg2))))
           (zerror "Non-integer second argument to GCD" xform))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; (GCD2 x 0)  --> (ABS x)
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((eql arg2 0)
           `(abs ,arg1))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; (GCD2 0 x)  --> (ABS x)
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((eql arg1 0)
           `(abs ,arg2))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; (GCD2 x 1)  --> (PROGN x 1)
  ;; (GCD2 x -1) --> (PROGN x 1)
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((or (eql arg2 1) (eql arg2 -1))
           `(progn ,arg1 1))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; (GCD2 1 x)  --> (PROGN x 1)
  ;; (GCD2 -1 x) --> (PROGN x 1)
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((or (eql arg1 1) (eql arg1 -1))
           `(progn ,arg2 1))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Otherwise, no transformations apply.  Return the original form.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          (t xform))))))

