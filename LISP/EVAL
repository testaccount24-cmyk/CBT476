
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; EVAL
;
; Notes:
;
; EVAL used to use a first-time-switch in the form of the property list
; of the atom *EVAL*.  If this was the first invocation of EVAL, ZEVINIT
; would be called to establish the standard macro and function
; definitions used by the evaluator.
;
; The check for a null PLIST was used instead of calling GET because
; it was faster than the subroutine call generated by GET.
;
; This has been removed.  It will be the responsibility of every
; ZIL toplevel to invoke ZEVINIT to get things going.
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(eval-when ()
; #.(defvar evsym
;                 #+ZILCO '*eval*
;                 #-ZILCO '*interpretive-eval*
;  "The symbol used to keep track of EVAL initialization."
;   )
;)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(unless (symbol-plist '#.evsym)      ; If *eval* has no properties,
;        (zevinit)                    ; define standard functions, etc.
;        (defprop #.evsym t t))       ; set "t" property true
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun eval (x &optional a)

 (zileval x (mknewenv a) t) ; Always evaluate at "top level".

)

