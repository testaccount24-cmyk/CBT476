
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; The compiler transform for MEMQ, used in Macsyma.
;
; This hack makes MEMQ work for fixnums, but only when necessary.
;
; Note that for interpretive use, MEMQ is just DEFLOADed to ZMSMEMQ.
; Which we used to do in the compiler as well, until we made MEMQ
; compile inline - which we're trying to take advantage of now.
;

(eval-when (eval)
 (deftrans memq zxzmsmem)
)

(defun zxzmsmem (xform xenv xcon)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; There must be exactly 2 arguments.  If not, skip transform.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 (cond
  ((not (eql (length xform) 3))
   xform)

  (t
   (let* ((arg1 (cadr xform))
          (arg2 (caddr xform))
          (carg1 (zilcocon arg1 nil))
          (carg2 (zilcocon arg2 nil))
         )

         (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If both arguments are constant, perform the test at compile time.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

         ((and carg1 carg2)
          (warn "Evaluating MEMQ for 2 constant args at compile time"
                xform)
          (warn "Since this is for Macsyma, ZMSMEMQ is being used.")
          `',(zmsmemq (car carg1) (car carg2)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If only the first argument is a constant, and it is a symbol,
  ;; then use MEMQ.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

         ((and carg1 (symbolp (car carg1)))
          xform)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If only the second argument is a constant, and it is a list of
  ;; symbols, then use MEMQ.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

         ((and carg2
               (do ((l (car carg2) (cdr l)))
                   ((null l) t)
                   (when (atom l)
                         (warn "Arg 2 to MEMQ is improper list" arg2)
                         (return nil))
                   (unless (symbolp (car l))
                           (return nil))))
          xform)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Otherwise, transform the call to a call to ZMSMEMQ.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

       (t
        (let ((ans `(zmsmemq ,arg1 ,arg2)))
             (when (< (msglevel) 2)
              (format t "~&Warning: converting ~S to ~S~%" xform ans))
             ans)))))))

