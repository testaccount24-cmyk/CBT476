
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; ZEVAUTO
;
; This function resolves a symbol being used as a function name
; when it currently has no function property.  Resolution is based
; on the value of the AUTOLOAD property, as follows:
;
;   If the AUTOLOAD property is a string, then it is the name of a
;   data set (file) to be loaded.
;
;   If the AUTOLOAD property is a non-null list, then it is a form
;   to be evaluated.
;
; In both of the above cases, it is presumed that the file or form,
; when loaded or evaluated, will cause the function name in question
; to become defined.
;
;   If the AUTOLOAD property is a symbol, then an attempt is made to
;   load the compiled function definition from the system ZIL library.
;   The name under which the function is searched for is the value of
;   the AUTOLOAD property if non-NIL, or the function symbol itself if
;   the value of the AUTOLOAD property is NIL.
;
; To prevent infinite looping in the evaluator, this function removes
; the AUTOLOAD property from the function name if it is a string or
; a list.  If it is a symbol, the AUTOLOAD property is retained;
; however, if the attempt to load the compiled function fails, either
; NIL is returned from this function or an "undefined function" error
; is signalled, depending upon the value of the optional second arg.
;
; The removal of the AUTOLOAD property is skipped if an error occurs
; processing the AUTOLOAD property.
;
; NOTE: If a form is the value of the AUTOLOAD property, it is
;       evaluated in the default environment, NOT in the environment
;       active at the time of execution.
;
; NOTE: Currently it is expected that ZILLOAD will return a SUBR.
;       Support for FSUBR's and MSUBRS's has always been in the works
;       but has not yet been implemented.
;
;
;***********************************************************************
;*                                                                     *
;* 12/08/86 - Changed to set a flag while autoloading so that if       *
;*            FBOUNDP is issued on the function while it is being      *
;*            loaded, the autoload process will return NIL instead     *
;*            of doing a recursive autoload.                           *
;*                                                                     *
;***********************************************************************
;*                                                                     *
;* 01/07/87 - Changed to set a flag after an unsuccessful search of    *
;*            the ZIL load module library so that more than one        *
;*            library search doesn't take place.                       *
;*                                                                     *
;* Note that the autoload property is removed during autoloading       *
;* (except when the autoload property is a symbol) and restored        *
;* afterwards (in case, say, an attention interrupt occurred during    *
;* the loading of a file).  If the autoload process went to completion *
;* the autoload property is removed anyhow.                            *
;*                                                                     *
;***********************************************************************
;

(eval-when (compile load eval)
 (defmacro no-autoload-p (f) `(get ,f 'zil-no-autoload))
)

;;;
;;; Note: The technique above has one minor drawback:
;;;       Putting a property on a symbol's property list can have
;;;       the effect of making the LISP system think that the symbol
;;;       is not "worthless".  This means that functions like
;;;       APROPOS and GCTWA, depending on their implementation, may
;;;       undesirably treat these symbols as meaningful, when in
;;;       fact the ZIL-NO-AUTOLOAD property only reinforces the
;;;       worthlessness of the symbol (if it doesn't have any other
;;;       features, that is).
;;;

(defun zevauto (f &optional e)
 (prog (p s a)
  (setq p (get f 'autoload))

  (cond

   ((symbolp p)                    ; NIL or symbol, load compiled code.

    (cond                          ; Try to find a SUBR on the library.
     ((no-autoload-p f)            ; If function not to be autoloaded
      (go fail))                   ; then treat as undefined function
     ((setq s (zilload (or p f)))  ; If found,
      (return (putprop f s 'subr))); make it SUBR property of function
     (t                            ; If not found,
      (setf (no-autoload-p f) t)   ; then mark not found on lib
      (go fail))))                 ; and it's an undefined function

   ((stringp p)                    ; If string, file to be loaded.
    (in-autoload-environment (load p))) ; Load autoload file.

   ((consp p)                      ; If list, form to be evaluated.
    (in-autoload-environment (eval p))) ; Evaluate form.

   (t           (zerror "Invalid AUTOLOAD property on function " f p)))

  (remprop f 'autoload)            ; Other than symbol, remove it.

  (return t)                       ; Indicate autoload didn't fail.

 fail

  (if e                               ; If function name is not found,
      (zerror "Undefined function" f) ; then if an error is desired
      (return nil)                    ; signal one, otherwise return.
  )
 )
)

(defmacro in-autoload-environment (&body body)
 `(unwind-protect
   (progn (setf (no-autoload-p f) t)  ; Suppress recursive
          (remprop f 'autoload)       ; autoload attempts.
          (setf a (special-alist))    ; Save dynamic SPECIALs.
          (setf (special-alist) nil)  ; Suppress dynamic SPECIALs.
          ,@body                      ; Execute autoload body
   )
   (progn
          (setf (special-alist) a)    ; Restore dynamic SPECIALs.
          (setf (no-autoload-p f) nil); Restore autoload
          (setf (get f 'autoload) p)  ; capability.
   )
  ))
