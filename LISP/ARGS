
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; ARGS
;
; This is a Maclisp function defined as follows:
;
; (ARGS funname) returns:
; (NIL . n) if funname takes n required args and no &optional args
; (m . n)   if funname takes m required args and (n-m) &optional args
; (m . #o776) if funname takes m required args and any &rest args
;             (the #o776 is a hack used in Maclisp - don't question it)
;
; (ARGS funname data) is not supported, but returns funname.
;
; Only compiled code funname's are supported at this time.
;
; This function exists only because of Macsyma.  Therefore, it also
; performs the function of assigning the LOADFILE property, since it
; is generated in translated Macsyma code.
;
;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 04/28/88 - Corrected bug in specification of *loadfile* variable.   *
;*                                                                     *
;***********************************************************************
;

 (declare (special *loadfile*))

 (defun args (f &optional (d nil d?) &aux x)
  (cond
   ((symbolp f)
    (fboundp f))  ; Invoke function autoloading process.
   ((not (codep f))
    (zerror "Argument to ARGS not a valid function name" f))
  )
  (cond
   (d?
    (and d (warn "Number of args cannot be updated" f d))
    (when *loadfile* (putprop f *loadfile* 'loadfile))
    f)
   ((setq x (if (codep f) f (get f 'subr)))
    (let (
          (minargs (minargs x))
          (maxargs (maxargs x))
          (restarg (restarg x))
         )
         (cond
          (restarg                (cons minargs #o776))
          ((eql minargs maxargs)  (cons nil minargs))
          (t                      (cons minargs maxargs)))))
   (t
    (warn "ARGS not supported, not a compiled function" f)
    nil)))
