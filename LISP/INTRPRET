
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; READ-EVAL-PRINT loop.
;;;
;;; Optional first argument - the source of input forms.
;;;            Used by LOAD.
;;;
;;; Optional second argument - this is the output file
;;;            to which printing is to be done.  If the unique value
;;;            NOPRINT is specified for this, printing is bypassed.
;;;
;;; Thus (READ-EVAL-PRINT (open "foo(bar)") 'NOPRINT) is "silent".
;;;
;;; Optional third argument - a prompting string.
;;;

;;;
;;; For the ZIL 1.1 version, the current compiled-environment ALIST
;;; was passed to EVAL so that "special" variables in the top-level
;;; program which invokes INTRPRET would be available in the compiled
;;; environment, both for access and for updating.
;;;
;;; This is now done by default, since EVAL with no second argument
;;; (or a second argument of NIL) uses the current alist.
;;;

;
; Note that EOF has to be tested twice; both the READ and the EVAL
; may cause EOF to be set.  Also note that, since the EOF test is
; not within a CATCH, an invalid file would cause the interpreter to
; die naturally (generally the first time through) with a normal
; file error being signalled.
;
; Note also that (END) is an end-of-input indicator.
;

;
;            Catch frame added to trap attention interrupts at
;            "top level".  This traps attentions only if the
;            input file is NIL (hence, the tag is T if the input
;            file is NIL, NIL otherwise).
;
;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 06/13/88 - Support for multiple values.                             *
;*                                                                     *
;***********************************************************************
;

(defun read-eval-print (&optional f o p)   ; READ-EVAL-PRINT loop.

 (prog (r
        v
        +              ; As defined in Common LISP guide, Chapter 20
        ++             ; As defined in Common LISP guide, Chapter 20
        +++            ; As defined in Common LISP guide, Chapter 20
        -              ; As defined in Common LISP guide, Chapter 20
        *              ; As defined in Common LISP guide, Chapter 20
        **             ; As defined in Common LISP guide, Chapter 20
        ***            ; As defined in Common LISP guide, Chapter 20
        /              ; As defined in Common LISP guide, Chapter 20
        //             ; As defined in Common LISP guide, Chapter 20
        ///            ; As defined in Common LISP guide, Chapter 20
       )
       (declare (special + ++ +++ - * ** *** / // ///))

      (unless (eq o 'noprint)              ; If output file not NOPRINT,
              (cterpri o))                 ; let this function die.

   loop                                    ; We must check for EOF after
                                           ; eval in case QUIT issued
      (when (eof f)                        ; Check for end of file
            (return t))                    ; If EOF, end the interpreter

      (catch (not f)                       ; Catch attention interrupts.
       (if   (ok                           ; Catch LISP errors.
                 (unless (eq o 'noprint)   ; If NOPRINT specified
                         (cterpri o)       ; Insure a new line.
                         (when p           ; If a prompt was specified
                             (princ p o))) ; then display the prompt.
                 (setq r (read f))         ; Read S-expression.
                 (setq +++ ++)             ; Set +++.
                 (setq ++ +)               ; Set ++.
                 (setq + -)                ; Set + to last read form.
                 (setq - r)                ; Set - to just-read form.
             )                             ;
        then                               ; If READ successful...
             (if   (eof f)                 ; If end of file on input
              then (return "")             ; then return.
              else                         ; If user typed (END)
              if   (and (consp r)          ;  (note that the test is
                        (null (cdr r))     ;    all inline code rather
                        (eq (zcar r) 'end));     than calling EQUAL)
              then                         ; then finish
                   (return t)              ;
              else                         ;
              if                           ;
                   (not (ok                ; Catch EVAL/PRINT errors.
                         (setq v           ; Evaluate form.
                          (multiple-value-list
                           (eval r)))      ; Get all values therefrom.
                         (setq /// //)     ; Set ///.
                         (setq // /)       ; Set //.
                         (setq / v)        ; Set / to last eval'd forms
                         (setq *** **)     ; Set ***.
                         (setq ** *)       ; Set **.
                         (setq * (car v))  ; Set * to last eval'd form.
                         (unless           ; If NOPRINT specified,
                          (eq o 'noprint)  ; then don't print form.
                          (dolist (x v)    ; Else for each value ret'd,
                           (cterpri o)     ; insure new output line
                           (prin1 x o)     ; and print form.
                           (terpri o))     ;
                          )                ;
                   ))                      ; If error before PRINT,
              then                         ; then do cleanup stuff...
                   nil                     ; (there is no cleanup stuff)
              endif                        ;
             )                             ;
        endif                              ;
       )                                   ;
      ) ; end catch                        ;
       (go loop)                           ; Repeat until (END) or EOF.
 )                                         ;
)                                          ;

(eval-when (load)
 (defload read-eval-print intrpret)
)

