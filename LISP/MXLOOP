
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; The macro expander for the LOOP macro.
;
; e.g. (DEFUN LOOP MACRO (X) (MXLOOP X))
;

(eval-when (eval)
 (defload the-real-mxloop mxloop)
 (defun loop macro (x) (the-real-mxloop x))
 (defun loop13 macro (x) (mxloop x))
 (format t "~2%Test with LOOP13 macro.  LOOP macro unaffected.~2%")
)

(defmacro rest-op ()
 '(lpstr-x s))

(defmacro this-op ()
 `(car (lpstr-x s)))

(defmacro more-op ()
 `(cdr (lpstr-x s)))

(defmacro next-x (&optional tag)
 (cond
  (tag
   `(or (and (lpstr-x s) (setf (lpstr-x s) (cdr (lpstr-x s))))
        (go ,tag)))
  (t
   `(cond ((lpstr-x s) (setf (lpstr-x s) (cdr (lpstr-x s))))))))

(defmacro add-args (var)
 `(setf (lpstr-arglist s) (loop-add-args ,var (lpstr-arglist s)))
)

(defstruct lpstr      ; LOOP structure, passed around.
           x          ; the LOOP arguments (from the LOOP form)
           arglist    ; the list of local variables
           initforms  ; the initialization forms
           testforms  ; the termination-test forms
           auxforms   ; the auxiliary forms
           bodyforms  ; the body forms
           incrforms  ; the step forms
           termforms  ; the termination forms
           boolean    ; on if "always" or "never" specified
           exit       ; Tag to exit from loop
           initially  ; "Initially" forms
           finally    ; "Finally"   forms
)

(defun mxloop (x)
 (prog (
         s                ; holds the LOOP structure
         a                ; holds each LOOP argument
         z                ; holds the return value
         loop             ; Tag to loop back to
        )
  (setq z    (gensym)
        loop (gensym))

  (setq s (make-lpstr :x         (or (cdr x)
                                     (zerror "No LOOP operands"))
                      :arglist   (list z)
                    ; :initforms
                    ; :testforms
                    ; :auxforms
                    ; :bodyforms
                    ; :incrforms
                    ; :termforms
                    ; :boolean
                      :exit      (gensym)
                    ; :initially
                    ; :finally
          ))

 process-loop-binders

  (when (loop-binder-stuff s)
        (go process-loop-binders))

 main-loop

  (or (rest-op) (go finished))

 process-body-clause

  (when (setq a (loop-action z nil s))
        (push a (lpstr-bodyforms s)))

  (go main-loop)

 finished

  (if (lpstr-boolean s) (setq z (car (lpstr-boolean s))))

  (push `(go ,loop)   (lpstr-incrforms s))
  (setq a (last (lpstr-finally s)))
  (unless (and (consp a)
               (consp (car a))
               (eq (caar a) 'return))
          (push `(return ,z)  (lpstr-termforms s)))



 (return
 `(prog ,(lpstr-arglist s)               ; Local variable list.

        ,.(nreverse (lpstr-initforms s)) ; Initialization forms.

        ,(lpstr-initially s)             ; "Initially" forms.

        ,loop                            ; Loop label.

        ,.(nreverse (lpstr-testforms s)) ; Termination-test forms.

        ,.(nreverse (lpstr-auxforms s))  ; Auxiliary forms.

        ,.(nreverse (lpstr-bodyforms s)) ; Body forms.

        ,.(nreverse (lpstr-incrforms s)) ; Increment forms.

        ,(lpstr-exit s)                  ; Exit label.

        ,(lpstr-finally s)               ; "Finally" forms.

        ,.(nreverse (lpstr-termforms s)) ; Termination forms.

   )
  )
 )
)

; This section processes LOOP INITIALLY and FINALLY clauses.

(defun loop-process-initially (s)
 (when (lpstr-initially s)
       (zerror "LOOP: More than one INITIALLY form"))
 (next-x)
 (setf (lpstr-initially s) (loop-do-stuff s)))

(defun loop-process-finally (s)
 (when (lpstr-finally s)
       (zerror "LOOP: More than one FINALLY form"))
 (next-x)
 (setf (lpstr-finally s) (loop-do-stuff s)))

; This section processes LOOP binder clauses.

(defun loop-binder-stuff (s)
 (case (this-op)
       ((for as)           (loop-for-stuff s)
                           t)
       (with               (loop-with-stuff s)
                           t)
       (initially          (loop-process-initially s)
                           (loop-binder-stuff s))
       (finally            (loop-process-finally s)
                           (loop-binder-stuff s))
       (t                  nil)))

; This section processes LOOP action clauses.

(defun loop-action (z nestedp s)
 (let (
       (a (this-op))
      )
  (cond
   ((listp a)
    (loop-do-stuff s))
   ((and (not nestedp) (eq a 'initially))
    (loop-process-initially s)
    nil)
   ((and (not nestedp) (eq a 'finally))
    (loop-process-finally s)
    nil)
   (t
    (case a
      ((do
        doing)       (next-x)
                     (loop-do-stuff s))
      ((collect
        collecting)  (loop-collect-stuff z s))
      ((nconc
        nconcing)    (loop-nconc-stuff z s))
      ((append
        appending)   (loop-append-stuff z s))
      ((push
        pushing)     (loop-push-stuff z s))
      ((return
        returning)   (loop-return-stuff z s))
      ((sum
        summing)     (loop-sum-stuff z s))
      ((count
        counting)    (loop-count-stuff z s))
      ((maximize
        maximizing)  (loop-maximize-stuff z s))
      ((minimize
        minimizing)  (loop-minimize-stuff z s))

      ((while)       (loop-while-stuff s))
      ((until)       (loop-until-stuff s))

      ((always)      (setf (lpstr-boolean s) '(t))
                          (loop-always-stuff s))
      ((never)       (setf (lpstr-boolean s) '(t))
                          (loop-never-stuff s))
      ((thereis)     (setf (lpstr-boolean s) '(nil))
                          (loop-thereis-stuff s))

      ((if
        when)        (loop-when-stuff z s))
      ((unless)      (loop-unless-stuff z s))

      (t             (zerror "Invalid or misplaced LOOP form" a)))))))

;
; This section processes DO clauses.
;

(defun loop-do-stuff (s)
 (prog (z)
  (setq z (list 'progn))
 do-loop
  (cond
   ((null (rest-op))
    (go do-return))
   ((null (this-op))
    (next-x do-return) ; Skip NIL if found after DO
    (go do-loop))
   ((atom (this-op))
    (go do-return))
   (t
   (push (this-op) z)
   (next-x do-return)
   (go do-loop)))
 do-return
  (return (nreverse z))))

;
; This section processes FOR clauses.
;

(defun loop-for-stuff (s)
 (prog (var for type inval by by? byfun bycond fromtype fromto
        byvar tovar thendo)
for-loop
 (cond
  ((atom (more-op)) (zerror "LOOP: FOR syntax error" (more-op)))
 )
 (setq for (car (next-x syntax-error)))
 (next-x for-error)
 (when (loop-data-type-p (this-op))
       (next-x for-error))
 (case (this-op)
  (in           (setq type 'in   byfun 'cdr))
  (on           (setq type 'on   byfun 'cdr))
  (from         (setq type 'from byfun 'add1))
  (=            (setq type '=    byfun nil  ))
  (t            (go for-error))
 )
 (setq inval (car (next-x syntax-error)))
 (next-x generate-for-code)

;
; If FROM, look for TO or DOWNTO.
;

 (if (eq type 'from)

  then

   (case (this-op)
    (to                    (setq fromtype 'to
                                 byfun    'add1
                                 bycond   '>
                                 tovar    (gensym)
                                 fromto   (car (next-x syntax-error)))
                           (next-x generate-for-code))
    (downto                (setq fromtype 'downto
                                 byfun    'sub1
                                 bycond   '<
                                 tovar    (gensym)
                                 fromto   (car (next-x syntax-error)))
                           (next-x generate-for-code))
    (above                 (setq fromtype 'above
                                 byfun    'sub1
                                 bycond   '<=
                                 tovar    (gensym)
                                 fromto   (car (next-x syntax-error)))
                           (next-x generate-for-code))
    (below                 (setq fromtype 'below
                                 byfun    'add1
                                 bycond   '>=
                                 tovar    (gensym)
                                 fromto   (car (next-x syntax-error)))
                           (next-x generate-for-code))
   )

   ;
   ; Look for BY.  (FROM x TO/DOWNTO y BY z ...)
   ;

   (cond
    ((eq (this-op) 'by)
     (setq by (car (next-x syntax-error)))
     (next-x)
     (setq byvar (gensym) byfun (if (eq fromtype 'downto) '- '+)))
   )

  else

 ;
 ; If =, look for THEN.
 ;

  if (eq type '=)
  then

   (cond
    ((eq (this-op) 'then)
     (setq fromtype 'then thendo (car (next-x syntax-error)))
     (next-x generate-for-code))
   )

  else

  ;
  ; Look for BY. (IN/ON x BY y)
  ;

   (cond
    ((eq (this-op) 'by)
     (setq by (car (next-x syntax-error)))
     (next-x)
     (setq by? t)
     (cond
      ((and (consp by)
            (or (eq (car by) 'quote)
                (eq (car by) 'function)))
       (setq byfun (cadr by)
             by? nil))
      (t
       (setq byfun by
             byvar (gensym)
             by? t))
     )))

  endif
 )

generate-for-code

;
;                  initforms  auxforms                  incrforms
;
; FOR I IN L     : (SETQ G L) (SETQ I (CAR G))       ...(SETQ G (CDR G))
; FOR (I J) IN L : (SETQ G L) (DESETQ (I J) (CAR G)) ...(SETQ G (CDR G))
; FOR I ON L     : (SETQ I L)                        ...(SETQ I (CDR I))
; FOR (I J) ON L : (SETQ G L) (DESETQ (I J) G)       ...(SETQ G (CDR G))
; FOR I FROM L   : (SETQ I L)                       ...(SETQ I (ADD1 I))
;
;                        initforms  auxforms            incrforms
;
; FOR I = L            : ---------- (SETQ I L)
; FOR (I J) = L        : ---------- (SETQ G L)
;                                   (DESETQ (I J) G)
; FOR I = L THEN M     : (SETQ I L)                  ...(SETQ I M)
; FOR (I J) = L THEN M : (SETQ G L) (DESETQ (I J) G) ...(SETQ G M)
;

 (add-args for)

 (cond
  ((or (eq type 'in) (consp for))   (add-args (setq var (gensym))))
  (t                                (setq var for))
 )

 (if   (eq type '=)
  then
       (if   thendo
        then
             (push `(setq ,var ,inval) (lpstr-initforms s))
        else
             (push `(setq ,var ,inval) (lpstr-auxforms s))
       )
  else
       (push `(setq ,var ,inval) (lpstr-initforms s))
 )

 (when byvar
       (add-args byvar)
       (push `(setq ,byvar ,by) (lpstr-initforms s)))

 (when tovar
       (add-args tovar)
       (push `(setq ,tovar ,fromto) (lpstr-initforms s)))

 (cond
  ((eq type 'in)
   (push `(,(if (atom for) 'setq 'desetq) ,for (zcar ,var))
         (lpstr-auxforms s)))
  ((not (eq var for))
   (push `(,(if (atom for) 'setq 'desetq) ,for ,var)
         (lpstr-auxforms s)))
 )

 (cond
  (thendo        (push `(setq ,var ,thendo) (lpstr-incrforms s)))
  ((neq type '=)
                 (push `(setq ,var
                         ,(cond
                           (by?            `(funcall ,byvar ,var))
                           ((eq byfun '+)  `(+ ,var ,byvar))
                           ((eq byfun '-)  `(- ,var ,byvar))
                           (t              `(,byfun ,var))
                          ))
                        (lpstr-incrforms s))))

;
; FOR I IN L --> (COND ((NULL G) (GO EXIT)))
; FOR I ON L --> (COND ((NULL G) (GO EXIT)))
; FOR I FROM L TO M --> (COND ((> G M) (GO EXIT)))
; FOR I FROM L DOWNTO M --> (COND ((< G M) (GO EXIT)))
; FOR I FROM L BELOW M --> (COND ((>= G M) (GO EXIT)))
; FOR I FROM L ABOVE M --> (COND ((<= G M) (GO EXIT)))
;

 (cond
  ((or (eq type 'in)
       (eq type 'on))
   (push `(cond ((null ,var) (go ,(lpstr-exit s))))
         (lpstr-testforms s)))
  (bycond
   (push `(cond ((,bycond ,var ,tovar) (go ,(lpstr-exit s))))
         (lpstr-testforms s)))
 )

 (return nil)

syntax-error

 (zerror "LOOP: Ran out of args following keyword")

for-error

 (zerror "LOOP: FOR specified without initializer")

 )
)

;
; This section processes WITH clauses.
;

(defun loop-with-stuff (s)
 (prog (var with = =?)
  (cond
   ((atom (more-op)) (zerror "LOOP: WITH syntax error" (more-op)))
  )
  (setq with (car (next-x syntax-error)))
  (next-x generate-with-code)

  (when (loop-data-type-p (this-op))
        (next-x generate-with-code))

  (when (eq (this-op) '=)
        (setq = (car (next-x syntax-error)))
        (setq =? t)
        (next-x generate-with-code)
  )

;
; If AND, generate another one.
;

  ;;;;; (if (eq (this-op) 'and) ... ) ... not implemented yet.


generate-with-code

;
; WITH I = A     : (SETQ I A) ; no auxforms or incrforms.
;

  (add-args with)

  (when =?
        (push `(,(if (atom with) 'setq 'desetq) ,with ,=)
              (lpstr-initforms s)))

  (return)

syntax-error

  (zerror "LOOP: Ran out of args following keyword")

with-error

  (zerror "LOOP: WITH specified without initializer")

 )
)

;=======================================================================

(defun loop-data-type-p (x)
 (cond
  ((atom x)
   (memq x '(fixnum flonum small-flonum short-float single-float
             double-float long-float integer number notype)))
  ((null (cdr x))
   (loop-data-type-p (car x)))
  (t
   (and (loop-data-type-p (car x))
        (loop-data-type-p (cdr x))))))

;=======================================================================

(defun loop-add-args (var arglist)
 (cond
  ((null var)       arglist)
  ((atom var)       (if (memq var arglist)
                        arglist
                        (cons var arglist)))
  (t (loop-add-args (car var)
                    (loop-add-args (cdr var) arglist)))))

;=======================================================================

(defun loop-nconc-stuff (z s)
 (prog (i)
  (setq i (car (next-x syntax-error)))
  (next-x return)
  (when (loop-data-type-p (this-op)) (next-x return))
  (cond
   ((eq (this-op) 'into) (setq z (car (next-x syntax-error)))
                         (next-x)
                         (add-args z))
  )
  (and (rest-op) (loop-data-type-p (this-op)) (next-x))
return
  (return `(setq ,z (nconc2 ,z ,i)))
syntax-error
  (zerror "LOOP: NCONC syntax error")))

(defun loop-append-stuff (z s)
 (prog (i)
  (setq i (car (next-x syntax-error)))
  (next-x return)
  (when (loop-data-type-p (this-op)) (next-x return))
  (cond
   ((eq (this-op) 'into) (setq z (car (next-x syntax-error)))
                         (next-x)
                         (add-args z))
  )
  (and (rest-op) (loop-data-type-p (this-op)) (next-x))
return
  (return `(setq ,z (append2 ,z ,i)))
syntax-error
  (zerror "LOOP: APPEND syntax error")))

(defun loop-collect-stuff (z s)
 (prog (i)
  (setq i (car (next-x syntax-error)))
  (next-x return)
  (when (loop-data-type-p (this-op)) (next-x return))
  (cond
   ((eq (this-op) 'into) (setq z (car (next-x syntax-error)))
                         (next-x)
                         (add-args z))
  )
  (and (rest-op) (loop-data-type-p (this-op)) (next-x))
return
  (return `(setq ,z (nconc2 ,z (cons ,i nil))))
syntax-error
  (zerror "LOOP: COLLECT syntax error")))

(defun loop-push-stuff (z s)
 (prog (i)
  (setq i (car (next-x syntax-error)))
  (next-x return)
  (when (loop-data-type-p (this-op)) (next-x return))
  (cond
   ((eq (this-op) 'into) (setq z (car (next-x syntax-error)))
                         (next-x)
                         (add-args z))
  )
  (and (rest-op) (loop-data-type-p (this-op)) (next-x))
return
  (return `(setq ,z (cons ,i ,z)))
syntax-error
  (zerror "LOOP: PUSH syntax error")))

(defun loop-sum-stuff (z s)
 (prog (i)
  (setq i (car (next-x syntax-error)))
  (next-x return)
  (when (loop-data-type-p (this-op)) (next-x return))
  (cond
   ((eq (this-op) 'into) (setq z (car (next-x syntax-error)))
                         (next-x)
                         (add-args z))
  )
  (and (rest-op) (loop-data-type-p (this-op)) (next-x))
return
  (push `(setq ,z 0) (lpstr-initforms s))
  (return `(setq ,z (+ ,z ,i)))
syntax-error
  (zerror "LOOP: SUM syntax error")))

(defun loop-count-stuff (z s)
 (prog (i)
  (setq i (car (next-x syntax-error)))
  (next-x return)
  (when (loop-data-type-p (this-op)) (next-x return))
  (cond
   ((eq (this-op) 'into) (setq z (car (next-x syntax-error)))
                         (next-x)
                         (add-args z))
  )
  (and (rest-op) (loop-data-type-p (this-op)) (next-x))
return
  (push `(setq ,z 0) (lpstr-initforms s))
  (return (if (eq i t)
              `(setq ,z (add1 ,z))
              `(cond (,i (setq ,z (add1 ,z))))))
syntax-error
  (zerror "LOOP: COUNT syntax error")))

(defmacro loop-maximize-stuff (z s) `(loop-maxmin-stuff ,z '> ,s))
(defmacro loop-minimize-stuff (z s) `(loop-maxmin-stuff ,z '< ,s))

(defun loop-maxmin-stuff (z comp s)
 (prog (i aux let stuff)
  (setq i (car (next-x syntax-error)))
  (add-args (setq aux (gensym)))
  (if (atom i)
      (setq let i)
      (add-args (setq let (gensym))))

  (next-x return)
  (when (loop-data-type-p (this-op)) (next-x return))
  (cond
   ((eq (this-op) 'into) (setq z (car (next-x syntax-error)))
                         (next-x)
                         (add-args z))
  )
  (and (rest-op) (loop-data-type-p (this-op)) (next-x))
return
  (setq stuff `(cond
                    (,aux (cond
                               ((,comp ,let ,z) (setq ,z ,let))))
                    (t    (setq ,aux t ,z ,let))))
  (unless (eq let i)
          (setq stuff `(progn (setq ,let ,i) ,stuff)))
  (return stuff)
syntax-error
  (zerror "LOOP: MAXIMIZE or MINIMIZE syntax error")))

(defun loop-return-stuff (z s)
 (prog (i)
  (setq i (car (next-x syntax-error)))
  (next-x)
  (return `(return ,i))
syntax-error
  (zerror "LOOP: RETURN syntax error")))

(defun loop-while-stuff (s)
 (prog (i)
  (setq i (car (next-x syntax-error)))
  (next-x)
  (return `(cond ((not ,i) (go ,(lpstr-exit s)))))
syntax-error
  (zerror "LOOP: WHILE syntax error")))

(defun loop-until-stuff (s)
 (prog (i)
  (setq i (car (next-x syntax-error)))
  (next-x)
  (return `(cond (,i (go ,(lpstr-exit s)))))
syntax-error
  (zerror "LOOP: UNTIL syntax error")))

(defun loop-when-stuff (z s)
 (prog (i j k)
  (setq i (car (next-x syntax-error)))
  (next-x syntax-error)
  (setq j (loop-action z t s))
  (when (and (rest-op) (eq (this-op) 'else))
        (next-x syntax-error)
        (setq k (loop-action z t s)))
return
  (return (if k `(cond (,i ,j) (t ,k)) `(cond (,i ,j))))
syntax-error
  (zerror "LOOP: WHEN syntax error")))

(defun loop-unless-stuff (z s)
 (prog (i j k)
  (setq i (car (next-x syntax-error)))
  (next-x syntax-error)
  (setq j (loop-action z t s))
  (when (and (rest-op) (eq (this-op) 'else))
        (next-x syntax-error)
        (setq k (loop-action z t s)))
return
  (return (if k `(cond ((not ,i) ,j) (t ,k)) `(cond ((not ,i) ,j))))
syntax-error
  (zerror "LOOP: UNLESS syntax error")))

(defun loop-always-stuff (s)
 (prog (i)
  (setq i (car (next-x syntax-error)))
  (next-x)
  (return `(cond ((not ,i) (return nil))))
syntax-error
  (zerror "LOOP: ALWAYS syntax error")))

(defun loop-never-stuff (s)
 (prog (i)
  (setq i (car (next-x syntax-error)))
  (next-x)
  (return `(cond (,i (return nil))))
syntax-error
  (zerror "LOOP: NEVER syntax error")))

(defun loop-thereis-stuff (s)
 (prog (i)
  (setq i (car (next-x syntax-error)))
  (next-x)
  (return `(cond (,i (return t))))
syntax-error
  (zerror "LOOP: THEREIS syntax error")))

