
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

; This function is run when the ZIL system starts up.
; It sets up all the initial macro and function definitions needed
; in a standard ZIL system.
;

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 04/07/88 - DEFLOAD's for ASSOC and MEMBER removed to support the    *
;*            full Common LISP implementations of ASSOC and MEMBER.    *
;* 04/11/88 - Macro PUTDATA added.                                     *
;* 06/01/88 - VALUES-LIST added.  EXPR's for LIST, etc. removed.       *
;* 06/03/88 - INTEGER-LENGTH added.                                    *
;* 06/06/88 - New special forms added:                                 *
;*            BLOCK, RETURN-FROM, TAGBODY, MULTIPLE-VALUE-LIST,        *
;*                                  THROW, MULTIPLE-VALUE-BIND.        *
;* 06/17/88 - Miscellaneous additions to feature list, fixup of        *
;*            ADJOIN and PUSHNEW macros.                               *
;* 06/22/88 - Removed special forms PROG and RETURN;                   *
;*            added macros PROG, PROG*, RETURN.                        *
;* 11/01/88 - Added STRING-TRANSLATE (XLATE), AT and OFF.              *
;* 12/14/88 - Added READ-FROM-STRING, READ-DELIMITED-LIST, CHARACTERP. *
;*                                                                     *
;***********************************************************************
;
   ;;
   ;; Steps in adding a new special form:
   ;;
   ;; (1) Add it to the list in ZEVINIT.
   ;; (2) Add it to ZILEVAL.
   ;; (3) Add it to FEXPAND.
   ;; (4) Add it to ZILCOTRN.
   ;; (5) Add it to ZILCOINT.
   ;; (6) Figure out how to compile it.
   ;;
;
; Note - the names of function arguments, etc., are deliberately
;        constrained to reduce oblist size.
;

(eval-when (compile)
 #.(defvar special-form-list
   '(quote cond and or progn setq go
     ;;; PROG and RETURN are macros now, not special forms....
     defun defload defvar catch throw unwind-protect
     function arg setarg listify eval-when subr declare
     block return-from tagbody multiple-value-list multiple-value-bind)
   "The special forms that must be known to ZILEVAL."
   )
)

(eval-when (compile eval)
 (defmacro def-comma-error (char)
  `(xdefun ,char macro (x)
    (zerror "Syntax error: comma not inside backquoted list structure"
           x)
   )))

; This read-time function builds default ZIL library names based on
; the dsname of what is currently being compiled.  Note that this
; has to default to something else if ZEVINIT is loaded interpretively.

(eval-when ()
 #.(defun libname (qual)
    (let
     ((z
      (if (not (ifilep 'src))
       (string-append "PROGLIB.ZIL." qual)
       (let*
        ((srcname (zildsni 'src))
         (srcdsn (string-substr srcname
                                1
                                (1- (or (string-index srcname "("
                                        ; not ")"
                                        )
                                        (zerror
                                  "Source for ZEVINIT not a PDS member"
                                              srcname)))))
         (srclast5 (string-substr srcdsn -5))
         (srcbutl5 (string-substr srcdsn 1 (- (string-length srcdsn) 5)))
        )
        (cond
         ((eql srclast5 ".LISP")
          (string-append srcbutl5 "." qual))
         ((eql srclast5 "NLISP")
          (string-append srcbutl5 "N" qual))
         ((eql srclast5 "OLISP")
          (string-append srcbutl5 "O" qual))
         (t
          (zerror "Bad source for ZEVINIT" srcname)))))))
     (format t "~&...Generating source name of ~S~%" z)
     z))
)

;
; Fast global-variable-initializing hack.
;

(defmacro ydefvar (var val)
          `(setpbind ',var (cons ',var ,val)))

(defun zevinit ()

 ;
 ; Define globally special variables.
 ;

 (ydefvar *version*  "1.3")
 (ydefvar *features* (list    ; Must be consed - users may add features.
                      'ZIL     ; Of course.
                      'ZIL13   ; Set 1.3 feature.
            #+CSDL    'CSDL    ; Charles Stark Draper Laboratory.
            #+DRAPER  'DRAPER  ; Ditto.
                      'TSO     ; TSO command execution feature.
                      'MVS     ; Operating system.
                      'XA      ; Extended architecture.
                      'VF      ; Vector facility.
                      'GC      ; Garbage collector.
                      'BIGNUM  ; Arbitrary-precision integers.
                      'MULTIPLE-VALUES ; Multiple values.
                      'DESTRUCTURING   ; Everywhere, not just DEFMACRO.
                      'FLAVORS         ; Object-oriented system.
                      'LOOP            ; LOOP macro (not 100% complete).
                     ))
 (ydefvar *load-verbose*       t   ) ; ZIL likes to load verbosely.
 (ydefvar *trace*              nil ) ; Used by TRACE.
 (ydefvar *trace-indent*       0   ) ; Used by TRACE.
 (ydefvar *gentemp-counter*    0   ) ; Used by GENTEMP.
 (ydefvar *mxsetf-initialized* nil ) ; Used by SETF.
 (ydefvar *loadfile*           nil ) ; What file a function came from.

 (ydefvar *zil-source-library* #.(libname "LISP"))
 (ydefvar *zil-help-library*   #.(libname "TEXT"))
 (ydefvar *zil-panel-library*  #.(libname "PANEL"))

 ;
 ; Add others as time goes on.
 ;

 (loop for f in '#.special-form-list do
          (setf (get f '|SPECIAL FORM|) t))

 ;
 ; XDEF's and straightforward macros...
 ;

 (xdefmacro xdefun    (&rest z)  `(zevdefun ',z t))
 (xdefmacro xdefload  (&rest z)  `(zevdefld ',z t))

 (xdefun xdefvar   macro (x)  (mxdefvar x))

 (xdefun defmacro  macro (x)  (mxdefmac x) )  ;  Generates DEFUN.
 (xdefun xdefmacro macro (x)  (mxdefmac x) )  ;  Generates XDEFUN.

 (xdefun defstruct macro (x)  (mxdefstr x) )

 (xdefun case      macro (x)  (mxcase   x) )
 (xdefun caseq     macro (x)  (mxcase   x) )
 (xdefun desetq    macro (x)  (mxdesetq x) )
 (xdefun do        macro (x)  (mxdo     x) )
 (xdefun do*       macro (x)  (mxdo     x) )
 (xdefun dolist    macro (x)  (mxdo     x) )
 (xdefun dotimes   macro (x)  (mxdo     x) )
 (xdefun if        macro (x)  (mxif     x) )
 (xdefun let       macro (x)  (mxlet    x) )
 (xdefun let*      macro (x)  (mxlet    x) )
 (xdefun list*     macro (x)  (mxlist   x) )
 (xdefun loop      macro (x)  (mxloop   x) )
 (xdefun pp        macro (x)  (mxpp     x) )
 (xdefun prog      macro (x)  (mxprog   x) )
 (xdefun prog*     macro (x)  (mxprog   x) )
 (xdefun prog1     macro (x)  (mxprog1  x) )
 (xdefun prog2     macro (x)  (mxprog2  x) )
 (xdefun psetq     macro (x)  (mxpsetq  x) )
 (xdefun return    macro (x)  (mxreturn x) )
 (xdefun setf      macro (x)  (mxsetf   x) )
 (xdefun unless    macro (x)  (mxif     x) )
 (xdefun when      macro (x)  (mxif     x) )

 (xdefun multiple-value-call  macro (x) (mxmvcall x))
 (xdefun multiple-value-prog1 macro (x) (mxmvprg1 x))
 (xdefun multiple-value-setq  macro (x) (mxmvsetq x))

 (xdefmacro push     (a b)               (mxpush   a b))
 (xdefmacro pop      (a &optional b)     (mxpop    a b))
 (xdefmacro incf     (a &optional (b 1)) (mxincf   a b))
 (xdefmacro decf     (a &optional (b 1)) (mxdecf   a b))
 (xdefmacro ttab     (a &optional b)     (mxttab   a b))
 (xdefmacro xtab     (a &optional b)     (mxxtab   a b))

 (xdefmacro neq      (a b)         `(not (eq ,a ,b))        )

 (xdefmacro ok       (&rest z)     `(catch nil ,@z t)       )

 (xdefmacro progv          (a b &rest z)
                           `(zilprogv ,a ,b #'(lambda () . ,z)))

 (xdefmacro with-open-file ((a b &rest c) . z)
                           (mxwof a b c z))

 (xdefmacro princ-to-string (a) `(prints ,a nil))
 (xdefmacro prin1-to-string (a) `(prints ,a t  ))

;
; Arithmetic functions.
;

 (xdefun +          (&rest x) (zmadd x))
 (xdefun plus       (&rest x) (zmadd x))
 (xdefun -          (&rest x) (zmsub x t))
 (xdefun difference (&rest x) (zmsub x nil))
 (xdefun *          (&rest x) (zmmul x))
 (xdefun times      (&rest x) (zmmul x))
 (xdefun /          (&rest x) (zmdiv x t))
 (xdefun quotient   (&rest x) (zmdiv x nil))
 (xdefun //         (&rest x) (zmrem x))
 (xdefun \\         (&rest x) (zmrem x))
 (xdefun remainder  (&rest x) (zmrem x))
 (xdefun gcd        (&rest x) (zmgcd x))
 (xdefun min        (&rest x) (zmmin x))
 (xdefun max        (&rest x) (zmmax x))

;
; Some autoloads for function names that don't meet IBM's exacting
; standards (eccch).
;

 (xdefload **                  expt    )
 (xdefload Â¬                   expt    )
 (xdefload alpha-char-p        alphacp )
 (xdefload char-downcase       chardown)
 (xdefload char-upcase         charup  )
 (xdefload characterp          charp   )
 (xdefload copy-symbol         copysym )
 (xdefload copy-tree           copytree)
 (xdefload copysymbol          copysym )
 (xdefload current-date        curdate )
 (xdefload current-jdate       curjdate)
 (xdefload current-time        curtime )
 (xdefload digit-char-p        digitcp )
 (xdefload double-float-p      dfloatp )
 (xdefload fmakunbound         fmakunbo)
 (xdefload integer-length      zilintln)
 (xdefload intersection        intersec)
 (xdefload keywordify          kwdify  )
 (xdefload unkeywordify        unkwdify)
 (xdefload macroexpand         mexpand )
 (xdefload macroexpand-1       mexpand1)
 (xdefload make-atom           mkatom  )
 (xdefload make-bignum         mkbignum)
 (xdefload make-fixnum         mkfixnum)
 (xdefload make-flonum         mkflonum)
 (xdefload make-funarg         mkfunarg)
 (xdefload make-list           mklist  )
 (xdefload make-number         mknumber)
 (xdefload make-struct         mkstruct)
 (xdefload make-vector         mkvector)
 (xdefload makunbound          makunbou)
 (xdefload parse-body          parsbody)
 (xdefload pretty-print        pprint  )
 (xdefload probe-file          probef  )
 (xdefload read-delimited-list zcsrdl  )
 (xdefload read-eval-print     intrpret)
 (xdefload read-from-string    zcsrfs  )
 (xdefload remove-duplicates   remdupql) ; (    ... :TEST #'EQL)
 (xdefload revappend           revappen)
 (xdefload reversall           reversal)
 (xdefload set-feature         setfeat )
 (xdefload set-nofeature       setnfeat)
 (xdefload setsyntax           setsynta)
 (xdefload single-float-p      sfloatp )
 (xdefload special-alist       salist  )
 (xdefload string-append       sappend )
 (xdefload string-appendl      sappendl)
 (xdefload string-capitalize   scapital)
 (xdefload string-downcase     downcase)
 (xdefload string-index        index   )
 (xdefload string-left-trim    sltrim  )
 (xdefload string-length       slength )
 (xdefload string-remove       sremove )
 (xdefload string-reverse      sreverse)
 (xdefload string-right-trim   srtrim  )
 (xdefload string-scan         sscan   )
 (xdefload string-substr       substr  )
 (xdefload string-translate    xlate   )
 (xdefload string-trim         strim   )
 (xdefload string-upcase       upcase  )
 (xdefload string-verify       verify  )
 (xdefload structure           structur)
 (xdefload substqual           substqua)
 (xdefload symbol-name         pname   )
 (xdefload symbol-plist        plist   )
 (xdefload symbolconc          concat  )
 (xdefload values-list         valuesl )
 (xdefload 1+                  add1    )
 (xdefload 1-                  sub1    )

;
; Compatibility hacks with "stupider" releases of ZIL.
;

 (xdefload cputime            runtime )
 (xdefload fixp               integerp)  ; FIXP == (OR FIXNUMP BIGP)
 (xdefload lastcdr            last    )
 (xdefload vdim               vlength )

;
; The following are implemented to be compatible with Common LISP.
; To be compatible with Maclisp or Franz LISP, you must use the
; functions xxxQUAL instead.
;

 (xdefload delete        delql   )  ; (DELETE ... :TEST #'EQL)
 (xdefload remove        remql   )  ; (REMOVE ... :TEST #'EQL)
 (xdefload subst         substql )  ; (REMOVE ... :TEST #'EQL)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; For Maclisp compatibility, use the following...
;
;(xdefload assoc         assqual )  ; (ASSOC  ... :TEST #'EQUAL)
;(xdefload delete        delqual )  ; (DELETE ... :TEST #'EQUAL)
;(xdefload member        memqual )  ; (MEMBER ... :TEST #'EQUAL)
;(xdefload remove        remqual )  ; (REMOVE ... :TEST #'EQUAL)
;(xdefload subst         substqua)  ; (REMOVE ... :TEST #'EQL)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(xdefun comment   macro (x) ''comment)

;
; Reader macro support functions...
;

(xdefmacro |`| (x)
 (mxbq x)           ; Process the backquote.
)

(def-comma-error |,|  )
(def-comma-error |,@| )
(def-comma-error |,.| )

; C---R functions.
; These are defined as EXPR's to allow CAR/CDR checking to be in effect
; as well as possible redefining of CAR/CDR as ZCAR/ZCDR.

 (xdefun caar     (x) (car (car x)))
 (xdefun cadr     (x) (car (cdr x)))
 (xdefun cdar     (x) (cdr (car x)))
 (xdefun cddr     (x) (cdr (cdr x)))
 (xdefun caaar    (x) (car (car (car x))))
 (xdefun caadr    (x) (car (car (cdr x))))
 (xdefun cadar    (x) (car (cdr (car x))))
 (xdefun caddr    (x) (car (cdr (cdr x))))
 (xdefun cdaar    (x) (cdr (car (car x))))
 (xdefun cdadr    (x) (cdr (car (cdr x))))
 (xdefun cddar    (x) (cdr (cdr (car x))))
 (xdefun cdddr    (x) (cdr (cdr (cdr x))))

 (xdefun caaaar   (x) (car (car (car (car x)))))
 (xdefun caaadr   (x) (car (car (car (cdr x)))))
 (xdefun caadar   (x) (car (car (cdr (car x)))))
 (xdefun caaddr   (x) (car (car (cdr (cdr x)))))
 (xdefun cadaar   (x) (car (cdr (car (car x)))))
 (xdefun cadadr   (x) (car (cdr (car (cdr x)))))
 (xdefun caddar   (x) (car (cdr (cdr (car x)))))
 (xdefun cadddr   (x) (car (cdr (cdr (cdr x)))))

 (xdefun cdaaar   (x) (cdr (car (car (car x)))))
 (xdefun cdaadr   (x) (cdr (car (car (cdr x)))))
 (xdefun cdadar   (x) (cdr (car (cdr (car x)))))
 (xdefun cdaddr   (x) (cdr (car (cdr (cdr x)))))
 (xdefun cddaar   (x) (cdr (cdr (car (car x)))))
 (xdefun cddadr   (x) (cdr (cdr (car (cdr x)))))
 (xdefun cdddar   (x) (cdr (cdr (cdr (car x)))))
 (xdefun cddddr   (x) (cdr (cdr (cdr (cdr x)))))

 (xdefun zcadr     (x) (zcar (cdr x)))
 (xdefun zcaddr    (x) (zcar (cdr (cdr x))))
 (xdefun zcadddr   (x) (zcar (cdr (cdr (cdr x)))))

;
; Following unnecessary, retained for compatibility only...
;

 (xdefun zcddr     (x) (cdr (cdr x)))
 (xdefun zcdddr    (x) (cdr (cdr (cdr x))))

;;;
;;; These are now compiled - no need to define them as EXPR's.
;;;
;;;(xdefun list      (&rest z) z)
;;;(xdefun vector    (&rest z) (zmvector z))
;;;(xdefun bignum    (&rest z) (mkbignum z))
;;;(xdefun structure (&rest z) (zmstruct z))

;
; Arithmetic functions that take multiple arguments...
;
; Note: /= cannot be implemented like =, >, <, >=, <=.
;
; Those functions expand into a series of 2-operand tests connected
; by AND.
; But /= wouldn't work the same way as =, >, <, >=, <=.
; Consider that (/= 1 2 1) should be NIL, but
; (AND (/= 1 2) (/= 2 1)) would be T.  Need some other way to do it.

 (xdefmacro /=        (a b) `(not (zilequal ,a ,b)))
 (xdefmacro nlessp    (a b) `(not (lessp    ,a ,b)))
 (xdefmacro ngreaterp (a b) `(not (greaterp ,a ,b)))

 (xdefun =  (&rest x) (zmeq  x))
 (xdefun >  (&rest x) (zmgt  x))
 (xdefun <  (&rest x) (zmlt  x))
 (xdefun >= (&rest x) (zmnlt x))
 (xdefun <= (&rest x) (zmngt x))

 ;
 ; User-friendly productivity aids.
 ;

 (xdefmacro help     (&optional a b)  `(zilhelp ',a ,b))
 (xdefmacro news     (&optional b)    `(zilhelp '$news ,b))
 (xdefmacro trace    (&rest x)        `(ziltrace ',x 'trace))
 (xdefmacro untrace  (&rest x)        `(ziltrace ',x 'untrace))

 (xdefun    at       macro (x)  (mxatoff  x))
 (xdefun    off      macro (x)  (mxatoff  x))
 (xdefun    putdata  macro (x)  (mxputdat x))

 ;
 ; Support for compile-time stuff.
 ;
 ; Should we purge this?
 ;

 (xdefmacro % (&rest z) `(eval-when (compile) ,z))

 ;
 ; Other DEF's...
 ;

 (xdefmacro defprop   (a b c)             `(putprop ',a ',b ',c) )

 (xdefmacro defargs   (a b &optional c d) (mxdefarg a b c d)     )
 (xdefmacro defflic   (a b &optional c d) (mxdeffli a b c d)     )
 (xdefmacro defmodule (a b &optional c)   (mxdefmod a b c)       )

 (xdefmacro includef (file) (xinclude (eval file)))
 (xdefmacro include  (file) (xinclude file))

 ;
 ; FORTRAN interface...
 ;

 (xdefload acos     zifacos )
 (xdefload asin     zifasin )
 (xdefload atan     zifatan )
 (xdefload cos      zifcos  )
 (xdefload exp      zifexp  )
;(xdefload log      ziflog  ) ;; Not any more, we have 2-argument LOG
 (xdefload sin      zifsin  )
 (xdefload sqrt     zifsqrt )
 (xdefload tan      ziftan  )

 ;
 ; Common LISP compatibility...
 ;

 (xdefmacro the (a b) b)

 (xdefmacro first   (x) `(car ,x))
 (xdefmacro rest    (x) `(cdr ,x))
 (xdefmacro second  (x) `(cadr ,x))
 (xdefmacro third   (x) `(caddr ,x))
 (xdefmacro fourth  (x) `(cadddr ,x))
 (xdefmacro fifth   (x) `(car (cddddr ,x)))
 (xdefmacro sixth   (x) `(cadr (cddddr ,x)))
 (xdefmacro seventh (x) `(caddr (cddddr ,x)))
 (xdefmacro eighth  (x) `(cadddr (cddddr ,x)))


 ;
 ; Maclisp-compatible arrays...
 ;

 (mapc #'(lambda (x) (putprop x '(zlarray) 'autoload))
       '(
         arrayp
         *array
         array
         store
         arraycall
         arraydims
         fillarray
         *rearray
         zil-array
        ))

 ;
 ; FLAVORS
 ;

 (mapc #'(lambda (x) (putprop x '(flavors) 'autoload))
       '(
         compile-flavor-methods
         declare-flavor-instance-variables
         defflavor
         defmethod
         defwrapper
         describe
         describe-flavor
         funcall-self
         get-handler-for
         instantiate-flavor
         make-instance
         recompile-flavor
         send
         send-self
         set-in-instance
         symeval-in-instance
        ))

 ;
 ; More Maclisp-compatible stuff...
 ;

 (xdefmacro *catch  (a . b) `(catch ,a . ,b))
 (xdefmacro *throw  (a b)   `(throw ,a ,b))
 (xdefmacro signp   (a b)   (mxsignp a b))

 (xdefun sassoc macro (x)   (mxsassoc x))
 (xdefun sassq  macro (x)   (mxsassoc x))

 ;
 ; Newer stuff ...
 ;

 (xdefmacro pushnew (a b &key ((:test c)) ((:key d)))
            (mxpshnew a b c d))

 (xdefmacro adjoin  (a b &key ((:test c)) ((:key d)))
            (mxadjoin a b c d))

 (xdefmacro locally (&body body)
  `((lambda () . ,body)))

 (xdefun time macro (x) (mxtime x))

 ;
 ; This is the form used to define compiler transforms.
 ;
 ; (DEFTRANS FOO (FORM ENV CON) ....body...)
 ;
 ; -->
 ;
 ; (DEFUN (FOO COMPILER-TRANSFORM) (FORM ENV CON) ... body)
 ;
 ; or..
 ;
 ; (SETF (GET 'FOO 'COMPILER-TRANSFORM)
 ;       #'(LAMBDA (FORM ENV CON) ... body))
 ;
 ;
 ; Alternatively...
 ;
 ; (DEFTRANS FOO BAR)
 ;
 ; -->
 ;
 ; (SETF (GET 'FOO 'COMPILER-TRANSFORM) 'BAR)
 ;

 (xdefmacro deftrans (a b &rest c)
  (mxdeftra a b c))

 (xdefmacro zil-source-member (member)
  (string-append "'" *zil-source-library* "(" member ")'"))

 ;
 ; The return value from ZEVINIT (for what it's worth)...
 ;

 nil

)
