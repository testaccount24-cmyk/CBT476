
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; "GEN-PREDICATE"
;;;
;;; This function, formerly part of ZCGINLIN, has been made a separate
;;; function so that it can be called from ZCGINEXT as well.
;;;
;;; It returns the register which contains the result value of the
;;; comparison, used if the form being compiled is for value.
;;; However, code may be compiled to do a test and branch only.
;;;
;;; Arguments:
;;;
;;;  branch-list  -  a list of two symbols representing the op codes
;;;                  used for the result of a comparison operation,
;;;                  such that the CAR branches on TRUE and the CADR
;;;                  branches on FALSE.
;;;
;;;  V            -  the usual meaning of the "V" argument.
;;;  S            -  the usual meaning of the "S" argument.
;;;  COM          -  the comment field of the assembler instruction.
;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zcgipred (branch-list v s com &aux r)
  (zcgrels lastarg)
  (setq r (zcggtbst s))
  (if (and (null v) (zilcovta s))
   then
    (setq cc branch-list)
   else
    (let ((lt nil) (lf (gensym)) (lx (gensym)))
     (when (cc-extendedp branch-list)
           (when (eq (cc-out-logic branch-list) 'gonotnil)
                 (setq lt (gensym)))
           (zcgemit 4 () (cc-out-op branch-list) (or lt lf)         com)
           (apply #'zcgemit (cc-emit-code branch-list))
     )
     (zcgemit 4 () (cc-false-op branch-list) lf                     com)
     (zcgemit 2 lt "LR" `(,r ",8    T")                             com)
     (zcgemit 4 () "B" lx                                           com)
     (zcgemit 2 lf "LR" `(,r ",10   NIL")                           com)
     (zcgemit 0 lx "DS" "0H"                                        com)
    )
   endif)
  r
)

