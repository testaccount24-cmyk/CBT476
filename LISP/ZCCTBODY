
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
;***********************************************************************
;*                                                                     *
;* This processes TAGBODY.                                             *
;*                                                                     *
;***********************************************************************
;
;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 06/23/88 - Support for PROG and RETURN removed.                     *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zcctbody (b v s e)

 (let (
       (e (cons (zccmkcec 'tagbody e) e)) ; new environment contour
       (tagexit (gensym))  ; dummy label to which the TABBODY can refer
       (golist)            ; the list of tags, in ALIST format
       (lastform)          ; the last form in the TAGBODY
      )

 ; Set label properties.

   (putprop tagexit v 'vartarg)
   (putprop tagexit s 'rettarg)
   (putprop tagexit (car e) 'contour)

 ; Tell the generator to reserve stack space.

   (modq body `(begintag ,tagexit ,v ,s))

 ; Build the GO list.

   (setq golist
         (loop for x in b
               with z = nil
               when (and x (or (symbolp x) (integerp x)))
                 when (assoc x z)
                 do   (modq body `(error "Duplicate GO tag" ,x))
                 else collect (cons x (gensym)) into z
               finally (return z)))

 ; Assign properties to all GO tags,
 ; including pointers to the dummy exit label.

   (loop for (tag . label) in golist do
    (putprop label tagexit  'progexit)
    (putprop label tag      'gotag)
    (putprop label (car e)  'contour)
   )

 ;
 ; Add the GO tags to the current contour.
 ;
   (setf (zilcec-go-tags (car e))
         (append golist (zilcec-go-tags (car e))))

 ; Loop until end of forms.  For each form in the TAGBODY body...
 ; If form is an atom, then it is a label, so generate a label whose
 ; name is the one specified on the GO list.
 ; Otherwise, generate code to evaluate the form.

   (dolist (form b)
    (cond
     ((null form) nil)      ; Ignore NIL's in a TAGBODY body.
     ((or (symbolp form)    ; Compile symbols as tags
          (integerp form))  ; Compile integers as tags
      (setq lastform form)
      (let ((l (cdr (assoc lastform golist))))
           (putprop l t 'referenced)
           (modq body `(label ,l nil nil))))
     ((atom form)           ; Atomic but not a symbol or integer - error
      (modq body `(error "Invalid tag found in TAGBODY" ,form)))
     (t                     ; Otherwise compile it as is
      (setq lastform (zilcomex form nil))
                           ; Compile code without using the return value
      (zccevcom lastform nil nil e))))

 ; If the TAGBODY doesn't end with a GO or RETURN-FROM, then
 ; make it return NIL.  Note that this is very simple-minded and doesn't
 ; deal with things like all paths of a COND returning or going, etc.

   (unless (and (consp lastform)
                (memq (car lastform) '(return-from go)))
           (modq body `(setnil nil nil (goto ,tagexit))))

 ; Balance out the BEGINTAG above for the code generator.

   (modq body `(endtag ,tagexit ,v ,s))

 ; Generate return label code.

   (modq body `(label ,tagexit ,v ,s))

 ))

