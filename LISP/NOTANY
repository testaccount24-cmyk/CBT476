
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; "NOTANY" - an iterator a la NIL, viz.
;
; (NOTANY #'foo-p list1 list2 ...) returns t if foo-p is true of none
;                                  of the element(s).
;
; The compiler really ought to transform this into inline code,
; a la the mapping functions.
;


(defun notany1 (fun lis) ; case of 1 list.
 (cond
  ((null lis) t)
  ((atom lis) (zerror "Argument 2 to NOTANY not a list" lis))
  (t
   (prog ()
    loop
         (unless (funcall fun (car lis))
                 (when (setq lis (cdr lis))
                       (go loop))
                 (return t))
         (return nil)))))

(defun notany (fun &rest lists) ; case of multiple lists.
 (cond
  ((null lists)       t)
  ((null (cdr lists)) (notany1 fun (car lists)))
  (t
   (dolist (list lists)
           (unless (listp list)
                   (zerror "Non-list passed to NOTANY" list)))
   (prog ()
    loop (when (mapor #'null lists) (return t))
         (when (zilapply fun (mapcar #'car lists))
               (return nil))
         (setq lists (mapcar #'cdr lists))
         (go loop)))))

(defload car zcar)

