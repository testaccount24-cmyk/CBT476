
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is the compiler transform function for MEMBER.
;
; Currently, inline code is always generated (except in the
; case of :TEST #'EQ, when a call to MEMQ is generated, which
; compiles inline anyhow).
;

(eval-when (eval)
 (deftrans member zxmember)
)

(defmacro local-variable-p (x)       ; Please, x must be a symbol.
 `(and (symbolp ,x) (memq ,x xenv)))

(defun zxmember (xform xenv xcon)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Note that there must be at least 2 arguments.  If there are fewer,
  ;; no transformation is done.  However, if there are more, then GETK
  ;; will signal an error for invalid keywords,
  ;; and this will cause the transformation to fail, which in the
  ;; compiler has the effect of suppressing the transformation.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 (cond
  ((lessp (length xform) 3)
   xform)

  (t
   (let* (
          (arg1 (cadr xform))
          (arg2 (caddr xform))
          (rest (cdddr xform))
          (rest-length (length rest))
          (test      (getk rest ':test))
          (test-not  (getk rest ':test-not))
          (key       (getk rest ':key))
          (expected-length (+ (if test 2 0)
                              (if test-not 2 0)
                              (if key 2 0)))
         )
    (zxmember-optimize xform xenv xcon arg1 arg2
                       rest-length expected-length
                       (car test) (car test-not) (car key)
                       test test-not key)))))

(defun zxmember-optimize (xform xenv xcon arg1 arg2
                                          rest-length expected-length
                                          test test-not key
                                          test? test-not? key?)
 (let (
       (carg1  (zilcocon arg1 nil))
       (carg2  (zilcocon arg2 nil))
       (ctest     (if test?     (zxmember-confun test)))
       (ctest-not (if test-not? (zxmember-confun test-not)))
       (ckey      (if key?      (zxmember-confun key)))
      )

      (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If the length of the &rest argument is such that more keys were
  ;; specified than expected, then suppress the transformation.
  ;;
  ;; Checking for keys is done this way to allow for the possibility
  ;; of non-constant key names, :allow-other-keys, etc.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

       ((> rest-length expected-length)
        (warn "Nonstandard or unexpected keyword args to MEMBER" xform)
        xform)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If all arguments are constant, perform the test at compile time.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

       ((and carg1
             carg2
             (or (not test?) ctest)
             (or (not test-not?) ctest-not)
             (or (not key?) ckey)
        )
        (warn "Evaluating MEMBER with constant args at compile time"
              xform)
        `',(eval xform))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If :TEST is #'EQ or 'EQ, and no other keywords are specified,
  ;; then transform the call to MEMQ.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

       ((and test?
             (not test-not?)
             (not key?)
             (eq (car ctest) 'eq))
        `(memq ,arg1 ,arg2))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If both :TEST and :TEST-NOT specified, error.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

       ((and test? test-not?)
        (zerror "Both :TEST and :TEST-NOT keywords given to MEMBER"
                xform))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Otherwise, transform the call to inline code.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

     (t
      (let (
            (loop  (gensym))
            (true  (gensym))
            (arglist    nil)
            (lambdalist nil)
            (item)
            (list)
            (ftest)
            (fkey)
            (comparison)
           )
       (cond
        ((or carg1 (local-variable-p arg1))
         (setq item arg1))
        (t
         (let ((g (gensym)))
              (push arg1 arglist)
              (push g lambdalist)
              (setq item g))))
       (let ((g (gensym)))
            (push arg2 arglist)
            (push g lambdalist)
            (setq list g))
       (cond
        (ctest
         (setq ftest ctest))
        ((not test?)
         (setq ftest '(eql)))
        ((local-variable-p test)
         (setq ftest `(funcall ,test)))
        (t
         (let ((g (gensym)))
              (push test arglist)
              (push g lambdalist)
              (setq ftest `(funcall ,g)))))
       (cond
        (ctest-not
         (setq ftest ctest-not))
        ((and test-not? (local-variable-p test-not))
         (setq ftest `(funcall ,test-not)))
        (test-not?
         (let ((g (gensym)))
              (push test-not arglist)
              (push g lambdalist)
              (setq ftest `(funcall ,g)))))
       (cond
        (ckey
         (setq fkey ckey))
        ((not key?)
         (setq fkey '(progn)))
        ((local-variable-p key)
         (setq fkey `(funcall ,key)))
        (t
         (let ((g (gensym)))
              (push key arglist)
              (push g lambdalist)
              (setq fkey `(funcall ,g)))))

       (setq comparison
             (let ((x `(,@ftest ,item (,@fkey (zcar ,list)))))
                  (if test-not? `(not ,x) x)))

       `((lambda ,(nreverse lambdalist)
                 (and ,list
                      (prog ()
                       ,loop
                            (cond
                             (,comparison
                              (go ,true))
                             ((setq ,list (cdr ,list))
                              (go ,loop)))
                       ,true
                            (return ,list))))
         ,.(nreverse arglist)))))))


(defun zxmember-confun (x)
 (cond
  ((and (consp x)
        (consp (cdr x))
        (null  (cddr x))
        (memq (car x) '(function quote)))
   (ncons (cadr x)))
  (t
   (zilcocon x nil))))

