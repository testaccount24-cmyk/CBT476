
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; "ZEVDVAR"
;;;
;;; This function processes run-time DEFVAR.
;;;
;;; The syntax of DEFVAR is:
;;;
;;;  (DEFVAR variable &optional value documentation)
;;;
;
; Processing:
;
;    See ZEVXVAR for description.
;
; Since ZEVDVAR is used only by interpretive DEFVAR, and
; compiled DEFVAR used ZEVXVAR, ZEVDVAR merely calls ZEVXVAR,
; passing it a dynamically constructed LAMBDA expression as an
; initialization "thunk".  Since there should be a null lexical
; environment associated with the "thunk", it can be passed as
; a raw LAMBDA expression - no need to use FUNCTION to make a
; closure out of it.
;


(defmacro d-var () `(zcar x))
(defmacro d-val () `(zcadr x))
(defmacro d-doc () `(zcaddr x))

(defmacro d-var-p  () `x)
(defmacro d-val-p  () `(cdr x))
(defmacro d-doc-p  () `(cddr x))
(defmacro d-junk-p () `(cdddr x))

(defun zevdvar (x toplevelp)
  (unless toplevelp (zerror "Not at top level" 'defvar))
  (unless (d-var-p) (zerror "Too few arguments" 'defvar))
  (cond
   ((d-val-p)
    (cond
     ((d-doc-p)
      (when (d-junk-p) (zerror "Too many arguments" `(defvar . ,x)))
      (zevxvar (d-var) t `(lambda () ,(d-val)) (d-doc)))
     (t
      (zevxvar (d-var) t `(lambda () ,(d-val))))))
   (t
    (zevxvar (d-var)))))

