
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
;***********************************************************************
;*                                                                     *
;* This processes MULTIPLE-VALUE-BIND.                                 *
;*                                                                     *
;***********************************************************************
;
; The key to understanding MULTIPLE-VALUE-BIND is that it is really
; a variation on LAMBDA.  You could think of
;
;  (MULTIPLE-VALUE-BIND (A B C) (VALUES-FORM) (DECL1) (BODY2) (BODY3))
;
; as being putatively restatable as
;
;  ((MULTIPLE-VALUE-LAMBDA (A B C) (DECL1) (BODY2) (BODY3))
;   (VALUES-FORM))
;
; The differences between this and true LAMBDA are:
;
;  (1)  Exactly one argument is always received by the "procedure".
;  (2)  No lambda list keywords are allowed in the argument list.
;
; Note that this allows for ZIL's full destructuring support in the
; argument list to MULTIPLE-VALUE-BIND, even though Common LISP does
; not mandate this.
;
; Thus, this code is very similar to ZCCEVAL-CALL-LAMBDA.
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zccmvbnd (b v s e)
 (cond
  ((or (null b)            ; (mvbind)
       (null (cdr b))      ; (mvbind (a b c))
   )
   (modq body `(error "Invalid syntax" (multiple-value-bind . ,b))))
  (t
   (let (((mvargs mvform . mvbody) b))
    (case (do ((args mvargs (cdr args)))
              ((null args) nil)
              (cond
               ((atom args) (return 'error2))
               ((llkeywdp (car args)) (return 'error1))))
     ((error1)
      (modq body `(error "Lambda list keywords not allowed in arglist"
                         (multiple-value-bind . ,b))))
     ((error2)
      (modq body `(error "LEXPR or REST args not allowed in arglist"
                         (multiple-value-bind . ,b))))
     (t
      (let* (
             (mvbind-name           (gensym))
             (mvbind-valid-p        (zilcoarg mvbind-name mvargs))
             (mvbind-parms          (get mvbind-name 'parms))
             (mvbind-exitlabel      (gensym))
            )

       (cond
        ((not mvbind-valid-p)
         (modq body `(error "Invalid argument list"
                            (multiple-value-bind . ,b))))
        (t

         (putprop mvbind-exitlabel v 'vartarg)
         (putprop mvbind-exitlabel s 'rettarg)

         (unless (null mvargs)
                 (modq body `(mvinit ,(length mvargs) nil nil)))

         (zccevcom mvform
                   nil
                   `(mvbind (,(length mvargs) . ,(length mvbind-parms)))
                   e)

         (let ((e (cons (zccmkcec 'multiple-value-bind e) e)))

          (modq body `(beginlam ,mvbind-name ,mvbind-parms ,v ,s))

          ; Identify current function as owner of variables.

          (dolist (x mvbind-parms)
                  (putprop (cdr x) name 'owner))

          ; Bind variables and strip declarations off body.

          (setq mvbody (zcclama mvbind-name mvbind-exitlabel mvbody e))

          ; Evaluate the body.

          (zccprogn mvbody nil `(goto ,mvbind-exitlabel) e)

          (modq body `(endlam ,mvbind-exitlabel ,mvbind-parms ,v ,s))

          (modq body `(label ,mvbind-exitlabel ,v ,s))

      ))))))))))
