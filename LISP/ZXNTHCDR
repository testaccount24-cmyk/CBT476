
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is the compiler transform for NTHCDR.
;

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 06/20/88 - Support for multiple values.                             *
;*                                                                     *
;***********************************************************************
;


(eval-when (eval)
 (deftrans nthcdr zxnthcdr)
)

(eval-when ()
 #.(defvar *zxnthcdr-threshold* 4
    "The maximum value for which to transform NTHCDR to CDR.")
)

(defun zxnthcdr (xform xenv xcon)

 (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; There must be exactly 2 arguments.  If not, skip transform.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ((not (eql (length xform) 3))
   xform)

  (t
   (let* (
          (arg1 (cadr xform))
          (arg2 (caddr xform))
          (carg1 (zilcocon arg1 nil))
          (carg2 (zilcocon arg2 nil))
         )

         (cond

 ;
 ; Don't do this - we're not constant-folding list operations,
 ; because we're overly cautious about destructive operations.
 ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;
 ;;; If both arguments are constant, perform the test at compile time.
 ;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;
 ;        ((and carg1 carg2)
 ;         (warn "Evaluating at compile time" xform)
 ;         `',(nthcdr (car carg1) (car carg2)))
 ;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Errors:
  ;;
  ;; (NTHCDR not-a-nonnegative-fixnum x)
  ;; (NTHCDR x not-a-list)
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((and carg1 (not (and (fixnump (car carg1))
                                (not (minusp (car carg1))))))
           (zerror "Invalid first argument to NTHCDR" xform))

          ((and carg2 (not (listp (car carg2))))
           (zerror "Invalid second argument to NTHCDR" xform))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; (NTHCDR 0 x) --> (VALUES x)
  ;; (NTHCDR 1 x) --> (CDR x)
  ;; (NTHCDR 2 x) --> (CDDR x)
  ;; (NTHCDR 3 x) --> (CDDDR x)
  ;; etc.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((eql arg1 0)
           `(values ,arg2))

          ((and carg1 (<= (car carg1) #.*zxnthcdr-threshold*))
           (let ((f arg2))
                (dotimes (i (car carg1))
                         (setq f `(cdr ,f)))
                f))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Otherwise, no transformations apply.  Return the original form.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

           (t xform))))))

