
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;; This compiles the "OR" function.

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 04/25/88 - Support for determination of superfluous initializations *
;*            of PROG and &AUX variables to NIL.  This involves two    *
;*            new fields in the contour that are used to detect cases  *
;*            of a variable unconditionally being set before it is     *
;*            ever referenced.  This is an extension of, and replaces, *
;*            the SETQ-initialization-hacking scheme used in ZCCPROG.  *
;*            This also requires a new P-code form, CSETNIL, and a new *
;*            code generator module, ZCGCSNIL.                         *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zccor  (b v s e) ; B = body, V = variable, S = target, E = environment
 (prog (a xf exitlabel settlabel fallthrulabel wayout save-tempcond)
  (setq a b)
  (setq wayout (if (and (null v) (consp s) (zilcovta s))
                   (car s)
                   nil))

  (or a       (return (modq body `(setnil nil ,v ,s)))) ; (OR)   -> NIL
  (or (cdr a) (return (zccevcom (car a) v s e)))        ; (OR x) -> x

  (if   (eq wayout 'gonil)
   then
        (setq fallthrulabel (gensym))
   else
   if   (eq wayout 'gonotnil)
   then
        ; nothing
   else
        (setq exitlabel (gensym))
        (putprop exitlabel v 'vartarg)
        (putprop exitlabel s 'rettarg)
   endif
  )

  (setq save-tempcond (zilcec-tempcond (car e)))

 loop

  (setq xf (zccpred (car a)))

  (if (notp xf)
   then
    (zccevcom (cadr xf)
              nil
              (if   (eq wayout 'gonotnil)
               then `(gonil ,(cadr s))
               else
               if   (eq wayout 'gonil)
               then (if (null (cdr a))
                     then `(gonotnil ,(cadr s))
                     else
                          `(gonil ,fallthrulabel)
                     endif
                    )
               else `(gonil ,(or settlabel
                                 (setq settlabel (gensym))))
               endif)
              e)
    (or (eq wayout 'gonil)                 ; if non-predicative
        (cdr a)                            ; and (OR ... (NOT x))
                                           ; then generate a NIL
        (modq body `(setnil nil nil (goto ,exitlabel))))
   else
    (zccevcom (if (eq wayout 'gonil) xf (car a))
              nil
              (if   (eq wayout 'gonotnil)
               then `(gonotnil ,(cadr s))
               else
               if   (eq wayout 'gonil)
               then (if (null (cdr a))
                     then `(gonil ,(cadr s))
                     else
                          `(gonotnil ,fallthrulabel)
                     endif
                    )
               else (if (null (cdr a))
                     then (putprop exitlabel t 'forceniltest)
                          `(goto ,exitlabel)
                     else
                     if   (predp xf)
                     then `(gonotnil ,(or settlabel
                                          (setq settlabel (gensym))))
                     else
                          `(gonotnil ,exitlabel)
                     endif
                    )
               endif)
              e)
   endif
  )

  (when (setq a (cdr a))
        (setf (zilcec-tempcond (car e)) t) ; All forms other than first
        (go loop))                         ; are conditionally executed

  (when settlabel
        (modq body `(label ,settlabel nil nil))
        (modq body `(sett t nil (goto ,exitlabel))))
  (setf (zilcec-tempcond (car e)) save-tempcond)
  ;
  ; The code below must be unconditional (at least as unconditional as
  ; things were on entry to the OR form) - after all, it does the
  ; V and S stuff, which can be skipped only under certain circumstances
  ;
  (when exitlabel
        (modq body `(label ,exitlabel ,v ,s)))
  (when fallthrulabel
        (modq body `(label ,fallthrulabel nil nil)))
 )
)
