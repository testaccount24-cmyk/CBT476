
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; The macro expander for the CASE and CASEQ macros.
;
; (DEFUN CASE  MACRO (X) (MXCASE X))
; (DEFUN CASEQ MACRO (X) (MXCASE X))
;

(defun mxcase (x)
 (let (((macroname thing . cases) x)
       (a (gensym)))
      (or (cdr x)
          (zerror "Missing argument" macroname))
      (or (eq macroname 'case)
          (eq macroname 'caseq)
          (zerror "Invalid caller of MXCASE" macroname))
      (or cases
          (zerror "Missing cases" macroname thing))
      `(let ((,a ,thing))
        (cond . ,(do (
                      (cases cases (cdr cases))
                      (z nil
                         (cons (case-clause a (car cases) macroname) z))
                      (previous-cond nil (caar cases))
                      )
                      ((null cases)
                       (or (eq previous-cond 't)
                           (eq previous-cond 'otherwise)
                           (push '(t nil) z))
                       (nreverse z))
                     )))))

(defun case-clause (a case macroname)
 (when (atom case)
       (zerror "Invalid case" macroname case))
 (let (((d . s) case) e1 e2 e3 m)
  (cond
   ((atom d)
    (setq e1 (case-equality d)))
   ((null (cdr d))
    (setq e1 (case-equality (car d))))
   ((null (cddr d))
    (setq e1 (case-equality (car d))
          e2 (case-equality (cadr d))))
   ((null (cdddr d))
    (setq e1 (case-equality (car d))
          e2 (case-equality (cadr d))
          e3 (case-equality (caddr d))))
   ((mapand #'symbolp d)
    (setq m 'memq))
   ((mapand #'(lambda (x) (or (symbolp x) (numberp x) (stringp x))) d)
    (setq m 'memql))
   (t
    (setq m 'memqual)))
  (cond
   ((null d)                 nil)
   ((or (eq d 't)
        (eq d 'otherwise))   `(t                          . ,s))
   ((atom d)                 `((,e1 ,a ',d)               . ,s))
   ((null (cdr d))           `((,e1 ,a ',(car d))         . ,s))
   ((null (cddr d))          `((or (,e1 ,a ',(car d))
                                   (,e2 ,a ',(cadr d)))   . ,s))
   ((null (cdddr d))         `((or (,e1 ,a ',(car d))
                                   (,e2 ,a ',(cadr d))
                                   (,e3 ,a ',(caddr d)))  . ,s))
   (t                        `((,m ,a ',d)                . ,s))
  )
 )
)

(defun case-equality (d)
 (cond
  ((symbolp d) 'eq)
  ((numberp d) 'eql)
#-Common-Lisp
  ((stringp d) 'eql)
#+Common-Lisp
  ((stringp d) 'string-equal)

  (t           'equal)))

