
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; This compiles the "CATCH" function inline.
;;;

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 04/06/88 - Support for GO tag optimization.                         *
;* 04/25/88 - Support for determination of superfluous initializations *
;*            of PROG and &AUX variables to NIL.  This involves two    *
;*            new fields in the contour that are used to detect cases  *
;*            of a variable unconditionally being set before it is     *
;*            ever referenced.  This is an extension of, and replaces, *
;*            the SETQ-initialization-hacking scheme used in ZCCPROG.  *
;*            This also requires a new P-code form, CSETNIL, and a new *
;*            code generator module, ZCGCSNIL.                         *
;* 11/01/88 - Bug fix for tags that never return.                      *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zcccatch (b v s e)
 (prog (tag                  ; Arg 1 to CATCH = a tag (should be atom)
        forms                ; Arg 2 to CATCH = form to be evaluated
        label1               ; a label to be used by the generated code
        label2               ; a label to be used by the generated code
       )

;;; Syntax check and set locals.

  (or b       (return (modq body '(error "Missing tag" catch))))
  (or (cdr b) (return (modq body '(error "Missing body" catch))))

  (desetq (tag . forms) b)

;;; Create a CATCH/THROW label.

  (setq label1 (gensym))
  (putprop label1 v 'vartarg)     ; Establish SETQ target.
  (putprop label1 s 'rettarg)     ; Establish returned-value target.
  (putprop label1 t 'catch)       ; Identify it as a CATCH/THROW label.
  (putprop label1 '\15 'register) ; THROW will return value in reg 15.

  (setq label2 (gensym))

;;; Generate P-code.

; 11/01/88 bug fix...

;;(zccevcom tag nil `(catch ,label1)e);Evaluate tag, build catch frame.
  (zccevcom tag nil `(goto ,label2) e)             ; Evaluate tag.
  (modq body `(label ,label2 nil (catch ,label1))) ; Build catch frame.
  (putprop label2 t 'referenced)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Put a contour around the forms to be evaluated within the CATCH
; ONLY if there's some need to do so.  Since you can't have
; declarations in a CATCH, no contour would normally be required,
; BUT it is needed in order to control optimization of GO's.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (let ((e (cons (zccmkcec 'catch e) e)))

   ; Forms within a CATCH are considered conditional because a THROW
   ; may occur at any point, causing execution to continue beyond the
   ; scope of the CATCH without any of the code inside being executed.

   (setf (zilcec-permcond (car e)) t)

   (zccprogn forms nil `(goto ,label1) e)
                                    ; Evaluate forms with
                                    ; implicit branch to label
                                    ; (the GOTO will be removed anyhow)

  ) ; end contour


  (modq body `(label ,label1 ,v ,s));Generate label for THROW to go to.

;;; The CATCH property on the label will tell the code generator
;;; to emit code to unstack the catch frame.

 )
)

