
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;**********************************************************************
;*                                                                    *
;* GEN-INLINE
;*                                                                    *
;**********************************************************************

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 03/22/88 - Support for inline ASSQ and MEMQ.                        *
;* 05/01/88 - More arguments to ZCGSTVRS.                              *
;* 06/06/88 - Support for VALUES.                                      *
;* 12/16/88 - Support for CHARP (CHARACTERP).                          *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(include #.(zil-source-member zilmacs)) ; ZILCO macros.

(defmacro inline-call (argcount fun)
 `(cond
   ,@(unless (zerop argcount)
             `(((null lastarg) nil)))
   (,(if (zerop argcount)
         `(zerop n)
         `(eql n ,argcount))
                               (,fun b v s com))
   (t                          (go badargs))))


(defun zcginlin (a) ;
 (prog
       (b   ; the name of the function to be invoked inline
        n   ; the number of arguments passed to the function
        v   ; an item to receive the value if SETQ is involved
        s   ; the target of the value to be set
        r   ; a return register to be used
        com ; comment identifying inline code
       )
       (desetq (b n v s) a)
       (setq com `("Inline code for " ,b))


       (setq r
        (cond

        ; Check for "extended" inline-code form

         ( (consp b) (zcginext b n v s com))

         ( (eq b 'car)        (inline-call 1 zcggicar))
         ( (eq b 'cdr)        (inline-call 1 zcggicdr))
         ( (eq b 'zcar)       (inline-call 1 zcggizcar))
         ( (eq b 'zcdr)       (inline-call 1 zcggizcdr))
         ( (eq b 'pname)      (inline-call 1 zcggipname))
         ( (eq b 'plist)      (inline-call 1 zcggiplist))
         ( (eq b 'funfun)     (inline-call 1 zcggifunfun))
         ( (eq b 'funenv)     (inline-call 1 zcggifunenv))
         ( (eq b 'rplaca)     (inline-call 2 zcggirplaca))
         ( (eq b 'rplacd)     (inline-call 2 zcggirplacd))
         ( (eq b 'setplist)   (inline-call 2 zcggistplst))
         ( (eq b 'cons)       (inline-call 2 zcggicons))
         ( (eq b 'eq)         (inline-call 2 zcggieq))
         ( (eq b 'atom)       (inline-call 1 zcggiatom))
         ( (eq b 'numberp)    (inline-call 1 zcgginump))
         ( (eq b 'integerp)   (inline-call 1 zcggiintp))
         ( (eq b 'fixp)       (inline-call 1 zcggiintp))
         ( (eq b 'floatp)     (inline-call 1 zcggiflop))
         ( (eq b 'codep)      (inline-call 1 zcggicodep))
         ( (eq b 'vecp)       (inline-call 1 zcggivecp))

         ( (memq b '(symbolp fixnump sfloatp dfloatp bigp
                     subrp closurep stringp vectorp funargp structp))
                              (inline-call 1 zcggitype))

         ( (eq b 'zerop   )   (inline-call 1 zcggizerop      ))
         ( (eq b 'minusp  )   (inline-call 1 zcggiminusp     ))
         ( (eq b 'evenp   )   (inline-call 1 zcggievenp      ))
         ( (eq b 'oddp    )   (inline-call 1 zcggioddp       ))

         ( (eq b 'consp   )   (inline-call 1 zcggiconsp      ))
         ( (eq b 'listp   )   (inline-call 1 zcggilistp      ))
         ( (eq b 'plusp   )   (inline-call 1 zcggiplusp      ))

         ( (eq b 'charp   )   (inline-call 1 zcggicharp      ))

         ( (eq b 'vref)       (inline-call 2 zcggivref))
         ( (eq b 'vset)       (inline-call 3 zcggivset))
         ( (eq b 'assq)       (inline-call 2 zcggiassq))
         ( (eq b 'memq)       (inline-call 2 zcggimemq))

         ( (eq b 'values)     (zcggivalues b n v s com))

         ( (eq b 'oblist)     (inline-call 0 zcggioblist))
         ( (eq b 'salist)     (inline-call 0 zcggisalist))
         ( (eq b 'setsalst)   (inline-call 1 zcggisetsal))
         ( (eq b 'zilunbnd)   (inline-call 0 zcggiunbound))
         ( (eq b 'rmnil)      (inline-call 0 zcggirmnil))
         ( (eq b 'pbind)      (inline-call 1 zcggipbind))
         ( (eq b 'setpbind)   (inline-call 2 zcggistpbnd))

         ( (eq b 'arg)        (inline-call 1 zcggiarg))
         ( (eq b 'setarg)     (inline-call 2 zcggisetarg))
         ( (eq b 'listify)    (inline-call 1 zcggilistify))

         ( t (zerror "No inline code generator for" b))
        ))

;
; Note that stack popping has to be done before ZCGSTTRG, so that
; references to arguments as the target are resolved correctly.
;

       (setq argbase (cdr argbase))   ; Pop argument base stack
       (setq pdmax (cdr pdmax))       ; Pop stack height

;
; R was set to the register containing the return value.
;
       (setq lastarg nil)    ; Clear "last argument" register indication
       (cond
        (r
           ; The "NIL" below assumes that no inline forms return
           ; multiple values.  If this should change, you know what
           ; to do.
           (zcgstvrs r v s nil); Store reg into SETQ variables if any.
           (zcgsttrg r s)      ; Set target to register if any.
        )
        (t
           (go nolastarg)
        )
       )

  (return nil)

badargs

  (when lastarg (zcgrels lastarg))
  (cterpri 'code)
  (princ "*** Wrong number of inline args" 'code) ; Force bad assembly
  (terpri 'code)
  (return)

nolastarg

  (terpri)
  (terpri)
  (princ "Compiler warning:")
  (terpri)
  (princ "Code did not set last argument to function ")
  (prin1 b)
  (terpri)
  (princ "Possible cause:")
  (terpri)
  (princ "Unconditional branch (call to GO or RETURN)")
  (princ "used in code to pass argument to function.")
  (terpri)
  (princ "Action taken by compiler:")
  (terpri)
  (princ "The code to perform the ")
  (prin1 b)
  (princ " operation is not generated.")
  (terpri)
  (terpri)
  (return)

))

(defmacro zcggiplist  (&rest z) `(zcggiplist/pname 'plist . ,z))
(defmacro zcggipname  (&rest z) `(zcggiplist/pname 'pname . ,z))
(defmacro zcggipbind  (&rest z) `(zcggiplist/pname 'pbind . ,z))
(defmacro zcggizcar   (&rest z) `(zcggizcar/zcdr 'zcar . ,z))
(defmacro zcggizcdr   (&rest z) `(zcggizcar/zcdr 'zcdr . ,z))
(defmacro zcggicdr    (&rest z) `(zcggizcar/zcdr 'cdr . ,z))

;
; Inline code generator for CAR
;
(defun zcggicar (b v s com &aux r)
 (setq r (zcginlin-set-reg-from lastarg s com))
 (zcgemit 2 () "CR" `(,r ",10")             com)  ; If NIL,
 (zcgemit 4 () "BE" "*+8"                   com)  ; return self.
 (zcgemit 4 ()
           "L"
           `(,r ",##CAR(," ,lastarg ")")
           com)
 r
)

;
; Inline code generator for ZCAR/ZCDR
;
(defun zcggizcar/zcdr (f b v s com &aux r)
  (zcgrels lastarg)
  (setq r (zcggtbst s))
  (zcgemit 4 ()
            "L"
            `(,r ,(if (eq f 'zcar) ",##CAR(," ",##CDR(,") ,lastarg ")")
            com)
 r
)

;
; Inline code generator for PLIST/PNAME
;
(defun zcggiplist/pname (f b v s com &aux r)
  (zcgrels lastarg)
  (setq r (zcggtbst s))
  (zcgemit 4 ()
            "L"
            `(,r ,(case f
                        (plist ",##PLIST(,")   ; )
                        (pname ",##PNAME(,")   ; )
                        (pbind ",##PVALUE(,")  ; )
                                               ; (
                  ) ,lastarg ")")
            com)
 r
)

;
; Inline code generator for RPLACA/RPLACD
;
(defmacro zcggirplaca (&rest z) `(zcggirpl t   . ,z))
(defmacro zcggirplacd (&rest z) `(zcggirpl nil . ,z))

(defun zcggirpl (carp b v s com &aux r)
  (zcgresv '\0) ; Cannot use register 0 for CAR/CDR/etc.
  (setq r (zcggtbst s))
  (zcgrels '\0)
  (zcggtarg r 1)  ; Pick up argument 1
  (zcgemit 4 ()
            "ST"
            `(,lastarg ,(if carp ",##CAR(," ",##CDR(,") ,r ")")
            com)
  (zcgrels lastarg)
 r
)

;
; Inline code generator for SETPLIST
;
(defun zcggistplst (b v s com &aux r)
  (zcgresv '\0) ; Cannot use register 0 for CAR/CDR/etc.
  (setq r (zcggtbst s))
  (zcgrels '\0)
  (zcggtarg r 1)  ; Pick up argument 1
  (zcgemit 4 ()
            "ST"
            `(,lastarg ",##PLIST(," ,r ")")
            com)
  (zcgrels lastarg)
 r
)

;
; Inline code generator for SETPBIND
;
(defun zcggistpbnd (b v s com &aux r)
  (zcgresv '\0) ; Cannot use register 0 for CAR/CDR/etc.
  (setq r (zcggtbst s))
  (zcgrels '\0)
  (zcggtarg r 1)  ; Pick up argument 1
  (zcgemit 4 ()
            "ST"
            `(,lastarg ",##PVALUE(," ,r ")")
            com)
  (zcgrels lastarg)
 r
)

;
; Inline code generator for FUNFUN/FUNENV
;
(defmacro zcggifunfun (&rest z) `(zcggifunref 0 . ,z))
(defmacro zcggifunenv (&rest z) `(zcggifunref 4 . ,z))

(defun zcggifunref (offset b v s com &aux r)
  (zcgrels lastarg)
  (setq r (zcggtbst s))
  (zcgemit 4 ()
            "L"
            `(,r ",##VECDAT+" ,offset "(," ,lastarg ")")
            com)
 r
)

;
; Inline code generator for OBLIST
;
(defun zcggioblist (b v s com &aux r)
  (setq r (zcggtbst s))
  (zcgemit 4 () "L" `(,r ",ZLCOBLST") com)
 r
)
;
; Inline code generator for SALIST
;
(defun zcggisalist (b v s com &aux r)
  (setq r (zcggtbst s))
  (zcgemit 4 () "L" `(,r ",ZLCSALST") com)
 r
)
;
; Inline code generator for ZILUNBND
;
(defun zcggiunbound (b v s com &aux r)
  (setq r (zcggtbst s))
  (zcgemit 4 () "L" `(,r ",ZLCUNBND") com)
 r
)
;
; Inline code generator for RMNIL
;
(defun zcggirmnil (b v s com &aux r)
  (setq r (zcggtbst s))
  (zcgemit 4 () "L" `(,r ",ZLCRMNIL") com)
 r
)
;
; Inline code generator for FALIST - suppressed
;
;(defun zcggifalist (b v s com &aux r)
;  (setq r (zcggtbst s))
;  (zcgemit 4 () "L" `(,r ",ZLCFALST") com)
; r
;)
;
; Inline code generator for SETSALST
;
(defun zcggisetsal (b v s com &aux r)
  (setq r lastarg)
  (zcgemit 4 () "ST" `(,r ",ZLCSALST") com)
 r
)
;
; Inline code generator for SETFALST - suppressed
;
;(defun zcggisetfal (b v s com &aux r)
;  (setq r lastarg)
;  (zcgemit 4 () "ST" `(,r ",ZLCFALST") com)
; r
;)
;
; Inline code generator for CONS
;
(defun zcggicons (b v s com &aux r)
  (zcgrels lastarg)
  (unless (zcgavail '\1)
      (warn "Register 1 not available to code generator for CONS")
      (zcgemit 0 () "!" "Register 1 not available for CONS" "ZCGINLIN")
  )
  (unless (zcgavail '\2)
      (warn "Register 2 not available to code generator for CONS")
      (zcgemit 0 () "!" "Register 2 not available for CONS" "ZCGINLIN")
  )
  (when (eq lastarg '\1)
        (setq lastarg '\2)
        (zcgemit 2 () "LR" "2,1" com)
  )
  (zcggtarg (zcgresv '\1) 1) ; Pick up argument 1
  (unless (eq lastarg (zcgresv '\2))
          (zcgemit 2 () "LR" `("2," ,lastarg) com)
  )
  (zcgemit 4 () "L" "15,ZLCCONS" com)
  (zcgemit 2 () "BALR" "14,15"   com)
  (setq r (zcgresv '\15))
  (zcgrels '\1)
  (zcgrels '\2)
 r
)
;
; Inline code generator for ASSQ
;
(defun zcggiassq (b v s com &aux r1 r2)
 (setq r2 (zcginlin-set-reg-from lastarg s com)) ; Get arg2 reg (¬ 0)
 (setq r1 (zcggtreg))   ; Get arg1 register (can be anything at all)
 (zcggtarg r1 1)        ; Pick up stacked argument 1
 (zcgiassq r1 r2 v s com)
)
;
; Inline code generator for MEMQ
;
(defun zcggimemq (b v s com &aux r1 r2)
 (setq r2 (zcginlin-set-reg-from lastarg s com)) ; Get arg2/ret (¬ 0)
 (setq r1 (zcggtreg))   ; Get arg1 register (can be anything at all)
 (zcggtarg r1 1)        ; Pick up stacked argument 1
 (zcgimemq r1 r2 v s com)
)
;
; Inline code generator for EQ
;
(defun zcggieq (b v s com &aux r)
  (setq r (zcggtreg))
  (zcggtarg r 1) ; Pick up argument 1
  (zcgemit 2 () "CR" `(,r "," ,lastarg) com)
  (zcgrels r)
  (zcgipred '(be bne) v s com)
)
;
; Inline code generator for ATOM
;
(defun zcggiatom (b v s com)
  (zcgemit 4 () "TM" `("##TYPE(" ,lastarg "),##ATOM") com)
  (zcgipred '(bo bno) v s com)
)
;
; Inline code generator for CONSP
;
(defun zcggiconsp (b v s com)
  (zcgemit 4 () "TM" `("##TYPE(" ,lastarg "),##ATOM") com)
  (zcgipred '(bz bnz) v s com)
)
;
; Inline code generator for NUMBERP
;
(defun zcgginump (b v s com)
  (zcgemit 4 () "CLI" `("##TYPE(" ,lastarg "),##FLONUM") com)
  (zcgipred '(bnl bl) v s com)
)
;
; Inline code generator for INTEGERP
;
(defun zcggiintp (b v s com)
  (zcgemit 4 () "TM" `("##TYPE(" ,lastarg "),##INT") com)
  (zcgipred '(bo bno) v s com)
)
;
; Inline code generator for FLOATP
;
(defun zcggiflop (b v s com)
  (zcgemit 4 () "TM" `("##TYPE(" ,lastarg "),##FLONUM") com)
  (zcgipred '(bo bno) v s com)
)
;
; Inline code generator for CODEP
;
(defun zcggicodep (b v s com)
  (zcgemit 4 () "TM" `("##TYPE(" ,lastarg "),##CODE") com)
  (zcgipred '(bo bno) v s com)
)
;
; Inline code generator for VECP
;
(defun zcggivecp (b v s com)
  (zcgemit 4 () "TM" `("##TYPE(" ,lastarg "),##VEC") com)
  (zcgipred '(bo bno) v s com)
)
;
; Inline code generator for miscellaneous predicates
;
(defun zcggitype (b v s com)
  (zcgemit 4 () "CLI" `("##TYPE("
                          ,lastarg
                          "),"
                          ,(cond
                            ((eq b 'symbolp)  "##SYMBOL")
                            ((eq b 'fixnump)  "##FIXNUM")
                            ((eq b 'sfloatp)  "##SFLOAT")
                            ((eq b 'dfloatp)  "##DFLOAT")
                            ((eq b 'bigp)     "##BIGNUM")
                            ((eq b 'subrp)    "##SUBR"  )
                            ((eq b 'closurep) "##CLOSUR")
                            ((eq b 'stringp)  "##STRING")
                            ((eq b 'vectorp)  "##VECTOR")
                            ((eq b 'funargp)  "##FUNARG")
                            ((eq b 'structp)  "##STRUCT")
                                                                 )) com)
  (zcgipred '(be bne) v s com)
)

;;;
;;; LEXPR predicates.  These are compiled inline with the
;;; assumption that it "is an error" for any argument to be
;;; a non-fixnum.  The code assumes that any argument is a
;;; fixnum.  The cases in this module are for a non-constant
;;; argument to ARG/SETARG, which is assumed to be a fixnum,
;;; since it "is an error" for it to be otherwise.
;;;
;;; ARG/SETARG with a constant argument is handled by ZCGINEXT.
;;;
;;; LISTIFY does not run into this problem, since the argument
;;; thereto is passed to the ZILXLFY routine as is.
;;;

(defun zcggiarg (b v s com &aux r)
 (zcgrels lastarg)
 (zcgresv '\0)
 (setq r (zcggtbst s))
 (zcgrels '\0)
 (zcgemit 4 () "L"    `(,r ",##CDR(," ,lastarg ")")        com)
 (zcgemit 4 () "SLA"  `(,r ",2")                           com)
 (zcgemit 4 () "L"    "14,0(,11)"                          com)
 (zcgemit 4 () "L"    `(,r ",0(" ,r ",14)")                com)
 r
)

(defun zcggisetarg (b v s com &aux r r1)
 (zcgresv '\0)
 (setq r1 (zcggtbst s))
 (zcgrels '\0)
 (setq r lastarg)
 (zcggtarg r1 1)  ; Get argument 1.
 (zcgrels r1)
 (zcgemit 4 () "L"    `(,r1 ",##CDR(," ,r1 ")")            com)
 (zcgemit 4 () "SLA"  `(,r1 ",2")                          com)
 (zcgemit 4 () "L"    "14,0(,11)"                          com)
 (zcgemit 4 () "ST"   `(,r ",0(" ,r1 ",14)")               com)
 r
)

(defun zcggilistify (b v s com &aux r sub)
  (zcgrels lastarg)
  (or (zcgavail '\0)
      (zerror "Register 0 not available to code generator for LISTIFY"))
  (or (zcgavail '\1)
      (zerror "Register 1 not available to code generator for LISTIFY"))
  (zcgresv '\0)
  (zcgresv '\1)
  (unless (eq lastarg '\1)
          (zcgemit 2 () "LR" `("1," ,lastarg) com)
  )

; Get subr ZILXLFY.

  (setq sub (or (assq 'zilxlfy subrs)
                (zerror "No SUBR for ZILXLFY!")))

  (zcgemit 4 () "L" `("15," ,(or (get (cdr sub) 'location)
                                 (putprop (cdr sub) (gensym) 'location))
                     ) "Get address of ZILXLFY.")
  (zcgemit 4 () "LA" `("0," ,(car argbase) "(,11)") com)
  (zcgemit 2 () "BALR" "14,15" "Call ZILXLFY to execute LISTIFY.")
  (zcgbase name nil) ; Reload additional base registers if necessary.
  (setq r (zcgresv '\15))
  (zcgrels '\0)
  (zcgrels '\1)
 r
)

;;; Vector predicates.  These are compiled inline with the
;;; assumption that it "is an error" for the argument to be
;;; a non-vector.  The code assumes that the argument is a
;;; vector.  The cases in this module are for a non-constant
;;; index argument, which is assumed to be a fixnum, since
;;; it "is an error" for it to be otherwise.
;;;
;;; Cases with a constant index are handled by ZCGINEXT.
;;;

;
; Inline code generator for VREF
;
(defun zcggivref (b v s com &aux r r1 r2)
  (zcgresv '\0)
  (setq r1 (zcggtbst s)) ; Arg 1 - pointer to vector
  (setq r2 (zcggtbst s)) ; Arg 2 - pointer to index
  (zcgrels '\0)
  (zcggtarg r1 1)  ; Pick up argument 1
  (zcgrels lastarg)
  (zcgrels r1)
  (zcgrels r2)
  (setq r (zcggtbst s)) ; Return value
  (zcgemit 4 () "L"   `(,r2 ",##CDR(," ,lastarg ")") com)
  (zcgemit 4 () "SLA" `(,r2 ",2") com)
  (zcgemit 4 () "L"   `(,r ",##VECDAT(" ,r2 "," ,r1 ")") com)
 r
)
;
; Inline code generator for VSET
;
(defun zcggivset (b v s com &aux r r1 r2)
  (setq r lastarg)
  (zcgresv '\0)
  (setq r1 (zcggtbst s)) ; Arg 1 - pointer to vector
  (setq r2 (zcggtbst s)) ; Arg 2 - pointer to index
  (zcgrels '\0)
  (zcggtarg r1 1)  ; Pick up argument 1
  (zcggtarg r2 2)  ; Pick up argument 2
  (zcgrels r1)
  (zcgrels r2)
  (zcgemit 4 () "L"   `(,r2 ",##CDR(," ,r2 ")") com)
  (zcgemit 4 () "SLA" `(,r2 ",2") com)
  (zcgemit 4 () "ST"  `(,r ",##VECDAT(" ,r2 "," ,r1 ")") com)
 r
)

;
; Inline code generator for VALUES
;
(defun zcggivalues (b n v s com &aux r)
 (cond
  ((eql n 1)                              ; If (VALUES oneform)
   (setq r lastarg)                       ; then
   (and (eq r '\15)                       ; if register is 15 and
        (zilcomvp v s)                    ; multiple values might be
        (zcgemit 2 () "LR" "15,15" com))  ; returned, suppress them.
   r
  )
  (t
   (setq r (zcgresv '\15))
   (zcgresv '\0)
   (zcgresv '\1)
   (zcgresv '\2)
   (zcgresv '\14)
   (setq lastarg nil)
   (zcgemit 4 () "LA"  `("1," ,(car argbase) "(,11)") com)
   (if (zerop n)
       (zcgemit 2 () "XR" "2,2"       com)
       (zcgemit 4 () "LA" `("2," ,n)  com)
   )
   (zcgemit 4 () "L"     "15,ZLCVALS" com)
   (zcgemit 2 () "XR"    "0,0"        com)
   (zcgemit 2 () "BALR"  "14,15"      com)

   (zcgbase name nil)  ;  Reload additional base register if necessary.

   (zcgrels '\0)
   (zcgrels '\1)
   (zcgrels '\2)
   (zcgrels '\14)
   r)))

;
; Inline code generator for CHARP
;
; (charp x) --> CLC 0(7,#reg),#SFT0 <-- YL1(##FIXNUM),AL3(0),AL3(0)
;               BE  true
;               BNE false
;

(defun zcggicharp (b v s com)
  (zcgemit 6 () "CLC" `("0(7," ,lastarg "),#SFT0") com)
  (zcgipred '(be bne) v s com)
)

;;; Numeric predicates.  These are compiled inline with the
;;; assumption that it "is an error" for the argument to be
;;; non-numeric.  The code assumes that the argument is a
;;; number.  The tests are set up to work for fixnums,bignums,
;;; single-floats and double-floats.

;;; For EVENP and ODDP, it "is an error" for the argument to
;;; be other than an integer.  Caveat compilator.

;;; The PLUSP test cannot be done in a single instruction like
;;; the others.  Therefore, it is handled in the "compound test"
;;; section below.

;
; Inline code generator for ZEROP
;
; (zerop x) --> CLC 1(7,#reg),#SFT0+1 <-- 7 bytes of hex zeroes
;               BE  true
;               BNE false
;

(defun zcggizerop (b v s com)
  (zcgemit 6 () "CLC" `("1(7," ,lastarg "),#SFT0+1") com)
  (zcgipred '(be bne) v s com)
)

;
; Inline code generator for MINUSP
;
; (minusp x) --> TM  4(#reg),X'80'
;                BO  true
;                BNO false
;

(defun zcggiminusp (b v s com)
  (zcgemit 4 () "TM" `("4(" ,lastarg "),X'80'") com)
  (zcgipred '(bo bno) v s com)
)

;
; Inline code generator for EVENP
;
; (evenp x) --> TM  7(#reg),X'01'
;               BZ  true
;               BNZ false
;

(defun zcggievenp (b v s com)
  (zcgemit 4 () "TM" `("7(" ,lastarg "),X'01'") com)
  (zcgipred '(bz bnz) v s com)
)

;
; Inline code generator for ODDP
;
; (oddp x) --> TM  7(#reg),X'01'
;              BO  true
;              BNO false
;

(defun zcggioddp (b v s com)
  (zcgemit 4 () "TM" `("7(" ,lastarg "),X'01'") com)
  (zcgipred '(bo bno) v s com)
)

;;;
;;; Compound condition testers.
;;;

;
; Inline code generator for LISTP
;
; (listp x) --> CR  #reg,10
;               BE  true
;               TM  ##TYPE(#reg),##ATOM
;               BNZ false
;          true DS  0H
;
;   or
;
; (listp x) --> CR  #reg,10
;               BE  true
;               TM  ##TYPE(#reg),##ATOM
;               BZ  true
;         false.........
;

(defun zcggilistp (b v s com)
  (zcgemit 2 () "CR" `(,lastarg ",10") com)
  (zcgipred `(bz bnz be gonotnil
                     (4 () "TM" ("##TYPE(" ,lastarg "),##ATOM") ,com))
            v s com)
)

;
; Inline code generator for PLUSP
;
; (plusp x) --> TM  4(#reg),X'80'
;               BO  false
;               CLC 1(7,#reg),#SFT0+1
;               BE  false
;          true...........
;
;   or
;
; (plusp x) --> TM  4(#reg),X'80'
;               BO  false
;               CLC 1(7,#reg),#SFT0+1
;               BNE true
;         false DS  0H
;
;

(defun zcggiplusp (b v s com)
  (zcgemit 4 () "TM" `("4(" ,lastarg "),X'80'") com)
  (zcgipred `(bne be bo gonil
                     (6 () "CLC" ("1(7," ,lastarg "),#SFT0+1") ,com))
             v s com)
)

;======================================================================

(defun zcginlin-set-reg-from (inreg s com &aux outreg)
 (cond
  ((memq inreg regs)
   (setq outreg inreg))
  (t
   (zcgrels inreg)
   (zcgresv '\0)
   (setq outreg (if s (zcggtbst s) (zcggtreg)))
   (zcgrels '\0)
   (zcgemit 2 () "LR" `(,outreg "," ,inreg) com)
  )
 )
 outreg
)

