
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; The macro expander for the XDEFVAR macro.
;;;
;;;  (XDEFVAR variable &optional value documentation)
;;;

(eval-when (eval)
 (defun xdefvar macro (x) (mxdefvar x))
)

(defmacro d-var () `(car y))
(defmacro d-val () `(cadr y))
(defmacro d-doc () `(caddr y))

(defmacro d-var-p  () `y)
(defmacro d-val-p  () `(cdr y))
(defmacro d-doc-p  () `(cddr y))
(defmacro d-junk-p () `(cdddr y))

(defun mxdefvar (x)
 (let ((y (cdr x)))
  (unless (d-var-p) (zerror "Too few arguments" x))
  (when (d-junk-p)  (zerror "Too many arguments" x))
  (mxdefvar1 (d-var) (d-val) (d-val-p) (d-doc) (d-doc-p))))

(defun mxdefvar1 (var val val? doc doc?)

  (cond
         ((not val?)
          `(zevxvar ',var))
         ((not doc?)
          `(zevxvar ',var . ,(mxdefvar-maybe-thunk val)))
         (t
          `(zevxvar ',var ,@(mxdefvar-maybe-thunk val) ,doc))))

(defun mxdefvar-maybe-thunk (x)
 (if (or (null x) (eq x t) (numberp x) (stringp x)
         (and (consp x) (eq (car x) 'quote)))
     `(nil ,x)
     `(t #'(lambda () ,x))))

