
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is a general-purpose compiler transform for arithmetic
; functions that take multiple arguments.  For example...
;
; (PLUS 1 2 3 4) --> (ZILADD (ZILADD (ZILADD 1 2) 3) 4)
;
; There are 4 arguments:  (1) the form to be transformed
;                         (2) the name of the primitive binary function
;                         (3) the identity value (if no operands)
;                         (4) NIL if it's OK to have no operands
;                             (in which case the value specified by
;                             (3) is returned); otherwise an error is
;                             signalled if no operands are specified.
;                             This arg is optional, default = NIL.
;
; This used to be MXARITH, a "macro" expander.  As such, the
; environment and context args are not (currently) passed from
; the compiler transform to this function.
;
; e.g. (deftrans plus (x) (zxarith (cdr x) 'ziladd 0))
;

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 06/20/88 - Support for multiple values.                             *
;*                                                                     *
;***********************************************************************
;


(defun zxarith (args func iden &optional needsargs)
 (cond
  ((null args)        (if needsargs
                          (zerror "Missing argument(s)" needsargs)
                          iden))
  ((null (cdr args)) `(values ,(car args))) ;Assume (arithfunc n) <=> n.
  ((null (cddr args)) `(,func . ,args))
  (t (zxarith-reverse (reverse args) func iden))))

(defun zxarith-reverse (args func iden)
 (cond
  ((null (cddr args)) `(,func ,(cadr args) ,(car args)))
  (t `(,func ,(zxarith-reverse (cdr args) func iden) ,(car args)))))

