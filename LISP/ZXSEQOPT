
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; "Sequence optimization" or "Sequential optimization"
; or "SETQ optimization"
;
;***********************************************************************
;*                                                                     *
;* Created 04/27/88.                                                   *
;*                                                                     *
;***********************************************************************
;
; This transformation function is invoked by ZILCOTRN when it is
; processing a sequential block of forms, as in the special forms
; PROGN, PROG, BLOCK, TAGBODY.
;
; Its purpose is to perform certain kinds of optimizations relating to
; expressions that occur adjacent to each other.  In particular, it
; tries to optimize things like
;
;   (SETQ A (FOO))
;   (BAR A B)
;
; to
;
;   (BAR (SETQ A (FOO)) B)
;
; in order to avoid unnecessary reloading of variables from memory when
; they're still in registers.
;
; The arguments are the same as the arguments to any "normal" compiler
; transform function, plus an additional argument which is true if
; the body contains GO tags; but the first argument is a list of
; forms without a "head", since implicit PROGN's may also be passed
; to this routine.  This function is expected to return a list of
; "headless" forms (or the original first argument) in similar fashion.
;

(defun zxseqopt (xform xenv xcon tagp)

  (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If there are no SETQ's in the body, no transformations apply
  ;; at this time.  Obviously this may change in the future, but we
  ;; do this precheck now to avoid at least some unnecessary consing.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

   ((null (assq 'setq xform))
    xform)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Otherwise loop through the body, looking for pairs of forms that
  ;; can be combined.  The combination takes the form of rebuilding
  ;; the body with the newly combined form instead of the two originals.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

   (t
    (prog (boddy z)
          (setq boddy xform)
     loop
          (cond
           ((atom boddy)
            (return (nreconc z boddy)))
           ((atom (cdr boddy))
            (push (car boddy) z))
           ((valid-setq-p (car boddy))
            (let ((x (maybe-subst-setq-for-var (car boddy)
                                               (cadr boddy)
                                               tagp)))
                 (cond
                  ((null x)
                   (push (car boddy) z))
                  (t
                   (setq boddy (cons x (cddr boddy)))
                   (go loop)))))
           (t
            (push (car boddy) z)))
          (setq boddy (cdr boddy))
          (go loop)))))

(defun valid-setq-p (x &aux var)
 (and (consp x)
      (eq (car x) 'setq)
      (eql (length x) 3)
      (symbolp (setq var (cadr x)))
      (not (eq (pbind var) var))))

(defun maybe-subst-setq-for-var (setqform form tagp)
 (let ((var (cadr setqform))
       (flen)
      )
      (cond
       ((atom form)
        ;
        ; (SETQ A foo) A  -->  (SETQ A foo)
        ;
        (if (and (not tagp) (eq form var)) setqform nil))
       ((eql (setq flen (length form)) 1)
        nil)
       ((memq (car form) '(and or return catch arg setarg listify))
        ;
        ; (SETQ A foo) (AND A bar)      --> (AND (SETQ A foo) bar)
        ; (SETQ A foo) (OR (baz A) bar) --> (OR (baz (SETQ A foo)) bar)
        ;
        (let ((x (maybe-subst-setq-for-var setqform (cadr form) nil)))
             (if (null x)
                 nil
                 `(,(car form) ,x . ,(cddr form)))))
       ((and (eq (car form) 'setq)
             (> flen 2))
        ;
        ; (SETQ A foo) (SETQ B A)       --> (SETQ B (SETQ A foo))
        ; (SETQ A foo) (SETQ B (baz A)) --> (SETQ B (baz (SETQ A foo)))
        ;
        (let ((x (maybe-subst-setq-for-var setqform (caddr form) nil)))
             (if (null x)
                 nil
                 `(,(car form) ,(cadr form) ,x . ,(cadddr form)))))
       ((and (eq (car form) 'cond)
             (consp (cadr form)))
        ;
        ; (SETQ A foo) (COND (A bar))   --> (COND ((SETQ A foo) bar))
        ;
        (let ((x (maybe-subst-setq-for-var setqform (caadr form) nil)))
             (if (null x)
                 nil
                 `(,(car form) (,x . ,(cdadr form)) . ,(cddr form)))))
       ((valid-function-name-p (car form))
        ;
        ; (SETQ A foo) (baz A)        --> (baz (SETQ A foo))
        ; (SETQ A foo) (baz (frob A)) --> (baz (frob (SETQ A foo)))
        ;
        (let ((x (maybe-subst-setq-for-var setqform (cadr form) nil)))
             (if (null x)
                 nil
                 `(,(car form) ,x . ,(cddr form)))))
       (t nil))))

(defun valid-function-name-p (form)
 (if (consp form)
     (memq (car form) '(lambda label))
     (not (getl form '(|SPECIAL FORM| macro cmacro fexpr)))))

