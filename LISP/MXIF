
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This SUBR performs the macro expansion for the "IF" macro.
;
;
; Non-Common-Lisp features:
;
; *  THEN, ELSE, ELSEIF, ENDIF keywords (actually not "keywords")
;
; *  Multiple ELSE forms (mandated by Macsyma source code)
;
; *  Missing consequent form on WHEN/UNLESS (ditto)
;

 (defun mxif (x)
  (case (car x)
   (if                   (mxif-if     (cdr x)))
   (when                 (mxif-when   (cdr x)))
   (unless               (mxif-unless (cdr x)))
   (t                    (zerror "Unknown caller of MXIF" (car x)))))

 (defun mxif-if (q)
  (cond
   ((or (null q)
        (null (cdr q)))      (zerror "Invalid IF syntax" `(if . ,q)))
   ((eq (cadr q) 'then)      `(cond . ,(mxif1 q)))
   (t                        (mx-cl-if (car q) (cadr q) (cddr q)))))

 (defun mx-cl-if (if then else)
  (cond
   ((null else)  `(cond (,if ,then)))
   (t            `(cond (,if ,then) (t . ,else)))))

 (defun mxif-when (x)
  (cond
   ((null x)       (warn "Null WHEN form")
                   nil)
   ((null (cdr x)) (warn "Missing WHEN consequent" `(when . ,x))
                   `(cond (,(car x) nil)))
   (t              `(cond (,(car x) . ,(cdr x))))))

 (defun mxif-unless (x)
  (cond
   ((null x)       (warn "Null UNLESS form")
                   nil)
   ((null (cdr x)) (warn "Missing UNLESS consequent" `(unless . ,x))
                   `(cond ((null ,(car x)) nil)))
   (t              `(cond ((null ,(car x)) . ,(cdr x))))))

 ;;;
 ;;; Q should be: (condition THEN truepath whatnext...)
 ;;;              where (whatnext...) is passed to MXIF2 and
 ;;;                    should begin with ENDIF/ELSE/ELSEIF or be null.
 ;;;

 (defun mxif1 (q)
  (cond
   ((not (and q (cdr q) (cddr q)))
    (zerror "Incomplete IF form" q))
   ((neq (cadr q) 'then)
    (zerror "Missing \"THEN\" in IF form" q))
   (t
    (let (((truepath . whatnext)
          (ifbreak (cddr q) '(then else elseif endif))))
         (cons (cons (car q) truepath) (mxif2 whatnext))))))
 ;;;
 ;;; Q may be:
 ;;; ENDIF
 ;;; ELSE xxx ENDIF
 ;;; ELSEIF xxx THEN yyy ...
 ;;; ELSE IF xxx THEN yyy ...
 ;;;
 (defun mxif2 (q)
  (cond
   ((null q)                ; If a then b
    nil)
   ((null (cdr q))          ; If a then b endif
    (cond
     ((eq (car q) 'endif) nil)
     (t   (zerror "IF form ends with token other than \"ENDIF\"" q))))
   ((eq (car q) 'elseif)    ; If a then b elseif ...
    (mxif1 (cdr q)))
   ((eq (car q) 'else)      ; If a then b else ...
    (prog (stuff)
     (and (eq (cadr q) 'if) (return (mxif1 (cddr q))))
     (setq stuff (ifbreak (cdr q) '(then else elseif endif)))
     (or (null (cdr stuff))
         (eq (cadr stuff) 'endif)
         (zerror "Invalid syntax following \"ELSE\" in IF form" q))
     (return `((t . ,(car stuff))))))
   (t
   (zerror "Missing \"ELSE\", \"ELSEIF\", or \"ENDIF\" in IF statement"))
  )
 )

(defun ifbreak (l m)
 (loop for subl on l
       until (memq (car subl) m)
       collect (car subl) into z
       finally (return (cons z subl))))

