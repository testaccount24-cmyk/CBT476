
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; The compiler transform for ASSQ, used in Macsyma.
;
; This hack makes ASSQ work for fixnums, but only when necessary.
;
; Note that for interpretive use, ASSQ is just DEFLOADed to ZMSASSQ.
; Which we used to do in the compiler as well, until we made ASSQ
; compile inline - which we're trying to take advantage of now.
;

(eval-when (eval)
 (deftrans assq zxzmsass)
)

(defun zxzmsass (xform xenv xcon)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; There must be exactly 2 arguments.  If not, skip transform.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 (cond
  ((not (eql (length xform) 3))
   xform)

  (t
   (let* ((arg1 (cadr xform))
          (arg2 (caddr xform))
          (carg1 (zilcocon arg1 nil))
          (carg2 (zilcocon arg2 nil))
         )

         (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If both arguments are constant, perform the test at compile time.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

         ((and carg1 carg2)
          (warn "Evaluating ASSQ for 2 constant args at compile time"
                xform)
          (warn "Since this is for Macsyma, ZMSASSQ is being used.")
          `',(zmsassq (car carg1) (car carg2)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If only the first argument is a constant, and it is a symbol,
  ;; then use ASSQ.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

         ((and carg1 (symbolp (car carg1)))
          xform)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If only the second argument is a constant, and it is a list of
  ;; items, each of which is either NIL or a CONS whose CAR is a
  ;; symbol, then use ASSQ.
  ;;
  ;; Note: Invalid alists will be warned about by the compiler
  ;;       itself, so don't worry your little head about them here.
  ;;       Actually, you won't get warned because we'll be calling
  ;;       ZMSASSQ instead, about which the compiler knows nothing...
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

         ((and carg2
               (do ((l (car carg2) (cdr l)))
                   ((null l) t)
                   (when (atom l) (return nil))
                   (unless (or (null (car l))
                               (and (consp (car l))
                                    (symbolp (caar l))))
                           (return nil))))
          xform)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Otherwise, transform the call to a call to ZMSASSQ.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

       (t
        (let ((ans `(zmsassq ,arg1 ,arg2)))
             (when (< (msglevel) 2)
              (format t "~&Warning: converting ~S to ~S~%" xform ans))
             ans)))))))

