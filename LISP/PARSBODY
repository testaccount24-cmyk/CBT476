
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
;***********************************************************************
;*                                                                     *
;* PARSE-BODY                                                          *
;*                                                                     *
;* This function, not yet in Common Lisp, will probably end up in CL   *
;* soon.  It is used to process the body of a LAMBDA or a macro that   *
;* expands into a LAMBDA or LAMBDA-like entity.  It returns 5 values.  *
;*                                                                     *
;* This follows the tentative specification as of the end of 1987.     *
;* See 'PROGLIB.CL1987.TEXT' for details.                              *
;*                                                                     *
;* Note:  Currently there is no macroexpansion environment, and the    *
;*        macroexpansion done by PARSE-BODY is not aware of any        *
;*        "CMACROS".  This restriction will exist until we clean up    *
;*        the macroexpansion environment situation.                    *
;*                                                                     *
;***********************************************************************
;

(defun parse-body (body                     ; a body of a LAMBDA et al.
                   &optional
                   environment              ; for macroexpansions
                   documentation-allowed-p) ; T for DEFUN, NIL for other

 (let (
       (documentation      nil)
       (decls              nil)
       (form               nil)
       (valid-expansion-p  nil)
      )

  (tagbody
   loop
    (when body
          (when (and documentation-allowed-p
;;;;;;;???;;;;;;;;;;;(null documentation)
                     (not (null (cdr body)))
                     (stringp (car body)))
                (unless documentation
                        (setq documentation (car body)))
                (setq body (cdr body))
                (go loop))
          ;
          ; assert form = nil
          ; assert valid-expansion-p = nil
          ;
          (catch nil (setq form
                           (macroexpand (car body) #| environment |#))
                     (setq valid-expansion-p t))
          (when (and (consp form) (eq (car form) 'declare))
                (dolist (x (cdr form)) (push x decls))
                (setq form nil)
                (setq valid-expansion-p nil)
                (setq body (cdr body))
                (go loop))))

  (values
          documentation     ; Documentation string (only one) or NIL
          (nreverse decls)  ; List of decl-specs without DECLARE
          body              ; body without declarations, no macroexpan's
          form              ; macroexpanded first form of body (maybe)
          valid-expansion-p ; T if form is macroexpansiosn of (car body)
  )))

(eval-when (load)
 (defload parse-body parsbody)
)
