
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is the compiler transform for SETQ.
;

;
;***********************************************************************
;*                                                                     *
;* Created 04/27/88.                                                   *
;*                                                                     *
;***********************************************************************
;

(eval-when (eval)
 (deftrans setq zxsetq)
)

(defun zxsetq (xform xenv xcon)
 (let* ((form (cdr xform))
        (flen (length form))
       )

  (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If there are no arguments, return the form NIL.
  ;;
  ;; i.e. (SETQ) --> NIL
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

   ((zerop flen)
    nil)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If there is an odd number of arguments, don't attempt to transform.
  ;; The compiler will flag the error.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

   ((oddp flen)
    form)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If the (even) number of arguments is greater than 2, break the
  ;; form up into two-argument SETQ's wrapped in a PROGN.
  ;;
  ;; This seemingly unnecessary transformation is designed to make it
  ;; easier for PROGN-processing transformations to perform certain
  ;; optimizations relating to SETQ's (the PROGN will be eliminated
  ;; by other transformations).
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

   ((> flen 2)
    `(progn . ,(do ((form form (cddr form))
                    (z nil (cons `(setq ,(car form) ,(cadr form)) z))
                   )
                   ((null form) (nreverse z)))))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If there are exactly 2 arguments, try some other possibilities.
  ;;
  ;; For example, if the variable name is a symbol, and the value
  ;; is the same (EQ) symbol, suppress the assignment.  E.g.,
  ;;
  ;; (SETQ X X) --> X
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

   ((and (symbolp (car form)) ; Must be a valid non-self-evaluating name
         (not (eq (pbind (car form)) (car form)))
         (eq (car form) (cadr form)))
    (car form))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Otherwise, no transformations apply.  Return the original form.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

   (t xform))))

