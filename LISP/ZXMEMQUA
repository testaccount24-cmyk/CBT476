
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is the compiler transform function for MEMQUAL.
;
; Created 04/12/88.
;
; Useful in Macsyma and other Maclisp-compatibility-requiring
; environments where MEMBER gets transformed to MEMQUAL in order
; to use a #'EQUAL test.
;
; This is NOT a default ZIL transformation.  Code that wants to
; use this for MEMBER must include the following:
;
; (eval-when (compile)
;  (deftrans member  zxmemqua)
;  (deftrans memqual zxmemqua) ; Not required - who codes MEMQUAL?!
; )
; (eval-when (load eval)
;  (defload member memqual)
; )
;
; Don't do (defload member memqual) at compile time, because
; DEFLOAD and DEFTRANS don't get along with each other too well.
;
; Note that for interpretive use, MEMBER is just DEFLOADed to MEMQUAL.
; Which we used to do in the compiler as well, until we made MEMBER
; 100% Common Lisp and inline.
;

(eval-when (eval)
 (deftrans member zxmemqua)
)

(defun zxmemqua (xform xenv xcon)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; There must be exactly 2 arguments.  If not, punt transform.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 (cond
  ((not (eql (length xform) 3))
   `(memqual . ,(cdr xform)))

  (t
   (let* ((arg1 (cadr xform))
          (arg2 (caddr xform))
          (carg1 (zilcocon arg1 nil))
          (carg2 (zilcocon arg2 nil))
         )

         (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If both arguments are constant, perform the test at compile time.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

         ((and carg1 carg2)
          (unless (listp (car carg2))
                  (zerror "Argument 2 to MEMBER not a list" arg2))
          (warn "Evaluating MEMBER for 2 constant args at compile time"
                xform)
 (warn "Since this is Maclisp-compatible, ZIL's MEMQUAL is being used.")
          `',(memqual (car carg1) (car carg2)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If only the first argument is a constant, and it is a symbol,
  ;; then use MEMQ.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

         ((and carg1 (symbolp (car carg1)))
          (zxmemqua-to-memq xform))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If only the second argument is a constant, and it is a list of
  ;; symbols, then use MEMQ.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

         ((and carg2
               (do ((l (car carg2) (cdr l)))
                   ((null l) t)
                   (when (atom l)
                         (warn "Arg 2 to MEMBER is improper list" arg2)
                         (return nil))
                   (unless (symbolp (car l))
                           (return nil))))
          (zxmemqua-to-memq xform))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Otherwise, transform the call to a call to MEMQUAL.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

       (t
        `(memqual ,arg1 ,arg2)))))))

(defun zxmemqua-to-memq (xform)
 (let ((ans `(memq . ,(cdr xform))))
      (when (< (msglevel) 2)
            (format t "~&Warning: converting ~S to ~S~%" xform ans))
      ans))

