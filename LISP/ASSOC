
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;---------------------- Common LISP ASSOC ----------------------------

;======================================================================

(defmacro assoc-loop (test key testnotp)
 (let ((comparison (let ((x
                           ;
                           ; OK, which is it?
                     ;;;   ;
                     ;;;   ; (1) No :key?
                     ;;;   ;
                     ;;;  `(,@test item (zcar elt))
                     ;;;   ;
                     ;;;   ; (2) :key applied instead of the CAR?
                     ;;;   ;
                     ;;;  `(,@test item ,(if key `(zcar elt)
                     ;;;                         `(,@key elt)))
                           ;
                           ; (3) :key applied to the CAR of the element?
                           ;
                          `(,@test item ,(if key `(,@key (zcar elt))
                                                 `(zcar elt)))
                           ;
                           ; I'm going with (3) - seems to be correct.
                           ;
                          ))
                        (if testnotp `(not ,x) x))))
  `(and alist
    (prog (elt)
      loop
          (cond
           ((and (setq elt (zcar alist))
                 ,comparison)
            (go true))
           ((setq alist (cdr alist))
            (go loop))
           (t
            (return nil)))
      true
         (return elt)))))

;======================================================================

 (defun assoc (item alist &key (test nil test?)
                              (test-not nil test-not?)
                              (key nil key?)  ; what does :key do???
              )

  (cond
   ((and test? test-not?)
    (zerror "Both :TEST and :TEST-NOT keywords given to ASSOC"))
   ((not (listp alist))
    (zerror "Argument 2 to ASSOC not a list" alist))
   (test-not?
    (if key?
        (assoc-loop (funcall test-not) (funcall key) t)
        (assoc-loop (funcall test-not) nil           t)))
   (test?
    (if key?
        (assoc-loop (funcall test)     (funcall key) nil)
        (assoc-loop (funcall test)     nil           nil)))
   (t
    (if key?
        (assoc-loop (eql)              (funcall key) nil)
        (assoc-loop (eql)              nil           nil)))))

