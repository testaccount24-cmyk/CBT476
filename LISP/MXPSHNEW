
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; The expander for the PUSHNEW macro,
;
;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 06/16/88 - Always generates MEMBER with :TEST keyword.              *
;*            No longer will it generate function of the ASSOC family, *
;*            which is probably more correct since such functions do   *
;*            something different if NIL is a member of the list.      *
;*                                                                     *
;***********************************************************************
;

(eval-when (eval)
 (defmacro pushnew (a b &key ((:test c)) ((:key d)))
           (mxpshnew a b c d))
)

(defun mxpshnew (item place test key
                 &aux bindings itemvar placevar itemtest kwds)

 (cond
  ((atom place)           ; PLACE should never be (QUOTE anything)!
   (setq placevar place))
  (t
   (setq placevar (gensym))
   (push `(,placevar ,place) bindings)))

 (cond
  ((or (atom item) (eq (car item) 'quote))
   (setq itemvar item))
  (t
   (setq itemvar (gensym))
   (push `(,itemvar ,item) bindings)))

 (setq itemtest
       (cond
        ((null key)
         itemvar)
        ((and (consp key)
              (memq (car key) '(quote function)))
         `(,(cadr key) ,itemvar))
        (t
         `(funcall ,key ,itemvar))))

 (when key  (setq kwds `(:key  ,key  . ,kwds)))
 (when test (setq kwds `(:test ,test . ,kwds)))

 `(let ,bindings
       (cond
        ((member ,itemtest ,placevar . ,kwds)
         ,placevar)
        (t
         (setf ,place                    ; Note - place not placevar
               (cons ,itemvar ,placevar))))))


