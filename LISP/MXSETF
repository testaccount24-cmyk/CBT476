
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

; Macro expander for the SETF macro.
;
; Note: Additional SETF forms will be added as time goes by.
;
; Note: The ZIL 1.2 "MXSETFI" module has been incorporated herein and
;       is therefore no longer in the system.
;

(eval-when (eval)
 (defun setf macro (x) (mxsetf x))
)

(defun mxsetf (form &aux (x (cdr form)))
 (cond
  ;;
  ;; Just a hack to keep the PROGN off the 2-arg SETF.  Esthetic only.
  ;;
  ((null x)          'nil)
  ((null (cdr x))    (zerror "Missing second arg to SETF" x))
  ((null (cddr x))   (mxsetf1 (car x) (cadr x)))
  (t
   (do ((args x (cddr args))
        (z nil)
       )
       ((null args) `(progn . ,(nreverse z)))
       (when (null (cdr args))
             (zerror "Odd number of args to SETF" form))
       (push (mxsetf1 (car args) (cadr args)) z)))))

(defun mxsetf1 (a b)
 (cond
      ((atom a)
                                `(setq ,a ,b))
      ((not (symbolp (car a)))
                                (zerror "Invalid SETF place form" a))
      ((get (car a) 'macro)
                                (mxsetf1 (macroexpand a) b))
      (t
         (funcall (or (get (car a) 'setfmethod) ; Look for SETF method.
                      (progn                    ; If not found,
                       (mxsetf-initialize)      ; maybe initialize SETF
                       (get (car a) 'setfmethod); methods and retry.
                      )
                      (zerror "No SETF method defined" (car a)))
                  a b))))

;
; This routine does only the following:
;
;   Defines the SETF methods of the standard SETF-able functions.
;

(defmacro mxsetf-initialized ()
 '*mxsetf-initialized*)

(defmacro set-mxsetf-initialized (x) ; Try not to use SETF here!
 '(setq *mxsetf-initialized* t))

(declare (special *mxsetf-initialized*))

(defun mxsetf-initialize ()
 (cond
  ((mxsetf-initialized)
   nil)
  (t
   (putprop 'car           #'setf-car      'setfmethod)
   (putprop 'cdr           #'setf-cdr      'setfmethod)
   (putprop 'zcar          #'setf-car      'setfmethod)
   (putprop 'zcdr          #'setf-cdr      'setfmethod)
   (putprop 'plist         #'setf-plist    'setfmethod)
   (putprop 'symbol-plist  #'setf-plist    'setfmethod)
   (putprop 'symeval       #'setf-symeval  'setfmethod)
   (putprop 'nth           #'setf-nth      'setfmethod)
   (putprop 'nthcdr        #'setf-nthcdr   'setfmethod)
   (putprop 'vref          #'setf-vref     'setfmethod)
   (putprop 'arg           #'setf-arg      'setfmethod)
   (putprop 'get           #'setf-get      'setfmethod)
   (putprop 'salist        #'setf-salist   'setfmethod)
   (putprop 'special-alist #'setf-salist   'setfmethod)
   (putprop 'caar          #'setf-caar     'setfmethod)
   (putprop 'cadr          #'setf-cadr     'setfmethod)
   (putprop 'cdar          #'setf-cdar     'setfmethod)
   (putprop 'cddr          #'setf-cddr     'setfmethod)
   (putprop 'caaar         #'setf-caaar    'setfmethod)
   (putprop 'caadr         #'setf-caadr    'setfmethod)
   (putprop 'cadar         #'setf-cadar    'setfmethod)
   (putprop 'caddr         #'setf-caddr    'setfmethod)
   (putprop 'cdaar         #'setf-cdaar    'setfmethod)
   (putprop 'cdadr         #'setf-cdadr    'setfmethod)
   (putprop 'cddar         #'setf-cddar    'setfmethod)
   (putprop 'cdddr         #'setf-cdddr    'setfmethod)
   (putprop 'cadddr        #'setf-cadddr   'setfmethod)
   (putprop 'cddddr        #'setf-cddddr   'setfmethod)
   (set-mxsetf-initialized t))))

;;;
;;; For each SETF method:
;;; arg1 is arg1 to SETF, i.e. the form whose CAR is the place function
;;; arg2 is arg2 to SETF, i.e. the value to insert in the place.
;;;
;;; Example:  (SETF (GET 'FOO 'BAR) 'BAZ))
;;;           calls SETF-CAR with
;;;                              arg1: (GET 'FOO 'BAR)
;;;                              arg2: BAZ
;;;

(defun setf-car (a b)
 (if (or (null (cdr a)) (cddr a))
     (zerror "Invalid SETF CAR syntax" a)
     `(zcar (rplaca ,(cadr a) ,b))   ; Return B but evaluate it last.
 ))

(defun setf-cdr (a b)
 (if (or (null (cdr a)) (cddr a))
     (zerror "Invalid SETF CDR syntax" a)
     `(zcdr (rplacd ,(cadr a) ,b))   ; Return B but evaluate it last.
 ))

(defun setf-plist (a b)
 (if (or (null (cdr a)) (cddr a))
     (zerror "Invalid SETF SYMBOL-PLIST syntax" a)
     `(symbol-plist (setplist ,(cadr a) ,b))
 ))

(defun setf-symeval (a b)
 (if (or (null (cdr a)) (cddr a))
     (zerror "Invalid SETF SYMEVAL syntax" a)
     `(set ,(cadr a) ,b)
 ))

(defun setf-salist (a b)
 (if (cdr a)
     (zerror "Invalid SETF SPECIAL-ALIST syntax" a)
     `(setsalst ,b)
 ))

(defun setf-nth (a b)
 (if (or (null (cdr a)) (null (cddr a)) (cdddr a))
     (zerror "Invalid SETF NTH syntax" a)
     `(zcar (rplaca (nthcdr ,(cadr a) ,(caddr a)) ,b))
 ))

(defun setf-nthcdr (a b)
 (if (or (null (cdr a)) (null (cddr a)) (cdddr a))
     (zerror "Invalid SETF NTHCDR syntax" a)
;
; else...
;
; Expansion varies depending on whether a constant fixnum is specified.
; Furthermore, the special case of (NTHCDR 0 xxx) must be taken into
; account.  If (SETF (NTHCDR N L) C) is specified where N is equal to
; zero, either at macro expansion time (i.e. a constant) or at run time,
; then we let it proceed at run time, since it will generate a call to
; NTHCDR with the argument -1, which signals an error.  We can check
; the value of the index at macroexpansion time if it is an integer.
;
     (let ((n (macroexpand (cadr a)))
           (l (caddr a))
           (g))
          (if (integerp n)
              (if (not (plusp n))
                  (zerror "Invalid NTHCDR index found by SETF expansion"
                         n)
                  `(cdr (rplacd (nthcdr ,(sub1 n) ,l) ,b))
              )
              `(cdr (rplacd (nthcdr (sub1 ,n) ,l) ,b))))))


(defun setf-vref (a b)
 (if (or (null (cdr a)) (null (cddr a)) (cdddr a))
     (zerror "Invalid SETF VREF syntax" a)
     `(vset ,(cadr a) ,(caddr a) ,b)
 ))

(defun setf-arg (a b)
 (if (or (null (cdr a)) (cddr a))
     (zerror "Invalid SETF ARG syntax" a)
     `(setarg ,(cadr a) ,b)
 ))

(defun setf-get (a b)
 (if (or (null (cdr a)) (null (cddr a)) (cddddr a))
  then
     (zerror "Invalid SETF GET syntax" a)
  else
     (let ((a1 (macroexpand (cadr a)))
           (a2 (macroexpand (caddr a)))
           (a3 (macroexpand (cadddr a))) ; Arg 3 to GET, default NIL
           (b1 (macroexpand b)))
      (if   (and (null b) (null a3))
       then
            `(progn (remprop ,a1 ,a2) nil)
       else
       if   (or (setf-constantp b1) (setf-constantp a2))
       then
            `(putprop ,a1 ,b1 ,a2)
       else
       if   (and (setf-simplep b1) (setf-simplep a2))
       then
            `(putprop ,a1 ,b1 ,a2)
       else                                  ; e.g. (SETF (GET S I) B)...
            (let ((s (gensym))
                  (i (gensym)))
            `(let ((,s ,a1)                  ; must evaluate S first
                   (,i ,a2))                 ; must evaluate I next
                   (putprop ,s ,b ,i)))))))  ; and B last

(defun setf-constantp (x) ; X is already macroexpanded.
 (or (null x)
     (eq x t)
     (if (atom x) (not (symbolp x)) (eq (car x) 'quote))))

(defun setf-simplep (x)   ; X is already macroexpanded.
 (or (symbolp x)
     (and (consp x)
          (memq (car x) '(car cdr zcar zcdr))
          (cdr x)
          (setf-simplep (macroexpand (cadr x))))))

(defun setf-caar (a b)
 (setf-car `(car (car . ,(cdr a))) b)
)
(defun setf-cadr (a b)
 (setf-car `(car (cdr . ,(cdr a))) b)
)
(defun setf-cdar (a b)
 (setf-cdr `(cdr (car . ,(cdr a))) b)
)
(defun setf-cddr (a b)
 (setf-cdr `(cdr (cdr . ,(cdr a))) b)
)
(defun setf-caaar (a b)
 (setf-car `(car (caar . ,(cdr a))) b)
)
(defun setf-caadr (a b)
 (setf-car `(car (cadr . ,(cdr a))) b)
)
(defun setf-cadar (a b)
 (setf-car `(car (cdar . ,(cdr a))) b)
)
(defun setf-caddr (a b)
 (setf-car `(car (cddr . ,(cdr a))) b)
)
(defun setf-cdaar (a b)
 (setf-cdr `(cdr (caar . ,(cdr a))) b)
)
(defun setf-cdadr (a b)
 (setf-cdr `(cdr (cadr . ,(cdr a))) b)
)
(defun setf-cddar (a b)
 (setf-cdr `(cdr (cdar . ,(cdr a))) b)
)
(defun setf-cdddr (a b)
 (setf-cdr `(cdr (cddr . ,(cdr a))) b)
)
(defun setf-cadddr (a b)
 (setf-car `(car (cdddr . ,(cdr a))) b)
)
(defun setf-cddddr (a b)
 (setf-cdr `(cdr (cdddr . ,(cdr a))) b)
)
