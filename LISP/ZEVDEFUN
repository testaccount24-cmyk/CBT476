
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

; ZEVDEFUN - DEFUN function definer
;
; This function is invoked by EVAL to process the DEFUN special form.
; Parameter is the list of operands.  E.G.:
;
; (DEFUN FOO (X) (PRINT X) (CONS X NIL))
;
; results in ZEVDEFUN being invoked with an argument of the list:
;
; (FOO (X) (PRINT X) (CONS X NIL))
;

(defload car zcar)

(declare (special *loadfile*))

(defun zevdefun (r toplevelp)
 (unless toplevelp
         (zerror "Not at top level" 'defun))
 (prog (f            ; Function name - non-NIL symbol or (name type).
        e            ; Expression following function name.
        a            ; Argument list.
        b            ; Function body.
        z            ; Temp to hold body while we figure out what to do.
       )
  (or r (go error))
  (or (cdr r) (go error))
  (desetq (f e . z) r)
  (or f (zerror "NIL is an illegal function name"))
  (if    (and (symbolp f) (memq e '(expr fexpr macro)))
   then
         (or z (go error))
         (desetq (a . b) z) ; Argument list and function body.
   else
         (setq a e         ; Argument list.
               b z         ; Function body.
               e 'expr)    ; Default function type.
   endif
  )
  (or b (zerror "Missing DEFUN function body" f))
  ;;
  ;; Check function type and verify argument list if required,
  ;; then delete conflicting function types.
  ;;
  ;; If an FEXPR with one argument was specified, then give it
  ;; a second arg of NIL.  This is OK because binding NIL to
  ;; something has no effect, NIL being handled specially by the
  ;; evaluator.  I like this better than GENSYM because it
  ;; preserves predictable behavior of GENSYM in the interpreter.
  ;;
  (cond
   ((consp f)             ; (defun (foo bar) ... )
    (or  (cdr f)   (zerror "Invalid function name" f))
    (and (cddr f)  (zerror "Invalid function name" f))
    (setq e (cadr f)      ; Property to be assigned
          f (car f))      ; The actual function name
    (go skip-loadfile)    ; Don't record LOADFILE.
   )
   ((not (symbolp f))     ; If not a list, must be a symbol.
    (zerror "Invalid function name" f))
   ;
   ; Otherwise check standard types...
   ;
   ((eq e 'expr)          ; EXPR: Arg list is used as is.
    (remprop f 'macro)    ;       Delete MACRO def if any.
    (remprop f 'subr)     ;       Delete SUBR def if any.
   )
   ((eq e 'fexpr)         ; FEXPR: Must be 2 arguments.
    (if  (atom a)         ;        Null argument list is invalid.
     then
         (zerror "Invalid argument list for FEXPR" a)
     else
     if  (null (cdr a))   ;        If 1 argument, make 2-arg list.
     then
         (setq a (list (car a) nil))
     else
     if  (or (atom (cdr a)) ;      More than 2 arguments invalid
             (cddr a))
     then
         (zerror "Invalid argument list for FEXPR" a)
     endif                ;        If 2 arguments, leave as is.
    )
    (remprop f 'macro)    ;       Delete MACRO def if any.
    (remprop f 'expr)     ;       Delete EXPR def if any.
    (remprop f 'subr)     ;       Delete SUBR def if any.
   )
   ((eq e 'macro)         ; MACRO: It is erroneous if...
    (if                             ;  a null or atomic arglist, or
         (or (atom a)               ;  first arg is non-NIL and there's
             (and (car a) (cdr a))) ;  more than 1 argument,
     then                           ;  but OK if 1st arg is NIL.
         (zerror "Invalid argument list for MACRO" a)
     endif                ;        Otherwise, leave as is.
    )
    (remprop f 'subr)     ;       Delete SUBR def if any.
   )
   (t (zerror "Unknown DEFUN function type" e))
  )
  ;
  ; Record where the function came from.
  ;
  (if *loadfile*
      (putprop f *loadfile* 'loadfile)
      (remprop f 'loadfile))

 skip-loadfile

  ;
  ; Store the function definition.  We do this last to insure that
  ; the function property ends up at the beginning of the PLIST.
  ;
  (putprop f `(lambda ,a . ,b) e)
  (return f)
 error
  (zerror "Too few arguments - DEFUN")
 )
)
