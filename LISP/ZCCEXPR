
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; "COMPILE-EXPR"
;;;
;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 04/10/88 - Removed PROGVARS, GOLIST and PROGEXIT.                   *
;* 06/23/88 - Removed PALIST (no more PROG or RETURN).                 *
;*                                                                     *
;***********************************************************************
;

;;
;; ALONE = T:    function (toplevel = no)
;;
;; ALONE = NIL:  program  (toplevel = yes)
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zccexpr (f          ; F is the name of the function
                l          ; L is a LAMBDA-expression
                           ; (CAR L) is "LAMBDA"
                           ; (CADR L) is the list of argument variables
                           ; (CDDR L) is the function body
                main       ; if not NIL, this is a main-line program
                alone      ; if not NIL, this is a standalone function
                e          ; environment (list of contours)
               )

 (cond
  ((eq (car l) 'lambda)
   ;
   ; If the function identified by F is to be "segmented", as requested
   ; by a (DECLARE (SEGMENT ...)), then compile a segmented version of
   ; the function body.
   ;
   (let ((segcount (and f (get f 'segment))))
        (when segcount
              (let ((newbody (zilcoseg f l segcount)))
                   (when debug
                         (cterpri)
                         (princ "Segmented version of function ")
                         (prin1 f)
                         (princ " being compiled:")
                         (terpri)
                         (terpri)
                         (pprint newbody)
                         (terpri)
                         (terpri))
                   (setq l newbody))))
   (compile-body (or f (gensym)) (cadr l) (cddr l) e))
  ((eq (car l) 'label)
   (zccexpr (cadr l) (caddr l) main alone e))
  (t
   (princ "Function name not a symbol, LABEL- or LAMBDA-expression - ")
   (print l)
   nil
  )
 )
)

;;; This function returns all the pseudocode for a function body.
;;; Note that all objects used by the compiler are local to here.

(defun compile-body (f v b e) ; Compile the body of the function
 (prog
  (thing     ; the object to be returned as the result of the compile
   body      ; the main body of the procedure
   name      ; the name of the procedure currently being compiled
   tparms    ; parameter arguments used by the program
   special-unbounds ; unbound special variables referenced by the fn
   fluid-unbounds   ; unbound lexical variables referenced by the fn
   lists     ; constant lists referenced by the program
   atoms     ; constant atoms referenced by the program
   subrs     ; external subroutines invoked by the program
   procs     ; internal LAMBDA-procedures compiled along with the rest
   tailrecur ; a list of local variables active during tail recursion
  )

  ;
  ; Eventually, push new "defun" contour onto "e" when doing this.
  ;

  (setq body      (list nil)
        name      (zilcosym f 'subrs)  ; Add name to SUBRS list.
        tparms    (get f 'parms)       ; NIL if not a DEFUN function.
        special-unbounds  (list nil)
        fluid-unbounds    (list nil)
        lists     (list nil)
        atoms     (list nil)
        subrs     (list nil)
        procs     (list nil)
        tailrecur nil
  )
;
; If PARMS not set, then set all arglist-relevant properties now.
;
  (or tparms
   (if  (zilcoarg f v)                  ; Process the argument list.
    then
        (setq tparms (get f 'parms))    ; Get list of function args.
    else
        (modq body `(error "Invalid LAMBDA argument list" ,f))
        (go compile-return)
    endif
   )
  )

  (when (> (get (car name) 'maxargs 0) 255)
        (modq body `(error "More than 255 required + optional args"
                           ,(car name))))

  (modq body `(begin ,name ,tparms ,main ,alone))

;
; Identify who owns these variables.
;

  (dolist (x tparms)
          (putprop (cdr x) name 'owner))

;
; Bind each variable on the arglist.
;

  (setq b (zcclama f nil b e))

;
; Evaluate forms in the body as an implicit PROGN.
;

  (zccprogn b nil t e)  ; Note "T" means generate the return value.

  (modq body `(end ,name ,tparms ,main ,alone))

 compile-return

;
; In case any non-local lexical bindings were uncovered, add the atoms
; for those bindings the "right" way by calling ZILCOADD on them.
;
  (dolist (x (get (car name) 'newatoms))
          (zilcoadd x nil))

  (return                ; Build property list to hang off the new thing
   (setplist (setq thing (gensym))
             (list
                   'body              body
                   'name              name
                   'parms             tparms
                   'special-unbounds  special-unbounds
                   'fluid-unbounds    fluid-unbounds
                   'atoms             atoms
                   'lists             lists
                   'subrs             subrs
                   'procs             procs
                   'tailrecur         tailrecur
              )))))

; Special declarations moved to ZILMACS.

