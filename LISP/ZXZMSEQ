
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; The compiler transform for EQ, used in Macsyma.
;
; This hack makes EQ work for fixnums, but only when necessary.
;
; The following is done during the macro loading phase of the compiler:
;
;(eval-when (compile eval)
; (defvar *zil-eq-nohack* nil
;         "If NIL, EQ is converted to ZMSEQ where necessary to support
;          EQness of fixnums.  If T, EQ stays EQ for efficiency."
; )
;)

(declare (special *zil-eq-nohack*))

(defun zxzmseq (form xenv xcon)
 (unless (eql (length form) 3)
         (zerror "Wrong number of arguments" form))
 (let ((arg1 (second form))
       (arg2 (third form)))
      (cond
       ;
       ; (EQ (TYPEP X) 'FIXNUM) --> (TYPEP X 'FIXNUM)
       ;
       ((and (consp arg1)
             (eql (length arg1) 2)
             (eq (car arg1) 'typep)
             (consp arg1)
             (eq (car arg2) 'quote))
        `(typep ,(cadr arg1) ,arg2))
       ;
       ;
       ;
       ((or *zil-eq-nohack*
            (eq-arg-is-not-a-number arg1)
            (eq-arg-is-not-a-number arg2)
            (eq-ok-for-macsyma arg1 arg2))
        form)
       (t
        (let ((ans `(zmseq ,arg1 ,arg2)))
             (when (< (msglevel) 2)
              (format t "~&Warning: converting ~S to ~S~%" form ans))
             ans)))))

(defun eq-arg-is-not-a-number (x)
 (cond
  ((null x) t)
  ((eq x t) t)
  ((symbolp x)
   (if (eq (pbind x) x) t nil))  ; Only if self-evaluating (keywords)
  ((numberp x) nil)
  ((atom x) t)
  ((and (eq (car x) 'quote)
        (listp (cdr x)))
   (not (numberp (cadr x))))
  (t nil)
 )
)

(defun eq-ok-for-macsyma (arg1 arg2 &key (flipargs t))
 (or (eq arg1 'munbound)
     (and (symbolp arg1)
          (equal arg2 `(symeval ,arg1)))
     (and flipargs (eq-ok-for-macsyma arg2 arg1 :flipargs nil))))

