
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;; Note: MACSYMA uses a function COPYSYMBOL.  There will have to be
;;;       a DEFLOAD of COPYSYMBOL to COPYSYM in the Macsyma
;;;       compatibility macro file.

(defun copy-symbol (a b)
 (unless (symbolp a) (zerror "Arg 1 to COPY-SYMBOL not a symbol" a))
 (let ((z (make-symbol a)))
      (when b
            (setf (symbol-plist z) (copy-list (symbol-plist a)))
      ;;;;;
      ;;;;; Implement the following line for deep binding.
      ;;;;;
            (if (boundp a)
                (set z (symeval a))
                ;; else leave z unbound
            )
      ;;;;;
      ;;;;; Implement the following line for current deep binding.
      ;;;;;
            (setpbind z (pbind a))
      ;;;;;
      ;;;;; Implement the following line for shallow binding.
      ;;;;;
      ;;;;; (setf (symbol-value z) (symbol-value a))
      ;;;;;
      ;;;;; Copy the function definition... this code stinks, I know.
      ;;;;;
            (let (f)
                 (cond
                  ((setq f (get a 'subr))
                   (setf (get z 'subr) f))
                  ((setq f (get a 'expr))
                   (setf (get z 'expr) f))
                  ((setq f (get a 'macro))
                   (setf (get z 'macro) f))
                  ((setq f (get a 'fexpr))
                   (setf (get z 'fexpr) f))
                 ))
      ;;;;;
      ;;;;; Implement the following line only if using function cells.
      ;;;;;
      ;;;;; (setf (symbol-function z) (symbol-function a))
      )
      z)
)

(defload copy-symbol copysym)

;
; The following macros will not be necessary with a full Common Lisp.
;

(defmacro copy-list   (x) `(append ,x nil))
(defmacro make-symbol (x) `(make-atom (symbol-name ,x) nil nil))

