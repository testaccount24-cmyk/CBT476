
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

(eval-when (eval)
 (defun desetq macro (x) (mxdesetq x))
)

;
; The macro expander for the DESETQ macro.
;
; This version of DESETQ does not do argument checking or use &-forms;
; it provides basic destructuring capability only.
;
; Changes from ZIL 1.2:
;
; DESETQ takes any even number of arguments, and returns the last.
;
; Note: This macro expands into calls to CAR and CDR.  If you want
;       to expand into ZCAR for efficiency, you must include
;       (DEFLOAD CAR ZCAR) in your source.  This decision was made
;       because it is very likely that someone will wish to
;       destructure an argument into pieces that happens to be NIL.
;
; Some day, you will be able to do...
;
; (locally (defload car zcar)
;          (desetq ...))
;
; but you'll have to wait until ZIL is a full Common LISP for that.
;

;;;
;;; Sample macroexpansion:
;;;
;;; (DESETQ (A (B C) D . E) (FOO BAR)) -->
;;;
;;;  (LET ((G00001 (FOO BAR)))
;;;        (SETQ A      (CAR G00001)
;;;              B (CAR (CAR (CDR G00001)))
;;;              C (CDR (CAR (CDR G00001)))
;;;              D      (CAR (CDR (CDR G00001)))
;;;              E      (CDR (CDR (CDR G00001)))))
;;;

(defun mxdesetq (x)
 (do ((args (cdr x) (cddr args))
      (z nil)
     )
     ((null args) `(progn . ,(nreverse z)))
     (when (null (cdr args))
           (zerror "Odd number of args to DESETQ" x))
     (push (mxdesetq1 (car args) (cadr args)) z)))

(defun mxdesetq1 (a b)
 (cond
  ((atom a)                `(setq ,a ,b))
  ((simple-expression-p b) `(progn ,(destructuring-setq a b) ,b))
  (t
   (let ((x (gensym)))
        `(let ((,x ,b))
              ,(destructuring-setq a x)
              ,x)))))

(defmacro destructuring-setq (a b)
 ``(setq . ,(nreverse (expand-destructuring ,a ,b))))

(defun expand-destructuring (a b)
 (prog (z)
  loop (unless a (return z))
       (when (atom a)
             (push a z)
             (push b z)
             (return z))
       (setq z (nconc (expand-destructuring (car a) `(car ,b)) z)
             a (cdr a)
             b `(cdr ,b))
       (go loop)))

(defun simple-expression-p (a)
 (let ((a (macroexpand a)))
      (or (atom a)
          (eq (car a) 'quote)
          (and (memq (car a) '(car cdr zcar zcdr))
               (consp (cdr a))
               (simple-expression-p (cadr a))))))


