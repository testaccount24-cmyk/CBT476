
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;---------------------- Common LISP MEMBER ----------------------------

;======================================================================

(defmacro member-loop (test key testnotp)
 (let ((comparison (let ((x `(,@test item ,(if key `(,@key (zcar list))
                                                   `(zcar list)))))
                        (if testnotp `(not ,x) x))))
      `(and list
            (prog ()
              loop
                  (cond
                   (,comparison
                    (go true))
                   ((setq list (cdr list))
                    (go loop)))
              true
                  (return list)))))

;======================================================================

 (defun member (item list &key (test nil test?)
                               (test-not nil test-not?)
                               (key nil key?))
  (cond
   ((and test? test-not?)
    (zerror "Both :TEST and :TEST-NOT keywords given to MEMBER"))
   ((not (listp list))
    (zerror "Argument 2 to MEMBER not a list" list))
   (test-not?
    (if key?
        (member-loop (funcall test-not) (funcall key) t)
        (member-loop (funcall test-not) nil           t)))
   (test?
    (if key?
        (member-loop (funcall test)     (funcall key) nil)
        (member-loop (funcall test)     nil           nil)))
   (t
    (if key?
        (member-loop (eql)              (funcall key) nil)
        (member-loop (eql)              nil           nil)))))

