
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; This compiles the "GO" function.
;;;

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 04/06/88 - Support for GO tag optimization.                         *
;*            Now calls ZCCVALGO, which was broken out in order to     *
;*            enable ZCCCOND to check GO's as well.                    *
;* 04/25/88 - Support for determination of superfluous initializations *
;*            of PROG and &AUX variables to NIL.  This involves two    *
;*            new fields in the contour that are used to detect cases  *
;*            of a variable unconditionally being set before it is     *
;*            ever referenced.  This is an extension of, and replaces, *
;*            the SETQ-initialization-hacking scheme used in ZCCPROG.  *
;*            This also requires a new P-code form, CSETNIL, and a new *
;*            code generator module, ZCGCSNIL.                         *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zccgo (b e) ; B = body, E = environment
 (let ((p (zccvalgo b e))) ; Get the pair that identifies the GO tag
      (when p
            (modq body `(label nil nil (goto ,(cdr p))))
            ;
            ; All contours up to AND INCLUDING the contour associated
            ; with the GO tag are marked permanently conditional.
            ;
            (loop with c = (get (cdr p) 'contour)
                  for cec in e
                  do (setf (zilcec-permcond cec) t)
                  until (eq cec c)))))      ; Note placement of UNTIL!!!

