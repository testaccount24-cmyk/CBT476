
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; Note:  This is identical to SOME.  Should take advantage of this.
;;;

 ;;
 ;; Insure that built-in inline MAPOR definition is saved.
 ;;

(eval-when (compile)
 (deftrans !mapor (x y z) (zxmap (cons 'mapor (cdr x)) y z))
)
(eval-when (eval)
 (setf (get '!mapor 'subr) (zilload 'mapor))
)

(defun mapor1 (fun lis) ; Case of 1 list.
 (cond
  ((null lis) nil)
  ((atom lis) (zerror "Argument 2 to MAPOR not a list" lis))
  (t
   (prog (v)
    loop
         (return (or (funcall fun (car lis))
                     (when (setq lis (cdr lis))
                           (go loop))))))))

;;; loop (unless (setq v (funcall fun (car lis)))
;;;              (when (setq lis (cdr lis))
;;;                    (go loop))
;;;              (return nil))
;;;      (return v)))))

(defun mapor (fun &rest lists) ; Case of multiple lists.
 (cond
  ((null lists)       nil)
  ((null (cdr lists)) (mapor1 fun (car lists)))
  (t
   (dolist (list lists)
           (unless (listp list)
                   (zerror "Non-list passed to MAPOR" list)))
   (prog (v)
    loop (when (!mapor #'null lists) (return nil))
         (when (setq v (zilapply fun (mapcar #'car lists)))
               (return v))
         (setq lists (mapcar #'cdr lists))
         (go loop)))))

(defload car zcar)

;(defun zmapor1 (fn x a) ; Case of 1 list.
; (prog (v w z)
;  loop (or x (return v))
;       (setq v (apply fn (cons (car x) nil) a))
;       (and v (return v))
;       (setq x (cdr x))
;       (go loop)))

