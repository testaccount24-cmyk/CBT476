
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is the compiler transform for all ZIL functions that always
; return the same value for constant arguments, and that have no
; other transform properties.
;
; These include but are not limited to arithmetic functions.
;
; The primary purpose of this transform is constant folding -
; evaluation of operations on constants at compile time.
;
; Predicates are handled here too.  But equality predicates cannot be
; included, since the result of an equality predicate is not always
; guaranteed to be meaningful - the result of an equality test at
; compile time may not be the result it will always return for two
; such objects.
;
; LOG is not handled by this transform - see ZXLOG.
;
; ADD1 (1+) and SUB1 (1-) are not handled by this transform -
; they should have their own.
;
; Hey, NTH and NTHCDR should have their own transforms too!
;
; Transforms for ZIFxxx aren't necessary, since they will never occur
; in actual code.
;
; Accessors (CAR, CDR, etc.) aren't included here - see ZXCARCDR.
;
; KEYWORDP isn't here, because eventually it will check the package
; cell of the symbol, which can conceivably be altered.  Right now
; it checks the print name, which is unalterable, but this is a
; temporary hack for a packageless ZIL.
;
; Functions that return new vectors cannot be included here, since
; ZIL can't compile inline constant vectors.  Anyhow, the same
; principle applies to vectors as to lists.
;
; Functions that return new lists are generally not included here,
; since lists should be consed afresh whenever possible.
;
; The same should apply to strings, but not now, since ZIL doesn't
; have mutable strings yet.  So we can transform string-creators.
;
;
;
;
;

(eval-when (eval)
 (mapc #'(lambda (x) (putprop x 'zxarfun 'compiler-transform))
       '(abs
         alphacp
         alpha-char-p
         atom
         bigp
         char
         closurep
         codep
         consp
         dfloatp
         digitcp
         digit-char-p
         ebcdic
         evenp
         fixnump
         fixp
         float
         floatp
         funargp
         getchar
         getcharn
         greaterp
         haipart   ; at least until it has its own transform
         haulong
         index
         string-index
         integerp
         land      ; at least until it has its own transform
         length
         lessp
         listp
         llkeywdp  ; yes, checks print name only
         llvars    ; yes, syntactic-surface-scanner
         logbitp   ; at least until it has its own transform
         logcount
         lognot
         logtest   ; at least until it has its own transform
         lor       ; at least until it has its own transform
         lxor      ; at least until it has its own transform
         max2
         minus
         minusp
         min2
         mkbignum
         make-bignum
         mkfixnum
         make-fixnum
         mkflonum
         make-flonum
         not
         null
         numberp
         oddp
         plusp
         sfloatp
         slength
         string-length
         stringp
         structp
         subrp
         symbolp
         unebcdic
         vecp
         vectorp
         verify
         string-verify
         vlength
         zerop
         zilbool
         zilflat
         zilintln
         integer-length

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;        sxhash            ; No, what if hashing algorithm changes?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; The following create strings.  They probably shouldn't be
;;; constant-folded, since some day strings will be mutable.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; chardown char-downcase charup char-upcase downcase string-downcase
; sappend string-append sappendl string-appendl scapital
; string-capitalize sltrim string-left-trim sremove string-remove
; sreverse string-reverse srtrim string-right-trim strim string-trim
; substr string-substr tostring upcase string-upcase
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        ))
)

(defun zxarfun (xform xenv xcon)

 (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If all arguments are constant, perform the test at compile time.
  ;;
  ;; Note: If errors (like wrong # of arguments) occur, the compiler
  ;;       transform mechanism will trap the error and suppress
  ;;       the transformation.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((every #'(lambda (x) (zilcocon x nil)) (cdr xform))
           (warn "Evaluating at compile time" xform)
           `',(eval xform))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Otherwise, no transformations apply.  Return the original form.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          (t xform)))

