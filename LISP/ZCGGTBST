
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; "GET-BEST-REG"
;

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 03/28/88 - Support for better register allocation for ASSQ and CAR. *
;* 06/06/88 - Support for VALUES.                                      *
;* 06/10/88 - Support MULTIPLE-VALUE-LIST, MULTIPLE-VALUE-BIND, THROW. *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmacro arg-number (x) `(cadr ,x))

(defun zcggtbst (s &aux (nextpcode       (car restofit))
                        (inline-function (second nextpcode))
                        (valuesp (and (eq inline-function 'values)
                                      (not (eql (third nextpcode) 1)))))
 (let (
       (last-arg-for-inline-p    (and (consp s)
                                      (eq (car s) 'arg)
                                      (eq (car nextpcode) 'inline)
                                      (not valuesp)))
       (zdefp                    (and (consp s)
                                      (eq (car s) 'arg)
                                      (consp (arg-number s))
                                      (eq (cadr (arg-number s)) zdef)))
       (r)
      )

  (when debug
   (putdata nextpcode
            inline-function
            valuesp
            last-arg-for-inline-p
            zdefp
            lastarg))

  (when last-arg-for-inline-p
        (zcgresv '\0)
        (case inline-function
              ((cons)
               (or (eql (arg-number s) 1) (zcgresv '\1))
               (or (eql (arg-number s) 2) (zcgresv '\2)))
        ))
  (setq r (cond
           (zdefp
            (zcgresv '\1))
           ((and
             (or
              (and last-arg-for-inline-p
                   (or
                       (and (eq inline-function 'car)
                            (eq (probably-use15p (fifth nextpcode)) t))
                       (and (eq inline-function 'values)
                            (eq (probably-use15p (fifth nextpcode)) t))
                       (eq inline-function 'assq)
                       (and (consp inline-function)
                            (or (eq (car inline-function) 'rplaca)
                                (eq (car inline-function) 'rplacd))
                            (eq (probably-use15p (fifth nextpcode)) t))
                   )
              )
              (eq (probably-use15p s) t))
             (zcgavail '\15))
            (zcgresv '\15))
           (t
            (zcggtreg))))
  (when last-arg-for-inline-p
        (when (eq lastarg 'values)
              (setq lastarg r))
        (or lastarg (setq lastarg r))
        (zcgrels '\0)
        (case inline-function
              ((cons)
               (or (eql (arg-number s) 1) (zcgrels '\1))
               (or (eql (arg-number s) 2) (zcgrels '\2)))
        ))
;;(when valuesp (setq lastarg 'values))
  (and valuesp (null lastarg) (setq lastarg 'values))
  r))

;
; This function is used to determine whether it's a good idea to try
; to use register 15 (the return value register) to hold a value.
;

(defun probably-use15p (s) ; the probable value target of a target
 (case (if (consp s) (car s))
        ((goto gonotnil gonil)
         (probably-use15p (get (cadr s) 'rettarg)))
        ((mvlist mvbind)
         t)
        ((throw)
         (eq (cadr s) 'form))
       (otherwise s)))

