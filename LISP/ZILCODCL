
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
;***********************************************************************
;*                                                                     *
;* This functions handles the DECLARE special form, when it occurs     *
;* at top level (not within a function).  Called by ZILCOCOM.          *
;*                                                                     *
;***********************************************************************
;
; Note: Errors cannot be signalled from within here.
;
;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 03/31/88 - Fixed bug whereby (DECLARE (VSSIZE ...)) didn't work.    *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun zilcodcl (b    ;  the (headless) body of the DECLARE form
                 exec ;  T = program, NIL = function
                 e    ;  the environment (list of contours)
                )

;
; Note that E (the list of contours) is null when this module is
; called from ZILCOCOM.  In the future it may be called from
; other places, though, so beware.
;
; In addition, in the future it may prove to be wiser to have
; ZILCOCOM create a global contour which would be passed to
; ZILCODCL as well as other processors of top-level forms.
;
 (dolist (x b) (declare-process x exec e)))

(defun declare-process (a exec e) ; a is a subform within the DECLARE,
                                  ; e.g. (SPECIAL FOO BAR)
 (cond
  ((null a) nil)
  ((atom a) (declare-error "Illegal DECLARE subform " a))
  (t
   (case (car a)

         ((special)
                          (dolist (x (cdr a))
                           (declare-process-variable x (car a) e)))

         ((pdsize
           cssize
           vssize
           acsize)        (declare-process-size a exec))

         ; AUTOSPECIAL is obsolete.
         ; AUTOFUNCALL is obsolete.

         ((default-binding)
                          (declare-process-prop (car a) (cdr a) e))

         ; BASEREG is obsolete.

;;;;;;;;;((basereg)       (mapc #'declare-process-basereg (cdr a)))

         ((segment)       (mapc #'declare-process-segment (cdr a)))

         ((nocompile)     (mapc #'declare-process-nocompile (cdr a)))

         (t
          (unless (memq (car a) (get '*zilco* 'unknown-declarations))
                  (push (car a) (get '*zilco* 'unknown-declarations))
                  (cterpri)
                  (princ "DECLARE (") (prin1 (car a))
                  (princ ") not handled by the ZIL compiler.")
                  (terpri)
                  nil))))))
;
;***********************************************************************
;*                                                                     *
;* This function processes SPECIAL declarations.  It used to process   *
;* FLUID declarations until we decided they were too bogus.            *
;*                                                                     *
;***********************************************************************
;

(declare (special atoms subrs)) ; Needed by ZILCOADD/ZILCOSYM.

(defun declare-process-variable (a type e)
 (let ((atoms (list nil))
       (subrs (list nil))
      )
  (cond
   ((not (symbolp a))
    (declare-error (string-append "Invalid DECLARE " type " variable")
                   a))
   (t

    ; Add the variable to the appropriate list of free variables.

    ; eventually will modify global contour specified in e?

    (let ((c (zilcoadd a nil)))
         (case type
               (special
                (or (assq c special-freevars)
                    (modq special-freevars c)))
               ))))))

;
;***********************************************************************
;*                                                                     *
;* This function processes xxSIZE declarations.                        *
;*                                                                     *
;***********************************************************************
;

(defun declare-process-size (a exec)
 (let (((type . z) a) sizval)
  (cond
   ((null z)   (declare-error "Missing declaration value" type))
   ((cdr z)    (declare-error "Too many declaration values" type))
   ((not exec) (declare-error "Declaration valid in PROGRAM only" type))
   (t          (setq sizval (declare-size-value (car z)))
               (if sizval (putprop '*zilco* sizval type))))))

; This function takes values like 4K and returns values like 4096.

(defun declare-size-value (x)
 (cond
  ((integerp x) x)
  ((symbolp x)
   (let* (
          (xlen (string-length (symbol-name x)))
          (xval (make-number (string-substr x 1 (1- xlen))))
          (xsuf (string-substr x xlen 1))
         )
         (cond
          ((not (integerp xval))
           (declare-error "Invalid size specification" x))
          ((eql xsuf "K") (* xval 1024))
          ((eql xsuf "M") (* xval #.(* 1024 1024)))
          (t (declare-error "Invalid size specification" x)))))
  (t (declare-error "Invalid size specification" x))))

;
;***********************************************************************
;*                                                                     *
;* This function processes SEGMENT declarations.                       *
;*                                                                     *
;* e.g. (DECLARE (SEGMENT (FOO 2) (BAR 3) (BAZ 1)) ...)                *
;*                                                                     *
;***********************************************************************
;

(defun declare-process-segment (a) ; process function segment declares
 (cond
  ((or (atom a)
       (null (cdr a))
       (cddr a))   (declare-error "Invalid DECLARE SEGMENT spec" a))
  (t (let (((fun num) a))
          (cond
           ((not (symbolp fun))
            (declare-error "Invalid DECLARE SEGMENT spec" a))
           ((or (not (fixnump num))
                (< num 1))
            (declare-error "Invalid DECLARE SEGMENT spec" a))
           (t
            (putprop fun num 'segment)))))))

;
;***********************************************************************
;*                                                                     *
;* This function processes NOCOMPILE declarations.                     *
;*                                                                     *
;* e.g. (DECLARE (NOCOMPILE FOO BAR (BAZ SETFMETHOD) ... ) ... )       *
;*                                                                     *
;***********************************************************************
;

(defload member memqual) ; We use MEMBER with an EQUAL test.

(defun declare-process-nocompile (a) ;
 (let ((l (get '*zilco* 'nocompile)))
      (or (member a l)
          (putprop '*zilco* (cons a l) 'nocompile))))

;
;***********************************************************************
;*                                                                     *
;* This function processes miscellaneous properties of *ZILCO*.        *
;* (e.g. (DECLARE (AUTOFUNCALL T)) == (DEFPROP *ZILCO* T AUTOFUNCALL)  *
;*                                                                     *
;***********************************************************************
;
(defun declare-process-prop (prop vals e)
 (cond
  ((null vals) (declare-error "Missing declaration value" prop))
  ((cdr vals)  (declare-error "Too many declaration values" prop))
  (t           (putprop '*zilco* (car vals) prop))))

;
;***********************************************************************
;*                                                                     *
;* This macro reports on errors detected processing DECLARE subforms.  *
;* Note that true errors cannot be signalled, because the compilation  *
;* must continue in any case.                                          *
;*                                                                     *
;***********************************************************************
;

(defmacro declare-error (arg1 &optional arg2)
 (let ((message (cond
                 ((stringp arg1)
                  (string-append arg1 " - "))
                 ((and (consp arg1)
                       (eq (car arg1) 'string-append))
                  (append arg1 (list " - ")))
                 (t
                  (zerror "Arg 1 to DECLARE-ERROR not a string" arg1)))))
 `(progn (cterpri)
         (princ ,message)
         ,(if arg2 `(prin1 ,arg2))
         (terpri)
         nil)))

;
; Obsolete code follows...
;
;***********************************************************************
;*                                                                     *
;* This function processes BASEREG declarations.                       *
;*                                                                     *
;* e.g. (DECLARE (BASEREG (FOO 2) (BAR 3) (BAZ 1)) ...)                *
;*                                                                     *
;***********************************************************************
;
;
;(defun declare-process-basereg (a) ; process function basereg declares
; (cond
;  ((or (atom a)
;       (null (cdr a))
;       (cddr a))   (declare-error "Invalid DECLARE BASEREG spec" a))
;  (t (let (((fun num) a))
;          (cond
;           ((not (symbolp fun))
;            (declare-error "Invalid DECLARE BASEREG spec" a))
;           (t (case num
;                   ((2 3 4) (putprop fun num 'basereg))
;                   ((1)     (remprop fun 'basereg)) ; 1 is the default
;                   (t (declare-error "Invalid DECLARE BASEREG spec" a)
;                   ))))))))
;
