
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;; This compiles the "AND" function.

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 04/25/88 - Support for determination of superfluous initializations *
;*            of PROG and &AUX variables to NIL.  This involves two    *
;*            new fields in the contour that are used to detect cases  *
;*            of a variable unconditionally being set before it is     *
;*            ever referenced.  This is an extension of, and replaces, *
;*            the SETQ-initialization-hacking scheme used in ZCCPROG.  *
;*            This also requires a new P-code form, CSETNIL, and a new *
;*            code generator module, ZCGCSNIL.                         *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zccand (b v s e) ; B = body, V = variable, S = target, E = environment
 (prog (a xf exitlabel setnillabel wayout save-tempcond)
  (setq a b)
  (setq wayout (if (and (null v) (consp s) (zilcovta s))
                   (car s)
                   nil))
  (setq exitlabel (gensym))
  (putprop exitlabel v 'vartarg)
  (putprop exitlabel s 'rettarg)

;;(putprop exitlabel e 'envtarg) ; ?? Probably not useful for anything.

  (or a        (return (modq body `(sett ,t ,v ,s))))   ; (AND)   -> T
  (or (cdr a)  (return (zccevcom (car a) v s e)))       ; (AND x) -> x

  (setq save-tempcond (zilcec-tempcond (car e)))

 loop

  (setq xf (zccpred (car a)))

  (if   (notp xf)                              ; (AND ... (NOT x) ...)
   then
        (zccevcom (cadr xf)
                  nil
                  (if   (eq wayout 'gonil)
                   then `(gonotnil ,(cadr s))  ; predicative AND NOT
                   else `(gonotnil ,(or setnillabel
                                        (setq setnillabel (gensym))))
                   endif)
                  e)
        (or (eq wayout 'gonil)                 ; if non-predicative
            (cdr a)                            ; and (AND ... (NOT x))
                                               ; then generate a T
            (modq body `(sett t nil (goto ,exitlabel))))
   else                                        ; (AND ... x ...)
                                               ;
                                               ; If non-predicative
                                               ; and (AND ... x), then
                                               ; generate code for x,
                                               ; not for what ZCCPRED
                                               ; did to it.  Otherwise
                                               ; use what ZCCPRED ret'd.
                                               ;
        (zccevcom (if (or (eq wayout 'gonil) (cdr a)) xf (car a))
                  nil
                  (if   (eq wayout 'gonil)
                   then `(gonil ,(cadr s))     ; predicative AND
                   else
                   if   (null (cdr a))
                   then                        ; (AND ... x)
                        (putprop exitlabel t 'forceniltest)
                        `(goto ,exitlabel)
                   else
                   if   (predp xf)             ; (AND .. (foo-p x) y ..)
                   then `(gonil ,(or setnillabel
                                     (setq setnillabel (gensym))))
                   else
                        `(gonil ,exitlabel)    ; (AND ... x y ...)
                   endif)
                  e)
   endif
  )
  (when (setq a (cdr a))
        (setf (zilcec-tempcond (car e)) t) ; All forms other than first
        (go loop))                         ; are conditionally executed

  (when setnillabel
        (modq body `(label ,setnillabel nil nil))
        (modq body `(setnil nil nil (goto ,exitlabel))))
  (setf (zilcec-tempcond (car e)) save-tempcond)
  (return (modq body `(label ,exitlabel ,v ,s)))
 )
)

