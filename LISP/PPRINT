
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;; A lousy pretty-printer.  Hopefully I'll make a better one soon.

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 06/17/88 - Now returns no values.                                   *
;*                                                                     *
;***********************************************************************
;
(defun pretty-print (a &optional o)
 (pretty-print-internal a o)
;(cterpri o) ; No, the callers of PPRINT must take care of this.
 (values)    ; Return no values, so nothing else prints.
)

(defun pretty-print-internal (a o)
 (cond
  ((atom a)
                       (prin1 a o))
  ((null (cdr a))
                       (princ "(" o)
                       (pretty-print-internal (zcar a) o)
                       (princ ")" o))
  ((atom (cdr a))
                       (princ "(" o)
                       (pretty-print-internal (zcar a) o)
                       (princ " . " o)
                       (prin1 (cdr a) o)
                       (princ ")" o))
  ((and (eq (zcar a) 'quote)
        (null (cddr a)))
                       (princ "'" o)
                       (pretty-print-internal (zcadr a) o))
  ((and (eq (zcar a) 'function)
        (null (cddr a)))
                       (princ "#'" o)
                       (pretty-print-internal (zcadr a) o))
  (t
                       (princ "(" o)
                       (pp-flat a o)
                       (princ ")" o)))
 nil      ; Return value is irrelevant.
)

(defun pp-flat (a o)
 (prog (b c m flag oldpos)
       (setq b a
             m (zgetfpo o))
  loop
       (setq c (zcar b))
       (when flag          ; a list was detected, print under each other
             (cterpri o)
             (zputfpo m o)
       )

       (setq oldpos (zgetfpo o))

       (pretty-print-internal c o)

       (if  flag
        then
        else
        if  (not (pp-atom-p c)) ; when we find a list, set flag on
        then
            (if
                 (and
                      (neq (zcar c) 'lambda)
                      (consp (cdr b))
                      (pp-atom-p (zcadr b))
                      (null (cddr b)))
             then
                 ; list followed by single atom, e.g. ((FOO BAR) BAZ)
             else
                 (setq m oldpos
                       flag t)
             endif
            )
        endif
       )
        ;
        ; If any of the remaining elements of the form are lists,
        ; then set flag to print them under each other.
        ;
       (when (and (null flag)
                  (neq b a)
                  ;
                  ; The following loop is equivalent to
                  ; (mapor #'(lambda (x) (not (pp-atom-p x))) b)
                  ; except that it terminates on an ATOM test.
                  ;
                  (do ((b b (cdr b))
                      )
                      ((atom b) (not (pp-atom-p b)))
                      (when (not (pp-atom-p (car b)))
                            (return t))))
             (setq m oldpos
                   flag t)
       )
       (when (setq b (cdr b))
             (if  (atom b)
              then
                  (princ " . " o)
                  (prin1 b o)
              else
                  (princ " " o)
                  (go loop)
              endif
             ))
       (return flag)))

;
; The following predicate returns true if an object is either an atom
; or of the form (QUOTE atom), i.e. 'atom.
;

(defun pp-atom-p (a)
 (or (atom a)
     (and (eq (zcar a) 'quote)
          (consp (cdr a))
          (atom (zcadr a)) ; This makes it false for (QUOTE '(list...))
          (null (cddr a))
     )))

(eval-when (load)
 (defload pretty-print pprint)
)

(eval-when (eval)
 (defun pprint (a &optional o) (pretty-print a o))
)

