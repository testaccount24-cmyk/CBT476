
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 03/29/88 - New integer exponentiation algorithm due to K. Hvatum.   *
;*                                                                     *
;***********************************************************************
;
;;; Thanks to Maclisp manual, p. 116, for X**Y = E**(Y*LOG(X)) equality.

(defmacro 1-like (x)
    `(cond
      ((sfloatp ,x) 1.0f0)
      ((dfloatp ,x) 1.0d0)
      (t            1)))

(defun expt (x y)
 (unless (numberp x)
         (zerror "EXPT base not a number" x))
 (cond
  ((floatp y)
                     (cond
                      ((zerop y)
                       ;
                       ; Actually, if (zerop x), it's supposed to be
                       ; an error at this point.
                       ;
                       (1-like x))
                      ((or (dfloatp y) (dfloatp x))
                       (exp (* y (log x))))
                      (t
                       (exp (* y (log (float x y))))) ; force sfloat
                     ))
  ((not (fixnump y)) (zerror "EXPT exponent not a fixnum or flonum" y))
  ((plusp y)         (if (or (zerop x) (= x 1))
                         x
                         (do* ((k (1- (haulong y)) (1- k))
                               (n x (if (logbitp k y)
                                        (* n n x)
                                        (* n n))))
                              ((zerop k) n))))
  ((zerop y)         (1-like x))
  (t
                     ;
                     ; y is a negative fixnum.
                     ; Note that this is supposed to return a
                     ; rational in Common LISP, but under the
                     ; current ZIL it returns a truncated integer.
                     ;

                     (/ 1 (expt x (minus y))))
 ))
