
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; The macro expander for the DEFMODULE macro.
;

;
;***********************************************************************
;*                                                                     *
;* This is probably obsolete.  Supplanted by ZILCOMOD in the compiler, *
;* which handles "real" module compiles.                               *
;*                                                                     *
;***********************************************************************
;
;
; This generates a load module that loads in compiled forms and defs.
;
; (DEFMACRO DEFMODULE (A B &OPTIONAL C) (MXDEFMOD A B C))
;
; For example...
;
;
; (defmodule zmfoo "my.lisp(foo)")
;
; takes foo and builds a compilable function out of it that, when
; executed by typing (zmfoo) under the interpreter, does the operations
; generally expected by implementations of compiled modules created
; by COMPILE-FILE.  In other words,
;
; if the form is a macro form, process the macro expansion.  Note:
; this somehow has to include stuff defined by DEFMACRO's, so any
; DEFMACRO encountered in the module has to be made to generate both
; a MACRO (for evaluation) and CMACRO (for compilation) property.
;
; if a form is a DEFUN, assigns the compiled definition to the
; appropriate property of the symbol.  Exception: if the DEFUN is of
; a macro, the macro is made known to the compiler only.
;
; if a form is a DEFMACRO, this expands to a DEFUN for a macro, so
; see above.
;
; if a form is a DEFVAR, is made known as a "special" variable to the
; compiler; also set up to be executed at load time.
;
; if a form is a DECLARE, is passed to the compiler as is.
;
; if a form is a COMMENT, is ignored.
;
; if a form is an EVAL-WHEN, processed as follows:
;
;  EVAL-WHEN (COMPILE) - evaluated by the compiler itself only.
;  EVAL-WHEN (LOAD)    - processed as above.
;  EVAL-WHEN (EVAL)    - ignored.
;
; if the form is anything else, is set up to be executed at load time.
;
; Example:
;
; If we encounter the form:
;
; (defmodule zmfoo "my.lisp(foo)")
;
; and the file looks like this...
;
; (defun foo1 (x) (blah1))        ;    1
; (defun (baz frob) (y) (hair))   ;    2
; (defmacro mac (x) `(frob ,x))   ;    3
; (mac "junk")                    ;    4
; (some random form)              ;    5
; (defvar pi 3.1415926)           ;    6
; (defload frobnicate frobozz)    ;    7
; (eval-when (compile)
;  (print "hello world"))         ;    8
; (eval-when (load)
;  (frob))                        ;    9
; (eval-when (eval)
;  (eccch))                       ;   10
;
; then the resulting form will be (more or less):
;
; (progn
;  (defun zmfoo ()
;    (zdef foo1)                                 ; 1
;    (putprop 'baz (subr |BAZ FROB|) 'frob)      ; 2
;    (frob "junk")                               ; 4 - expanded MAC
;    (some random form)                          ; 5
;    (xdefvar pi 3.1415926)                      ; 6
;    (xdefload frobnicate frobozz)               ; 7
;    (frob)                                      ; 9
;    'zmfoo
;  )
;  (defun foo1 (x) (blah1))                      ; 1
;  (defun |BAZ FROB| (y) (hair))                 ; 2
;  (defun mac macro (nil x) `(frob ,x))          ; 3 - expanded DEFMACRO
;  (defvar pi 3.1415926)                         ; 6
;  (defload frobnicate frobozz)                  ; 7
;  (eval-when (compile)
;   (print "hello world"))                       ; 8
; )
;
; This is what the compiler sees after macro expansion, and will
; deal with.
;
;
; Note that (9) is ignored - (eval-when (eval)) forms are always
; ignored at compile time.
;
; As things are set up right now, this generates dynamically scoped
; function definitions.  This may change.
;

(defload member memqual) ; We use an EQUAL test for MEMBER when
                         ; searching for (FOO BAR) on NOCOMPILE list.

(defun mxdefmod   (modname  ; the name of the module to be created.
                   modload  ; the name of the file to be compiled.
                   &optional
                   debug    ; T if debugging requested
                  )
 (let (((flist1 . flist2) (module-get-forms modname modload)))
  (when debug
   (terpri)
   (princ "Begin debugging output.")
   (terpri)
   (terpri)
   (princ "Main (loadable) function code follows:")
   (terpri)
   (terpri)
   (pprint flist1)
   (terpri)
   (terpri)
   (princ "Other (compilable) forms follow:")
   (terpri)
   (terpri)
   (pprint flist2)
   (terpri)
   (terpri)
   (princ "End debugging output.")
   (terpri)
  )
  `(progn
    (defun ,modname ()
     (terpri)
     (princ ,(string-append "Loading module "
                            modname
                            ", "))
     (princ ,(string-append "created from file "
                            modload
                            "."))
     (terpri)
     ,.flist1  ; Forms executed at load time.
     ',modname ; Return the name of function itself as the value.
    )
    . ,flist2   ; Forms processed by the compiler.
   )))

; MODULE-GET-FORMS returns a CONS of 2 lists...
;
; (1) forms to be executed at load time which make up the main function
; (2) DEFUN's, etc. to be processed by the compiler.
;

(declare (special complist loadlist))

(defun module-get-forms (modname modload)
  (prog (form file complist loadlist)
        (setq file (open modload 'input))
   loop
        (setq form (catch nil (read file)))
        (when (eof file)
              (close file 'input)
              (return (cons (nreverse loadlist) (nreverse complist))))
        (module-process-form form)
        (go loop)))

(declare (basereg (module-process-form 2)))

(defun module-process-form (form)
 (prog (defun-func defun-prop arglist defun-rest defun-name)
   nexp (cond
         ((atom form)                 (push form loadlist))
         ((eq (zcar form) 'comment)   nil)
         ((eq (zcar form) 'declare)   (go process-declare))
         ((eq (zcar form) 'defload)   (go process-defload))
         ((eq (zcar form) 'defun)     (go process-defun))
         ((eq (zcar form) 'defvar)    (go process-defvar))
         ((eq (zcar form) 'eval-when) (go process-eval-when))
         ((eq (zcar form) 'progn)     (go process-progn))
         ((and (symbolp (zcar form))
               (get (zcar form) 'macro))
          (setq form (macroexpand form))
          (go nexp))
         (t                           (push form loadlist)))
        (return)

  process-defun     ; form = (defun ...)

; Place either the compiled or the interpreted function definition
; on the appropriate property of the symbol that names the function.
; If (DECLARE (NOCOMPILE FOO)) or (DECLARE (NOCOMPILE (FOO BAR)))
; was specified, then the function will be on the "NOCOMPILE" list,
; so don't compile the definition.

        (unless (cdr form) (go defun-error))
        (if (symbolp (cadr form))
         then
            (desetq (nil defun-func . defun-rest) form)
            (or defun-rest (go defun-error))
            ;
            ; Check type of DEFUN
            ;
            (case (car defun-rest)
             ((expr fexpr macro) (setq defun-prop (car defun-rest)
                                       defun-rest (cdr defun-rest)))
             (t                  (setq defun-prop 'expr))
            )
            ;
            ; Figure out what to do with DEFUN
            ;
            (setq arglist (car defun-rest))
            (case defun-prop
             (expr   (if  (memq defun-func (get '*zilco* 'nocompile))
                      then
                          (princ
          "NOCOMPILE requested, will load interpretive definition of ")
                          (princ defun-func)
                          (terpri)
                          (push `(xdefun . ,(cdr form)) loadlist)
                      else
                          (push
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;`(zevdsub ',defun-func (subr ,defun-func))
                                `(zdef ,defun-func)
                                loadlist)
                          (push form complist)
                      endif
                     ))
             (macro  (setq defun-rest (cdr defun-rest))
                     (push form complist)
                     (eval form)  ; Also make macro def available.
                     )
             (fexpr  (princ
"FEXPR definition not compilable, will load interpretive definition of "
                     )
                     (princ defun-func)
                     (princ
" and transform it internally into a macro."
                     )
                     (terpri)
                     (push `(xdefun . ,(cdr form)) loadlist)
                     (let ((fexpr-subr (concat defun-func " FEXPR"))
                          )
                          (push `(defun ,fexpr-subr
                                        ,(car defun-rest)
                                        . ,(cdr defun-rest))
                                complist)
                          (push `(defmacro ,defun-func
                                           (&rest x)
                                           `(,',fexpr-subr `,',x))
                                complist)
                     ))
             )
         else
         if (consp (cadr form))
         then
            (desetq (nil (defun-func defun-prop) . defun-rest) form)
            (or defun-rest (go defun-error))
            (if  (member (cadr form) (get '*zilco* 'nocompile))
             then
                 (princ
          "NOCOMPILE requested, will load interpretive definition of ")
                 (princ (cadr form))
                 (terpri)
                 (push `(putprop ',defun-func
                                 '(lambda . ,defun-rest) ; Note, no #'.
                                 ',defun-prop)
                       loadlist)
             else                             ; ZILCO will compile #'s.
                 (setq defun-name (concat defun-func " " defun-prop))
                 (push `(putprop ',defun-func
#+lexical-scoping                #',defun-name
#-lexical-scoping                (subr ,defun-name)
                                 ',defun-prop)
                        loadlist)
                 (push `(defun ,defun-name . ,(cddr form)) complist)
             endif
            )
         else (go defun-error)
         endif
        )
        (return)

  defun-error

        (terpri)
        (princ "Invalid DEFUN syntax: ")
        (prin1 form)
        (terpri)
        (return)

  process-declare

        (push form complist)
        (return)

  process-defload

        (push `(xdefload . ,(cdr form)) loadlist)
        (push form complist)
        (return)

  process-defvar

        (push `(xdefvar . ,(cdr form)) loadlist)
        (push form complist)
        (return)

  process-progn

        (mapc #'module-process-form (cdr form))
        (return)

  process-eval-when
;
; EVAL-WHEN is interpreted as follows:
;
; COMPILE - pass to the compiler as is.
;
; EVAL    - ignore.
;
; LOAD    - process like all the rest.
;

        (let* (
               ((nil times . forms) form)
               (compilep            (memq 'compile times))
               (loadp               (memq 'load    times))
              )
              (loop for f in forms
                    when compilep do (eval f)
                    when loadp    do (module-process-form f)
                    finally       (return nil)))

        (return)

 )
)

