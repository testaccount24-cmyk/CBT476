
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

; This function is called ZILHELP, but is invoked by a macro named HELP,
; so that users can have the benefit of using (HELP) under ZIL without
; needing to quote the operand; but it was done this way primarily so
; there is no conflict with the TSO HELP command, in case one wishes
; to do (TSO 'HELP).
;
; A is the function name for which HELP info is desired.
; F is T for full-screen, NIL for no-full-screen.
;
;                       ; e.g. (HELP CAR) --> (ZILHELP 'CAR)
;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 06/09/88 - Added support for new special forms pertaining to        *
;*            BLOCK, TAGBODY and multiple values.                      *
;* 06/17/88 - Now returns no values.                                   *
;*                                                                     *
;***********************************************************************
;

(declare (special *zil-help-library*))

(defun zilhelp (&optional a f)
 (if a
  then
       (unless (symbolp a)
               (zerror "HELP operand not a symbol" a))
       (let ((helpmember (string-append "'" *zil-help-library* "("
                               (zilhelp-member-name a) ")'")))
        (if (not (open helpmember :probe))
         then
             (princ "There is no HELP available for ")
             (princ a)
             (princ ".")
             (terpri)
         else
         if f
         then
            (cond
             ((ispfp) (zisexec "CONTROL DISPLAY REFRESH")
                      (zisexec "BROWSE DATASET(" helpmember ")")
                      (zisexec "CONTROL DISPLAY REFRESH")
             )
             (t       (tso "LIST " helpmember " NON FUL")))
            (cterpri)
            (princ a)
         else
            (with-open-file (file helpmember)
              (loop
                    initially (clrscrn)
                    for line = (readline file)
                    until (eof file)
                    do (cterpri) (princ line)
                    ))
         endif
        ))
  else
;       (princ "HELP is available for the following members of...")
;       (terpri)
;       (tso "XLISTM '" *zil-help-library* "'")
;       (terpri)
        (princ
"
HELP documentation is contained in '")
(princ *zil-help-library*)
(princ "'.

Type (HELP ZIL)        for an introduction to ZIL.
Type (HELP FUNCTIONS)  for a list of functions.
Type (HELP <name>)     for information about <name>, where <name> is
                       a ZIL function or a member of '")
(princ *zil-help-library*)
(princ "'.")
#+DRAPER (progn
(princ "

For a list of help members, type (TSO \"XLISTM '")
(princ *zil-help-library*)
(princ "'\").

For full screen help, type (HELP name T); for full screen news, (NEWS T).

"
        )
         ) ; end #+DRAPER
  endif
 )
 (values)
)

(defun zilhelp-member-name (name)
 (let* ((autoload (get name 'autoload))
        (loadname (if (and autoload (symbolp autoload))
                      autoload
                      name))
        (pair (assq loadname '(
                               (+                    . "PLUS"    )
                               (-                    . "DIFFEREN")
                               (*                    . "TIMES"   )
                               (/                    . "QUOTIENT")
                               (//                   . "REMAINDE")
                               (\\                   . "REMAINDE")
                               (**                   . "EXPT"    )
                               (Â¬                    . "EXPT"    )
                               (=                    . "ZILEQUAL")
                               (<                    . "LESSP"   )
                               (>                    . "GREATERP")
                               (1+                   . "ADD1"    )
                               (1-                   . "SUB1"    )
                               (zil                  . "$@INTRO" )
                               (functions            . "$HELP"   )
                               (do*                  . "DO"      )
                               (let*                 . "LET"     )
                               (list*                . "LIST"    )
                               (prog*                . "PROG"    )
                               (eval-when            . "EVALWHEN")
                               (unwind-protect       . "UNWIND"  )
                               (princ-to-string      . "PRINTS"  )
                               (prin1-to-string      . "PRINTS"  )
                               (with-open-file       . "WITHOPEN")
                               (return-from          . "RETURNFR")
                               (multiple-value-bind  . "MVBIND"  )
                               (multiple-value-call  . "MVCALL"  )
                               (multiple-value-list  . "MVLIST"  )
                               (multiple-value-prog1 . "MVPROG1" )
                               (multiple-value-setq  . "MVSETQ"  )
                       )))
       (realname (if pair (cdr pair) loadname))
      )
       (cond
        (pair
         (cdr pair))
        ((> (string-length loadname) 8)
         (string-substr loadname 1 8))
        (t
         loadname))))
