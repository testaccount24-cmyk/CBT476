
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; BOUNDP returns true if the specified symbol currently has a
;;; SPECIAL (dynamically bound) value (in other words, there is
;;; a current special binding or global binding, and the value of
;;; this binding is not the "unbound" marker).
;;;
;;; Notes:
;;;
;;;   Since BOUNDP calls ZEVSYM, it has the capability
;;;   of invoking the symbol-autoloading process.  Compare FBOUNDP.
;;;
;;; When shallow binding is implemented, this version of the function
;;; will disappear, to be replaced by an assembler-coded function
;;; (and an inline-coded compiler-generated code sequence as well)
;;; which will load the value cell of the symbol and test it for
;;; unboundedness.  Something like this:
;;;
;;;  L    14,=A(symbol)
;;;  ICM  reg,15,##PVALUE(14)
;;;  BNM  true
;;;  BM   false
;;;
;;; or, if symbol-autoloading is to be supported by BOUNDP:
;;;
;;;  L    14,=A(symbol)
;;;  ICM  reg,15,##PVALUE(14)
;;;  BALR 0,0      ... so the handler knows where to return to
;;;  BM   4(,reg)  ... or whatever, to branch to unbound-variable
;;;                ... handling in non-error-signalling mode
;;;                ... which will reissue the ICM to set condition code
;;;  BNM  true
;;;  BM   false
;;;
;;;  If BOUNDP is not autoloading, there will have to be a different
;;;  means of causing symbol-autoload to take place.  Obviously, if
;;;  it exists at all, it will be triggered by simple reference to
;;;  the value of a symbol (or SYMEVAL).  Whether BOUNDP will be
;;;  capable of it is debatable.
;;;

(defun boundp (a &aux b)
 (cond
  ((not (symbolp a))
   (warn "Argument to BOUNDP not a symbol" a)
   nil)
  ((atom (setq b (zevsym a)))          ; Search "special" bindings only
   nil)
  (t t)))

