
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
;***********************************************************************
;*                                                                     *
;* ZILCOAUV                                                            *
;*                                                                     *
;***********************************************************************
;
;;;
;;; This function adds an unbound variable to the list of atoms and
;;; to the appropriate lists of unbound variables.  Arguments:
;;;
;;; arg 1 - the symbol representing the variable to be added
;;; arg 2 - the environment
;;;
;;; ZILCOAUV first of all creates an atom for the variable.
;;; It then also builds a "fake binding" pair to return to the caller.
;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun zilcoauv (varname e &aux atompair binding)

 (let ((atompair (zilcoadd varname nil))  ; Create an atom for it
       (binding  nil)
      )

   (putprop (cdr atompair) t 'real)   ; Indicate it's really used

   ;
   ; Add this to the appropriate list of unbound variables and to the
   ; appropriate list of free variables.
   ;
   ; Which list depends on whether the variable was declared to be
   ; SPECIAL or not (if it was not declared, it attains one of these
   ; by default - generally SPECIAL).
   ;
   ; If the variable is globally proclaimed SPECIAL
   ; (i.e. it's in special-freevars),
   ; or the variable is pervasively SPECIAL, then mark the
   ; "fake binding" SPECIAL.
   ;
   ; If the variable is lexically bound across FUNARG boundaries,
   ; then mark the associated binding FLUID so it'll get compiled
   ; properly (closed over).  The name "FLUID" is a misnomer, but
   ; dates back to the original design of ZIL in the bad old days.
   ;
   ; Otherwise, the variable is an undeclared and unbound variable.
   ;
   ; For now, if it hasn't been declared special or fluid, assign it
   ; a default declaration of SPECIAL (or whatever the default-binding
   ; property is defined to be at compiler initialization time).
   ; This can be controlled (badly) by a
   ; (declare (default-binding ...)) specification.
   ;

   (cond

    ((or (memq atompair special-freevars) ; Globally or locally special?
         (memq varname (zilcec-specials (car e))))
     (setq binding (cons varname (gensym)))
     (zccbind binding 'special))

    ((do ((cec (zilcec-creator (car e))   ; Heap-consed lexical funarg?
               (zilcec-creator cec)))
         ((null cec) nil)
         (when (setq binding (assq varname (zilcec-bindings cec)))
               (return binding)))
     (zccbind binding 'fluid)
     (let ((owner (or (get (cdr binding) 'owner)
                      (zerror "Binding has no owner" binding))))
           (when debug
                 (cterpri)
                 (princ "ZILCOAUV fluidizing binding ")
                 (prin1 binding)
                 (terpri)
                 (princ "Atompair: ")
                 (prin1 atompair)
                 (terpri)
                 (princ "Owner: ")
                 (prin1 owner)
                 (terpri)
                 (princ "Owner's atoms so far: ")
                 (prin1 (get (car owner) 'newatoms))
                 (terpri)
           )
           (pushnew (car atompair) (get (car owner) 'newatoms)
                                   :test #'eq)))

    (t                                       ; Undeclared?
     (setq binding (cons varname (gensym)))
     (putprop (cdr binding) t 'implicitly-free)
     (let ((db (get '*zilco* 'default-binding)))
          (when db
           (cterpri)
           (princ "Warning:  Undeclared non-local variable, assuming ")
           (princ db)
           (princ " - ")
           (prin1 varname)
           (terpri)
          )
          (case db
                (special (zccbind binding 'special))
                (t       (modq body
              `(zerror "Non-local variable not declared SPECIAL"
                                         ,varname)))))))

   ;
   ; If this is a special binding, add the atom to the list of
   ; atoms that are unbound specials in this function.
   ;
   ; If this is a lexical binding, add the atom to the list of
   ; atoms that are unbound lexicals in this function.
   ;

   (case (car (get (cdr binding) 'bindingtype))
    ((special)
     (or (memq atompair special-unbounds)
         (modq special-unbounds atompair)))
    ((fluid)
     (or (memq atompair fluid-unbounds)
         (modq fluid-unbounds atompair)))
   )

   binding ; Return the "fake binding" pair.

 ))
