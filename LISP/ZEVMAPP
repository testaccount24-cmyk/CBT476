
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; This function applies a macro definition.
;;;
;;; Syntax:
;;;
;;;  (zevmapp <macroexp> <formarg> <property>)
;;;
;;; where  <macroexp> is the value of the MACRO or CMACRO property
;;;                   to be applied
;;;
;;;        <formarg>  is the entire form, which is the argument to
;;;                   the macro expansion function <macroexp>
;;;
;;;        <property> is the macro property name - MACRO or CMACRO
;;;

;;
;; <macroexp> must be (LAMBDA arglist ...)
;; where...
;;  If arglist is a cons whose CAR is NIL, then this is an extended
;;   macro arglist generated by DEFMACRO.  Apply it accordingly.
;;  Otherwise, this is a standard MACRO arglist.  Apply it the old way.
;;
;; (we'll have to chuck this hack for total CL eventually...)
;;

(defload car zcar)

(defun zevmapp (m form prop)
 (cond
  ((or (atom m) (atom (cdr m)))
   (warn "Invalid macro property found" (car form) prop)
   (zilapply m (list form) nil (car form)))
  (t
   (zilapply m
             (if (or (atom (cadr m))    ; if (lambda x ...)
                     (null (caadr m)))  ; or (lambda (nil ...) ...)
                 form                   ; then apply like a defmacro
                 (list form)            ; else (lambda (x) ...)
             )                          ;      apply like a macro
             nil
             (car form)))))

