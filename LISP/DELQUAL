
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; Destructive REMQUAL.
;
; This is equivalent to Common LISP (DELETE A B :TEST #'EQUAL)
;

(defun delqual (a b &optional c)

 ; a = the object to be searched for.
 ; b = the list to delete it from.
 ; c = a count of occurrences, default = delete all occurrences.

 (prog (m n z)
       (setq m nil
             n b
             z b)
       (when c
             (or (fixnump c)
                 (zerror "Invalid DELQUAL count argument" c))
             (or (plusp c) (return z)))
  loop (or n (return z))

;
; ... warning - no check for atomic n (sublist of b) ...
;

       (if   (equal a (zcar n))
        then
             (setq n (cdr n))
             (if m (rplacd m n)
                   (setq z n))
             (when c
                   (if (zerop (setq c (1- c)))
                       (return z)))
        else
             (setq m n
                   n (cdr n))
       )
       (go loop)))

