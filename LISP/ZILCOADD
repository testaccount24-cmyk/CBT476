
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; "ADDCONSTANTS"
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zilcoadd (a aa)   ; AA defaults to NIL; valid only for lists
 (cond
  ((null a) nil)                              ; Never add NIL to list
  ((eq a t) nil)                              ; Never add T to list
  ((atom a) (addconstantatom a))              ; Add A to list of atoms
  (t        (addconstantlist a aa)) ))        ; Add A to list of lists

(defun addconstantatom (a)
 (prog (dottedpair atomlist)
  (setq atomlist (if (symbolp a) alfatoms numatoms))
  (if  (setq dottedpair (assoc a atomlist))   ; Find A in global list
   then                                       ; If it's there, then
       (or (assoc a atoms)                    ; if not in our list
           (modq atoms dottedpair))           ; then add it to our list
   else                                       ; Else not in global list
       (modq atoms                            ; so add it to our list
             (setq dottedpair                 ; (SYMBOLPAIR will also
                   (zilcosym a 'atoms)))      ;  add it to global list)
   endif
  )
  (return dottedpair)))

(defun addconstantlist (a p &aux q)
 (prog (dottedpair)
  (setq dottedpair (cons a (gensym)))         ; Always create a new list
  (modq lists dottedpair)                     ; Then add it to the list
  (modq alllists dottedpair)                  ; and also to global list
  (putprop (cdr dottedpair) p 'referenced)    ; If directly referenced
  (if   (atom (cdr a))                        ; then say so, else not
   then                                       ; Add CAR of pair to list
        (setq q (zilcoadd (car a) nil))       ; Add CAR of pair to list
        (if q (putprop (cdr q) t 'real))      ; Show it's really used
        (setq q (zilcoadd (cdr a) nil))       ; Add CDR of pair to list
        (if q (putprop (cdr q) t 'real))      ; Show it's really used
   else                                       ; Otherwise...
        (mapaddconstants a)
   endif                ; Add each atom in the list to the list of atoms
  )                     ; Add each list in the list to the list of lists
  (return dottedpair)))

(defun mapaddconstants (l &aux q)
 (cond
       ((null l) nil)
       ((null (cdr l)) (setq q (zilcoadd (car l) nil))
                       (if q (putprop (cdr q) t 'real)))
       ((atom (cdr l)) (setq q (zilcoadd (car l) nil))
                       (if q (putprop (cdr q) t 'real))
                       (setq q (zilcoadd (cdr l) nil))
                       (if q (putprop (cdr q) t 'real)))
       (t (setq q (zilcoadd (car l) nil))
          (if q (putprop (cdr q) t 'real))
          (mapaddconstants (cdr l)))))

