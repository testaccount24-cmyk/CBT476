
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; This SUBR performs the macro expansion for the "LET" macro.
;;;
;;; e.g.
;;;
;;; (LET ((A VALUE-OF-A)
;;;       (B VALUE-OF-B)
;;;       (C VALUE-OF-C))
;;;      (FORM 1)
;;;      (FORM 2)
;;;      (FORM 3)
;;; )
;;;
;;; gives:
;;;
;;; ((LAMBDA (A B C) (FORM 1) (FORM 2) (FORM 3))
;;;  VALUE-OF-A VALUE-OF-B VALUE-OF-C)
;;;
;;;
;;; (LET* ((A VALUE-OF-A)
;;;        (B VALUE-OF-B)
;;;        (C VALUE-OF-C))
;;;       (FORM 1)
;;;       (FORM 2)
;;;       (FORM 3)
;;; )
;;;
;;; gives:
;;;
;;; ((LAMBDA (A)
;;;   ((LAMBDA (B)
;;;     ((LAMBDA (C) (FORM 1) (FORM 2) (FORM 3))
;;;     VALUE-OF-C))
;;;    VALUE-OF-B))
;;;  VALUE-OF-A)
;;;
;;; assuming:
;;;
;;; (DEFUN LET  MACRO (X) (MXLET X))
;;; (DEFUN LET* MACRO (X) (MXLET X))
;;;
;;; Destructuring is also supported.
;;;

(defun mxlet (x)
 ((lambda ((macname . macbody))
;
; (CAR MACBODY) = list of variable-value pairs
; (CDR MACBODY) = list of forms
;
   (when (or (null macbody)
             (and (car macbody) (atom (car macbody))))
         (zerror "Invalid syntax" x))
   (mapc #'let-check (car macbody))
   (let-or-let*-expand
            (mapcar #'let-local (car macbody)) ; List of local vars
            (cdr macbody)                      ; The body
            (mapcar #'let-value (car macbody)) ; List of values
            macname))                          ; LET or LET*
 x))

(defun let-or-let*-expand (a b c macname)
;
; a - the list of local variables
; b - the body
; c - the list of values
;
 (cond
  ((eq macname 'let)    `((lambda ,a . ,b) . ,c))
  ((eq macname 'let*)   (let*-expand a b c))
  (t      (zerror "Unknown caller of MXLET" macname))))


(defun let*-expand (a b c)
;
; a - the list of local variables
; b - the body
; c - the list of values
;

 (mxlet
  (cond
   ((null a)        `(let () . ,b))
   ((null (cdr a))  `(let ((,(car a) ,(car c))) . ,b))
   (t
    (multiple-value-bind (decl newbody)
                         (let*-extract-declarations (car a) b)
     `(let ((,(car a) ,(car c)))
            ,.decl
            ,(let*-expand (cdr a) newbody (cdr c))))))))

(defun let-local (x)
 (cond ((atom x) x) (t (car x))))

(defun let-value (x)
 (and (consp x) (cdr x) (cadr x)))

(defun let-check (x)
 (and (consp x)
      (cdr x)
      (cddr x)
      (warn "Invalid LET bind spec" x))) ; changed from ERROR 04/28/86
                                         ; to get around Macsyma bug

(defun let*-extract-declarations (a b)

;;; This function returns two values:
;;;
;;; (1) NIL or a DECLARE SPECIAL form for args in A that are special
;;;     (that is, a list of one such form for nconcability)
;;; (2) a copy of the body B with possibly macroexpanded forms in it
;;;
;;; First, locate any declarations in the body.  We won't take them
;;; out of there, but we do want to know which variables are
;;; declared special therein.  Any variables that are declared
;;; special and also occur in the local LET* variables must have
;;; SPECIAL declarations inserted in the appropriate places between
;;; the inner LETs.
;;;
;;; Note that we can get away with leaving the original special
;;; declarations where they were found, because SPECIAL declarations
;;; are defined to be pervasive wrt REFERENCES, and we assume that
;;; either no BINDINGS of those variables are duplicated further in
;;; or (if they are, which is probably an error anyway, though this
;;; has been hotly debated) they're SPECIAL too!
;;;

 (multiple-value-bind (nil declarations body pmxform pmxvalid)
                      (parse-body b)

  (when pmxvalid (setq body (cons pmxform (cdr body))))

  (let (
        (d nil)
        (locals (llvars a)) ; Get lambda list vars from
                            ; possible destructuring-form arg.
       )
       (dolist (declaration declarations)
               (and (consp declaration)
                    (eq (car declaration) 'special)
                    (dolist (variable (cdr declaration))
                            (and (memq variable locals)
                                 (not (memq variable d))
                                 (push variable d)))))

;;; "d" is now a list of the variables that need to be declared
;;; special in the currently enclosing LET.

   (when d (setq d `((declare (special . ,d))))) ; To be NCONCed in.

   (when declarations
         (setq body `((declare . ,declarations) . ,body)))

   (values d body))))


;;;;; Obsolete code fragments start here. ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; This used to be used by LET* when it expanded into nested PROGs.
; Now that it expands into nested lambdas, we don't need it.
;
;(defun inner-let* (a b c g)
; (prog (v h)
;  (setq v (car a))
;  (return
;   (if c
;    then
;     `(prog (,.(let-locals v) ,(setq h (gensym)))
;            ,(let-build-setq v g)
;            (setq ,h ,(car c))
;            (return ,(inner-let* (cdr a) b (cdr c) h)))
;    else
;     `(prog ,(let-locals v)
;            ,(let-build-setq v g)
;            (return (progn . ,b)))))))
;
;(defun let-variable-list (x)
; (mapcan #'let-locals x)
;)
;
;(defun let-locals (x)
; (cond
;  ((null x)        nil)
;  ((atom x)        (list x))
;  ((null (cdr x))  (let-locals (car x)))
;  (t               (nconc (let-locals (car x))
;                          (let-locals (cdr x))))))
;
;
; This hack is no longer needed now that full destructuring DEFUN
; is supported in the ZIL compiler and interpreter.
;
;;; (defun let-destructure-hack (a)
;;;  (prog (auxforms z g de-vars de-forms)
;;;   loop (or a (go finish))
;;;        (if (atom (car a))
;;;         then
;;;            (push (car a) z)
;;;         else
;;;            (setq auxforms (let-add-args (car a) auxforms))
;;;            (push (setq g (gensym)) z)
;;;            (push `(desetq ,(car a) ,g) de-forms)
;;;        )
;;;        (setq a (cdr a))
;;;        (go loop)
;;;   finish
;;;        (setq de-vars
;;;         (if  auxforms
;;;          then
;;;              `(,.(nreverse z) &aux . ,(nreverse auxforms))
;;;          else
;;;              (nreverse z)
;;;          endif
;;;         )
;;;        )
;;;        (return (cons de-vars (nreverse de-forms)))))
;;;
;;; (defun let-add-args (var arglist)
;;;  (cond
;;;   ((null var)       arglist)
;;;   ((atom var)       (list* var arglist))
;;;   (t (let-add-args (car var)
;;;                    (let-add-args (cdr var) arglist)))))
;;;
