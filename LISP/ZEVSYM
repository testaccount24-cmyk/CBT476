
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; ZEVSYM
;
; This is the function that underlies evaluation of symbols in
; the interpreter, as well as SYMEVAL.
; It attempts to locate the binding of a symbol, and returns that
; binding in the form of a CONS cell, the CAR of which is that
; symbol and the CDR of which is that value.
;
; If the variable has an AUTOVALUE property, we process it much like
; the AUTOLOAD property of function names... if it is a string, the
; file of that name is loaded; if it is a list, the list is evaluated
; as a form.  The AUTOVALUE property cannot be a symbol.
;
; If there is no current binding of the symbol in question, NIL is
; returned.  It is the responsibility of the caller to signal an
; error if required in this case for an unbound variable.
;
; Note: If the CDR of the binding cell contains the "unbound marker",
;       NIL is also returned, since the binding is valueless.
;

;
; Argument 1 (required) - the symbol to be evaluated.
;

;;;
;;; Notes:
;;;
;;; Arg 1 is expected to be a symbol other than T or NIL.
;;;
;;; Although argument 1 must be a symbol, no error check is done in
;;; this function since it is expected primarily to be called by EVAL
;;; and exists as a separate function to permit efficiency.  Use EVAL
;;; if you're not sure whether something to be evaluated is a symbol.
;;;
;;; This code SHOULD NOT SETQ arg 1, since ZILVSYM may use arg 1 from
;;; the stack to display an "unbound variable" error message.
;;;

;;;
;;; The current deep binding scheme implements fake value cells
;;; (actually binding cells) for global variables.  This consists of a
;;; BINDING property on the property list of the symbol.
;;;
;;; When we implement shallow binding, this function will probably
;;; go away entirely.  Only the evaluator's processing of symbols
;;; will do "alist-searching", and probably doesn't even call ZEVSYM
;;; to do the job anyhow for lexically scoped variables.
;;;


(eval-when (compile load eval)
 (defmacro specialp (var)
  `(get ,var 'special)))

;;; Actually, ZEVSYM doesn't check to see if a variable is SPECIALP.
;;; Its caller (e.g. the evaluator) should do that to see if it
;;; ought to call ZEVSYM in the first place.

(defun zevsym (x &aux b)
 (cond
  ((setq b (assq x (special-alist)))  ; If binding found on alist,
   (if (eq (cdr b) (zilunbnd)) ; then if binding is valueless
       nil                     ;      then return without a binding
       b))                     ;      else return the binding
  ((neq (setq b (pbind x)) (zilunbnd)) ; Else if there's global binding
   (if (eq (cdr b) (zilunbnd)) ; then if binding is valueless
       nil                     ;      then return without a binding
       b))                     ;      else return the binding
  ((zevsym-autoload x)     ; If an "autoloading symbol", then
   (zevsym x))             ;  perform autoloading and retry.
  (t nil)                  ; Otherwise variable is unbound.
 )
)

;
; This subfunction resolves a symbol being used as a variable
; when it currently has no value.  Resolution is based
; on the value of the AUTOVALUE property, as follows:
;
;   If the AUTOVALUE property is a string, then it is the name of a
;   data set (file) to be loaded.
;
;   If the AUTOVALUE property is a non-null list, then it is a form
;   to be evaluated.
;
; In both of the above cases, it is presumed that the file or form,
; when loaded or evaluated, will cause the variable name in question
; to become defined.
;
; To prevent infinite looping in the evaluator, this function removes
; the AUTOVALUE property from the variable name if it is a string or
; a list.
;
; The removal of the AUTOVALUE property is skipped if an error occurs
; processing the AUTOVALUE property.
;
; NOTE: If a form is the value of the AUTOVALUE property, it is
;       evaluated in the default environment, NOT in the environment
;       active at the time of execution.
;
; Code very similar to that in ZEVAUTO.
;

(defun zevsym-autoload (x)
 (prog (v s a)
  (setq v (or (get x 'autovalue) (return nil)))
  (cond
   ((stringp v)                    ; If string, file to be loaded.
    (in-autoload-environment (load v)))
   ((consp v)                      ; If list, form to be evaluated.
    (in-autoload-environment (eval v)))
   (t           (zerror "Invalid AUTOVALUE property on variable " x)))

  (remprop x 'autovalue)           ; Remove it.
  (return t)
 )
)

(defmacro in-autoload-environment (&body body)
 `(unwind-protect
   (progn
          (setf a (special-alist))    ; Save dynamic SPECIALs.
          (setf (special-alist) nil)  ; Suppress dynamic SPECIALs.
          ,@body                      ; Execute autoload body
   )
   (progn
          (setf (special-alist) a)    ; Restore dynamic SPECIALs.
   )
  ))
