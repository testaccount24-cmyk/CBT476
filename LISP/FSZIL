
;;;
;;; ZIL version 1.3 - November 1988
;;;

;;;
;;; Full screen ZIL.  This function starts up
;;; an ISPF-based Lisp interpreter.
;;;

(declare (special *version* * ** *** - -- --- + ++ +++ / // ///))

(declare (special *fsinput* *fsrefresh* *fsfunctions*))

(defun fszil ()
 (zfsexec :panel-name           "FSZIL"
          :panel-library        nil
          :short-appl           "Lisp"
          :long-appl            (string-append "ZIL Lisp " *version*)
;;;;;;;;  :terpri-exit-function nil
          :initialize-function  #'fszil-user-initialize
;;;;;;;;  :terminate-function   nil
;;;;;;;;  :panel-init-function  nil
;;;;;;;;  :echo-input-function  nil
          :expr-list-function   #'fszil-user-get-expression-list
          :refreshp-function    #'fszil-user-refreshp
          :eval-expr-function   #'fszil-user-eval-expr
          :good-eval-function   #'fszil-user-good-eval
;;;;;;;;  :bad-eval-function    nil
;;;;;;;;  :post-eval-function   nil
          :display-function     #'fszil-user-display-value
;;;;;;;;  :output-row-function  nil
 )
 t
)

(defun fszil-user-initialize (depth)
 (setq *fsinput* "")
 (setq *fsrefresh* t)
 (setq *fsfunctions* nil)
)

(defun fszil-user-get-expression-list (input trapper)
 (prog (sexpr (z nil) (index 0) (eofval (ncons nil)))
  loop
   (unless
    (ok
     (multiple-value-setq (sexpr index)
      (funcall trapper
        #'(lambda ()
           (read-from-string input nil eofval :start index))))
     (when (eq sexpr eofval)
           (return (nreverse z)))
     (setq +++ ++)
     (setq ++ +)
     (setq + -)
     (setq - sexpr)
    )
    (return (nreverse z))
   )
   (push `(nil ,sexpr t) z)
   (go loop)))

(defun fszil-user-refreshp () *fsrefresh*)

(defun fszil-user-eval-expr (expr fsdisplayp trapper
                             &aux winp vals tempfun)
;;;; check *fsfunctions*???
 (funcall trapper
  #'(lambda ()
      (setq vals (multiple-value-list (eval expr)))))
 vals)

(defun fszil-user-good-eval (vals fsdisplayp)
 (setq /// //)
 (setq // /)
 (setq / vals)
 (setq *** **)
 (setq ** *)
 (setq * (car vals))
)

(defun fszil-user-display-value (vals)
 (cterpri)
 (dolist (val vals)
         (prin1 val)
         (terpri)))

