
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This generates code to push variables on the alist if they are
; "declared special" or otherwise found to be used as free variables
; elsewhere.  One variable at a time is handled.
;
; Note: ASAVED is RPLACA'd instead of reconsing.  This is required
;       because ASAVED itself is made the value of the CURALIST
;       property by ZCGBPROG, and ZCGSTTRG checks this via EQ.
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zcgbind (a)
 (prog
       (var  ; the local variable being bound
        lbl  ; the exit label which may need a POPALIST property
        v    ; an item to receive the value if SETQ is involved
        s    ; the target of the value to be set
        m    ; the new stack location if an ALIST must be saved
        p    ; a stack location used by ALIST processing
        dec  ; the variable's SPECIAL declaration if present
        o    ; the variable's stack offset
        pair ; the dotted pair representing the variable symbol
        binder ; the dotted pair representing the binding fun to call
        nam  ; the name of the variable being processed
        bindingtype ; the value of the BINDINGTYPE property of binding
        type ; SPECIAL or FLUID
       )

  (desetq (var lbl v s) a)
;
; Code to set our variable if it is a free variable in another subr.
; This code places pointers to such variables on one of the ALISTs.
; This code performs the function previously handled by ZCGADDVA.
;

;
;***********************************************************************
;*                                                                     *
;* Do for variables declared "special" or for "free" variables         *
;*                                                                     *
;***********************************************************************
;

;
; Remember - "top-level" DECLARE SPECIAL adds the variable to
;            the corresponding FREEVARS list, even if it's never
;            really used.
;            "Local" DECLARE SPECIAL doesn't add the variable to
;            any FREEVARS list, though it does mark the local variable.
;
; Note that at this point, if the variable was not locally declared
; SPECIAL but was globally declared so, we make it look as if
; it had been locally declared the same way, for convenience.
;

 (setq bindingtype (get (cdr var) 'bindingtype))

  (case (car bindingtype)
   ((nil)    (return)) ; Do no more if not a "free" variable.
   (special

    ;; Code to put variable on special ALIST.
    ;; If ALIST has not been saved, do it and tell where it was done.

    (unless (car special-asaved)
     (setq p (car pdmax))             ; Get saved-alist stack offset.
     (setq m (+ p 4))                 ; Get new top-of-stack offset.
                               ; Replace top of special-ALIST stack.
     (rplaca special-asaved (cons 'salist p))
     (setq pdmax (cons m (cdr pdmax)))  ; Replace top of STACK stack.
     (if (> m stackmax)
         (setq stackmax m))          ; Set new high water mark.

     (putprop lbl p 'popsalist)      ; Make exit label restore ALIST.

     (zcgemit 4 () "L" "0,ZLCSALST"    "Get address of special ALIST.")
     (zcgemit 4 () "ST" `("0," ,p "(,11)")           "Store on stack.")

    )
    (setq binder '("ZLCSBND" . "ZILSBND"))
   )

   (fluid

    ;; Code to put variable on fluid ALIST.
    ;; If ALIST has not been saved, do it and tell where it was done.

    (unless (car fluid-asaved)
     (setq p (car pdmax))             ; Get saved-alist stack offset.
     (setq m (+ p 4))                 ; Get new top-of-stack offset.
                               ; Replace top of fluid-ALIST stack.
     (rplaca fluid-asaved (cons 'falist p))
     (setq pdmax (cons m (cdr pdmax)))  ; Replace top of STACK stack.
     (if (> m stackmax)
         (setq stackmax m))          ; Set new high water mark.

     (putprop lbl p 'popfalist)      ; Make exit label restore ALIST.

     (zcgemit 4 () "L" "0,ZLCFALST"    "Get address of lexical ALIST.")
     (zcgemit 4 () "ST" `("0," ,p "(,11)")           "Store on stack.")
    )
    (setq binder '("ZLCFBND" . "ZILFBND"))
   )
  )

; Note that the code generator will not consider a variable to be
; SPECIAL or FLUID until the CDR of the binding type is T.
; In this way, INIT forms that set variables before they are scoped
; can work properly.

   (setq type (car bindingtype))       ; SPECIAL or FLUID
   (setq pair (cdr bindingtype))       ; Get the atom for the variable.
   (rplacd bindingtype t)              ; Activate specialness/fluidity.

  (cond
   ((get (cdr pair) 'implicitly-free)
    (princ "Warning - ")
    (prin1 (car var))
    (princ " is a local variable in use as a free ")
    (princ type)
    (princ " variable.")
    (terpri))
   ((eq type 'fluid)
    (princ "Note - ")
    (prin1 (car var))
    (princ " is a local variable captured by a lexical closure.")
    (terpri))
   (t
    (princ "Note - ")
    (prin1 (car var))
    (princ " is a local variable that has been declared SPECIAL.")
    (terpri)))

   ; Set the LOCATION property, to insure that
   ; the atom is addressable by the code.

  (or main
      (get (cdr pair) 'location)
      (putprop (cdr pair) (gensym) 'location))

; Since this locally bound variable is be made available as a "free"
; (special or fluid) variable, generate code to replace the value on
; the stack with a pointer to an ALIST cell which contains the variable
; name and its value.

  (setq nam (if (> (string-length (car pair)) 20)
            (cdr pair) (car pair))
        o   (get (cdr var) 'offset))

  (if (get (cdr var) 'lexprarg)
   then
    (zcgemit 4 () "L" "2,0(,11)"            "Get LEXPR stack pointer.")
    (zcgemit 4 () "L" "2,0(,2)"               `("Load value of " ,nam))
   else
    (zcgemit 4 () "L" `("2," ,o "(,11)")      `("Load value of " ,nam))
   endif
  )
  (zcgemit 4 () "L" `("15," ,(car binder))
                                `("Get address of " ,(cdr binder) "."))
  (zcgemit 4 () "L" `("1," ,(get (cdr pair) 'location))
                                            `("Load address of " ,nam))
  (zcgemit 2 () "BALR" "3,15"             `("Call " ,(cdr binder) "."))
  (if (get (cdr var) 'lexprarg)
   then
    (zcgemit 4 () "L"  "14,0(,11)"          "Get LEXPR stack pointer.")
    (zcgemit 4 () "ST" "1,0(,14)"       "Store pointer to ALIST cell.")
   else
    (zcgemit 4 () "ST" `("1," ,o "(,11)")
                                        "Store pointer to ALIST cell.")
   endif
  )
 )
)


