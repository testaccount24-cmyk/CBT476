
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
;
; ZILCO
;
;**********************************************************************
;
;
; This is the main-line module of the compiler.  Note use of PROG to
; define pseudo-globals that can be accessed via the free variable
; mechanism.
;
; The compiler is invoked as follows:
;
; //stepname EXEC PGM=ZILCO,PARM='abxxxxxxxx'
;
; where:
;
;    a is P (program), F (function) or M (module)
;    (a can be Y (program) or N (function) for compatibility)
;    b is Y (debug mode is active) or N (debug mode not active)
;    xxxxxxxx is the name of the source program
;
; Required files:
;
;    SRC  (Input)   Contains the input LISP source program.
;
;    CODE (Output)  Contains the generated assembler source code.
;
;
;**********************************************************************
;
; Change activity:
;
; 02/23/87 Bootstrapping compiler for ZIL 1.2 to ZIL 1.3.
;
; 06/12/87 The first version of the compiler to run in ZIL 1.3
;          for the purpose of correct compilation of ZIL 1.3 code.
;
; 12/16/88 Cosmetic cleanup - removed old #-ZIL13 stuff, etc.
;
;**********************************************************************

(include #.(zil-source-member zilmacs)) ; ZILCO macros.

(declare (special *version*))

(set-feature 'zilco)  ; This is ZILCO, the compiler.

(terpri)
(princ "ZILCO: LISP compiler for MVS - Version ")
(princ *version*)
(princ #.(string-append " - " (ppdate)))
(terpri)
(princ
 "       (c) Copyright 1988 Charles Stark Draper Laboratory, Inc."
)
(terpri)
(terpri)


#-zil13  ; During bootstrap phase only...

(progn
 (terpri)
 (princ "Target language........... ZIL 1.3")
 (terpri)
 (princ "Implementation language... ZIL 1.2")
 (terpri)
 (terpri)
)

(setabend t)   ; Enable ABEND interception.

(funcall 'zilcoint)     ; Perform compiler initialization.
                        ; Done via FUNCALL to allow ZILCOINT to be
                        ; frequently recompiled without having to
                        ; relink the entire compiler each time.

(let*
      ((parmlist    (explodec (getparm nil)))
       (debug?      (eq (cadr parmlist) 'y))
       (source-name (concatl (cddr parmlist)))
       (kind
                    (case (car parmlist)
                     ((P Y)  'program)
                     ((F N)  'function)
                     ((M)    'module)
                     (t (zerror "Bad parm passed to ZILCO" parmlist))))
       (comcode 0)
      )
      (princ  "Compilation arguments:      Source.............")
      (princ  source-name)
      (terpri)
      (princ  "                            Kind...............")
      (princ  kind)
      (terpri)
      (princ  "                            Debug?.............")
      (princ  debug?)
      (terpri)
      (terpri)
      (setq comcode
            (catch 'zilcocom-error
                   (unless (ok (zilcocom source-name kind debug?))
                          (terpri)
                          (princ "*** Severe LISP error. ***")
                          (terpri)
                          (princ "*** ZIL compilation terminated. ***")
                          (terpri)
                          (exit 16))
                   0))
      (unless (zerop comcode)
              (terpri)
              (princ "ZIL compilation failed, error code ")
              (prin1 comcode)
              (terpri)
              (exit comcode))
)
(terpri)
(princ "ZILCO: LISP compiler (Version ")
(princ *version*)
(princ ") ended.")
(terpri)

