
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; "ZCGOPT"
;
; This subroutine generates code for the P-code "OPTIONAL" form.
;
; This code merely checks an &optional arg to see if it has been
; supplied and, if so, branches to the specified label (the code
; that initializes the variable follows and is what gets branched
; around).
;
;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 06/23/88 - Now does the same check as ZCGSTVRS does to see if the   *
;*            &OPTIONAL variable in question, as well as any           *
;*            associated SUPPLIED-P variable, is never referenced.     *
;*            If this is the case, no code is generated at all for     *
;*            the whole mess unless there is an initialization form.   *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zcgopt (a) ;
 (prog
       (b   ; the &optional variable in question
        l   ; the label to branch to
        o   ; a stack offset to be computed
        m   ; a name ot be inserted in the comment field
        s   ; a SUPPLIED-P variable associated with the &optional var
       )
       (desetq (b l nil nil) a)  ; "V" and "S" not used.
       (when (or (not (memq (get (cdr b) 'init) '(t nil)))
                 (zcgopt-setq-needed b)
                 (and (setq s (get (cdr b) 'suppliedp))
                      (zcgopt-setq-needed s)))
         (setq o (get (cdr b) 'offset)
               m (if (> (string-length (car b)) 17) "arg" (car b)))

         (zcgemit 4 () "C" `("13," ,o "(,11)")
                                              `("If caller supplied " ,m))
         (zcgemit 4 () "BNE" l             "then bypass optional init.")
       )
 )
)

(defun zcgopt-setq-needed (v)
 (or (get (cdr v) 'used)
     (get (cdr v) 'mustinit)))
