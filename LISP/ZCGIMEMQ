
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; "ZCGIMEMQ"
;;;
;;; This routine generates the inline code for MEMQ.
;;;
;;; The registers on input were selected according to the principle
;;; that R2 is to be the return value register, and R2 cannot
;;; be register 0 (although R1 could conceivably be).
;;;
;;; This function must release register R1, and return R2.
;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun zcgimemq (r1 r2 v s com &aux (lb (gensym))
                                    (lc (gensym)))

 (zcgrels r1)

 ;
 ; If MEMQ is being called predicatively, generate code to do the
 ; branch directly.  Otherwise, generate code to return the sublist
 ; or NIL as the value.
 ;
 ; Note that, because the MEMQ code does not end in a NIL test like
 ; other predicates, we can handle only very basic cases.
 ;

 (cond
  ((and (null v) ; See if value unused and predicate call without GOTO
        (consp s)
        (or (eq (car s) 'gonil)
            (eq (car s) 'gonotnil))
     ;;                                     ;; ???
     ;; (null (get (cadr s) 'gotag))        ;; ???
     ;; (null (get (cadr s) 'progexit))     ;; ???
     ;;                                     ;; ???
        (zilcovta s))

   (let* (((g lo) (zcgsgoto s))
          (lx (case g
                    (gonil    (gensym))
                    (gonotnil lo)
                    (t        (zerror "ZGCSGOTO lossage" s g lo)))))

    (when debug
          (cterpri)
          (princ "S=") (prin1 s) (terpri)
          (princ "Property list of ") (prin1 (cadr s)) (princ " is: ")
          (terpri)
          (prin1 (plist (cadr s)))
          (terpri)
          (let ((x (get (cadr s) 'rettarg)))
           (when (consp x)
            (let ((x (cadr x)))
             (princ "Property list of ") (prin1 x) (princ " is: ")
             (terpri)
             (prin1 (plist x))
             (terpri)
          )))
          (princ "(ZCGSGOTO S)=") (prin1 `(,g ,lo)) (terpri)
          (princ "Property list of ") (prin1 lo) (princ " is: ")
          (terpri)
          (prin1 (plist lo))
          (terpri)
    )

    (putprop lo t 'referenced)
    (zcgemit 4 () "B" lc                                     com)
    (zcgemit 4 lb "C" `(,r1 ",##CAR(," ,r2 ")")              com)
    (zcgemit 4 () "BE" lx                                    com)
    (zcgemit 4 () "L" `(,r2 ",##CDR(," ,r2 ")")              com)
    (zcgemit 2 lc "CR" `(,r2 ",10")                          com)
    (zcgemit 4 () "BNE" lb                                   com)
    (when (eq g 'gonil)
     (zcgemit 4 () "B" lo                                    com)
     (zcgemit 0 lx "DS" "0H"                                 com)
    )
    (zcgrels r2)    ; Return register will not be used.
    (setq cc 'memq) ; Tell ZCGSTTRG not to generate anything.
   )
  )
  (t                            ; Value is used...
   (let ((lx (gensym)))
    (zcgemit 4 () "B" lc                                     com)
    (zcgemit 4 lb "C" `(,r1 ",##CAR(," ,r2 ")")              com)
    (zcgemit 4 () "BE" lx                                    com)
    (zcgemit 4 () "L" `(,r2 ",##CDR(," ,r2 ")")              com)
    (zcgemit 2 lc "CR" `(,r2 ",10")                          com)
    (zcgemit 4 () "BNE" lb                                   com)
    (zcgemit 0 lx "DS" "0H"                                  com)
   )
  )
 )

 r2

)

