
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is the compiler transform for EXPT.
;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Cannot transform the following:
  ;;
  ;; (EXPT x 0) could be 1 or 1.0 or 1.0F0
  ;; (EXPT 0 x) could be 0 or 1 or an error
  ;; (EXPT 1 x) could be 1 or 1.0 or 1.0F0
  ;;
  ;; More interesting transformations involving ASH would be possible
  ;; if we knew the type(s) of the argument(s).  That requires
  ;; processing of declarations...
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 06/20/88 - Support for multiple values.                             *
;*                                                                     *
;***********************************************************************
;


(eval-when (eval)
 (deftrans expt   zxexpt)
 (deftrans **     zxexpt)
 (deftrans Â¬      zxexpt)
)

(defun zxexpt (xform xenv xcon)

 (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; There must be exactly 2 arguments.  If not, skip transform.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ((not (eql (length xform) 3))
   xform)

  (t
   (let* (
          (arg1 (cadr xform))
          (arg2 (caddr xform))
          (carg1 (zilcocon arg1 nil))
          (carg2 (zilcocon arg2 nil))
         )

         (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If both arguments are constant, perform the test at compile time.
  ;;
  ;; Note: If errors (like non-numeric arg) occur, the compiler
  ;;       transform mechanism will trap the error and suppress
  ;;       the transformation.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((and carg1 carg2)
           (warn "Performing compile-time exponentiation" xform)
           (expt (car carg1) (car carg2)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Errors:
  ;;
  ;; (EXPT not-a-number x)
  ;; (EXPT x not-a-number)
  ;; (EXPT x bignum)
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((and carg1 (not (numberp (car carg1))))
           (zerror "Non-numeric first argument to EXPT" xform))

          ((and carg2 (not (numberp (car carg2))))
           (zerror "Non-numeric second argument to EXPT" xform))

          ((and carg2 (bigp (car carg2)))
           (zerror "Second argument to EXPT is a bignum" xform))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; (EXPT x 1) --> (VALUES x)
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((eql arg2 1)
           `(values ,arg1))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; (EXPT x 2) --> (ZILMUL x x)
  ;; (EXPT (foo) 2) --> ((LAMBDA (G00001) (ZILMUL G00001 G00001)) (foo))
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((eql arg2 2)
           (if (local-variable-p arg1)
               `(zilmul ,arg1 ,arg1)
               (let ((g (gensym)))
                    `((lambda (,g) (zilmul ,g ,g)) ,arg1))))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Otherwise, no transformations apply.  Return the original form.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

           (t xform))))))

(defmacro local-variable-p (x)       ; Please, x must be a symbol.
 `(and (symbolp ,x) (memq ,x xenv)))

