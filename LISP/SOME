
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; "SOME"  - an iterator a la NIL, viz.
;
; (some #'foo-p list1 list2 ...) if foo-p is true of at least one of the
;                                element(s), returns foo-p thereof.
;
; The compiler really ought to transform this into inline code,
; a la the mapping functions.
;

(defun some1 (fun lis) ; case of 1 list.
 (cond
  ((null lis) nil)
  ((atom lis) (zerror "Argument 2 to SOME not a list" lis))
  (t
   (prog ()
      loop
           (return (or (funcall fun (car lis))
                       (when (setq lis (cdr lis))
                             (go loop))))))))

(defun some (fun &rest lists) ; case of multiple lists.
 (cond
  ((null lists)       nil)
  ((null (cdr lists)) (some1 fun (car lists)))
  (t
   (dolist (list lists)
           (unless (listp list)
                   (zerror "Non-list passed to SOME" list)))
   (prog (v)
    loop (when (mapor #'null lists) (return nil))
         (when (setq v (zilapply fun (mapcar #'car lists)))
               (return v))
         (setq lists (mapcar #'cdr lists))
         (go loop)))))

(defload car zcar)

