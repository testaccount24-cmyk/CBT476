
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; LAMBDA-LIST-VARIABLES
;;;
;;; This function takes a lambda list and extracts all the variable
;;; names from it.
;;;
;;; Errors are signalled for bad lambda list keyword usage.
;;;
;;; Example:
;;;
;;; (llvars '(a (b . c) &optional (d z d?) &rest x)) ==> (a b c d d? x)
;;;

(eval-when ()
#.(defvar lambda-list-keywords
          '(&optional &rest &body &aux &key &allow-other-keys))
)

(defun llvars (bvl)
 (prog (z mode c c1 c3)
  loop
       (or bvl (return z))
       (cond ((atom bvl)         ; CDR of a dotted pair.
              (push bvl z)
              (return z)))
       (setq c (zcar bvl))    ; An argument spec from the lambda-list.
       (cond
        ((llkeywdp c)       ; If it's a lambda list keyword
         (setq mode
               (car (or (memq c '#.lambda-list-keywords)
                        (zerror "Unrecognized lambda list keyword" c))))
         (setq bvl (cdr bvl))
         (go loop)
        )
        (t
         (case mode
               ((nil)          (go required-arg))
               ((&optional)    (go optional-arg))
               ((&rest &body)  (go rest-arg))
               ((&aux)         (go aux-arg))
               ((&key)         (go key-arg))
               (t (zerror "Lambda list args following keyword" mode)))
        )
       )

 required-arg

       (setq z (nconc (llvars c) z))
       (setq bvl (cdr bvl))
       (go loop)

 optional-arg

       (cond
            ((atom c) (setq c1 c
                            c3 nil))
            (t        (setq c1 (car c)
                            c3 (caddr c))))
       (setq z (nconc (llvars c1) z))
       (when c3
             (setq z (nconc (llvars c3) z)))
       (setq bvl (cdr bvl))
       (go loop)

 aux-arg

       (cond
            ((atom c) (setq c1 c))
            (t        (setq c1 (car c))))
       (setq z (nconc (llvars c1) z))
       (setq bvl (cdr bvl))
       (go loop)

 rest-arg

       (setq z (nconc (llvars c) z))
       (setq bvl (cdr bvl))
       (go loop)

 key-arg

 ;
 ; Format of a &key entry:
 ;
 ; var
 ; (var)
 ; (var initform)
 ; (var initform suppliedp)
 ; ((:var var))
 ; ((:var var) initform)
 ; ((:var var) initform suppliedp)
 ;

       (let (
             (var)
             (variable)
             (suppliedp)
            )
            (cond
             ((atom c)
              (setq variable c
                    suppliedp nil))
             ((atom (setq var (car c)))
              (setq variable var
                    suppliedp (caddr c)))
             ((or (null (cdr var))
                  (cddr var))
              (return nil))
             (t
              (setq variable (cadr var)
                    suppliedp (caddr c)))
            )
            (setq z (nconc (llvars variable)
                           (llvars suppliedp) z))
       )
       (setq bvl (cdr bvl))
       (go loop)

 ))

