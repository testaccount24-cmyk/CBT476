
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
;***********************************************************************
;*                                                                     *
;* This processes BLOCK.                                               *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zccblock (b v s e)
 (let (
       (e (cons (zccmkcec 'block e) e)) ; new environment contour
       (blkexit (gensym))  ; dummy label to which the BLOCK can refer
       (blkname)           ; the name of the block
       (blkbody)           ; the body of the block
      )

  (cond
   ((null b)
    (modq body '(error "Missing block name" 'block)))
   ((progn
     (setq blkname (car b) blkbody (cdr b))
     (not (symbolp blkname))
    )
    (modq body `(error "Invalid block name" ,blkname)))
   (t

  ; Set the name of the block for this contour.

    (setf (zilcec-block-name (car e)) blkname)
    (push (cons blkname blkexit) (zilcec-return-tags (car e)))

  ; Set label properties.

    (putprop blkexit v 'vartarg)
    (putprop blkexit s 'rettarg)
    (putprop blkexit (car e) 'contour)

  ; Start to generate P-code.

    (modq body `(beginblock ,blkexit ,v ,s))

  ; Compile the body of the BLOCK as an implicit PROGN.

    (zccprogn blkbody nil `(goto ,blkexit) e)

  ; Finish up code generation.

    (modq body `(endblock ,blkexit ,v ,s))

  ; Generate return label code.

    (modq body `(label ,blkexit ,v ,s))

 ))))

