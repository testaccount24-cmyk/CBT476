
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;**********************************************************************
;*                                                                    *
;* GEN-CALL                                                           *
;*                                                                    *
;**********************************************************************

;
; Note: Support for FUNCALL.
;       The number of function arguments (which is the number
;       of args to ZILXFUN minus 1 for the function itself and
;       4 for reserved stack slots) is multiplied by 4 to give
;       the size of the stack frame occupied by arguments to
;       the function being FUNCALLed, and this value is placed
;       in register 2.  Then ZILXFUN is BALR'ed to.
;
;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 05/01/88 - More arguments to ZCGSTVRS.                              *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zcgcall (a) ;
 (prog
       (b   ; the name of the function to be called or invoked
        n   ; the number of arguments passed to the function
        v   ; an item to receive the value if SETQ is involved
        s   ; the target of the value to be set
        r   ; a register to be used
        o   ; an offset to be generated
        l   ; a location label for the V-con associated with the subr
       )
  (desetq (b n v s) a)
  (setq o (car argbase))
  (setq r (zcgresv '\15))
  (zcgresv '\1)
  (zcgresv '\14)
;
; Note that B is a dotted pair with the function name and a symbol.
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Certain system subroutines, such as CONS, accept arguments in
; registers 1 and 2 rather than using the stack.  Generate code
; accordingly.
;
; Since CONS is compiled as an inline routine, this does not apply.
; However, the code is retained because someday it will be needed for
; "fast path" function calls.
;
;      (IF (EQ (CAR B) 'CONS) ; This will be extended to other fns soon
;       THEN
;            (ZCGRESV '\2)
;            (ZCGENOUT NIL 'LM (LIST '|1,2,| O '|(11)|)
;                                         '|Load arguments from stack.|)
;       ELSE
;            (ZCGENOUT NIL 'LA (LIST '|1,| O '|(,11)|)
;                                 '|Set pointer to arguments in stack.|)
;       ENDIF)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (if (eq (car b) (car name))
   then
    (zcgemit 2 () "LR" "15,12"     "Get address for recursive call.")
   else
    (setq l (or (get (cdr b) 'location)
                (putprop (cdr b) (gensym) 'location)))
    (zcgemit 4 () "L" `("15," ,l)      `("Get address of " ,(cdr b)))

    (if (eq (car b) 'zilxfun) ; Special case for FUNCALL hacking.
     then
      (if (eql n 5)
          (zcgemit 2 () "XR" "2,2"           "Load zero argument count")
          (zcgemit 4 () "LA" `("2," ,(* (- n 5) 4))
                                              "Load argument count * 4")
      )

;;;;;else
;;;;;;(zcgenout nil "LA" `("2," ,(* n 4))     "Load argument count * 4")
;;;;;;;Not unless we decide to implement this some day...

     endif
    )
   endif
  )

;
; "LA 1" moved after "L 15" for pipeline turbulence optimization per SKH
;
  (zcgemit 4 () "LA" `("1," ,o "(,11)")
                                    "Set pointer to stacked arguments.")

  (zcgemit 2 () "BALR" "14,15"                      `("Call " ,(car b)))
;
; At this point the return value will be in register 15.
;

  (zcgbase name nil) ; Reload additional base registers if necessary.

;
; Pop call stack contour.
;
; Note that stack popping has to be done before ZCGSTTRG, so that
; references to arguments as the target are resolved correctly.
;

       (setq argbase (cdr argbase))   ; Pop argument base stack
       (setq pdmax (cdr pdmax))       ; Pop stack height

       (zcgstvrs r v s t)    ; Store reg into SETQ variables if any.
       (zcgsttrg r s)        ; Set target to register if any.
       (zcgrels '\1)         ; Free the register.
       (zcgrels '\14)        ; Free the register.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; More unused code, but save it for future reference.
;
;      (IF (EQ (CAR B) 'CONS) THEN (ZCGRELS '\2))
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 ) ; end PROG
) ; end DEFUN ZCGCALL
