
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; ERROR
;;;
;;; This is the Common Lisp compatible ERROR function.  It uses FORMAT
;;; to process the error message string.  However, it also attempts to
;;; be compatible with earlier ZIL (and Maclisp) calls to ERROR by
;;; passing control to ZERROR if the input is not in what appears to
;;; be Common LISP ERROR format.
;;;
;;; Reference: CLtL, 1st ed., pp. 429-430.
;;;

(defmacro apply-format (dest format-string args)
 `(zfmexec ,dest (zfmpars ,format-string) ,args))

(defmacro nl () #.(string #\nl))

(defun error (&optional (format-string nil fs?) &rest args)
 (cond
  ((not fs?)
   (zerror))
  ((or (consp format-string)
       (and args (null (string-index format-string "~"))))
   (apply #'zerror format-string args))
  (t
   (if (ok (error-do-it format-string args))
       (zerror)
       (zerror "Error while formatting error string"
                format-string args)))))

(defun error-do-it (format-string args)
 (when (< (msglevel) 3)
  (error-princ-indented-string (apply-format nil format-string args))))

(defun error-princ-indented-string (string &aux (prefix ";Error: "))
 (cterpri)
 (cond
  ((null (string-index string (nl)))
   (cterpri)
   (princ prefix)
   (princ string))
 (t
  (princ prefix)
  (dotimes (i (string-length string))
           (let ((c (char string i)))
                (tyo c)
                (when (eql c #\nl)
                      (princ ";       "))
                )))))

