
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This compiles code to load constant atomic or list values.
;
; If A is NIL or T, handle that case.
; If A is a "small fixnum", handle that case.
; If A is an atom (other than one of the above)...
;  if A is not in the atom list, add A to the list of atoms.
; If A is a list...
;  if A is not in the list list, add A to the list of lists.
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zccconst (a v s e) ; A is the atom, V the variable, S the target,
                          ; E the environment
 (modq body
  (cond
   ((and (null v) (null s)) ; Nothing to SETQ, no use for value...
    `(setnil nil ,v ,s))  ; Code generator will neutralize this anyhow.
   ((null a)         `(setnil nil ,v ,s))
   ((eq a t)         `(sett t ,v ,s))
   ((and (fixnump a)
         (>= a -1)
         (<= a 255))
                     `(setsmall ,a ,v ,s))
   ((or (symbolp a)
        (numberp a)
        (stringp a)) `(setatom ,(let ((q (zilcoadd a nil)))
                                         (putprop (cdr q) t 'real)
                                       q) ,v ,s))
   ((consp a)        `(setlist ,(zilcoadd a t) ,v ,s))
   (t                `(error "Cannot compile object of this type" ,a))
  )
 )
)
