
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; Macro definitions used by the evaluator (ZILEVAL and ZILAPPLY).
;
; Note: These depend on the structure of the "environment" as
;       defined by the MKNEWENV function.
;
; To change the structure of the environment, see comments in MKNEWENV.
;
;
; To include...
;
; (include #.(zil-source-member zevmacs)) ; Include evaluator macros.
;
; Change activity:
;
; 06/01/88 - PROGTAG replaced by BLOCKTAG and TAGBODYTAG.  See ZILEVAL.
;

(eval-when (compile load eval)   ; ... must be available to SETF too...

 (defmacro bindenv (a) `(zcar ,a))         ; interpreter variables
 (defmacro progenv (a) `(zcar (cdr ,a)))   ; chain of PROG environments
 (defmacro argenv  (a) `(zcar (cddr ,a)))  ; chain of LEXPR environments
 (defmacro specenv (a) `(zcar (cdddr ,a))) ; pervasive SPECIAL variables
 (defmacro fletenv (a) `(zcar (cdr (cdddr ,a))))  ; FLET functions
 (defmacro mletenv (a) `(zcar (cddr (cdddr ,a)))) ; MACROLET macros

 (defmacro progbody   (p) ; the body of the current PROG
  `(zcar ,p))
 (defmacro progrest   (p) ; the part of the body next to be executed
  `(zcar (cdr ,p)))
 (defmacro progvalue  (p) ; the return value
  `(zcar (cddr ,p)))
 (defmacro blocktag   (p) ; a tag that RETURN/RETURN-FROM will throw to
  `(zcar (cdddr ,p)))
 (defmacro tagbodytag (p) ; a tag that GO will throw to
  `(zcar (cddddr ,p)))

 (defmacro make-progenv ()
  `(list nil nil nil nil nil))  ; Same length as progthings above!

 (defmacro specialp (var)  ;  Boy, will THIS ever change.
   `(get ,var 'special)
 )

)

