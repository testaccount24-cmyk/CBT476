
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; ZIL 1.3 documentation tester.
;;;
;;; Syntax: (ZILTEST symbol-or-string)
;;;
;;; where symbol is a member of *ZIL-HELP-LIBRARY* to be tested
;;; or string is a dsname to be tested
;;;
;
;***********************************************************************
;*                                                                     *
;* Created 04/28/88.                                                   *
;*                                                                     *
;***********************************************************************
;

(declare (special *zil-help-library*))

(defun ziltest (x)
 (with-open-file (file
                  (cond
                   ((stringp x)
                    x)
                   ((symbolp x)
                    (string-append "'" *zil-help-library* "(" x ")'"))
                   (t
                    (zerror "ZILTEST arg not a string or symbol" x))))
                 (ziltest-readdoc file x)))

(defun ziltest-readdoc (file name)
 (prog (count)
  loop
   (when (eof file)
         (zerror "No examples found in doc" name))
   (or (stringp name)
       (eql (car (string-scan (readline file))) "Examples:")
       (go loop))
   (when (plusp (setq count (ziltest-putdata file name)))
         (terpri)
         (princ "There are ") (princ count)
         (princ " errors in your documentation or implementation.")
         (terpri))
   (return t)))

(defun ziltest-putdata (=file =name)
 (prog (=x = =y =z count)
  (setq count 0)
 loop
  (and (eof =file) (return count))
  (setq =x (read =file))
  (and (eof =file) (return count))
  (setq = (read =file))
  (and (eof =file)
       (zerror "\"X\" but no \" = Y \" found in doc member" =name))
  (or (eq = '==>) (zerror "No ==> found in doc member" =name))
  (prin1 =x)
  (princ " ==> ")
  ;
  ; To make sure that objects are created properly in V/S space,
  ; we force construction of a new object immediately following
  ; evaluation.  If the object created by the function being
  ; tested didn't set ZLCVSNXT, it will get clobbered by the
  ; new object.
  ;
  (cond
   ((ok (setq =z (eval =x)) (string-append "***clobbered***"))
    (prin1 =z)
    (terpri))
   (t
    (setq =z (list "***ERROR***"))
    (princ "*** No value - error!!! ***")
    (terpri)))
  ;
  ; Must evaluate x before reading y, in case reading y has a side
  ; effect that would change the evaluation of x.  A case in point
  ; is GENTEMP, which returns different values depending on what
  ; has been read in.
  ;
  (setq =y (read =file))
  (and (eof =file) (zerror "\"X = \" but no \"Y\" found."))
  (cond
   ((ziltest-pequal =y =z) #|(princ "You're absolutely right!")|#)
   (t
    (terpri)
    (princ "Wrong!!! Doc and implementation mismatch!")
    (terpri)
    (princ "The documentation says... ")
    (prin1 =y)
    (terpri)
    (princ "The LISP system returns.. ")
    (prin1 =z)
    (terpri)
    (terpri)
    (incf count)))
  (go loop)))

(defun ziltest-pequal (a b)
 (or
  (eql a b)
  (and (symbolp a)
       (symbolp b)
       (eql (pname a) (pname b)))
  (and (dfloatp a)
       (dfloatp b)
       (<= (abs (- a b)) #.(make-flonum #z34100000 #z00000000)))
  (and (sfloatp a)
       (sfloatp b)
       (<= (abs (- a b)) #.(make-flonum #z3C100000)))
  (and (consp a)
       (consp b)
       (ziltest-pequal (car a) (car b))
       (ziltest-pequal (cdr a) (cdr b)))
  (and (vecp a)
       (vecp b)
       (eq (typep a) (typep b))
       (ziltest-pequal (vlist a) (vlist b)))))

