
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;**********************************************************************
;*                                                                    *
;* GEN-LABEL                                                          *
;*                                                                    *
;**********************************************************************

;;;
;;; This generates code for labels.
;;;

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 04/06/88 - Support for GO tag optimization.                         *
;* 05/01/88 - More arguments to ZCGSTVRS.                              *
;* 06/23/88 - Support for PROG and RETURN removed.                     *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zcglabel (a) ; Label (Gxxxxx)
 (prog
       (b   ; the label in question
        v   ; an item to receive the value if SETQ is involved
        s   ; the target of the value to be set
        z   ; a label to be generated for fall-through
        ys  ; a stack location from which the SALIST may be restored
        yf  ; a stack location from which the FALIST may be restored
        x   ; whether or not the label is referenced explicitly
        c   ; indicates that this is a CATCH/THROW label
        tag ; the name of the original GO tag if any
        r   ; a register to be used
       )
  (desetq (b v s) a)
  (if b
     ;then
      (setq z   (get b 'fallthru)
            ys  (get b 'popsalist)
            yf  (get b 'popfalist)
            x   (get b 'referenced)
            c   (get b 'catch)
            tag (get b 'gotag)
      )
     ;else
      (setq x t) ; A null label is used to create an explicit goto.
     ;endif
  )
;
; Generate a label if it is non-NIL and one of the following is true:
;  A SETQ will be done here (V is non-NIL)
;  An ALIST must be restored (Y is non-NIL)
;  A CATCH frame must be unstacked (C is non-NIL)
;  The label is referenced (i.e. a hard-coded branch exists for it)
;
  (if   (or v ys yf x c)
   ;then                      ; Generate label unless name is null.
        (when b
         (zcgemit 0 b "DS" "0H"
                           (when tag
                            `("Tag " ,(substr (tostring tag) 1 32)))))
   ;else
        (return nil)          ; Otherwise quit now, don't go on.
   ;endif
  )
;
; If this label is from a PROG's RETURN, a stacked ALIST pointer or two
; may have to be restored.
;
  (when yf
   (zcgemit 4 () "L" `("14," ,yf "(,11)") "Load stacked alist pointer.")
   (zcgemit 4 () "ST" "14,ZLCFALST"            "Restore lexical alist.")
  )
  (when ys
   (zcgemit 4 () "L" `("14," ,ys "(,11)") "Load stacked alist pointer.")
   (zcgemit 4 () "ST" "14,ZLCSALST"            "Restore special alist.")
  )
;
; If this label is from a CATCH, a CATCH/THROW frame must be unstacked.
; This process includes popping the argument stack.
;
; Additionally, extra base registers must be restored if necessary.
;
  (when c
        (setq pdmax (cdr pdmax))     ; Pop stack height.
        (let ((xs (car special-asaved))
              (xf (car fluid-asaved)))
             (unless (and xs (eq (car xs) 'catch))
              (putdata b (plist b) v s)
              (putdata special-asaved)
              (zerror "ZCGLABEL found non-CATCH thing on SPECIAL-ASAVED"
                     xs))
             (unless (and xf (eq (car xf) 'catch))
              (putdata b (plist b) v s)
              (putdata fluid-asaved)
              (zerror "ZCGLABEL found non-CATCH thing on FLUID-ASAVED"
                     xf))
             (setq special-asaved (cdr special-asaved)
                   fluid-asaved (cdr fluid-asaved))
        )
        (zcgemit 4 () "L" `("14," ,(car pdmax) "(,11)")
                                            "Get previous catch frame.")
        (zcgemit 4 () "ST" "14,ZLCCATCH"   "Restore catch environment.")
        (zcgbase name nil)
  )

  (or v s z (return nil))

  ; If the label has a REGISTER property, use that register.
  ; Otherwise, pick a register and use it.

  (setq r (or (zcgresv (get b 'register)) (zcggtreg)))
  (zcgstvrs r v s t)    ; Store reg into SETQ variables if any.
  (zcgsttrg r s)        ; Set target to register if any.
  (and z (zcgemit 0 z "DS" "0H" nil)) ; Gen fallthru label if any.

 )
)
