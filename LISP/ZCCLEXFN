
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; "ZCCLEXFN"
;;;
;;; This routine compiles the special forms ARG, SETARG and LISTIFY.
;;;
;;; The arguments are checked and code is generated to compile the
;;; functions inline.
;;;

;
;  F is ARG, SETARG or LISTIFY.
;  A is the list of args to the function.
;  V, S and E have their usual P-code-phase meanings.
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun zcclexfn (f a v s e)
 (cond

; First check that the lexically current function is a LEXPR.

  ;; Eventually, check contour for validity of LEXPRness?

  ((null (get (car name) 'lexprarg))
   (modq body `(error "Function call invalid in non-LEXPR" ,f)))

;
; If no args are passed, assume first argument is NIL.
; Otherwise, pre-macroexpand the first arg so it can be analyzed here.
;

  (t
   (if (null a)
       (setq a '(nil))
       (setq a (cons (zilcomex (car a) nil) (cdr a))))

;
; Note that a null arglist will never be passed to one of the
; internal processing functions here.
;

   (case f
    (arg      (zcclexfn-process-arg a v s e))
    (setarg   (zcclexfn-process-setarg a v s e))
    (listify  (zcclexfn-process-listify a v s e))
    (t        (zerror "Invalid caller of ZCCLEXFN" f)))

  )))

;=======================================================================

 (defun zcclexfn-process-arg (a v s e)
  (cond
   ((cdr a)
    (modq body `(error "Too many arguments" 'arg)))
   ((eq (car a) t)                            ; (ARG T)
    (zcclexfn-process-listify '(nil) v s e))  ; compile as (LISTIFY)
   ((null (car a))                            ; (ARG) or (ARG NIL)
    (modq body `(begininline arg 0 ,v ,s))
    (modq body `(inline (arg nil) 0 ,v ,s))
   )
   ((and (fixnump (car a))                ; (ARG n) where n is constant
         (plusp (car a))
         (< (car a) 1024))
    (modq body `(begininline arg 0 ,v ,s))
    (modq body `(inline (arg ,(car a)) 0 ,v ,s))
   )
   (t                                      ; (ARG anything-else)
    (modq body `(begininline arg 1 ,v ,s)) ; compile as inline call
    (zccevcom (car a) nil '(arg (1 arg)) e); compile load of argument
    (modq body `(inline arg 1 ,v ,s))      ; compile as inline (ARG ...)
   )))


;=======================================================================

 (defun zcclexfn-process-setarg (a v s e)
  (cond
   ((null (cdr a))
    (modq body `(error "Too few arguments" 'setarg)))
   ((cddr a)
    (modq body `(error "Too many arguments" 'setarg)))
   ((and (fixnump (car a))            ; (SETARG n) where n is constant
         (plusp (car a))
         (< (car a) 1024))
    (modq body `(begininline setarg 1 ,v ,s))
    (zccevcom (cadr a) nil '(arg (1 setarg)) e);compile load of argument
    (modq body `(inline (setarg ,(car a)) 1 ,v ,s))
   )
   (t                                     ; (SETARG anything-else)
    (modq body `(begininline setarg 2 ,v ,s))  ;compile as inline call
    (zccevcom (car a)  nil '(arg (1 setarg)) e);compile load of argument
    (zccevcom (cadr a) nil '(arg (2 setarg)) e);compile load of argument
    (modq body `(inline setarg 2 ,v ,s)); compile as inline (SETARG ...)
   )))

;=======================================================================

 (defun zcclexfn-process-listify (a v s e)
  (cond
   ((cdr a)
    (modq body `(error "Too many arguments" 'listify)))
   (t                                      ; (LISTIFY anything)
    (unless (assq 'zilxlfy subrs)
            (modq subrs (zilcosym 'zilxlfy 'subrs)))
    (modq body `(begininline listify 1 ,v ,s)) ; compile as inline call
    (zccevcom (car a) nil '(arg (1 listify)) e); load of argument
    (modq body `(inline listify 1 ,v ,s)) ; compile as inline (ARG ...)
   )))

