
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; SORT
;
; Note: This sort does NOT destructively modify its argument.
;       I hope this doesn't upset anyone.
;

(defun sort (l &optional f)
 (when l
       (when (atom l)
             (zerror "Argument to SORT not a list" l))
       ;;;
       ;;; I'd check for proper-list-ness in the loop, but that would
       ;;; slow the sort down too much.  However, I felt that at least
       ;;; a non-cons arg to SORT should be flagged.
       ;;;
       (prog (a z)
        loop
             (setq a (zcar l))
             (setq z
                   (prog (m v)
                         (setq m nil v z)
                    loop (when (or (null z)
                                   (if f (funcall f a (zcar z))
                                         (lessp a (zcar z))))
                               (if m (rplacd m (cons a z))
                                     (setq v (cons a z)))
                               (return v)
                         )
                         (setq z (cdr (setq m z)))
                         (go loop)))
             (when (setq l (cdr l))
                   (go loop))
             (return z))))

