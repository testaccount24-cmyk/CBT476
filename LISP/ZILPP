
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; ZIL pretty printer SUBR.
;
;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 06/17/88 - Now returns no values.                                   *
;*                                                                     *
;***********************************************************************
;

(declare (special *trace*))

(defun zilpp (f &optional o)
 (cond
  ((symbolp f)          (pp-symbol f o))
  ((atom f)             (zerror "Not a function or variable" f))
  ((eq (car f) 'lambda) (pp-lambda f "#<anonymous function>" 'expr o))
  ((eq (car f) 'label)  (pp-lambda (cddr f) (cadr f) 'expr o))
  (t                    (zerror "Not a function or variable" f))
 )
 (cterpri o)
 (values)   ; Return no values, so nothing prints.
)

(defun pp-symbol (f o &aux p)
 (cond
  ((assq f *trace*)
   (let ((z (ziltrace f 'pp)))
        ;
        ; (car z) = 'expr or 'subr
        ; (cdr z) = lambda-expression
        ;
        (case (car z)
         ((nil) (setq p t) (pp-symbol f o))
         (expr  (setq p t) (pp-lambda (cdr z) f 'expr o))
        )))
  ((setq p (get f 'macro)) (pp-lambda p f 'macro o))
  ((setq p (get f 'expr))  (pp-lambda p f 'expr  o))
  ((setq p (get f 'fexpr)) (pp-lambda p f 'fexpr o))
 )
 (when (boundp f)
       (setq p t)
       (pprint `(setq ,f ,(let ((val (symeval f)))
                               (if (and val
                                       (neq val t)
                                       (or (symbolp val) (consp val))
                                   )
                                   `',val
                                   val)))
               o)
       (cterpri o)
 )

 (unless p (zerror "No interpretive function definition or value" f))
)

(defun pp-lambda (bod nam typ out)
 (unless (and (consp bod) (eq (car bod) 'lambda))
         (zerror `("Invalid " ,typ " property") nam bod))
 (let* ((arglist (cadr bod))          ; Argument list.
        (defmacrop (and (eq typ 'macro)
                   (consp arglist)
                   (null (car arglist)))))
       (cterpri out)
       (princ (if defmacrop "(DEFMACRO " "(DEFUN ") out)  ; ))
       (prin1 nam out)                ; Function name.
       (unless (or defmacrop (eq typ 'expr))
               (princ " " out)
               (princ typ out))       ; Function type.
       (princ " " out)
       (cond
        ((and (eq typ 'fexpr)
              (null (cadr arglist)))
                         (pprint (ncons (car arglist)) out))
        ((null arglist)  (princ "()" out))
        ((atom arglist)  (prin1 arglist out))
        (defmacrop       (pprint (cdr arglist) out))
        (t               (pprint arglist out)))
       (terpri out)
       (loop for i in (cddr bod) do   ; Function body.
        (cterpri out)
        (princ " " out)
        (pprint i out)
       )
       (cterpri out)    ; (
       (princ ")" out)
       (cterpri out)
 )
)

