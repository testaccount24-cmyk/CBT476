
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; The macro expander for the DEFFLIC macro.
;

;
; This generates "Fast Loading Interpreted Code", i.e. a compiled file
; of interpreted forms.
; For example...
;
;
; (defflic zffoo "my.lisp(foo)")
;
; takes "my.lisp(foo)" and builds a compilable function out of it that,
; when executed by typing (zffoo) under the interpreter, does the
; following:
;
;     evaluates all forms in file "my.lisp(foo)" (they get stored in
;     compiled form so READ of "my.lisp(foo)" doesn't get involved)
;
; The function looks something like this:
;
;   (defun zffoo (&optional f-print-out f-print-in)
;    (when (lessp (msglevel) 2)
;          (terpri)
;          (princ "Loading FLIC module ZFFOO.")
;          (terpri))
;    (dolist (i '(list of all the forms in my.lisp(foo)))
;            (and f-print-in (print i))
;            (cond
;             (f-print-out (catch nil (print (eval i))))
;             (t           (catch nil (eval i)))
;
;   )))
;

(eval-when (eval)
 (defmacro defflic (a b &optional c d) (mxdeffli a b c d))
)

(defun mxdeffli   (flicname  ; the name of the module to be compiled.
                   flicload  ; the name of the file to be flicified.
                   &optional
                   preexpand-macros? ; T if macros are to be expanded
                                     ; at compile time, else NIL.
                   debug?            ; see what the FLIC'er is reading
                  )
  `(progn
    (defun ,flicname (&optional f-print-out f-print-in)
     (when (lessp (msglevel) 2)
           (terpri)
           (princ ,(string-append "Loading FLIC module " flicname "."))
           (terpri))
     (dolist (i ',(defflic-forms-list flicload
                                      preexpand-macros? debug?))
             (cond
              (f-print-in  (prin1 i) (terpri)))
             (cond
              (f-print-out (catch nil (prin1 (eval i))) (terpri))
              (t           (catch nil (eval i)))

 ;;
 ;; ... might have to change that "catch nil" for Common Lisp someday??
 ;;

    )))))

 (defun defflic-forms-list (flicload preexpand-macros? debug?)
  (prog (form file z)
        (setq file (open flicload 'input))
   loop
        (setq form (catch nil (read file)))
        (cond ((eof file) (close file 'input) (return (nreverse z))))
        (cond (debug? (terpri) (print form) (terpri)))
        (cond (preexpand-macros? (setq form (macroexpand form))))
        (cond
         ((atom form) (princ "Atom ") (princ form)
                      (princ " ignored.") (terpri))
         ((eq (car form) 'eval-when)
          (and (setq form (defflic-eval-when (cdr form)))
               (push form z)))
         (t (push form z)))
        (go loop)))

;
; EVAL-WHEN is interpreted as follows:
;
; COMPILE - evaluate them NOW.
;
; EVAL    - these forms are being evaluated, so include them.
;
; LOAD    - make them executed at load time, so include them.
;

 (defun defflic-eval-when (a)
  (unless a (zerror "No args on eval-when"))
  (let (
        ((times . forms) a)
        z
       )
       (when (memq 'compile times)
             (eval `(progn . ,forms))
             (setq z nil))
       (when (or (memq 'eval times)
                 (memq 'load times))
             (setq  z `(progn . ,forms)))
       z))

