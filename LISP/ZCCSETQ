
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; This compiles the "SETQ" function.
;;; It is implemented as a call to the "ZCCEVCOM" pseudocode
;;; which will ultimately generate code to assign the return value
;;; (generally by doing just a store operation, retaining the value
;;; in the register in which it was found).
;;; The third argument of the pseudocode will be a list of one or more
;;; of the following:
;;;  1. A dotted pair consisting of a variable name and a symbol
;;;     (typically a GENSYM symbol), representing a local binding.
;;;  2. A single atom, representing an unbound variable.
;;;

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 04/25/88 - Support for determination of superfluous initializations *
;*            of PROG and &AUX variables to NIL.  This involves two    *
;*            new fields in the contour that are used to detect cases  *
;*            of a variable unconditionally being set before it is     *
;*            ever referenced.  This is an extension of, and replaces, *
;*            the SETQ-initialization-hacking scheme used in ZCCPROG.  *
;*            This also requires a new P-code form, CSETNIL, and a new *
;*            code generator module, ZCGCSNIL.                         *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zccsetq (b v s e)
 (prog (var val)
       (if   (null b)
        then (return (modq body `(setnil nil ,v ,s))))
  loop (or (cdr b)
           (return (modq body '(error "Odd number of arguments" setq))))
       (desetq (var val . b) b)
       (if   b
        then
             (compile-setq var val nil nil e) ; Not the last pair
             (go loop)
        else
             (compile-setq var val v s e)     ; Last pair
             (return nil)
        endif
       )))

(defun compile-setq (var val v s e)
 (cond
  ((or (null var)
       (not (symbolp var))
       ; otherwise-self-evaluating-or-constant-p var...
       (eq (pbind var) var))
   (modq body `(error "SETQ variable invalid" ,var)))
  (t
   (let (binding newsetq)
    (if (setq binding (assq var (zilcec-bindings (car e))))
     then
        (setq newsetq binding)
     else
        (setq binding (zilcoauv var e))
        (putprop (cdr binding) t 'mustinit)
        (setq newsetq var)
     endif
    )

    ; Make a list of SETQ vars in case of nested SETQ assignments,
    ; and evaluate the form that SETQ's them.

    (zccevcom val (cons newsetq v) s e)

    ; If the variable is local, and it has been set UNCONDITIONALLY
    ; possibly before being referenced, then mark it as such.  For
    ; this to be the case, all contours from the current one down to
    ; AND INCLUDING the binding's contour must be in an "unconditional"
    ; state, and the variable must not have the status of requiring
    ; initialization.

    (when debug
          (putdata newsetq (plist (cdr newsetq)))
    )

    (when (and (consp newsetq)
               (not (get (cdr newsetq) 'mustinit)))
          (let ((c (get (cdr newsetq) 'contour)))
               (loop for cec in e
                     (when debug (putdata cec))
                     when (or (zilcec-tempcond cec)
                              (zilcec-permcond cec))
                     do   (return)
                     when (eq cec c)
                     do   (putprop (cdr newsetq) t 'set)
                          (return)
               )))

   ))))

