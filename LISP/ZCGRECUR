
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;**********************************************************************
;*                                                                    *
;* GEN-TAILRECUR
;*                                                                    *
;**********************************************************************

;
; 10/84 - Modified to correct variable binding environments on tail
;         recursion from within a PROG environment where locals are
;         "special" (i.e. they occur as free variables elsewhere).
;         The previous approach of restoring the alist prior to
;         branching back caused the wrong binding environment to be
;         in effect for the tail-recurring function.  Therefore, we
;         now keep the alist as is but branch back to the part of
;         the code that reestablishes the binding environment from
;         the alist at the point of execution.  To do this, a new
;         pseudoglobal "ZZZCONP" was created to hold the alternate
;         label to branch to for this type of tail recursion.
;
; 05/86 - The above solution was not enough; it did not take into
;         account the fact that when you tail-recur and there are
;         "special" (i.e. they occur as free variables elsewhere)
;         variables around, you can't just come back reusing the same
;         bindings.  Where you lose with this strategy is when the
;         function builds a FUNARG (compiled lexical closure).  Y'see,
;         branching back caused the wrong binding environment to be
;         in effect for the tail-recurring function; even though the
;         VALUES of the variables were correct, the BINDINGS were not.
;         A separate set of bindings MUST be created.  Therefore, we
;         now keep the alist as is but branch back to the part of
;         the code that reestablishes the binding environment from
;         the alist at the point of execution, even when the only
;         "special" variables are in the bottom level itself.  We use
;         the "ZZZCONP" label, as described above, for this.
;

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 05/01/88 - More arguments to ZCGSTVRS.                              *
;*                                                                     *
;***********************************************************************
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun zcgrecur (a) ;
 (prog
       (
;;;;;;; b   ; not used (should be the name of the function)
        n   ; the number of arguments passed to the function
;;;;;;; v   ; not used (should be NIL)
;;;;;;; s   ; not used (should be T)
        r   ; a return register to be used
        p   ; last saved ALIST pointer
        cf  ; last saved catch frame pointer
       )
;;;;;; (setq b (car a)         )
       (setq n (cadr a)        )
;;;;;; (setq v (caddr a)       )
;;;;;; (setq s (cadddr a)      )
       (setq r (zcggtreg)      )

; If tail-recursion is done out of an environment which
; has its own additions to the alist, the "alternate" branch-back
; must be taken.
;
; This situation can be detected by checking the stacks of
; saved alist pointers.  If there are any non-null entries, INCLUDING
; the last one, then we have a situation which requires the alternate
; branch-back.
;
; Also in this case, the storing back of function arguments will be
; different.  If we use the alternate branch-back, which involves
; reestablishing ALIST entries, then we must store argument values
; directly onto the stack as they would be passed by a caller.
; Otherwise, we must do the standard function argument storing,
; updating the alist cell rather than the stack slot.
;
       ; Find non-null element of lists of saved ALIST pointers.
       (setq p (or (loop for x in special-asaved
                         thereis (and x (eq (car x) 'salist)))
                   (loop for x in fluid-asaved
                         thereis (and x (eq (car x) 'falist)))))

       (if (get (car name) 'lexprarg)
        then
         (zerror "ZIL can't optimize tail recursion for LEXPR's!")
        else
;;;;;;;  (loop for k in parms
;;;;;;;   unless (or (get (cdr k) 'aux) (get (cdr k) 'owned))
;;;;;;;   (zcggtarg r (get (cdr k) 'position)) ; Pick up argument "n"
;;;;;;;   (zcgstprm r k p))                    ; Set input parameter "n"

         (let
          ((k
            (loop for q in parms
              count
               (not (or (get (cdr q) 'aux) (get (cdr q) 'owned))))))

          (unless (zerop n)
           (zcgemit 6 () "MVC"
                         `("0(" ,(* k 4) ",11)," ,(car argbase) "(11)")
                                         "Set function args to values.")
         )
        )
       )

;
; If a CATCH frame must be unstacked, do so.
;
; Note: We could search either SPECIAL-ASAVED or FLUID-ASAVED;
;       the CATCH thing gets saved on both for consistency.
;

       (loop for x in special-asaved
             when (and x (eq (car x) 'catch))
                  (setq cf (cdr x)))

       (when cf
     (zcgemit 4 () "L" `("14," ,cf "(,11)") "Get previous catch frame.")
     (zcgemit 4 () "ST" "14,ZLCCATCH"      "Restore catch environment.")
       )

;
; Do it to it.
;

       (zcgemit 4 () "B" (if p zzzconp zzzcont)
                                  "Branch to implement tail recursion.")
;
; Note that stack popping has to be done before ZCGSTTRG, so that
; references to arguments as the target are resolved correctly.
;

       (setq argbase (cdr argbase)) ; Pop argument base stack.
       (setq pdmax (cdr pdmax))     ; Pop stack height.


;;;;;; (zcgstvrs r v s t)    ; Not done for tail recursion.
;;;;;; (zcgsttrg r s)        ; Not done for tail recursion.
       (zcgrels r)           ; Free the register.
 )
)
