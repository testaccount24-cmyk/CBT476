
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
;   "SYMBOLPAIR"
;
;
; This generates a symbol appropriate for an IBM external name.
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun zilcosym (f k)
 (cond
  ( (eq k 'atoms)   (sympair-atoms f k) )
  ( (eq k 'subrs)   (sympair-subrs f k) )
  ( t               (zerror "Invalid arg 2 to ZILCOSYM" K))))

(defun sympair-atoms (f k)
 (cond
  ( (null f)        (zerror "Invalid use of NIL as symbol."))
  ( (eq f t)        (zerror "Invalid use of T as symbol."))
  ( (symbolp f)     (sympair-alpha   f k))
  ( t               (sympair-numeric f  ))))

(defun sympair-alpha (f k)
 (prog (a)
  (return
   (if   (setq a (assq f alfatoms))  ; If it's already an atom
    then
         a                        ; then return existing pair
    else
    if   (or (assq f allsubrs)    ; if not an atom, but a subr
             (rassq f allsubrs))  ; (could be found in either half)
    then
         (sympair-add f (gensym) atoms alfatoms) ; then create a symbol
    else                                         ; else try to use name
         (sympair-add f (sympair-name f k) atoms alfatoms)
    endif))))

(defun sympair-subrs (f k)
 (prog (a f1)
  (setq f1 (or (get f 'cautoload) f)) ; Possibly DEFLOADed subr name.
  (return
   (if   (setq a (assq f allsubrs))   ; If it's already a subr
    then
         a                            ; then return existing pair
    else
    if   (and (setq a (assq f1 alfatoms))  ; If an atom currently exists
              (eq f1 (cdr a)))             ; with the same name as our
    then                                   ; (possibly defloaded) subr
         (sympair-fix f f1)        ; then fix up names and pair them
    else                   ; Else atom has GENSYM name or isn't an atom
         (sympair-add f (sympair-name f1 k) subrs allsubrs)
    endif))))

(defun sympair-numeric (f)
 (prog (l m)
  (setq l (cdr numatoms))   ; Get list of all atoms for this function.
 loop
  (or l                     ; At end, must add a new entry
      (return (sympair-add f (gensym) atoms numatoms)))
  (setq m (car l))          ; Get each pair in list
  (and (eql f (car m))      ; If the types match and values are equal
       (return m))                       ; then return this pair
  (setq l (cdr l))         ; Else try next pair
  (go loop)))

(defun sympair-add (f g l1 l2)
 (prog (p)
  (setq p (cons f g))
  (modq l2 p)
  (if   (numberp f)
   then (remprop g 'length)
        (remprop g 'quoted)
   else (prog (e l)
         (and (get g 'length) (return nil))
         (setq e (explodec f))
         (setq l (length e))
         (putprop g l 'length)
         (putprop g (zilcoquo e) 'quoted)
        )
   endif
  )
  (remprop g 'location)
  (remprop g 'indirect)
  (when (eq l1 subrs)
        (putprop g t 'real))
  (if debug
   then
         (princ "Added ")
         (princ (if (eq l1 subrs) 'subr 'atom))
         (princ ": ")
         (princ p)
         (terpri)
  )
  (return p)))

(defun sympair-name (f k)
;
; Check if name is valid, IBM-style.
;
 (prog (e l g)
  (setq e (explodec f))
  (setq l (length e))
  (setq g
   (if (and (eq k 'atoms)
            (memq f (get '*zilco* 'reserved))
       ) ; If not a subroutine but a reserved name, then can't use.
    then (gensym)
    else
    if (and (plusp l)                       ; Length must not be zero
            (< l 9)                         ; Length must be 1-8
            (null (string-verify f          ; All valid characters
                          "@#$ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"))
            (< (car e) "0")                 ; First must be alpha or
            (neq (car e) '\#)               ;       national but not #.
            (not (eql (substr f 1 3) "ZLC")); Name cannot begin with ZLC
            (not (and (eq (car e) '\G)      ;      or look like a GENSYM
                      (null (string-verify (string-substr f 1 6)
                                           "0123456789" 2))))
       )
    then f
    else (gensym)
    endif
   )
  )
  (putprop g l 'length)
  (putprop g (zilcoquo e) 'quoted)
  (return g)))

(defun sympair-fix (f f1)
;
; If there is a naming conflict between a subroutine name and an atom
; name, the conflict must be resolved in favor of the subroutine.
; F1 is both our prospective subr name and the existing atom name.
;
 (prog (g z)
  (setq g (gensym))   ; Create a new symbol for existing atom
                      ; Copy properties to new symbol
                      ; (Don't use SETPLIST!!!)
  (putprop g (get f1 'length)   'length)
  (putprop g (get f1 'quoted)   'quoted)
  (putprop g (get f1 'location) 'location)
  (putprop g (get f1 'indirect) 'indirect)
  (putprop g (get f1 'real)     'real)
  (and (setq z (assq f1 atoms))
       (rplacd z g))
  (and (setq z (assq f1 alfatoms))
       (rplacd z g))
  (return (sympair-add f f1 subrs allsubrs)))) ; Make a new subr

(defun rassq (a b)
 (loop for x in b
       when (eq a (cdr x))
       return x
       finally (return nil)))

