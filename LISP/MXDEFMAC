
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; DEFMACRO expander.
;
; Model:  (DEFMACRO FOO (A B) (LIST 'SOMETHING 'WITH A 'AND B))
;
; yields: (DEFUN FOO MACRO (NIL A B) (LIST 'SOMETHING 'WITH A 'AND B))
;
; This expander handles both DEFMACRO (for top-level macro definition)
; and XDEFMACRO (for run-time macro definition).
;
; The macro definitions must read as follows:
;
;   (DEFUN DEFMACRO  MACRO (X) (MXDEFMAC X))
;   (DEFUN XDEFMACRO MACRO (X) (MXDEFMAC X))
;
; This implementation of DEFMACRO is dependent on the
; extended macro arglist syntax.  Probably this will change for
; full Common Lisp.
;

(defun mxdefmac (x)
 (prog (dmmac dmname dmargs dmbody)
       (setq dmmac (zcar x))           ; DEFMACRO or XDEFMACRO.
       (or (cdr x) (go error1))
       (setq dmname (zcadr x))         ; Macro name.
       (or (cddr x) (go error1))
       (setq dmargs (zcaddr x))        ; Argument list.
       (or (setq dmbody (cdddr x))     ; Everything else is the body.
           (zerror "Missing DEFMACRO body" dmname))

       (return `(,(if (eq dmmac 'xdefmacro) 'xdefun 'defun)
                 ,dmname macro (nil . ,dmargs) . ,dmbody))

      error1
       (zerror "Too few arguments" 'defmacro)
 )
)

