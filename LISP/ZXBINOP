
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is the compiler transform for ZIL arithmetic binary operators.
;
; These include:
;
;   ZILADD - the 2-argument function underlying + or PLUS
;   ZILSUB - the 2-argument function underlying - or DIFFERENCE
;   ZILMUL - the 2-argument function underlying * or TIMES
;   ZILDIV - the 2-argument function underlying / or QUOTIENT
;   ZILREM - the 2-argument function underlying // or REMAINDER
;
; The primary purpose of this transform is:
;
; (1) Constant folding - evaluation of binary operations on
;     two constants at compile time
;
; (2) Algebraic simplification - elimination of adding zero or
;     multiplying by 1
;
; (3) Conversion to 1+ and 1- where appropriate
;

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 06/20/88 - Support for multiple values.                             *
;*                                                                     *
;***********************************************************************
;


(eval-when (eval)
 (deftrans ziladd zxbinop)
 (deftrans zilsub zxbinop)
 (deftrans zilmul zxbinop)
 (deftrans zildiv zxbinop)
 (deftrans zilrem zxbinop)
 (deftrans lsh    zxbinop)
 (deftrans ash    zxbinop)
 (deftrans rot    zxbinop)
)

(defun zxbinop (xform xenv xcon &aux
                                (func (car xform))
                                (intfunp
                                 (memq func '(zilrem ash lsh rot))))

 (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; There must be exactly 2 arguments.  If not, skip transform.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ((not (eql (length xform) 3))
   xform)

  (t
   (let* (
          (arg1 (cadr xform))
          (arg2 (caddr xform))
          (carg1 (zilcocon arg1 nil))
          (carg2 (zilcocon arg2 nil))
         )

         (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If both arguments are constant, perform the test at compile time.
  ;;
  ;; Note: If errors (like division by zero) occur, the compiler
  ;;       transform mechanism will trap the error and suppress
  ;;       the transformation.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((and carg1 carg2)
           (warn `("Performing compile-time "
                   ,(case func
                          (ziladd "addition")
                          (zilsub "subtraction")
                          (zilmul "multiplication")
                          (zildiv "division")
                          (zilrem "remainder")
                          (t      func)))
                 (car carg1) (car carg2))
           (funcall func (car carg1) (car carg2)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If one of the arguments is a constant, and the other is not,
  ;; then possible transformations depend on the function.
  ;;
  ;; Note that the constant argument must be of the correct type to
  ;; preserve correctness.  Optimizing out a constant of the wrong
  ;; type could prevent the required type coercions.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Errors:
  ;;
  ;; (anyfunc not-a-number x)
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((or (and carg1 (not (numberp (car carg1))))
               (and carg2 (not (numberp (car carg2)))))
           (zerror "Non-numeric argument" xform))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Errors:
  ;;
  ;; (intfun not-an-integer x)
  ;; (intfun x not-an-integer)
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((and intfunp
                (or (and carg1 (not (integerp (car carg1))))
                    (and carg2 (not (integerp (car carg2))))))
           (zerror "Non-integer argument" xform))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; (ZILDIV x 0.0)  --> error
  ;; (ZILREM x 0.0)  --> error
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((and (memq func '(zildiv zilrem))
                carg2 (zerop (car carg2)))
           (zerror "Compile-time division by zero" xform))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; (ZILADD x 0)  --> (VALUES x)
  ;; (ZILSUB x 0)  --> (VALUES x)
  ;; (ZILMUL x 0)  --> not transformed, may go to 0 or 0.0
  ;; (ZILDIV x 0)  --> error
  ;; (ZILREM x 0)  --> error
  ;; (LSH    x 0)  --> (VALUES x)
  ;; (ASH    x 0)  --> (VALUES x)
  ;; (ROT    x 0)  --> (VALUES x)
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((eql arg2 0)
           (case func
                 ((ziladd zilsub lsh ash rot)
                  `(values ,arg1))
                 (t        xform)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; (ZILADD 0 x)  --> (VALUES x)
  ;; (ZILSUB 0 x)  --> (MINUS x)
  ;; (ZILMUL 0 x)  --> not transformed, may go to 0 or 0.0
  ;; (ZILDIV 0 x)  --> not transformed, may go to 0 or 0.0
  ;; (ZILREM 0 x)  --> (PROGN x 0)
  ;; (LSH    0 x)  --> (PROGN x 0)
  ;; (ASH    0 x)  --> (PROGN x 0)
  ;; (ROT    0 x)  --> (PROGN x 0)
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((eql arg1 0)
           (case func
                 (ziladd               `(values ,arg2))
                 (zilsub               `(minus ,arg2))
                 ((zilrem lsh ash rot) `(progn ,arg2 0))
                 (t                    xform)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; (ZILADD x 1)  --> (ADD1 x)
  ;; (ZILSUB x 1)  --> (SUB1 x)
  ;; (ZILMUL x 1)  --> (VALUES x)
  ;; (ZILDIV x 1)  --> (VALUES x)
  ;; (ZILREM x 1)  --> (PROGN x 0)
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((eql arg2 1)
           (case func
                 (ziladd    `(add1 ,arg1))
                 (zilsub    `(sub1 ,arg1))
                 ((zilmul
                   zildiv)  `(values ,arg1))
                 (zilrem    `(progn ,arg1 0))
                 (t         xform)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; (ZILADD x -1)  --> (SUB1 x)
  ;; (ZILSUB x -1)  --> (ADD1 x)
  ;; (ZILMUL x -1)  --> (MINUS x)
  ;; (ZILDIV x -1)  --> (MINUS x)
  ;; (ZILREM x -1)  --> (PROGN x 0)
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((eql arg2 -1)
           (case func
                 (ziladd   `(sub1 ,arg1))
                 (zilsub   `(add1 ,arg1))
                 (zilmul   `(minus ,arg1))
                 (zildiv   `(minus ,arg1))
                 (zilrem   `(progn ,arg1 0))
                 (t        xform)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; (ZILADD -1 x)  --> (SUB1 x)
  ;; (ZILSUB -1 x)  --> not transformed
  ;; (ZILMUL -1 x)  --> (MINUS x)
  ;; (ZILDIV -1 x)  --> not transformed
  ;; (ZILREM -1 x)  --> not transformed
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((eql arg1 -1)
           (case func
                 (ziladd   `(sub1 ,arg2))
                 (zilmul   `(minus ,arg2))
                 (t        xform)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Otherwise, no transformations apply.  Return the original form.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

           (t xform))))))

