
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is the compiler transform for VALUES.
;

(eval-when (eval)
 (deftrans values zxvalues)
)

(defun zxvalues (xform xenv xcon)

 (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; There must be exactly 1 argument.  If not, skip transform.
  ;; Sure, we could transform calls to VALUES where there are
  ;; more (or less) than 1 argument, but we won't bother, at
  ;; least not this time.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ((not (eql (length xform) 2))
   xform)

  (t
   (let* (
          (arg (cadr xform))
          (carg (zilcocon arg nil))
         )

         (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If the argument is not in the form of a function that can
  ;; potentially return multiple values, transform the call to
  ;; an invocation of the arg itself, without VALUES.
  ;;
  ;; (VALUES X) --> X
  ;; (VALUES "foo")  --> "foo"
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((or carg         ; Argument is a constant
               (atom arg)   ; Argument is a variable
               (memq (car arg)
                     '(setq function subr tagbody multiple-value-list))
               (and (eq (get (car arg) 'defined-by) 'system)
                    (get (car arg) 'builtin)
                    (get (car arg) 'inline)
                    (neq (car arg) 'values)))

           arg)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If the call is being evaluated in an environment which does
  ;; not call for multiple values, transform the call to an
  ;; invocation of the arg itself, without VALUES.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

          ((not (memq (car xcon)
                      '(:dummy :value :return :mvlist :mvbind)))
           arg)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Otherwise, no transformations apply.  Return the original form.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

           (t xform))))))

