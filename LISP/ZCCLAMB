
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; "ZCCLAMB"
;;;
;;; This subroutine takes a form (which was previously determined not
;;; to be a symbol) and attempts to compile it as a LAMBDA-expression,
;;; returning the generated name of the function after it has been
;;; added to the list of (compiled) internal procedures.
;;;
;;; If the argument is not a valid LAMBDA- or LABEL-expression, then
;;; ZCCFUNC (compile-subroutine) will flag it as an error.
;;;
;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 04/10/88 - As promised, setting of contour slots to suppress the    *
;*            use of GO and RETURN out of FUNARGS into the FUNARG-     *
;*            enclosing PROG is now implemented here instead of in     *
;*            ZCCMKCEC.  Also, this is done for SUBR's as well as      *
;*            FUNARG's, since the same issues apply.  Some day,        *
;*            when we figure out how to GO/RETURN out of a funarg,     *
;*            we will lift this restriction.  However, we will         *
;*            continue to reset some slots, like the bindings,         *
;*            since that is designed to handle a specific technique    *
;*            of lexical pass-through, as it were.                     *
;* 06/23/88 - Support for DECLARE (BASEREG) removed.                   *
;*                                                                     *
;***********************************************************************
;

;;
;; ALONE = T:    function (toplevel = no)
;;
;; ALONE = NIL:  program  (toplevel = yes)
;;

;
; Note:      Support for multiple base registers mandates that we
;            must propagate the enclosing function's BASEREG property
;            to the lambda function.  Sadly, there is no other way
;            to indicate that we may need this to be compiled with
;            extra base registers, since lambdas don't have names.
;
; Note: Above note is not relevant in ZIL 1.3.
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zcclamb (x p e)
                     ; X is, or should be, a LAMBDA or LABEL expression.
                     ; P is true if the lexical environment must be
                     ; passed through (funarg or pseudo-inline lambda),
                     ; false if not (i.e. SUBR, like DEFUN).
 (prog (lamb lname)
      ;
      ; Give the LAMBDA-function a name.
      ;
       (setq lname (if (eq (car x) 'label)
                       (cadr x)
                       (gentemp (concat (car name) " LAMBDA "))))
      ;
      ; Take the LAMBDA-expression and compile it as a subroutine.
      ;
      ; Do this inside a new contour.
      ;

       (let ((e (cons (zccmkcec (if p 'funarg 'subr) e) e)))
        ;
        ; The particular initialization requirements of a
        ; FUNARG or SUBR contour are handled here.
        ;
        ; The "creator" is used to separate locally bound variables.
        ; Note that the variable list is not inherited across
        ; FUNARG or SUBR type contours.  The compiler needs to access
        ; the "creator chain" to track down variables that are
        ; referenced lexically but must be "heap-allocated".
        ;
        ; If this is a FUNARG contour, the "creator" is the
        ; lexically enclosing contour.  If this is a SUBR
        ; contour, the creator is null.  Otherwise the "creator"
        ; is the same as the creator of the current contour.
        ;
        ; Because the compiler currently does not support the use
        ; of GO and RETURN from inside funargs to outer PROGs,
        ; we suppress it here.  (The interpreter supports it.)
        ;
            (let ((new-cec (car e))
                  (creator (if p (cadr e) nil)))
                 (setf (zilcec-creator     new-cec) creator)
                 (setf (zilcec-bindings    new-cec) nil)
                 (setf (zilcec-go-tags     new-cec) nil)
                 (setf (zilcec-return-tags new-cec) nil)
            )
            (setq lamb (zccexpr lname x nil alone e))
       )
      ;
      ; If it wasn't a LAMBDA-expression, return NIL.
      ;
       (unless lamb
               (modq body `(error "Invalid function form" ,x))
               (return nil))
      ;
      ; Put it on the list of internal procedures.
      ;
       (modq procs lamb)
      ;
      ; Add its name to the list of function names.
      ;
       (modq intfuncs lname)
      ;
      ; Return the name as the value.
      ;
       (return lname)
 )
)
