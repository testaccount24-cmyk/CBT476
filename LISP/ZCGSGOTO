
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;;;
;;; "SUBSUMED-GOTO"
;;;
;
; This routine, given a target of the form (goto/gonil/gonotnil label),
; figures out the ultimate label to branch to.  This is done by means
; of "GOTO subsumption", in which (provided the V-target is nil)
; GOTO'S are subsumed as follows:
;
; GOTO A ---> A: GOTO B            yields... GOTO B
; GONIL A ---> A: GOTO B           yields... GONIL B
; GONIL A ---> A: GONIL B          yields... GONIL B
; GONOTNIL A ---> A: GOTO B        yields... GONOTNIL B
; GONOTNIL A ---> A: GONOTNIL B    yields... GONOTNIL B
; GONIL A ---> A: GONOTNIL B       yields... GONIL (GET B 'FALLTHRU)
; GONOTNIL A ---> A: GONIL B       yields... GONOTNIL (GET B 'FALLTHRU)
;
; Note that:
;
; GOTO A ---> A: GONIL B      does not yield GONIL B
; GOTO A ---> A: GONOTNIL B   does not yield GONOTNIL B
;
; because such a conversion would cause a fallthrough to occur if the
; test had the wrong result.
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun zcgsgoto (s)           ; S is target of label, i.e. (GOxxx lll)
 (prog (c g s2 c2 g2)
  (desetq (c g) s)            ; C = original GOTO/GONIL/GONOTNIL
                              ; G = original target label
  (setq s2 (get g 'rettarg))  ; "S" of above, should be (GOxxx lll)
  (when (atom s2) (return s)) ;
  (desetq (c2 g2) s2)         ; GOTO/GONIL/GONOTNIL of above
                              ; target label of above

; The target label must also do a branch.

  (unless (memq c2 '(goto gonil gonotnil)) (return s))

; If SETQ, ALIST or CATCH processing involved, can't reduce GOTO.

  (when (or (get g 'vartarg)
            (get g 'popsalist)
            (get g 'popfalist)
            (get g 'catch))
        (return s))
;
; If branch types are compatible, the GOTO can be subsumed.
;
  (return
   (cond
    ((eq c c2)      (zcgsgoto s2)                                )
    ((eq c 'goto)   s                                            )
    ((eq c2 'goto)  (list c (cadr (zcgsgoto (list c g2))))       )
    (t              (list c (or (get g 'fallthru)
                                (putprop g (gensym) 'fallthru))) )
   ))))

