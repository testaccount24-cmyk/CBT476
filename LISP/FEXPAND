
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

; "FEXPAND"

; This is the "full macro expander".  It takes a LISP form and does a
; complete codewalk, expanding any and all macros that it finds in it.

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 06/02/88 - New special forms BLOCK, TAGBODY, RETURN-FROM,           *
;*            MULTIPLE-VALUE-BIND, MULTIPLE-VALUE-LIST, THROW.         *
;* 06/23/88 - Support for PROG and RETURN removed.                     *
;*                                                                     *
;***********************************************************************
;
   ;;
   ;; Steps in adding a new special form:
   ;;
   ;; (1) Add it to the list in ZEVINIT.
   ;; (2) Add it to ZILEVAL.
   ;; (3) Add it to FEXPAND.
   ;; (4) Add it to ZILCOTRN.
   ;; (4) Add it to ZILCOINT.
   ;; (5) Figure out how to compile it.
   ;;

(defun fexpand (x)
 (cond
  ((atom x)                           x                              )
  ((consp (car x))                    (cons (fexpand-lambda (car x))
                                            (fexpand-args (cdr x)))  )
  ((not (symbolp (car x)))
   (zerror "FEXPAND: Invalid object in functional position" x))
  ((or (get (car x) 'cmacro)
       (get (car x) 'macro))          (fexpand (fmexpand x))         )
  ((get (car x) '|SPECIAL FORM|)      (fexpand-special-form x)       )
  ((get (car x) 'fexpr)               x                              )
  (t                                  (cons (car x)
                                            (fexpand-args (cdr x)))  )
 )
)

(defun fexpand-lambda (x)
 (if (or (atom x) (atom (cdr x)))
     x
     (case (car x)
      (lambda   (list* (car x)
                       (fexpand-arglist (cadr x))
                       (fexpand-args (cddr x))))
;;;
;;; This ("LABEL") will have to be deleted in favor of Common LISP
;;; LABELS/FLET/MACROLET, which are probably going to be new
;;; special forms.
;;;
      (label    (list (car x) (cadr x) (fexpand-lambda (caddr x))))

      (t        (warn "FEXPAND: Invalid form in functional position" x)
                (warn "FEXPAND assuming it is to be macroexpanded.")
                (fexpand x)))))

(defun fexpand-arglist (x)
 (prog (mode a z)
  loop
       (or x (go end))
       (when (atom x)
             (return (nreconc z x)))
       (setq a (car x))
       (when (llkeywdp a)
        (case a
         ((&optional &aux &rest &body &key)
          (push (setq mode a) z)
          (go cont))
         (t
         (zerror "FEXPAND: Unknown lambda list keyword" a))
        )
       )
       (case mode
        (&optional (cond
                    ((atom a)       (push a z))
                    ((null (cdr a))
                     (push (list (fexpand-arglist (car a))) z))
                    ((null (cddr a))
                     (push (list (fexpand-arglist (car a))
                                 (fexpand (cadr a))) z))
                    (t
                     (push (list* (fexpand-arglist (car a))
                                  (fexpand (cadr a))
                                  (cddr a)) z))))
        (&aux      (cond
                    ((atom a)       (push a z))
                    ((null (cdr a))
                     (push (list (fexpand-arglist (car a))) z))
                    (t
                     (push (list* (fexpand-arglist (car a))
                                  (fexpand (cadr a))
                                  (cddr a)) z))))
        (&key      (cond
                    ((atom a)       (push a z))
                    ((null (cdr a))
                     (push (list (fexpand-key (car a))) z))
                    ((null (cddr a))
                     (push (list (fexpand-key (car a))
                                 (fexpand (cadr a))) z))
                    (t
                     (push (list* (fexpand-key (car a))
                                  (fexpand (cadr a))
                                  (cddr a)) z))))
        (t         (push (fexpand-arglist a) z))
       )
  cont
       (setq x (cdr x))
       (go loop)
   end
       (return (nreverse z))
 )
)

(defun fexpand-key (a)
 (cond
  ((atom a) a)
  ((atom (cdr a)) a)
  (t (list* (car a) (fexpand-arglist (cadr a)) (cddr a)))))

(defun fexpand-special-form (x)
 (case (car x)
  ((quote go defload declare)
   x)
  ((function subr)
   (list (car x) (fexpand-lambda (cadr x))))
  ((and or progn catch throw unwind-protect
    arg setarg listify multiple-value-list)
   (cons (car x) (fexpand-args (cdr x))))
  ((defvar eval-when block return-from)
   (list* (car x) (cadr x) (fexpand-args (cddr x))))
  (cond                (cons (car x)
                             (fexpand-cond        (cdr x))))
  (setq                (cons (car x)
                             (fexpand-setq        (cdr x))))
  (defun               (cons (car x)
                             (fexpand-defun       (cdr x))))
  (tagbody             (cons (car x)
                             (fexpand-tagbody     (cdr x))))
  (multiple-value-bind (cons (car x)
                             (fexpand-m-v-bind    (cdr x))))
  (t (zerror "Special form unknown to FEXPAND" (car x)))))

(defun fexpand-args (x)
 (fmapcar #'fexpand x))

(defun fexpand-cond (x)    ; x = ((a1) (b1 b2) (c1 c2 c3) ...)
 (fmapcar #'fexpand-args x))

(defun fexpand-tags (x &aux y)
 (cond
  ((atom x); GO tag?
   x)
  ((atom (setq y (fexpand x))) ; If macro form expands to an atom,
   `(progn ,y))                ; then consify to prevent from being tag
  (t y)))

(defun fexpand-setq (x)    ; x = (arg1 val1 arg2 val2 ...)
 (prog (z)
  loop (or x (go end))
       (when (atom x)
             (warn "FEXPAND found improper list ending in" x)
             (return (nreconc z x)))
       (push (car x) z)
       (setq x (cdr x))
       (or x (go end))
       (when (atom x)
             (warn "FEXPAND found improper list ending in" x)
             (return (nreconc z x)))
       (push (fexpand (car x)) z)
       (setq x (cdr x))
       (go loop)
  end  (return (nreverse z))
 )
)

(defun fexpand-defun (x)   ; x = (foo (arglist) . body)
                           ;  or (foo macro (arglist) . body)
                           ;  or (foo fexpr (arglist) . body)

 (if (memq (cadr x) '(expr fexpr macro))
     (list* (car x)
            (cadr x)
            (fexpand-arglist (caddr x))
            (fexpand-args (cdddr x)))
     (list* (car x)
            (fexpand-arglist (cadr x))
            (fexpand-args (cddr x)))))

(defun fexpand-tagbody (x)
 (fmapcar #'fexpand-tags x))

(defun fexpand-m-v-bind (x)    ; x = (<arglist> form . body)
 ;
 ; Even though &optional, etc. aren't permitted in the arglist of
 ; MULTIPLE-VALUE-BIND, we still expand it as if it was, to allow
 ; the maximum possible amount of destructuring.  It isn't even
 ; certain that destructuring will be allowed in the arglist here.
 ;
 (list* (fexpand-arglist (car x))
        (fexpand-args (cdr x))))

(defun fmexpand (form &aux m prop)
 ;
 ; This is identical to MACROEXPAND except that it takes both
 ; MACRO's and CMACRO's (for compiler macros).
 ;
  (cond
   ((not (and (consp form)
              (symbolp (car form))
              (setq m (or (get (car form) (setq prop 'macro))
                          (get (car form) (setq prop 'cmacro))))))
    form)
   (t (zevmapp m form prop))))


(defmacro fmapcar (fun list)

  (or (symbolp list)
      (zerror "FEXPAND wants arg2 to FMAPCAR to be a symbol, not" list))

  (if (eq (car fun) 'function)
      (setq fun (cadr fun))
      (zerror "FEXPAND wants arg1 to FMAPCAR to be #'xxx, not" fun))

 `(if (atom ,list)  ; Just in case a bad form gets passed.
      ,list
      (prog (z)
        loop
            (or ,list (return (nreverse z)))
            (when (atom ,list)
                  (warn "FEXPAND found improper list ending in" ,list)
                  (return (nreconc z ,list)))
            (push (,fun (zcar ,list)) z)
            (setq ,list (zcdr ,list))
            (go loop))))

