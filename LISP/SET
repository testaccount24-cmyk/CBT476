
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; SET
;
;;;
;;; When shallow binding is implemented, this version of the function
;;; will disappear, to be replaced by an assembler-coded function
;;; (and an inline-coded compiler-generated code sequence as well)
;;; which will store into the value cell of the symbol.
;;; Something like this:
;;;
;;;  L    r1,<symbol-arg>
;;;  ST   15,##PVALUE(,r1)
;;;
;;; or, if the warning on setting unbound symbols is to be supported:
;;;
;;;  L    r1,<symbol-arg>
;;;  ICM  reg,15,##PVALUE(r1)
;;;  BALR 0,0
;;;  BM   4(,reg)  ... or whatever, to branch to unbound-warning
;;;  ST   15,##PVALUE(,r1)
;;;
;;; The code pointed to by the unbound-variable-marker will have to
;;; determine if it was called to signal an unbound-variable error
;;; (not before trying to autoload the symbol value) or to issue
;;; an unbound-variable-setting warning.  Probably it will have to
;;; examine the ICM to see if it was using register 14 or not.
;;;
;;; Question:  Is this worth doing?  Even if we retain symbol autoload,
;;; it is probably not worth doing for the SET warnings.
;;;
;;; Remember, a symbol evaluates to itself if its PBIND cell
;;; points to itself.  This includes T, NIL, and keywords by default.
;;;

(defun set (var val)
 (unless (and var (symbolp var) (neq (pbind var) var))
         (zerror "Invalid SET variable" var))
 (cdr (zevset var val))                 ; Access only SPECIAL bindings
)

