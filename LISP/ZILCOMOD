
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This function processes forms when compiling a MODULE.
;

; Compiling FOO as a "module"
; takes foo and builds a compilable function out of it that, when
; executed by typing (foo) under the interpreter, does the operations
; generally expected by implementations of compiled modules created
; by COMPILE-FILE.  In other words,
;
; if the form is a macro form, process the macro expansion.  Note:
; this somehow has to include stuff defined by DEFMACRO's, so any
; DEFMACRO encountered in the module has to be made to generate both
; a MACRO (for evaluation) and CMACRO (for compilation) property.
;
; if a form is a DEFUN, assigns the compiled definition to the
; appropriate property of the symbol.  Exception: if the DEFUN is of
; a macro, the macro is made known to the compiler only.
;
; if a form is a DEFMACRO, this expands to a DEFUN for a macro, so
; see above.
;
; if a form is a DEFVAR, is made known as a "free" variable to the
; compiler; also set up to be executed at load time.
;
; if a form is a DECLARE, is passed to the compiler as is.
;
; if a form is a COMMENT, is ignored.
;
; if a form is an EVAL-WHEN, processed as follows:
;
;  EVAL-WHEN (COMPILE) - evaluated by the compiler itself only.
;  EVAL-WHEN (LOAD)    - processed as above.
;  EVAL-WHEN (EVAL)    - ignored.
;
; if the form is anything else, is set up to be executed at load time.
;
; Example:
;
; If the file looks like this...
;
; (defun foo1 (x) (blah1))        ;    1
; (defun (baz frob) (y) (hair))   ;    2
; (defmacro mac (x) `(frob ,x))   ;    3
; (mac "junk")                    ;    4
; (some random form)              ;    5
; (defvar pi 3.1415926)           ;    6
; (defload frobnicate frobozz)    ;    7
; (eval-when (compile)
;  (print "hello world"))         ;    8
; (eval-when (load)
;  (frob))                        ;    9
; (eval-when (eval)
;  (eccch))                       ;   10
;
; then the resulting main function form will be (more or less):
;
;  (defun zmfoo ()
;    (#.zdef foo1)                               ; 1
;    (putprop 'baz (subr |BAZ FROB|) 'frob)      ; 2
;    (frob "junk")                               ; 4 - expanded MAC
;    (some random form)                          ; 5
;    (zevxvar 'pi 3.1415926)                               ...
; or (zevxvar 'pi #'(lambda () 3.1415926))       ; 6
;    (xdefload frobnicate frobozz)               ; 7
;    (frob)                                      ; 9
;    'zmfoo
;  )
;
; and the additional forms to be compiled will be (more or less):
;
;  (defun foo1 (x) (blah1))                      ; 1
;  (defun |BAZ FROB| (y) (hair))                 ; 2
;  (defun mac macro (nil x) `(frob ,x))          ; 3 - expanded DEFMACRO
;  (declare (special pi))                        ; 6
;  (defload frobnicate frobozz)                  ; 7
;  (eval-when (compile)
;   (print "hello world"))                       ; 8
; )
;
; Note that (9) is ignored - (eval-when (eval))forms are always ignored
; at compile time.
;
; As things are set up right now, this generates
; function definitions with null lexical environments.  This may change.
;
; Note:      MACRO properties are now recognized by the compiler at
;            compile time, as well as CMACRO properties.  This means
;            that DEFMACRO's evaluated at compile time create macro
;            definitions that are used in compilation; there is no
;            way to avoid this.  CMACRO's are still supported for
;            compatibility and as a means of defining compiler-only
;            optimizations of functions.  See ZILCOMEX.
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defload member memqual) ; We use an EQUAL test for MEMBER when
                         ; searching for (FOO BAR) on NOCOMPILE list.

(declare (special loadlist complist))

(defun zilcomod (form e)
 (prog (defun-func defun-prop arglist defun-rest defun-name)
   nexp (cond
         ((atom form)                (push form loadlist))
         ((eq (car form) 'comment)   nil)
         ((eq (car form) 'declare)   (go process-declare))
         ((eq (car form) 'defload)   (go process-defload))
         ((eq (car form) 'defun)     (go process-defun))
         ((eq (car form) 'defvar)    (go process-defvar))
         ((eq (car form) 'eval-when) (go process-eval-when))
         ((eq (car form) 'progn)     (go process-progn))
         ((and (symbolp (car form))
               (not (get (car form) 'cexpr))
               (or (get (car form) 'macro)
                   (get (car form) 'cmacro)))
          (setq form (zilcomex form t))
          (go nexp))
         (t                          (push form loadlist)))
        (return)

  process-defun     ; form = (defun ...)

; Place either the compiled or the interpreted function definition
; on the appropriate property of the symbol that names the function.
; The function will have to be interpretive if its definition has
; features that the ZIL compiler doesn't support yet.  Also,
; if (DECLARE (NOCOMPILE FOO)) or (DECLARE (NOCOMPILE (FOO BAR)))
; was specified, then the function will be on the "NOCOMPILE" list,
; so don't compile the definition.

        (unless (cdr form) (go defun-error))
        (if (symbolp (cadr form))
         then
            (desetq (nil defun-func . defun-rest) form)
            (or defun-rest (go defun-error))
            ;
            ; Check type of DEFUN
            ;
            (case (car defun-rest)
             ((expr fexpr macro) (setq defun-prop (car defun-rest)
                                       defun-rest (cdr defun-rest)))
             (t                  (setq defun-prop 'expr))
            )
            ;
            ; Figure out what to do with DEFUN
            ;
            (setq arglist (car defun-rest))
            (case defun-prop
             (expr   (if  (memq defun-func (get '*zilco* 'nocompile))
                      then
                          (princ
          "NOCOMPILE requested, will load interpretive definition of ")
                          (princ defun-func)
                          (terpri)
                          (push `(xdefun . ,(cdr form)) loadlist)
                      else
;;;;;;;;;;;;;;;;;;;;;;if  (not (compilable-arglist defun-func arglist))
;;;;;;;;;;;;;;;;;;;;;;then
;;                        (princ
;;     #.(string-append "Definition contains non-compilable arglist, "
;;                      "will load interpretive definition of ")
;;                        )
;;                        (princ defun-func)
;;                        (terpri)
;;;;;;;;;;;;;;;;;;;;;;;;;;(push `(xdefun . ,(cdr form)) loadlist)
;;;;;;;;;;;;;;;;;;;;;;else
                          (push
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;`(zevdsub ',defun-func (subr ,defun-func))
                                `(,zdef ,defun-func)
                                loadlist)
                          (push form complist)
                      endif
                     ))
             (macro  (setq defun-rest (cdr defun-rest))
                     (push form complist)
                     (eval form)  ; Also make macro def available.
                     )
             (fexpr  (princ
"FEXPR definition not compilable, will compile code to execute "
                     )
                     (princ defun-func)
                     (princ
" and transform it into a macro."
                     )
                     (terpri)
;;;;;;;;;;;;;;;;;;;; (push `(xdefun . ,(cdr form)) loadlist)
                     (let* ((fexpr-subr (concat defun-func " FEXPR"))
                            (fexpr-macro
                                 `(defmacro ,defun-func
                                            (&rest x)
                                            `(,',fexpr-subr `,',x)))
                           )
                           (push `(defun ,fexpr-subr
                                         ,(car defun-rest)
                                         . ,(cdr defun-rest))
                                 complist)
                           (push `(,zdef ,fexpr-subr) loadlist)
                           (push fexpr-macro complist)
                           (push `(xdefmacro . ,(cdr fexpr-macro))
                                 loadlist)
                           (eval fexpr-macro); Also make macro def avail
                     ))
             )
         else
         if (consp (cadr form))
         then
            (desetq (nil (defun-func defun-prop) . defun-rest) form)
            (or defun-rest (go defun-error))
            (if  (member (cadr form) (get '*zilco* 'nocompile))
             then
                 (princ
          "NOCOMPILE requested, will load interpretive definition of ")
                 (princ (cadr form))
                 (terpri)
                 (push `(putprop ',defun-func
                                 '(lambda . ,defun-rest) ; Note, no #'.
                                 ',defun-prop)
                       loadlist)
             else                             ; ZILCO will compile #'s.
                 (setq defun-name (concat defun-func " " defun-prop))
                 (push `(putprop ',defun-func
;;; lexically scoped DEFUN?? ;;; #',defun-name
                                 (subr ,defun-name)
                                 ',defun-prop)
                        loadlist)
                 (push `(defun ,defun-name . ,(cddr form)) complist)
             endif
            )
         else (go defun-error)
         endif
        )
        (return)

  defun-error

        (terpri)
        (princ "Invalid DEFUN syntax: ")
        (prin1 form)
        (terpri)
        (return)

  process-declare

        (zilcodcl (cdr form) nil e) ; Process DECLARE right here & now.

;;;;;;; (push form complist)      ; Don't wait for the compiler 2 C it.
        (return)

  process-defload

        (push `(xdefload . ,(cdr form)) loadlist)
        (push form complist)
        (return)

  process-defvar

        (setq form (cdr form))

        (cond
         ((null form)
          (princ "Too few arguments - DEFVAR")
          (terpri)
          (return))
         ((null (cdr form))
          (push `(zevxvar ',(car form))
                loadlist))
         ((null (cddr form))
          (push `(zevxvar ',(car form)
                          . ,(defvar-maybe-thunk (cadr form)))
                loadlist))
         ((null (cdddr form))
          (push `(zevxvar ',(car form)
                          ,@(defvar-maybe-thunk (cadr form))
                          ,(caddr form))
                loadlist))
         (t (princ "Too many arguments - ")
            (prin1 (cons 'defvar form))
            (terpri)
            (return)))

        (push `(declare (special ,(car form))) complist)
        (return)

  process-progn

        (dolist (x (cdr form)) (zilcomod x e))
        (return)

  process-eval-when
;
; EVAL-WHEN is interpreted as follows:
;
; COMPILE - pass to the compiler as is.
;
; EVAL    - ignore.
;
; LOAD    - process like all the rest.
;

        (let* (
               ((nil times . forms) form)
               (compilep            (memq 'compile times))
               (loadp               (memq 'load    times))
              )
              (loop for f in forms
                    when compilep do (eval f)
                    when loadp    do (zilcomod f e)
                    finally       (return nil)))

        (return)

 )
)

(defun defvar-maybe-thunk (x)
 (if (or (null x) (eq x t) (numberp x) (stringp x)
         (and (consp x) (eq (car x) 'quote)))
     `(nil ,x)
     `(t #'(lambda () ,x))))

