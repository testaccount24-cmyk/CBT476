
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This function is used to implement the reader macro #.
;
; Currently the only syntax supported is:
;
;   #'FOO   --> (FUNCTION FOO)
;   #+FOO BAR  --> BAR, only if feature FOO exists
;   #-FOO BAR  --> BAR, only if feature FOO doesn't exist
;   #.FOO   --> evaluated value of FOO.
;   #/FOO   --> the fixnum corresponding to the character FOO.
;   #\FOO   --> same as #/FOO.
;   #¬Y     --> the fixnum correspinding to "CONTROL Y" if it existed.
;   #o777   --> integer expressed in octal.
;   #O777   --> integer expressed in octal.
;   #x7F0   --> integer expressed in hex.
;   #X7F0   --> integer expressed in hex.
;   #b101   --> integer expressed in binary.
;   #B101   --> integer expressed in binary.
;   #nnRnnn --> integer expressed in radix nn.
;   #|...|# --> comments.
;   #(...)  --> vector.
;
;   #,FOO   --> load-time evaluation of FOO.  Currently this is
;               identical to #.FOO, which it's supposed to be
;               under the interpreter anyhow.
;
; ZIL-only extensions...
;
;   #z7F0   --> FIXNUM expressed in hex.
;   #Z7F0   --> FIXNUM expressed in hex.
;
; and...
;
;   # followed by a character, if the symbol whose print name is that
;     character has a SHARPMACRO property.  This property must be a
;     function of one argument (the file name) much like a read macro.
;

(eval-when ()  ; Processed by nobody but READ.
 #.(progn
    (defvar character-types
     '(
           (NULL      .   #X00)
           (HT        .   #X05)
           (TAB       .   #X05)
           (DEL       .   #X07)
           (RUBOUT    .   #X07)
           (VT        .   #X0B)
           (CR        .   #X0D)
           (RETURN    .   #X0D)
           (NL        .   #X15)
           (NEWLINE   .   #X15)
           (BS        .   #X16)
           (BACKSPACE .   #X16)
           (LF        .   #X25)
           (LINEFEED  .   #X25)
           (FF        .   #X2C)
           (FORM      .   #X2C)
           (PAGE      .   #X2C)
           (SP        .   #X40)
           (SPACE     .   #X40)
           (ALT       .   #X100) ; "Invalid".
           (ALTMODE   .   #X100) ; "Invalid".
     ))
  )
)

(defmacro upsym (x)
 `(ebcdic (char-upcase ,x) t))

(defun zrmsharp (f) ; F is the file name passed by the READ function

 (let* (
        (c) ; Will be set to first non-numeric character read.
        (n (prog (d z)
             loop
                 (setq c (or (tyipeek nil f nil #+ZIL13 nil)
                             (zerror "No dispatch character for #")))
                 (setq d (digit-char-p c 10))
                 (when (null d)
                       (return z))
                 (setq z (+ (* 10 (or z 0)) d))
                 (tyi f)   ; Throw away the numeric char to get next 1
                 (go loop)
          ))
        (a (upsym c))
        (b (get a 'sharpmacro))
       )
       (cond
        (b                            (funcall b f n))
        ((eq a '\')                   (sharp-quote   f n))
        ((eq a '\+)                   (sharp-plus    f n))
        ((eq a '\-)                   (sharp-minus   f n))
        ((eq a '\.)                   (sharp-period  f n))
        ((eq a '\,)                   (sharp-comma   f n))
        ((eq a '\/)                   (sharp-escape  f n))
        ((eq a '\\)                   (sharp-escape  f n))
        ((eq a '\¬)                   (sharp-control f n))
        ((eq a '\O)                   (sharp-octal   f n))
        ((eq a '\X)                   (sharp-hex     f n))
        ((eq a '\B)                   (sharp-binary  f n))
        ((eq a '\R)                   (sharp-radix-n f n))
        ((eq a '\|)                   (sharp-comment f n))
        ((eq a '\()  #| ) |#          (sharp-vector  f n))
        ((eq a '\Z)                   (sharp-hex370  f n))
        (t (zerror "Unknown dispatch character following #" a)))))

;=======================================================================

;
; #'foo --> (FUNCTION foo)
;

(defun sharp-quote (f n)
 (when n (warn "Numeric modifier not allowed for #'" n))
 (tyi f)     ; Throw away the character following the #.
 `(function ,(read f))
)

;=======================================================================

;
; #.(foo) --> ...whatever the value of (foo) is...
;

(defun sharp-period (f n)
 (when n (warn "Numeric modifier not allowed for #." n))
 (tyi f) ; Throw away the character following the #.
 (catch nil (eval (read f)))  ; Return NIL if error evaluating form.
)

;=======================================================================

;
; #,(foo) --> ...whatever the value of (foo) is at load time ...
;

(defun sharp-comma (f n)
 (when n (warn "Numeric modifier not allowed for #," n))
 (when (featurep 'zilco) ; If being read by the compiler
  (cterpri)
  (princ "Load-time evaluation (#,) not supported by ZIL compiler.")
  (terpri)
  (princ "Processing as read-time evaluation (#.).")
  (terpri)
 )
 (sharp-period f nil) ; Process like #.
)

;=======================================================================

;
; #+foo --> if foo is a feature, then whatever follows
;

(defun sharp-plus (f n)
 (when n (warn "Numeric modifier not allowed for #+" n))
 (tyi f) ; Throw away the character following the #.
 (cond
       ((sharp-eval-features (read f)) (read f))
       (t                              (read f) (rmnil))))

;
; #-foo --> if foo is NOT a feature, then whatever follows
;

(defun sharp-minus (f n)
 (when n (warn "Numeric modifier not allowed for #-" n))
 (tyi f) ; Throw away the character following the #.
 (cond
       ((sharp-eval-features (read f)) (read f) (rmnil))
       (t                              (read f))))

(defun sharp-eval-features (x)
 (cond
      ((atom x)           (featurep x))
      ((eq (zcar x) 'or)  (mapor  #'sharp-eval-features (cdr x)))
      ((eq (zcar x) 'and) (mapand #'sharp-eval-features (cdr x)))
      ((eq (zcar x) 'not) (if (and (cdr x) (null (cddr x)))
                              (not (sharp-eval-features (zcadr x)))
                              (zerror "Invalid feature spec form" x)))
      (t                  (zerror "Invalid feature spec form" x))))

;
; #/foo --> returns a character object (actually a fixnum)
; #\foo --> same as #/foo
;

(defun sharp-escape (f n)
 (when n (warn "Numeric modifier not allowed for #\\" n))
 (tyi f) ; Throw away the character following the #.
 (character-representation f))

;
; #¬foo --> returns an impossible character object fixnum for CNTL-foo
;

(defun sharp-control (f n)
 (when n (warn "Numeric modifier not allowed for #¬" n))
 (tyi f) ; Throw away the character following the #.
 (+ 256 (character-representation f))
)

(defun character-representation (f)
 (let ((a (tyipeek nil f)))
  (if (alpha-char-p a)
      (let* ((r (read f))
             (c (assq r '#.character-types)))
            (if c (cdr c)
                  (if (eql (string-length r) 1) ; If it read 1 character
                      a
                      (zerror "Unknown character representation" r))))
      (tyi f))))

;
; #o777 ...
;
(defun sharp-octal (f n)
 (when n (warn "Numeric modifier not allowed for #O" n))
 (sharp-radix f 8))

;
; #x1AC8 ...
;
(defun sharp-hex (f n)
 (when n (warn "Numeric modifier not allowed for #X" n))
 (sharp-radix f 16))

;
; #b1011 ...
;
(defun sharp-binary (f n)
 (when n (warn "Numeric modifier not allowed for #B" n))
 (sharp-radix f 2))

;
; #36rfoobar ...
;
(defun sharp-radix-n (f n)
 (unless n (zerror "Numeric modifier required for #R"))
 (when (or (< n 2) (> n 36))
       (zerror "Invalid radix modifier for #R" n))
 (sharp-radix f n))

(defun sharp-radix (f radix)
 (tyi f) ; Throw away the character following the #.
 (prog (a z neg? err)
       (setq z 0)
  get1
       (when (eql (setq a (or (tyipeek nil f nil #+ZIL13 nil)
                   (zerror "No digits following # with radix" radix)))
                  #\SP)
             (tyi f)
             (go get1))
       (case a
             ((#\-) (setq neg? t)
                    (go next))
             ((#\+) (setq neg? nil)
                    (go next))
       )
  loop
       (let ((weight (or (digit-char-p a 36) (go ret))))
            (if (not (< weight radix))
                (push (symbol-name (ebcdic a)) err)
                (setq z (+ weight (* z radix)))))
  next
       (tyi f)
       (setq a (tyipeek nil f))
       (go loop)
  ret
       (when err
             (zerror `("Invalid digit(s) for radix " ,radix)
                    (nreverse err)))
       (return (if neg? (minus z) z))
 )
)

;;;
;;; #Znnn is like #Xnnn except that it always produces a fixnum,
;;; which can be two's complement, and therefore cannot have more
;;; than 8 hex characters.
;;;
;;; For example...
;;;
;;; #XFFFFFFFF  =  42
;;; #ZFFFFFFFF  =  -1
;;;

(defun sharp-hex370 (f n)
 (when n (warn "Numeric modifier not allowed for #Z" n))
 (tyi f) ; Throw away the character following the #.
 (prog (a z count err)
       (setq z 0 count 0)
  get1
       (when (eql (setq a (or (tyipeek nil f nil #+ZIL13 nil)
                              (zerror "No digits following #Z")))
                  #\SP)
             (tyi f)
             (go get1))
  loop
       (when (> count 8)
             (zerror "Too many hex digits in #Z constant"))
       (setq count (1+ count))
       (let ((weight (or (digit-char-p a 36) (go ret))))
            (if (not (< weight 16))
                (push (symbol-name (ebcdic a)) err)
                (setq z (+ weight (lsh z 4)))))
  next
       (tyi f)
       (setq a (tyipeek nil f))
       (go loop)
  ret
       (when err (zerror "Invalid hex digit(s)" (nreverse err)))
       (return z)
 )
)

;
; #| comment ... |#
;
(defun sharp-comment (f n)
 (when n (warn "Numeric modifier not allowed for #|" n))
 (tyi f) ; Throw away the character following the #.
 (prog (c)
  loop (setq c (tyi f))           ; Search for other comment characters.
  chk1 (cond                      ; See what we got.
        ((eof f) (return (rmnil)))  ; If end of file, terminate.
        ((eql c #\|)                ; If we got |, we might have |#.
         (setq c (tyi f))           ; Get next character.
         (or (eql c #\#) (go chk1)) ; If not #, check as usual.
         (return (rmnil)))          ; If |# found, return to reader.
        ((eql c #\#)                ; If we got #, may be nested #|.
         (setq c (tyi f))           ; Get next character.
         (or (eql c #\|) (go chk1)) ; If not #|, keep checking.
         (sharp-comment f n)        ; Process nested comment group.
         (go loop))                 ; and then keep going.
        (t (go loop)))))
;
; #(foo bar baz)
;
(defun sharp-vector (f n)
 ; Don't throw away the left parenthesis - we need it to read the list
 (cond
  (n
   (prog (z l i y)
         (setq z (make-vector n))
         (setq l (read f))
         (setq i 0)
         (setq y nil)
    loop
         (cond
          ((eql i n)
           (when l (warn "Too many objects for #(, ignored" l)) ; )
           (return z))
          ((null l)
           (vset z i y))
          ((atom l)
           (zerror "Improper syntax for #(" l))    ; )
          (t
           (setq y (zcar l))
           (vset z i y)))
         (setq l (cdr l))
         (setq i (1+ i))
         (go loop)))

  (t
   (zmvector (read f)))))

;;;
;;; Just a random repository of code that would be inserted into
;;; ZRMSHARP if we wanted to make #¬foo do something.
;;;
;;; We have NOT activated it.  #¬ exists only because of Macsyma,
;;; and we don't want to cause any "real" EBCDIC characters to
;;; start behaving like ASCII control characters.  So we let #¬
;;; generate an "impossible" character instead.
;;;
;;; (defvar control-fakeouts
;;;  (let ((cflist (make-list 256)))
;;;        ;
;;;        ; Since it's not clear whether #¬a is supposed to be the
;;;        ; same as #¬A or not, and #¬ is not even defined as part
;;;        ; of CL, the lower-case letters are left undefined.
;;;        ;
;;;        (setf (nth #\@  cflist) #X00) ; NUL
;;;        (setf (nth #\A  cflist) #X01) ; SOH
;;;        (setf (nth #\B  cflist) #X02) ; STX
;;;        (setf (nth #\C  cflist) #X03) ; ETX
;;;        (setf (nth #\D  cflist) #X37) ; EOT
;;;        (setf (nth #\E  cflist) #X2D) ; ENQ
;;;        (setf (nth #\F  cflist) #X2E) ; ACK
;;;        (setf (nth #\G  cflist) #X2F) ; BEL
;;;        (setf (nth #\H  cflist) #X16) ; BS
;;;        (setf (nth #\I  cflist) #X05) ; HT
;;;        (setf (nth #\J  cflist) #X25) ; LF
;;;        (setf (nth #\K  cflist) #X0B) ; VT
;;;        (setf (nth #\L  cflist) #X0C) ; FF
;;;        (setf (nth #\M  cflist) #X0D) ; CR
;;;        (setf (nth #\N  cflist) #X0E) ; SO
;;;        (setf (nth #\O  cflist) #X0F) ; SI
;;;        (setf (nth #\P  cflist) #X10) ; DLE
;;;        (setf (nth #\Q  cflist) #X11) ; DC1
;;;        (setf (nth #\R  cflist) #X12) ; DC2
;;;        (setf (nth #\S  cflist) #X13) ; DC3
;;;        (setf (nth #\T  cflist) #X3C) ; DC4
;;;        (setf (nth #\U  cflist) #X3D) ; NAK
;;;        (setf (nth #\V  cflist) #X32) ; SYN
;;;        (setf (nth #\W  cflist) #X26) ; ETB
;;;        (setf (nth #\X  cflist) #X18) ; CAN
;;;        (setf (nth #\Y  cflist) #X19) ; EM
;;;        (setf (nth #\Z  cflist) #X3F) ; SUB
;;;        (setf (nth #XAD cflist) #X27) ; ESC   (cntl-left-bracket)
;;;        (setf (nth #\\  cflist) #X1C) ; {I}FS
;;;        (setf (nth #XBD cflist) #X1D) ; {I}GS (cntl-right-bracket)
;;;        (setf (nth #\¬  cflist) #X1E) ; {I}RS
;;;        (setf (nth #\_  cflist) #X1F) ; {I}US
;;;        (setf (nth #\`  cflist) #X40) ; SP
;;;        (setf (nth #\{  cflist) #\; ) ; ;
;;;        (setf (nth #\|  cflist) #\< ) ; <
;;;        (setf (nth #\}  cflist) #\= ) ; =
;;;        (setf (nth #\~  cflist) #\> ) ; >
;;;        (setf (nth #X07 cflist) #\? ) ; ?    (cntl-rubout)
;;;        cflist
;;;  ))
;;;  (defun sharp-control (f)
;;;   (tyi f) ; Throw away the character following the #.
;;;   (let ((c (character-representation f)))
;;;        (or (nth c '#.control-fakeouts)
;;;            (zerror "Unknown ASCII control spec" (ebcdic c)))))
