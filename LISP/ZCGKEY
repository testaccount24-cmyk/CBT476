
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; "ZCGKEY"
;
; This subroutine generates code for the P-code "KEY" form.
;
; The input is of the form:  (KEY <keyvars> <funname> <aoksym> NIL NIL)
;
; where aoksym is the :allow-other-keys symbol.
;
; An example of the code that gets generated:
;
;  For a function FOO with lambda list
;  (&KEY ((:KEY1 KEY1) <init1> <suppliedp1>)
;        ((:KEY2 KEY2) <init2> <suppliedp2>)
;        ((:KEY3 KEY3) <init3> <suppliedp3>)
;  )
;
;
;  the code looks something like this:
;
;             ST   13,offset-of-key1(,11)
;             ST   13,offset-of-key2(,11)
;             ST   13,offset-of-key3(,11)
;             L    1,offset-of-restarg(,11)
; label-loop  DS   0H
;             CR   1,10
;             BE   label-done
;             LM   2,3,##CAR(1)
;             CR   3,10
;             BE   label-error
;             LM   0,1,##CAR(3)
;             C    2,address-of-symbol-:KEY1
;             BE   label-1
;             C    2,address-of-symbol-:KEY2
;             BE   label-2
;             C    2,address-of-symbol-:KEY3
;             BE   label-3
;             L    0,address-of-symbol-:ALLOW-OTHER-KEYS
;             CR   2,0
;             BE   label-loop
;             L    3,offset-of-restarg(,11)
;             L    15,ZLCKERR
;             BALR 14,15       ;  key passed but not in lambda list
;             B    label-loop  ;  in case it's ok because of allow-other
; label-1     DS   0H
;             C    13,offset-of-key1(,11)
;             BNE  label-loop
;             ST   0,offset-of-key1(,11)
;             B    label-loop
; label-2     DS   0H
;             C    13,offset-of-key2(,11)
;             BNE  label-loop
;             ST   0,offset-of-key2(,11)
;             B    label-loop
; label-3     DS   0H
;             C    13,offset-of-key3(,11)
;             BNE  label-loop
;             ST   0,offset-of-key3(,11)
;             B    label-loop
; label-error DS   0H
;             XR   0,0
;             L    15,ZLCKERR
;             BALR 14,15       ;  odd number of args in &rest list
; label-done  DS   0H
;
; Note:  The init and suppliedp forms are processed by the SETOPT form,
;        generated subsequently to this form in the P-code.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmacro chop (&rest args)
 `(string-substr (string-append . ,args) 1 36))

(defun zcgkey (a) ;
 (let* (
        ((keyvars funname aoksym nil nil) a)  ; "V" and "S" not used.
        (restarg      (get funname 'restarg))
        (label-loop   (gensym))
        (label-done   (gensym))
        (label-error  (gensym))
       )

 (loop for k in keyvars do
  (zcgemit 4 () "ST" `("13," ,(get (cdr k) 'offset) "(,11)")
                     (chop "Set unbound " (car k)))
 )
 (zcgload '\1 restarg)
 (zcgemit 0 label-loop "DS" "0H" nil)
 (zcgemit 2 () "CR" "1,10" "Loop until end of keylist.")
 (zcgemit 4 () "BE" label-done nil)
 (zcgemit 4 () "LM" "2,3,##CAR(1)"   "2=keyword, 3=rest of list.")
 (zcgemit 2 () "CR" "3,10"           "If rest of list is empty,")
 (zcgemit 4 () "BE" label-error      "then missing keyword value.")
 (zcgemit 4 () "LM" "0,1,##CAR(3)"   "0=value, 1=rest of list.")
 (loop for k in keyvars do
  (let* ((kl (putprop (cdr k) (gensym) 'keylabel))
         (ks (get (cdr k) 'keysymbol))
         (kt (or (get (cdr ks) 'location)
                 (putprop (cdr ks) (gensym) 'location))))
   (zcgemit 4 () "C" `("2," ,kt) (chop "If keyword " (car ks)))
   (zcgemit 4 () "BE" kl "then go to set value.")
  )
 )

 (if (get funname 'allow-other-keys-p)
  then
   (zcgemit 4 () "B" label-loop "Else ignore, other keys allowed.")
  else
   (zcgemit 4 () "L" `("0," ,(or (get (cdr aoksym) 'location)
                             (putprop (cdr aoksym) (gensym) 'location)))
                                         "Get symbol :ALLOW-OTHER-KEYS")
   (zcgemit 2 () "CR" "2,0" "If keyword :ALLOW-OTHER-KEYS")
   (zcgemit 4 () "BE" label-loop "then ignore bad keyword.")
   (zcgload '\3 restarg)
   (zcgemit 4 () "L" "15,ZLCKERR" "Get address of ZILKERR.")
   (zcgemit 2 () "BALR" "14,15" "Call ZILKERR to handle key error.")
   (zcgemit 4 () "B" label-loop "If other keys allowed, continue.")

  endif
 )

 (loop for k in keyvars do
  (let ((o (get (cdr k) 'offset)))
   (zcgemit 0 (get (cdr k) 'keylabel) "DS" "0H"
             (chop "Found keyword " (get (cdr k) 'keyword)))
   (zcgemit 4 () "C" `("13," ,o "(,11)") "If keyword value already set")
   (zcgemit 4 () "BNE" label-loop "then ignore this value.")
   (zcgemit 4 () "ST" `("0," ,o "(,11)") (chop "Set value of " (car k)))
   (zcgemit 4 () "B" label-loop "Continue with next keyword.")
  )
 )
 (zcgemit 0 label-error "DS" "0H" "Invalid keyword list passed.")
 (zcgemit 2 ()         "XR" "0,0" "Show bad keyword list error.")
 (zcgemit 4 ()         "L"  "15,ZLCKERR" "Get address of ZILKERR.")
 (zcgemit 2 ()      "BALR"  "14,15" "Call ZILKERR to handle key error.")
 (zcgemit 0 label-done  "DS" "0H" "End of keyword processing.")
 )
)

