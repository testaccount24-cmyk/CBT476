
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

 ;;
 ;; Insure that built-in inline MAPCAR definition is saved.
 ;;

(eval-when (compile)
 (deftrans !mapcar (x y z) (zxmap (cons 'mapcar (cdr x)) y z))
)
(eval-when (eval)
 (setf (get '!mapcar 'subr) (zilload 'mapcar))
)

(defun mapcar1 (fun lis) ; Case of 1 list.
 (cond
  ((null lis) nil)
  ((atom lis) (zerror "Argument 2 to MAPCAR not a list" lis))
  (t
   (prog (v w)
         (setq v (ncons (funcall fun (car lis))))
         (unless (setq lis (cdr lis))
                 (return v))
         (setq w v)
    loop
         (setq w (setf (cdr w)
                       (ncons (funcall fun (car lis)))))
         (unless (setq lis (cdr lis))
                 (return v))
         (go loop)
   ))))

(defun mapcar (fun &rest lists) ; Case of multiple lists.
 (cond
  ((null lists)       nil)
  ((null (cdr lists)) (mapcar1 fun (car lists)))
  (t
   (dolist (list lists)
           (unless (listp list)
                   (zerror "Non-list passed to MAPCAR" list)))
   (prog (v w)
         (setq v nil)
         (when (mapor #'null lists) (return v))
         (setq v (ncons (zilapply fun (!mapcar #'car lists))))
         (setq lists (!mapcar #'cdr lists))
         (setq w v)
    loop (when (mapor #'null lists) (return v))
         (setq w (setf (cdr w)
                       (ncons (zilapply fun (!mapcar #'car lists)))))
         (setq lists (!mapcar #'cdr lists))
         (go loop)
   ))))

(defload car zcar)

