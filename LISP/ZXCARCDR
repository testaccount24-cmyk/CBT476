
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is the compiler transform for CAR, CDR, etc. - in general,
; accessor functions for CONSes and symbols.
;

;
;***********************************************************************
;*                                                                     *
;*   Note: I haven't incorporated constant-folding.                    *
;*                                                                     *
;***********************************************************************
;

;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 06/20/88 - Support for multiple values.                             *
;*                                                                     *
;***********************************************************************
;


(eval-when (eval)
 (deftrans car          zxcarcdr)
 (deftrans cdr          zxcarcdr)
 (deftrans zcar         zxcarcdr)
 (deftrans zcdr         zxcarcdr)
 (deftrans plist        zxcarcdr)
 (deftrans symbol-plist zxcarcdr)
)

(defun zxcarcdr (xform xenv xcon &aux arg)

 (cond

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; There must be exactly 1 argument.  If not, skip transform.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ((not (eql (length xform) 2))
   xform)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; If the context is null (evaluated for effect only),
  ;; return the argument without taking the CAR/CDR thereof.
  ;;
  ;; This allows the macro expansion of (SETF (CAR x) y) to be
  ;; transformed into a simple call to RPLACA, for example, where
  ;; the return value is not important.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ((null xcon)
   `(values ,(cadr xform)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; Otherwise, no transformations apply.  Return the original form.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (t xform)))

