
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is the compiler transform function for all of the
; mapping functions in the compiled environment.
;
; Args: (1) the name of the mapping function.
;       (2) the (headless) body of the mapping macro call.
;
; For example:
;
; (DEFTRANS MAPCAR ZXMAP)
;
; The mapping functions are transformed into open compiled code
; because they take a function specification as an operand.
;
; This function replaces the old MXMAP mapping macro.
;

(defun zxmap (x ignore1 ignore2    ; Ignore environment and context
  &aux ((mf . mb) x)               ; Macro name & body of macro call.
       (f (map-macro-check mf mb)) ; Check args and get function name.
       (l (cdr mb))                ; List of lists.
       (g (do ((l l (cdr l))       ; List of GENSYM's for locals.
               (z nil (cons (gensym) z)))
              ((null l) z))))

 (case mf
  (mapl              (zxmapl     f l g))
  (mapc              (zxmapc     f l g))
  (maplist           (zxmaplist  f l g))
  (mapcar            (zxmapcar   f l g))
  (mapand            (zxmapand   f l g))
  (mapor             (zxmapor    f l g))
  (mapcan            (zxmapcan   f l g))
  (mapcon            (zxmapcon   f l g))
  (every             (zxevery    f l g))
  (notany            (zxnotany   f l g))
  (notevery          (zxnotevery f l g))
  (some              (zxsome     f l g))
  (t                 (zerror "Unknown caller of ZXMAP" mf))))

;;;
;;; *** Helper functions ***
;;;
;;;
;;; This function will flag specification errors on map functions.
;;; It returns the function argument if it is a constant function,
;;; (FUNCALL function-argument) otherwise.
;;;

(defun map-macro-check (mf mb)
 (prog (ff lam)
  (unless (and mb (cdr mb))                ; Two or more args required.
          (zerror "Too few arguments" mf))
  (setq ff (car mb))  ; The function form.
  (unless (and (consp ff)
               (or (eq (car ff) 'quote)
                   (eq (car ff) 'function)))
          (return (list 'funcall ff)))

  (and (or (atom (cdr ff))   ; (QUOTE), (QUOTE . FOO), etc.
           (cddr ff))        ; (QUOTE A B), etc.
       (zerror `("Invalid argument to " ,mf) ff))

  (setq lam (cadr ff))       ; (QUOTE something) or (FUNCTION something)
  (or (atom lam)             ; ... verify the "something".
      (eq (car lam) 'lambda)
      (eq (car lam) 'label)
      (zerror `("First arg of " ,mf
                " not a function name or LAMBDA-expression")
              lam))

  (or lam (zerror "NIL is an invalid function name" mf))
  (return (list lam))
 )
)

(defun zxmap-init (g l v) ; Builds SETQ to set PROG list locals.
                          ;
                          ; (SETQ G1 L1 G2 L2 G3 L3)
                          ;
                          ; or
                          ;
                          ; (SETQ V L1 G1 V G2 L2 G3 L3)
                          ;
 (do ((l l (cdr l))
      (g g (cdr g))
      (z nil))
     ((null l) `(setq . ,(nreverse z)))
     (if v
      then
          (push v z)
          (push (car l) z)
          (push (car g) z)
          (push v z)
          (setq v nil)
      else
          (push (car g) z)
          (push (car l) z)
      endif
     )))

(defun zxmap-incr (g)   ; Builds SETQ to CDR down all lists.
                        ;
                        ; (SETQ G1 (CDR G1)
                        ;       G2 (CDR G2)
                        ;       G3 (CDR G3))
                        ;
                        ;
 (do ((g g (cdr g))
      (z nil))
     ((null g) `(setq . ,(nreverse z)))
     (push (car g) z)
     (push `(cdr ,(car g)) z)))

(defun zxmap-cars (g)   ;Builds list of CAR's of local list variables.
                        ;
                        ; ((CAR G1) (CAR G2) (CAR G3))
                        ;
 (mapcar #'(lambda (x) `(zcar ,x)) g)
)

;
;======================================================================
;

(defun zxmapl (f l g)
 (let ((v (gensym)) (tag (gensym)))
  `(prog (,v . ,g)
         ,(zxmap-init g l v)
    ,tag (cond ((and . ,g)
                (,.f ,@g)
                ,(zxmap-incr g)
                (go ,tag)))
         (return ,v))))

(defun zxmapc (f l g)
 (let ((v (gensym)) (tag (gensym)))
  `(prog (,v . ,g)
         ,(zxmap-init g l v)
    ,tag (cond ((and . ,g)
                (,.f ,@(zxmap-cars g))
                ,(zxmap-incr g)
                (go ,tag)))
         (return ,v))))

(defun zxmaplist (f l g)
 (let ((v (gensym)) (d (gensym)) (e (gensym)) (tag (gensym)))
  `(prog (,v ,d ,e . ,g)
         ,(zxmap-init g l nil)
    ,tag (cond ((and . ,g)
               (setq ,d (cons (,.f ,@g) nil))
               (cond (,v (rplacd ,e ,d))
                     (t  (setq ,v ,d)))
               (setq ,e ,d)
               ,(zxmap-incr g)
               (go ,tag)))
         (return ,v))))

(defun zxmapcar (f l g)
 (let ((v (gensym)) (d (gensym)) (e (gensym)) (tag (gensym)))
  `(prog (,v ,d ,e . ,g)
         ,(zxmap-init g l nil)
    ,tag (cond ((and . ,g)
               (setq ,d (cons (,.f ,@(zxmap-cars g)) nil))
               (cond (,v (rplacd ,e ,d))
                     (t  (setq ,v ,d)))
               (setq ,e ,d)
               ,(zxmap-incr g)
               (go ,tag)))
         (return ,v))))


(defun zxmapand (f l g)
 (let ((v (gensym)) (tag (gensym)))
  `(prog (,v . ,g)
         (setq ,v t)
         ,(zxmap-init g l nil)
    ,tag (cond ((and . ,g)
               (or (setq ,v (,.f ,@(zxmap-cars g))) (return ,v))
               ,(zxmap-incr g)
               (go ,tag)))
         (return ,v))))

;
; MAPOR and SOME are identical, so use the same transformation.
;
(defmacro zxmapor (&rest args) `(zxsome . ,args))

(defun zxmapcan (f l g)
 (let ((v (gensym)) (tag (gensym)))
  `(prog (,v . ,g)
         ,(zxmap-init g l nil)
    ,tag (cond ((and . ,g)
               (setq ,v (nconc2 ,v (,.f ,@(zxmap-cars g))))
               ,(zxmap-incr g)
               (go ,tag)))
         (return ,v))))

(defun zxmapcon (f l g)
 (let ((v (gensym)) (tag (gensym)))
  `(prog (,v . ,g)
         ,(zxmap-init g l nil)
    ,tag (cond ((and . ,g)
               (setq ,v (nconc2 ,v (,.f ,@g)))
               ,(zxmap-incr g)
               (go ,tag)))
         (return ,v))))

;=== SOME ===

(defun zxsome (f l g)
 (case (length l)
       (1 (zxsome-1 f l g))
       (t (zxsome-m f l g))))

(defun zxsome-1 (f l g)
 (let ((v (gensym)) (tag (gensym)))
  `(let ((,v ,(car l)))
    (when ,v
          (prog ()
              ,tag
                (return (or (,.f (zcar ,v))
                            (when (setq ,v (cdr ,v))
                                  (go ,tag)))))))))

(defun zxsome-m (f l g)
 (let ((v (gensym)) (tag (gensym)))
  `(prog (,v . ,g)
;;;;;;;; (setq ,v nil) ; V initialized to NIL by PROG
         ,(zxmap-init g l nil)
    ,tag (cond ((and . ,g)
               (and (setq ,v (,.f ,@(zxmap-cars g))) (return ,v))
               ,(zxmap-incr g)
               (go ,tag)))
         (return ,v))))

;=== EVERY ===

(defun zxevery (f l g)
 (case (length l)
       (1 (zxevery-1 f l g))
       (t (zxevery-m f l g))))

(defun zxevery-1 (f l g)
 (let ((v (gensym)) (tag (gensym)))
  `(let ((,v ,(car l)))
    (if ,v
        (prog ()
            ,tag
              (when (,.f (zcar ,v))
                    (when (setq ,v (cdr ,v))
                          (go ,tag))
                    (return t))
              (return nil))
        t))))

(defun zxevery-m (f l g)
 (let ((tag (gensym)))
  `(prog ,g
         ,(zxmap-init g l nil)
    ,tag (cond ((and . ,g)
               (or (,.f ,@(zxmap-cars g)) (return nil))
               ,(zxmap-incr g)
               (go ,tag)))
         (return t))))

;=== NOTEVERY ===

(defun zxnotevery (f l g)
 (case (length l)
       (1 (zxnotevery-1 f l g))
       (t (zxnotevery-m f l g))))

(defun zxnotevery-1 (f l g)
 (let ((v (gensym)) (tag (gensym)))
  `(let ((,v ,(car l)))
    (if ,v
        (prog ()
            ,tag
              (when (,.f (zcar ,v))
                    (when (setq ,v (cdr ,v))
                          (go ,tag))
                    (return nil))
              (return t))
        nil))))

(defun zxnotevery-m (f l g)
 (let ((tag (gensym)))
  `(prog ,g
         ,(zxmap-init g l nil)
    ,tag (cond ((and . ,g)
               (or (,.f ,@(zxmap-cars g)) (return t))
               ,(zxmap-incr g)
               (go ,tag)))
         (return nil))))

;=== NOTANY ===

(defun zxnotany (f l g)
 (case (length l)
       (1 (zxnotany-1 f l g))
       (t (zxnotany-m f l g))))

(defun zxnotany-1 (f l g)
 (let ((v (gensym)) (tag (gensym)))
  `(let ((,v ,(car l)))
    (if ,v
        (prog ()
            ,tag
              (unless (,.f (zcar ,v))
                      (when (setq ,v (cdr ,v))
                            (go ,tag))
                      (return t))
              (return nil))
        t))))

(defun zxnotany-m (f l g)
 (let ((tag (gensym)))
  `(prog ,g
         ,(zxmap-init g l nil)
    ,tag (cond ((and . ,g)
               (and (,.f ,@(zxmap-cars g)) (return nil))
               ,(zxmap-incr g)
               (go ,tag)))
         (return t))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; *** This function is now obsolete. ***
;
; MXZMAP performs the macro expansion for mapping functions in the
; COMPILED environment when the function being mapped is not constant.
;
; Args: (1) the name of the mapping function.
;       (2) the (headless) body of the mapping macro call.
;
; For example:
;
; (MAPCAR FUNVAR X) is expanded via (MXZMAP '(MAPCAR FUNVAR X))
;
;
;(defun mxzmap (xx)
; (let (((f . x) xx))
;      (cond
;       ((null x)        (zerror "Missing argument" F))
;       ((null (cdr x))  (zerror "No lists specified" F))
;       (t               `(,(mapname f)
;                          ,(car x)
;                          (list . ,(cdr x))
;                         )))))
;
;(defun mapname (mf)
; (cond
;  ((eq mf 'mapl     ) 'zmapl   )
;  ((eq mf 'mapc     ) 'zmapc   )
;  ((eq mf 'maplist  ) 'zmaplist)
;  ((eq mf 'mapcar   ) 'zmapcar )
;  ((eq mf 'mapand   ) 'zmapand )
;  ((eq mf 'mapor    ) 'zmapor  )
;  ((eq mf 'mapcan   ) 'zmapcan )
;  ((eq mf 'mapcon   ) 'zmapcon )
;  (t                  (zerror "Unknown caller of MXZMAP" mf))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
