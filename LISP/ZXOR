
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

;
; This is the compiler transform for OR.
;
;
;***********************************************************************
;*                                                                     *
;* Change activity:                                                    *
;*                                                                     *
;* 03/29/88 - Optimization from OR to COND in certain cases added to   *
;*            improve code generation for weird things like MEMQ.      *
;*                                                                     *
;***********************************************************************
;

(defun zxor (xform xenv xcon)

 (prog (head tail body form formcon)
  (setq head (car xform) tail (cdr xform))
  ;;
  ;; (OR) --> NIL
  ;;
  (when (null tail) (return nil))
  ;;
  ;; (OR x) --> x
  ;;
  (when (null (cdr tail)) (return (car tail)))
  ;;
  ;; If for effect only (context is null):
  ;;
  ;; (OR x y) --> (COND ((NOT x) y))
  ;;
  ;; This enables somewhat better code in certain situations, like
  ;; when x is (MEMQ ...).
  ;;
  (when (and (null xcon) (null (cddr tail)))
        (return `(cond ((not ,(car tail)) ,(cadr tail)))))

  (setq body tail)

 loop

  (setq form (car body))
  (setq formcon (zilcocon form nil))

  (cond
   ;;
   ;; form not a constant - no optimization this round
   ;;
   ((null formcon)
    (go continue))
   ;;
   ;; constant form is last - no optimization to be done
   ;;
   ((null (cdr body))
    (return xform))
   ;;
   ;; (OR <forms> 'TRUE <more_forms>) --> (OR <forms> 'TRUE)
   ;;
   ((not (null (car formcon)))
    (warn `("OR forms not executed following constant " ,(car formcon))
      (cdr body))
    (return (cons head (loop for oldform in tail
                             collect oldform
                             until (eq oldform form)))))
   ;;
   ;; (OR <forms> NIL <more_forms>) --> (OR <forms> <more-forms>)
   ;;
   (t
    (return (cons head (remq form tail))))
  )

 continue

  (if (setq body (cdr body))     ; Next form
      (go loop)
      (return xform))            ; No more optimizations apply

 )
)

(eval-when (eval)
 (deftrans or zxor))

