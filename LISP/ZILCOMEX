
;***********************************************************************
;*                                                                     *
;* ZIL (c) Copyright 1989 The Charles Stark Draper Laboratory Inc.     *
;*         All rights reserved.                                        *
;*                                                                     *
;***********************************************************************

; ZILCOMEX is like MACROEXPAND except that it expands also CMACROs
; (i.e. macros known only to the compiler).
; In addition, it recurs until it returns something that is not
; a macro.
;
; This function supersedes "ZCCEXPAN" and "ZCCEXPUN".
;
; With this function, ZILCOCOM will be able to expand top-level
; function calls, enabling the use of macros that expand into
; DEFUN's (e.g. DEFMACRO).
;
; Note:      MACRO properties are now recognized by the compiler at
;            compile time, as well as CMACRO properties.  This means
;            that DEFMACRO's evaluated at compile time create macro
;            definitions that are used in compilation; there is no
;            way to avoid this.  CMACRO's are still supported for
;            compatibility and as a means of defining compiler-only
;            optimizations of functions.  See ZCCEVAL.
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include #.(zil-source-member zilmacs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun zilcomex
       (form    ; the form to be macro-expanded
        tlvlp   ; if non-NIL, macro expansion called at top level
        &aux
        prop
        m
       )
 (cond
  ((atom form)                           form) ; Not a list
  ((not (symbolp (car form)))            form) ; Not a valid name
  ((get (car form) 'cexpr)               form) ; Defined as function
  ((setq m
    (or (get (car form) (setq prop 'cmacro))  ; It's a compiler macro
        (get (car form) (setq prop 'macro)))) ; It's a regular macro
    ;
    ; If "tlvlp" is true, we are expanding a form seen at top level,
    ; which is OK.  Otherwise, this is a macro found inside code.
    ; Since full macro expansion should already have been done by
    ; ZILCOTRN prior to this point, we'll see a macro expansion
    ; only if the expansion of the form had failed.  Therefore.
    ; only signal an error in that case.
    ;
    (if tlvlp
        (zilcomex (app-mac-lam m form prop tlvlp) tlvlp)
        (app-mac-err form tlvlp)))
  (t                                     form) ; Not a macro call
 ))

(defun app-mac-lam (m form prop tlvlp &aux z)
 (if (ok (setq z (zevmapp m form prop)))
     z
     (app-mac-err form tlvlp)))

; Error depends on whether top-level or not, since BODY will be bound
; only if TLVLP is NIL.

(defun app-mac-err (form tlvlp)
 (cond
  (tlvlp
   (zerror "Macro expansion failed" form))
  (t
   (modq body `(error "Macro expansion failed" ,form))
   nil)))


