         TITLE 'RANDOM - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
* THIS IS A COPY OF THE PROGRAM SHOWN BELOW, TRANSFORMED INTO A ZIL   *
* FUNCTION BY STEVE BACHER.                                           *
*                                                                     *
* IF ARG 1 IS OMITTED OR NIL, THE SEED KEY IS RESET.  OTHERWISE THE   *
* KEY IS SET BASED ON THE CURRENT COMPUTATION FOR THE NEXT CALL.      *
*                                                                     *
* NOTE: THE SECOND ARGUMENT, SUPPOSED TO REPRESENT A RANDOM STATE     *
* OBJECT, IS CURRENTLY IGNORED AND OPTIONAL, BUT ESTABLISHED FOR      *
* COMMON LISP FUNCTION-CALL-LEVEL COMPATIBILITY.                      *
*                                                                     *
***********************************************************************
         SPACE 1
*********************************************************************
*  PROGRAM: CS226HW1                                                *
*  AUTHOR: DAYTON T. MARCOTT                                        *
*  DESCRIPTION:                                                     *
*      THIS PROGRAM WRITTEN BY HOMER PETERSON OF LINCOLN LABRATORY. *
*  REAL FUNCTION RAN2 (SINGLE OR DOUBLE PRECISION)                  *
*  INPUT IN CALLING SEQUENCE:  SEED  INTEGER                        *
*  OUTPUT IN CALLING SEQUENCE: REVISED SEED  INTEGER                *
*  OUTPUT IN FLOATING POINT REGISTER: RANDOM NUMBER BETWEEN 0 & 1   *
*                                                                   *
*********************************************************************
*
RANDOM   #ZBEG MINARGS=0,MAXARGS=2,NAME='RANDOM'
         #ZPDS 2*4+12+0 = 20
         #ZSAV ,
         SPACE 1
         C     #13,4(,#11)         If ARG 2 supplied
         BE    ARG2OK              then warn user
         #ERR  1,'Optional arg 2 to RANDOM currently ignored by ZIL.'
ARG2OK   DS    0H
         L     #3,0(,#11)          GET ARGS 1 AND 2
         XR    #4,#4               INITIALIZE FIX/FLO INDICATOR
         CR    #3,#10              IF ARG 1 IS NIL
         BE    ISNIL                OR
         CR    #3,#13                ARG 1 IS OMITTED
         BNE   NOTNIL                 THEN...
ISNIL    XC    ZLCRANDK,ZLCRANDK       RESET KEY TO INITIAL VALUE
         L     #3,=X'7FFFFFFF'         NO LIMIT ON VALUE
         B     RANFIX                  AND PROCESS AS RANDOM FIXNUM
NOTNIL   DS    0H
         CLI   ##TYPE(#3),##FIXNUM IF FIXNUM
         BE    RANFIX              THEN PROCESS RANDOM FIXNUM
         TM    ##TYPE(#3),##FLONUM IF FLONUM, OK
         BNO   ERROR               ELSE NOT SUPPORTED
         LA    #4,1                SET FLONUM INDICATOR
         SPACE 1
RANFIX   DS    0H
         L     #1,ZLCRANDK     GET KEY
         LTR   #1,#1           SEE IF POSITIVE
         BP    OK              OK IF IT IS
         LA    #1,3141         IF NOT CHOOSE ONE
OK       M     #0,=F'161051'   PRIMITIVE ROOT
         D     #0,=X'7FFFFFFF' OF 2**31-1
         ST    #0,ZLCRANDK     RETURN KEY
         LTR   #4,#4               IF ASKING FOR A FLONUM
         BNZ   SETFLO              THEN GO GENERATE ONE
         ICM   #3,15,##CDR(#3)     GET FIXNUM VALUE OF ARG 1
         BNP   ERROR               MUST BE POSITIVE
         SRDA  #0,32               PREPARE FOR ANOTHER DIVIDE
         DR    #0,#3               DIVIDE TO GET REMAINDER
         LR    #2,#0               REMAINDER IN #0, QUOTIENT IN #1
         LA    #0,20(,#11)         PASS STACK POINTER TO CONS
         #MKAT FIXED               MAKE A FIXNUM OUT OF IT
         B     RETURN
         SPACE 1
SETFLO   DS    0H
         SPACE 1
         CLI   ##TYPE(#3),##DFLOAT IF IT IS A DOUBLE FLOAT
         BE    SETDFLO             THEN GO DO A DOUBLE
         SPACE 1
         ST    #0,FLOAT        PREPARE TO FLOAT
         LD    #F0,TEMP         LOAD A NUMBER BETWEEN 0 & .5
         AD    #F0,TEMP         DOUBLE IT AND NORMALIZE
         ME    #F0,##CDR(,#3)      MULTIPLY BY FLONUM VALUE OF ARG 1
         STE   #F0,ZLCWORK
         L     #2,ZLCWORK
         LA    #0,20(,#11)         PASS STACK POINTER TO CONS
         #MKAT FLOAT
         B     RETURN
         SPACE 1
SETDFLO  DS    0H
         SPACE 1
         ST    #0,FLOAT        PREPARE TO FLOAT
         LD    #F0,TEMP         LOAD A NUMBER BETWEEN 0 & .5
         AD    #F0,TEMP         DOUBLE IT AND NORMALIZE
         MD    #F0,8(,#3)       MULTIPLY BY FLONUM VALUE OF ARG 1
         LA    #0,20(,#11)         PASS CURRENT STACK POINTER TO CONS
         L     #15,ZLCMDF          GET ADDRESS OF ZILMDF
         #BASR #14,#15             CALL ZILMDF TO MAKE DOUBLE FLOAT
******** B     RETURN
         SPACE 1
RETURN   DS    0H
         SPACE 1
         #ZRET ,
TEMP     DS    0D             DOUBLE WORD ALIGN
CHAR     DC    X'46000000'    CHARACTERISTIC TO FLOAT RESULT
FLOAT    DS    F'0'
         SPACE 1
ERROR    DS    0H
         #ERR  'Argument 1 to RANDOM not a positive fixnum or flonum - X
               ',0(#11)
         SPACE 1
         LTORG
         END
