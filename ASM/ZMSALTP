         TITLE 'ZMSALTP - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* ZMSALTP takes two args.  Both must be strings or symbols.           *
*                                                                     *
* This is "ALPHALESSP" for Macsyma or other application that          *
* requires ASCII collating.                                           *
*                                                                     *
***********************************************************************
*                                                                     *
* THIS ROUTINE IS NOT RECURSIVE AND USES NO STACK SPACE.              *
*                                                                     *
***********************************************************************
*                                                                     *
* SUPPORT FOR STRING AND SYMBOL COMPARES.  THE FOLLOWING COMPARISONS  *
*            ARE LEGAL:                                               *
*                                                                     *
*  SYMBOL TO SYMBOL                                                   *
*  STRING TO STRING                                                   *
*  SYMBOL TO STRING                                                   *
*  STRING TO SYMBOL                                                   *
*                                                                     *
* ALL MAY BE REMOVED FOR FULL COMMON LISP.                            *
*                                                                     *
***********************************************************************
ZMSALTP  #ZBEG MINARGS=2,MAXARGS=2,NAME='ZMSALTP'
         SPACE
         LR    #3,#15
         DROP  #15
         USING ZMSALTP,#3
         SPACE
         LM    #1,#2,0(#1)         LOAD ARGUMENTS
         LR    #15,#10             PRESET RETURN VALUE TO NIL
         CR    #1,#2               IF ARGS ARE "EQ"
         BER   #14                 THEN RETURN NIL
         CLI   ##TYPE(#1),##STRING IF ARGUMENT IS A STRING
         BE    ARG1OK              THEN OK
         CLI   ##TYPE(#1),##SYMBOL IF ARGUMENT IS A SYMBOL
         BNE   ERROR1              THEN
         L     #1,##PNAME(,#1)      TAKE THE PRINT NAME, ELSE ERROR
ARG1OK   DS    0H                  CHECK ARG 2
         CLI   ##TYPE(#2),##STRING IF ARGUMENT IS A STRING
         BE    ARG2OK              THEN OK
         CLI   ##TYPE(#2),##SYMBOL IF ARGUMENT IS A SYMBOL
         BNE   ERROR2              THEN
         L     #2,##PNAME(,#2)      TAKE THE PRINT NAME, ELSE ERROR
ARG2OK   DS    0H                  #1 -> string 1, #2 -> string 2
         SPACE 1
         XR    #5,#5               Clear insert register
         XR    #7,#7               Clear insert register
         ICM   #5,7,1(#1)          Get string length 1
         BZ    STR1NULL            If zero, string 1 is ""
         ICM   #7,7,1(#2)          Get string length 2
         BZ    STR2NULL            If zero, string 2 is ""
         LA    #4,##VECDAT(,#1)    Point to text of string arg1
         LA    #6,##VECDAT(,#2)    Point to text of string arg2
*
*                                  #4 = ADDRESS OF ARG 1 DATA
*                                  #5 = LENGTH OF ARG 1 DATA
*                                  #6 = ADDRESS OF ARG 2 DATA
*                                  #7 = LENGTH OF ARG 2 DATA
*
         LR    #15,#5              Use length of arg1
         CR    #5,#7               unless arg1 is longer
         BNH   *+6                 in which case
         LR    #15,#7              use shorter length of arg2
         LA    #0,256              Set up constant 256
         LA    #2,TRTBLE           Default to EBCDIC translation
         TM    ZLCLDFLG,ZLCLDASC   but if ASCII mode
         BNO   TRLOOP              then
         LA    #2,TRTBLA            set to ASCII translation
TRLOOP   DS    0H
         CR    #15,#0              Do while length >= 256
         BL    SHORTTR
         MVC   TRWK1(256),0(#4)    Move arg 1 text to work area
         TR    TRWK1(256),0(#2)    Translate to collating code
         MVC   TRWK2(256),0(#6)    Move arg 2 text to work area
         TR    TRWK2(256),0(#2)    Translate to collating code
         CLC   TRWK1(256),TRWK2    Compare what we have so far
         BL    LESS                If less, finished, return T
         BH    GREATER             If greater, finished, return NIL
*                                  Else compare not finished
         AR    #4,#0               Bump up pointer to arg 1 text
         AR    #6,#0               Bump up pointer to arg 2 text
         SR    #15,#0              Bump down length
         BNZ   TRLOOP              If some left, continue translating
         B     EQSOFAR             If none left, args equal, check it
SHORTTR  DS    0H                  Compare for args shorter than 256
         BCTR  #15,0               Reduce length for execute
         EX    #15,MVC1            Move arg 1 text to work area
         EX    #15,TR1             Translate to collating code
         EX    #15,MVC2            Move arg 2 text to work area
         EX    #15,TR2             Translate to collating code
         EX    #15,CLC             Compare what we have so far
         BL    LESS                If less, finished, return T
         BH    GREATER             If greater, finished, return NIL
******** B     EQSOFAR             Else equal, check what to return
EQSOFAR  DS    0H                  Arg 1 equal to arg 2
         CR    #5,#7               Compare arg lengths
******** BL    LESS                arg 1 shorter than arg 2, thus LT
******** BE    EQUAL               arg 1 as long as   arg 2, thus EQ
******** B     GREATER             arg 1 longer than  arg 2, thus GT
         BNL   NOTLESS             If len1 < len2 then true else false
TRUE     DS    0H                  (i.e. true)
         LR    #15,#8              Return T
         BR    #14
FALSE    DS    0H                  (i.e. false)
         LR    #15,#10             Return NIL
         BR    #14
STR1NULL DS    0H                  String 1 is null
         ICM   #7,7,1(#2)          Get string length 2
         BZ    EQUAL               If zero, strings are equal
         B     LESS                Otherwise, arg1 < arg2, return true
         SPACE 1
STR2NULL EQU   FALSE               String 2 is null, but string 1 isn't
*                                  i.e. arg1 > arg2, return false
         SPACE 1
LESS     EQU   TRUE                Arg 1 less than arg 2:     true
NOTLESS  EQU   FALSE               Arg 1 not less than arg 2: false
EQUAL    EQU   FALSE               Arg 1 equal to arg 2:      false
GREATER  EQU   FALSE               Arg 1 greater than arg 2:  false
         SPACE 1
MVC1     MVC   TRWK1(*-*),0(#4)    Ex'd: Move arg 1 text to work area
TR1      TR    TRWK1(*-*),0(#2)    Ex'd: Translate to collating code
MVC2     MVC   TRWK2(*-*),0(#6)    Ex'd: Move arg 2 text to work area
TR2      TR    TRWK2(*-*),0(#2)    Ex'd: Translate to collating code
CLC      CLC   TRWK1(*-*),TRWK2    Ex'd: Compare what we have so far
         EJECT
TRWK1    DS    CL256
TRWK2    DS    CL256
         SPACE 1
TRTBLE   DC    256YL1(*-TRTBLE)    ebcdic -> ebcdic translate table
         SPACE 1
*                                  ebcdic -> ascii translate table
*
TRTBLA   DC    X'000102038209837F' 00-07 NUL SOH STX ETX PF HT LC DEL
         DC    X'8485860B0C0D0E0F' 08-0F GE RLF SMM VT FF CR SO SI
         DC    X'1011121387880889' 10-17 DLE DC1 DC2 TM RES NL BS IL
         DC    X'18198A8B1C1D1E1F' 18-1F CAN EM CC CU1 IFS IGS IRS IUS
         DC    X'8C8D96978E0A171B' 20-27 DS SOS FS na BYP LF ETB ESC
         DC    X'98998F9091050607' 28-2F na na SM CU2 na ENQ ACK BEL
         DC    X'9A9B169C92939404' 30-37 na na SYN na PN RS UC EOT
         DC    X'9D9E9F951415A01A' 38-3F na na na CU3 DC4 NAK na SUB
         DC    X'20A1A2A3A4A5A6A7' 40-47 SP na na na na na na na
         DC    X'A8A9812E3C282B7C' 48-4F na na CENT . < ( + SBAR
         DC    X'26AAABACADAEAFB0' 50-57 & na na na na na na na
         DC    X'B1B221242A293B5E' 58-5F na na ! $ * ) ; Â¬
         DC    X'2D2FB3B4B5B6B7B8' 60-67 - / na na na na na na
         DC    X'B9BA802C255F3E3F' 68-6F na na BBAR , % _ > ?
         DC    X'BBBCBDBEBFC0C1C2' 70-77 na na na na na na na na
         DC    X'C3603A2340273D22' 78-7F na ` : # @ ' = "
         DC    X'C461626364656667' 80-87 na a b c d e f g
         DC    X'6869C5C6C7C8C9CA' 88-8F h i na na na na na na
         DC    X'CB6A6B6C6D6E6F70' 90-97 na j k l m n o p
         DC    X'7172CCCDCECFD0D1' 98-9F q r na na na na na na
         DC    X'D27E737475767778' A0-A7 na ~ s t u v w x
         DC    X'797AD3D4D55BD6D7' A8-AF y z na na na LBRACK na na
         DC    X'D8D9DADBDCDDDEDF' B0-B7 na na na na na na na na
         DC    X'E0E1E2E3E45DE5E6' B8-BF na na na na na RBRACK na na
         DC    X'7B41424344454647' C0-C7 { A B C D E F G
         DC    X'4849E7E8E9EAEBEC' C8-CF H I na na na na na na
         DC    X'7D4A4B4C4D4E4F50' D0-D7 } J K L M N O P
         DC    X'5152EDEEEFF0F1F2' D8-DF Q R na na na na na na
         DC    X'5CF3535455565758' E0-E7 \ na S T Y V W X
         DC    X'595AF4F5F6F7F8F9' E8-EF Y Z na na na na na na
         DC    X'3031323334353637' F0-F7 0 1 2 3 4 5 6 7
         DC    X'3839FAFBFCFDFEFF' F8-FF 8 9 na na na na na na
         EJECT
ERROR1   LR    #4,#1
         #ERR  'Argument 1 to ALPHALESSP not a string - ',(#4)
ERROR2   LR    #4,#2
         #ERR  'Argument 2 to ALPHALESSP not a string - ',(#4)
         SPACE 1
         LTORG
         END
