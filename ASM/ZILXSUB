         TITLE 'ZILXSUB - ZIL 1.3 SUBROUTINE EXECUTOR'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* THIS MODULE IS USED BY EVAL AND APPLY TO EXECUTE SUBRS AND CLOSURES.*
* PARAMETERS ARE AS FOLLOWS:                                          *
*                                                                     *
* PARAMETER 1 IS THE ENTRY POINT OBJECT (GET XXX 'SUBR).              *
* PARAMETER 2 IS THE LIST OF (EVALUATED) ARGUMENTS.                   *
*                                                                     *
***********************************************************************
         SPACE 1
ZILXSUB  #ZBEG MINARGS=2,MAXARGS=2,NAME='ZILXSUB'
         SPACE ,
         #ZPDS 24                  RESERVE INITIAL MINIMAL STACK SPACE
         #ZSAV ,                   SAVE REGISTERS
         SPACE 3
*
* PICK UP THE ARGUMENTS
*
         LM    #1,#2,0(#11)        PICK UP ARGS
*                                    #1 = ENTRY POINT TO CALL
*                                    #2 = ARGUMENT LIST
*----------------------------------------------------------------------
*--- SUPPORT FOR (ZILXSUB NIL ...) REMOVED - IT IS NOT NECESSARY. -----
*----------------------------------------------------------------------
*------- CR    #1,#10              IF ENTRY = NIL
*------- BNE   NOTNIL              THEN
*------- LR    #15,#10              SET RETURN TO NIL
*------- B     ZRETURN              AND DO NOTHING.
NOTNIL   DS    0H
*----------------------------------------------------------------------
         TM    ##TYPE(#1),##CODE   ARG 1 MUST BE A COMPILED CODE OBJECT
         BNO   ERR3048             ELSE ERROR
OK       DS    0H
*
* EXTRACT MINIMUM AND MAXIMUM NUMBER OF ARGS FOR THIS FUNCTION
*
         XR    #3,#3               CLEAR INSERT REGISTER
         XR    #6,#6               CLEAR INSERT REGISTER
         XR    #7,#7               CLEAR INSERT REGISTER
         ICM   #3,7,##CAR+1(#1)    GET POINTER TO COMPILED CODE
         IC    #6,4(,#3)           GET LENGTH OF MODULE IDENTIFIER
         LA    #15,5+3(#6,#3)      POINT PAST MODULE IDENTIFIER
         N     #15,=X'FFFFFFFC'    ROUNDING UP TO NEXT FULLWORD
         USING ZINT,#15            ADDRESS THE "ZINT" AREA IN MODULE
         TM    ZINFLAG2,ZINGLEXP   IF THIS IS A COMPILED LEXPR
         BO    LEXPR               THEN GO TO PROCESS IT AS A LEXPR
         IC    #6,ZINMINAR         GET MINIMUM NUMBER OF ARGUMENTS
         IC    #7,ZINMAXAR         GET MAXIMUM NUMBER OF ARGUMENTS
         CR    #6,#7               IF MINIMUM > MAXIMUM
         BH    BADFUNC             THEN ERROR - BAD FUNCTION
         LR    #3,#7               CONVERT TO INDEX INTO STACK
         TM    ZINFLAG2,ZINGREST   IF A &REST ARG IS EXPECTED,
         BZ    NOREST              THEN...
         LA    #3,1(,#3)            ADD ONE MORE FOR IT.
NOREST   DS    0H                  SET ARG COUNT TO MAXARGS INITIALLY
         SLA   #3,2                ARGS * 4 = STACK SIZE NEEDED
         LA    #0,24(#3,#11)       POINT TO NEW STACK LOCATION
         #ZPDS (0)                 CHECK IF SIZE IS AVAILABLE
         LA    #5,24(,#11)         POINT TO WHERE TO START STACKING
STKLOOP  DS    0H
         CR    #2,#10              IF AT END OF LIST OF ARGS
         BE    STKOUT              THEN OUT OF ARGUMENTS
         LTR   #7,#7               BUT IF MORE ARGS THAN MAX ARGS
         BZ    EXTRARGS            THEN CHECK FOR A &REST ARG
         L     #4,##CAR(,#2)       GET ARGUMENT FROM LIST OF ARGS
         ST    #4,0(,#5)           STORE ONTO STACK
         LA    #5,4(,#5)           BUMP STACK LOCATION
         L     #2,##CDR(,#2)       GO TO NEXT ARG IN LIST
         BCTR  #6,0                DECREMENT MIN ARG COUNT
         BCTR  #7,0                DECREMENT MAX ARG COUNT
         B     STKLOOP             AND CONTINUE COUNTING DOWN LIST
EXTRARGS DS    0H                  MAX ARGS EXCEEDED AND STILL GOT SOME
         TM    ZINFLAG2,ZINGREST   IF THERE'S A &REST ARG
         BO    SETREST             THEN SET IT
         XR    #3,#3               ELSE CLEAR INSERT REGISTER
         ICM   #3,7,##CAR+1(#1)    ERROR - TOO MANY ARGS
         LA    #1,MANYSTR
         LA    #2,MANYNAME
         LA    #5,MANYMSG
         XR    #4,#4
         IC    #4,ZINMAXAR
         B     ERROR
STKOUT   DS    0H                  UNTIL MAX USED UP OR NO MORE ARGS
         LTR   #6,#6               IF FEWER ARGS THAN MIN ARGS
         BP    TOOFEW              THEN ERROR
         LTR   #7,#7               IF DOWN TO MAX
         BZ    NOARGS              THEN FINISHED SETTING UP ARGS
STNILLP  ST    #13,0(,#5)          ELSE STORE (UNSUPPLIED) INTO ARG STK
         LA    #5,4(,#5)           BUMP STACK LOCATION
         BCT   #7,STNILLP          CONTINUE UNTIL MAX ARGS USED UP
NOARGS   DS    0H
         TM    ZINFLAG2,ZINGREST   IF THERE'S A &REST ARG
         BZ    NOREST2             THEN SET IT
SETREST  DS    0H
         ST    #2,0(,#5)           SET IT TO THE REMAINING ARG LIST
NOREST2  DS    0H
         L     #14,ZLCFALST        GET CURRENT FLUID ALIST
         ST    #14,20(,#11)        SAVE IT ON STACK
         TM    ##TYPE(#1),##CLOS   IF THIS IS A CLOSURE
         BZ    NOALIST             THEN
         ICM   #0,15,##CDR(#1)      GET ALIST POINTER FROM CLOSURE
         BZ    NOALIST              IF NONE, TREAT LIKE NORMAL SUBR
         ST    #0,ZLCFALST         STORE FLUID ALIST FOR THIS EXECUTION
NOALIST  DS    0H
         DROP  #15
         XR    #15,#15             CLEAR INSERT REGISTER
         ICM   #15,7,##CAR+1(#1)   LOAD UP SUBROUTINE ENTRY POINT
         LA    #1,24(,#11)         POINT TO ARGUMENTS ON STACK
         #BASR #14,#15             CALL THE SUBROUTINE
         L     #14,20(,#11)        PICK UP SAVED FLUID ALIST FROM STACK
         ST    #14,ZLCFALST        RESTORE SAVED FLUID ALIST
*                                  RETURN VALUE IS IN REGISTER 15
ZRETURN  DS    0H
         #ZRET ,                   RESTORE REGISTERS AND RETURN
         SPACE 2
ERR3048  DS    0H
         #ERR  'Argument 1 to ZILXSUB not a compiled code object (SUBR X
               or closure) - ',0(#11)
         EJECT
LEXPR    DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* IF THIS IS A COMPILED CODE LEXPR, THIS IS WHAT WE DO:               *
*                                                                     *
*  PUT ARGS ON STACK AS FOLLOWS:                                      *
*                                                                     *
*    MAKE A FIXNUM OBJECT FROM THE NUMBER OF ARGS PASSED              *
*    PLACE THE ARGS ON THE STACK FOLLOWING THE FIXNUM OBJECT          *
*                                                                     *
*  THE NUMBER OF STACK SLOTS REQUIRED = THE NUMBER OF ARGS + 1.       *
*                                                                     *
***********************************************************************
         SPACE 1
         LA    #5,28(,#11)         POINT TO WHERE TO START PUTTING ARGS
         LR    #0,#5               CHECK THAT WE HAVE AT LEAST ENOUGH
         #ZPDS (0)                 STACK SPACE FOR THE LEXPR FIXNUM ARG
         XR    #3,#3               INITIALIZE ARG COUNT TO ZERO
LARGLOOP DS    0H
         CR    #2,#10              GO THRU LIST OF ARGS UNTIL END
         BE    ENDLARGS
         LA    #0,4(,#5)           CHECK THAT WE HAVE AT LEAST ENOUGH
         #ZPDS (0)                 STACK SPACE FOR ONE MORE ARG
         LM    #1,#2,##CAR(#2)     GET #1 = ARG OFF THE ARG LIST
*                                  GET #2 = NEXT ARG IN LIST
         ST    #1,0(,#5)           STORE IT ON THE STACK
         LA    #5,4(,#5)           BUMP STACK POINTER
         BCT   #3,LARGLOOP         DECREMENT ARG COUNT AND CONTINUE
ENDLARGS DS    0H
         LCR   #2,#3               GET POSITIVE ARG COUNT
         CH    #2,ZLCSFTHI         If within small fixnum range
         BNH   SMALLFIX            then go use fixnum from table
         OI    ZLCGCFLG,ZLCGCBLD   Else TELL GC THAT WE'RE PROVIDING #0
         #MKAT FIXED               MAKE A FIXNUM OUT OF ARG COUNT
         NI    ZLCGCFLG,252-ZLCGCBLD  RESTORE GC BIT
         B     AFTFIX
SMALLFIX DS    0H                  Small fixnum arg count
         LA    #15,#SFT(#2)        Get fixnum from small fixnum table
AFTFIX   DS    0H
         ST    #15,24(,#11)        STORE IT AS THE ARG TO THE LEXPR
         LA    #3,1(,#2)           GET ARG COUNT PLUS 1
         SLA   #3,2                CONVERT TO # OF STACK SLOTS PASSED
         L     #1,0(,#11)          RELOAD ARG 1 FROM STACK
         B     NOREST2             GO TO PASS CONTROL TO CODE
         EJECT
BADFUNC  DS    0H                  BAD FUNCTION
*
* AT SOME TIME IN THE FUTURE THIS MIGHT CONCEIVABLY DENOTE AN FSUBR,
* MSUBR OR SOME SUCH MONSTROSITY.  HOWEVER, WE ARE CURRENTLY USING IT
* TO DENOTE A FUNCTION WHICH SHOULD NOT BE BEING CALLED FROM A LISP
* ENVIRONMENT DIRECTLY, SUCH AS THE ZIL____ SERIES OF INTERNAL ROUTINES
*
         XR    #3,#3
         ICM   #3,7,##CAR+1(#1)    ERROR - BAD FUNCTION
         LA    #1,BADFSTR
         LA    #2,BADFNAME
         XR    #5,#5
         B     ERROR
TOOFEW   DS    0H
         XR    #3,#3
         ICM   #3,7,##CAR+1(#1)    ERROR - TOO FEW ARGS
         LA    #1,FEWSTR
         LA    #2,FEWNAME
         LA    #5,FEWMSG
         XR    #4,#4
         IC    #4,ZINMINAR-ZINT(,#15)
******** B     ERROR
         SPACE 1
ERROR    DS    0H
         MVI   0(#2),C' '          CLEAR FUNCTION NAME TO BLANKS
         MVC   1(NAMELEN-1,#2),0(#2)
         XR    #15,#15             CLEAR INSERT REGISTER
         IC    #15,4(,#3)          GET LENGTH OF MODULE IDENTIFIER
         SH    #15,=H'16'          REDUCE BY LENGTH OF DATE/TIME INFO
         BNP   NONAME              IF NO NAME, SKIP
         CH    #15,=Y(NAMELEN)     NOT BLOODY LIKELY, BUT JUST IN CASE
         BNH   *+8                  LIMIT TO (NAMELEN) CHARACTERS
         LA    #15,NAMELEN
         BCTR  #15,0               REDUCE FOR EXECUTE
         EX    #15,MVCNAME         MOVE FUNCTION NAME TO MESSAGE
         LA    #2,1(#15,#2)        POINT PAST FUNCTION NAME
NONAME   DS    0H
         MVI   0(#2),C'.'          MOVE IN A PERIOD
         LA    #0,1(,#2)
         SR    #0,#1               GET LENGTH OF MESSAGE
         SH    #0,=H'4'            (END - START - PREFIX LENGTH)
         STCM  #0,7,1(#1)          STORE LENGTH IN FAKE STRING
         LR    #2,#1               Get address of fake string
         LPR   #5,#5               If this is an "invalid fun" msg
         BZ    BADFUNER            then display that message
         #ERR  0(#5),#4,MSG2,0(#2),PREFIX=NO
         SPACE 1
BADFUNER #ERR  BADFSTR,PREFIX=NO
         SPACE 1
MVCNAME  MVC   0(*-*,#2),5(#3)     EXECUTED: MOVE FUNCTION NAME TO MSG
         SPACE 2
NAMELEN  EQU   64                  MAX LENGTH OF FUNCTION NAME SHOWN
         SPACE 2
         DS    0H,XL1
FEWMSG   #SATM 'ZIL1301 Too few arguments (< '
         DS    0H,XL1
MANYMSG  #SATM 'ZIL1302 Too many arguments (> '
         DS    0H,XL1
MSG2     #SATM ') to function '
         DS    0H,XL1
FEWSTR   DC    YL1(##STRING),AL3(0)
FEWNAME  DS    CL(NAMELEN+1)
         DS    0H,XL1
MANYSTR  DC    YL1(##STRING),AL3(0)
MANYNAME DS    CL(NAMELEN+1)
         DS    0H,XL1
BADFSTR  DC    YL1(##STRING),AL3(0)
BADFMSG  DC    C'ZIL1303 Attempt to execute invalid ZIL function '
BADFNAME DS    CL(NAMELEN+1)
         SPACE 2
         LTORG
         SPACE 2
         #ZINT ,
         END
