         TITLE 'ASH - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* ASH takes two integer arguments.                                    *
* This function does an arithmetic shift operation.  Compare LSH.     *
*                                                                     *
* Common Lisp complete.                                               *
*                                                                     *
* The trick with negative numbers is to realize that any 1-bits       *
* shifted out on the right in magnitude notation is a remainder       *
* part that will make the magnitude of the remaining negative         *
* number one greater in magnitude.                                    *
*                                                                     *
* ASH could be approximately asymptotically doubled in speed by       *
* vectorizing the BXLE loops, with testing to use the vectorized      *
* version only when the length to be shifted reaches a threshhold.    *
*                                                                     *
***********************************************************************
ASH      #ZBEG MINARGS=2,MAXARGS=2,NAME='ASH'
         #ZPDS 2*4+12+0 (= 20)     DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
         LM    #6,#7,0(#11)        LOAD ARGUMENTS
         CLI   ##TYPE(#6),##FIXNUM Is arg 1 a fixnum?
         BNE   NF1                 Go to Not Fixnum 1
         CLI   ##TYPE(#7),##FIXNUM Is arg 2 a fixnum?
         BNE   F1NF2               Go to Fixnum 1 Not Fixnum 2
F1F2     ICM   #3,15,##CDR(#7)     Get shift index
         BZ    I1FZ2               If 0, no shifting required
         BM    F1FM2               If negative, right shift required
F1FP2    CH    #3,=H'31'           Maximum useful shift amount
         BH    F1FP2BZ             Shift is large enough for bignum
         L     #2,##CDR(,#6)       Load fixnum to be shifted
         SLA   #2,0(#3)            Shift the fixnum requested amount
         BO    F1FP2B              Overflow, go make it a bignum
RETFIX   #MKAT FIXED               Cons up a fixnum, probably not SF
RET      #ZRET ,                   RESTORE REGISTERS AND RETURN
*
F1FM2    CH    #3,=H'-30'          Maximum useful shift
         BL    F1FM2LRG            All but sign shifted out?
         LCR   #3,#3               Change to positive shift amount
         L     #2,##CDR(,#6)       Get number to be shifted
         SRA   #2,0(#3)            Shift by amount of arg 2
         CL    #2,ZLCSFTHI         Is number within small fixnum table?
         BH    RETFIX              Need to cons the fixnum?
         SLA   #2,3                Compute offset in small fixnum table
         LA    #15,#SFT(#2)        Address in small fixnum table
         B     RET                 Return to caller
*
F1FM2LRG TM    ##CDR(#6),X'80'     Test sign of fixnum
         LA    #15,#SFT0           Load 0 in case it was positive
         BZ    RET                 Return to caller if it was 0
         LA    #15,#SFTM1          Load -1 because fixnum was neg
         B     RET                 Return to caller
*
I1FZ2    LR    #15,#6              Return arg 1 unchanged
         B     RET                 Return to caller
*
F1FP2B   L     #5,##CDR(,#6)       Load fixnum to be shifted
         XR    #4,#4               Clear before shift left
         LPR   #5,#5               Get magnitude of fixnum in 32 bits
         SLDA  #4,1(#3)            Shift left requested amount +1
         BO    MT62                Answer must be -2¬62
         SRL   #5,1                Correct for +1 shift too much
         TM    ##CDR(#6),X'80'     Test sign of arg 1
         LR    #6,#4               Save upper word from ZLCBIG clobber
         BZ    NONEG               We don't need to make answer neg
         O     #5,=X'80000000'     Insert minus sign before storing
NONEG    L     #15,ZLCBIG          Address of bignum allocator
         LA    #2,##VECDAT+8       Total length of desired bignum
         #BASR #14,#15             Allocate bignum space
         MVC   1(3,#15),=AL3(8)    Store bignum length
         STM   #5,#6,##VECDAT(#15) Store two-word bignum
         LA    #2,##VECDAT+8(,#15)  Generate new availability pointer
         ST    #2,ZLCVSNXT         Store updated availability pointer
         B     RET                 Return to caller
*
MT62     LA    #15,#MT62           Return pointer to -2¬62h
         B     RET                 Return to caller
*
F1FP2BZ  ICM   #2,B'1111',##CDR(#6) Load fixnum and test sign
         BP    FP1FP2B             Answer will be positive bignum
         BM    FM1FP2B             Answer will be negative bignum
         LA    #15,#SFT0           Answer must be 0, load pointer to 0
         B     RET                 Return to caller
*
FP1FP2B  XR    #4,#4               Clear for divide
         LR    #5,#3               Get the requested shift amount
         D     #4,=F'31'           Divide to get offset and local shift
         SRDL  #2,32               Clear reg 2 and put in reg 3
         SLDL  #2,1(#4)            Do local shift, plus extra for bit 0
         SRL   #3,1                Correct for overshift of lower word
         SLL   #5,2                Convert word offset to byte offset
         LTR   #6,#2               Is highest word a zero?
         L     #15,ZLCBIG          Address of bignum maker
         BP    FP1FP2BH            High word is not zero?
         LR    #2,#5               Copy whole word shift amount
         AH    #2,=H'8'            Total bignum length for bignum maker
         #BASR #14,#15             Get a bignum space
         SH    #2,=H'4'            Bring down to data length of bignum
         STCM  #2,B'0111',1(#15)   Store bignum length in bignum header
         ST    #3,##VECDAT(#5,#15) Store highest word of new bignum
         LA    #4,##VECDAT(,#15)   Start of area to zero out
         XR    #7,#7               Zero source length and 0 pad - MVCL
         LA    #2,##VECDAT(#2,#15) Point to end of result
         MVCL  #4,#6               Zero out all but high word, #6 junk
         ST    #2,ZLCVSNXT         Update availability pointer
         B     RET                 Return to caller
*
FP1FP2BH LR    #2,#5               Copy whole word shift amount
         AH    #2,=H'12'           Total bignum length for bignum maker
         #BASR #14,#15             Get a bignum space
         SH    #2,=H'4'            Bring down to data length of bignum
         STCM  #2,B'0111',1(#15)   Store bignum length in bignum header
         ST    #3,##VECDAT(#5,#15) Store highest word of new bignum
         ST    #6,##VECDAT+4(#5,#15) Store highest word of new bignum
         LA    #4,##VECDAT(,#15)   Start of area to zero out
         XR    #7,#7               Zero source length and 0 pad - MVCL
         LA    #2,##VECDAT(#2,#15) Point to end of result
         MVCL  #4,#6               Zero out all but high word, #6 junk
         ST    #2,ZLCVSNXT         Update availability pointer
         B     RET                 Return to caller
*
FM1FP2B  XR    #4,#4               Clear for divide
         LR    #5,#3               Get the requested shift amount
         D     #4,=F'31'           Divide to get offset and local shift
         LPR   #2,#2
         SRDL  #2,32               Clear reg 2 and put in reg 3
         SLDL  #2,1(#4)            Do local shift, plus extra for bit 0
         SRL   #3,1                Correct for overshift of lower word
         SLL   #5,2                Convert word offset to byte offset
         LTR   #6,#2               Is highest word a zero?
         L     #15,ZLCBIG          Address of bignum maker
         BP    FM1FP2BH            High word is not zero?
         LR    #2,#5               Copy whole word shift amount
         AH    #2,=H'8'            Total bignum length for bignum maker
         #BASR #14,#15             Get a bignum space
         SH    #2,=H'4'            Bring down to data length of bignum
         STCM  #2,B'0111',1(#15)   Store bignum length in bignum header
         ST    #3,##VECDAT(#5,#15) Store highest word of new bignum
         LA    #4,##VECDAT(,#15)   Start of area to zero out
         LA    #6,=X'80'           First byte of minus bignum
         LA    #7,1                Copy minus byte and pad rest with 0
         LA    #2,##VECDAT(#2,#15) Point to end of result
         MVCL  #4,#6               Zero out all but high word, #6 junk
         ST    #2,ZLCVSNXT         Update availability pointer
         B     RET                 Return to caller
*
FM1FP2BH LR    #2,#5               Copy whole word shift amount
         AH    #2,=H'12'           Total bignum length for bignum maker
         #BASR #14,#15             Get a bignum space
         SH    #2,=H'4'            Bring down to data length of bignum
         STCM  #2,B'0111',1(#15)   Store bignum length in bignum header
         ST    #3,##VECDAT(#5,#15) Store highest word of new bignum
         ST    #6,##VECDAT+4(#5,#15) Store highest word of new bignum
         LA    #4,##VECDAT(,#15)   Start of area to zero out
         LA    #6,=X'80'           First byte of minus bignum
         LA    #7,1                Copy minus byte and pad rest with 0
         LA    #2,##VECDAT(#2,#15) Point to end of result
         MVCL  #4,#6               Zero out all but high word, #6 junk
         ST    #2,ZLCVSNXT         Update availability pointer
         B     RET                 Return to caller
*
F1NF2    CLI   ##TYPE(#7),##BIGNUM Is arg 2 a bignum?
         BNE   ERROR2              Error, arg 2 not an integer
         TM    ##VECDAT(#7),X'80'  Test sign of bignum
         BO    F1BM2               Shift amount is negative bignum
F1BP2    ICM   #5,B'1111',##CDR(#6) Test fixnum arg 1
         BNZ   ERROR3              Bignum will blow up
FZ1BP2   LA    #15,#SFT0           Load address of 0
         B     RET                 Return to caller
*
F1BM2    TM    ##CDR(#6),X'80'     Test sign of fixnum to be shifted
         LA    #15,#SFT0           Load address of 0 in case we need it
         BZ    RET                 Fixnum was non-negative, answer is 0
         LA    #15,#SFTM1          Fixnum is negative, answer is -1
         B     RET                 Return to caller
*
NF1      CLI   ##TYPE(#6),##BIGNUM Is arg 1 a bignum?
         BNE   ERROR1              If not, first arg is not integer
B1       CLI   ##TYPE(#7),##FIXNUM Is arg 2 a fixnum?
         BNE   B1NF2               Go to Bignum 1 Not Fixnum 2
B1F2     ICM   #3,B'1111',##CDR(#7) Load index and test sign
         BZ    I1FZ2               Arg 1 is integer, arg 2 is zero
         BM    B1FM2               Go to bignum 1 Fixnum Minus 2
B1FP2    XR    #2,#2               Clear upper word for divide
         D     #2,=F'31'           Divide by bits/word
         SLL   #3,2                Compute number of bytes of shift
         LR    #7,#2               Save bit shift
         XR    #5,#5               Clear for inserting bignum length
         ICM   #5,B'0111',1(#6)    Get length of bignum
         LR    #2,#5               Extra copy of bignum length
         L     #15,ZLCBIG          Load address of bignum maker
         AH    #2,=H'8'            Compute maximum length of result
         AR    #2,#3               Add shift amount to length
         #BASR #14,#15             Call bignum allocator
         L     #6,0(,#11)          Reload pointer to arg1 after GC
         L     #0,##VECDAT(,#6)    Load lowest word of source bignum
         LA    #2,0(#3,#15)        Fake pointer inside new bignum
         SLL   #0,1(#7)            Shift and squeeze out sign bit
         SRL   #0,1                Return to correct position
         ST    #0,##VECDAT(,#2)    Store inside new bignum
         LA    #4,4                Size of a bignum word for BXLE
         LR    #14,#4              Set start value for index
         SR    #5,#4               Reduce termination to 1 word less
B1FP2LOO L     #1,##VECDAT-4(#14,#6) Lower of pair from source
         L     #0,##VECDAT(#14,#6) Upper of pair from source
         SLL   #1,1                Squeeze out empty bit and join
         SLDA  #0,0(#7)            Shift by required amount
         ST    #0,##VECDAT(#14,#2) Store into source bignum
         BXLE  #14,#4,B1FP2LOO     More words to shift?
*                                  Now we do last special iteration
         L     #1,##VECDAT-4(#14,#6) Highest word from source
         XR    #0,#0               Clear because it's "beyond end"
         SLDA  #0,1(#7)            Shift by amount and empty bit
         ST    #0,##VECDAT(#14,#2) Store into source bignum
         AR    #14,#3              Calculate total length for output
         XR    #5,#5               Setup zero-pad for whole MVCL
         LA    #2,##VECDAT(,#15)   Start of data area to zero out
         MVCL  #2,#4               Pad sign and zeroes at bottom
         TM    ##VECDAT(#6),X'80'  Test sign of input bignum
         BZ    SIGNDONE            Bignum is positive
         OI    ##VECDAT(#15),X'80' Insert minus sign into result bignum
SIGNDONE LTR   #0,#0               Is highest word 0?
         BZ    HIZ                 Highest word zero, don't lengthen
         LA    #14,4(,#14)         Add length when it's longer
HIZ      STCM  #14,B'0111',1(#15)  Store length into result bignum
         LA    #2,##VECDAT(#14,#15) Update VSS availability pointer
         ST    #2,ZLCVSNXT         Store availability pointer
         B     RET                 Return to caller
*
B1FM2    XR    #2,#2               Clear upper word for divide
         LCR   #3,#3               Take positive of the shift
         D     #2,=F'31'           Divide by bits/word
         SLL   #3,2                Compute number of bytes of shift
         LR    #7,#2               Save bit shift
         XR    #2,#2               Clear for inserting bignum length
         ICM   #2,B'0111',1(#6)    Get length of bignum
         SR    #2,#3               Subtract shift amount from length
         BNP   B1IM2               All was shifted out on right
         L     #15,ZLCBIG          Load address of bignum maker
         AH    #2,=H'8'            Add length of ##VECDAT header+4
         #BASR #14,#15             Call bignum allocator
         L     #6,0(,#11)          Reload arg in case GC changed pointr
         LR    #5,#2               Save result length
         SH    #5,=H'12'           -4 -header -one extra word
         LA    #2,0(#3,#6)         Fake pointer inside old bignum
         BZ    B1FM2F              Answer must be fixnum
         LA    #4,4                Size of a bignum word for BXLE
         LR    #14,#4              Set start value for index
B1FM2LOO L     #1,##VECDAT-4(#14,#2) Lower of pair from source
         L     #0,##VECDAT(#14,#2) Upper of pair from source
         SLL   #1,1                Squeeze out empty bit and join
         SRDL  #0,0(#7)            Shift by required amount
         SRL   #1,1                Open up a zero for leftmost bit
         ST    #1,##VECDAT-4(#14,#15) Store into source bignum
         BXLE  #14,#4,B1FM2LOO     More words to shift?
*                                  Now we do last special iteration
         L     #0,##VECDAT-4(#14,#2) Highest word from source
         SRA   #0,0(#7)            Shift by amount and empty bit
         BZ    B1FM2HZ             High word is zero, make shorter
         ST    #0,##VECDAT-4(#14,#15) Store into source bignum
         TM    ##VECDAT(#6),X'80'  Test sign of source bignum
         BZ    VSRETBP             Return with positive bignum
         B     VSRETBMC            Check bits and return neg big?
*
B1FM2F   L     #0,##VECDAT(,#2)    Get only needed word from source
         TM    ##VECDAT(#6),X'80'  Test sign of source bignum
         BO    BM1FM2F             Bignum is negative
         SRL   #0,0(#7)            Shift by required amount
         LR    #2,#0               Set up for consing
         B     RETFIX
*
BM1FM2F  XR    #1,#1               Clear lower part of double reg
         SRDL  #0,0(#7)            Shift discard bits into reg #1
         LCR   #2,#0               Take negative of result
         BZ    RETM1               Result must be neg 1
         LTR   #1,#1               Any ones shifted out?
         BZ    BM1FM2FC            Got to check lower bits too
         BCTR  #2,0                Add one to magnitude of ASH
         B     RETFIX              Make a fixnum
*
BM1FM2FC LA    #2,##VECDAT(,#6)    Get pointer to source header
         LA    #4,=X'80'           Imitate first byte in neg big data
         LA    #5,1                Compare length 1, 0-pad rest
         CLCL  #2,#4               Find ones in displaced length
         BNE   BM1FM2F1            Must add one to fixnum magnitude
         LCR   #2,#0               Take negative of shifted answer
         B     RETFIX              Make a fixnum
*
BM1FM2F1 LCR   #2,#0               Take negative of shifted word
         BCTR  #2,0                Subtract one
         B     RETFIX              Make a fixnum
*
B1FM2HZ  SH    #14,=H'4'           Answer is one word shorter, #14=len
         CH    #14,=H'4'           Is answer only one word?
         BE    B1FM2HZF            Answer must be a fixnum
BFMRET   TM    ##VECDAT(#6),X'80'  Test sign of source bignum
         BZ    VSRETBP             Return positive bignum
VSRETBMC L     #0,##VECDAT(,#2)    Load rightmost used word in source
         XR    #1,#1               Clear high word above mask
         SRDL  #0,0(#7)            Shift by bit amount
         LTR   #1,#1               Any bits shifted out on right?
         BNZ   VSRETBM1            Return 1 less for neg bignum result
         LTR   #3,#3               Are there whole words to check?
         BZ    VSRETBM0            Nope, don't subtract one from result
         LA    #2,##VECDAT(,#6)    Start of comparison to 0's
         LA    #4,=X'80'           First byte to compare
         LA    #5,1                Clear pad, 1 byte of real compare
         CLCL  #2,#4               Compare to 0
         BE    VSRETBM0            Did not find 1 bit, don't subtract 1
*
VSRETBM1 LR    #5,#14              Restore length
         LA    #4,4                Load increment (size of a word)
         LR    #14,#4              Index start
         XR    #0,#0               Need zero for storing in loop
BMCLOOP  L     #1,##VECDAT-4(#14,#15) Load word to carry to
         AH    #1,=H'1'            Add carry
         BNO   NOCARRY             Word did not overflow?
         ST    #0,##VECDAT-4(#14,#15) Store zero if overflow
         BXLE  #14,#4,BMCLOOP      More words to overflow to?
*
         LA    #1,1                Carry out of high word, add another
         ST    #1,##VECDAT-4(#14,#15) Store the 1 in new high word
         OI    ##VECDAT(#15),X'80' Insert minus sign bit into result
         STCM  #14,B'0111',1(#15)  Store bignum length in header
         LA    #14,##VECDAT(#14,#15) Update availability pointer
         ST    #14,ZLCVSNXT        Store updated VSS pointer
         B     RET                 Return to caller
*
NOCARRY  ST    #1,##VECDAT-4(#14,#15)
         OI    ##VECDAT(#15),X'80' Insert minus sign bit into result
         STCM  #5,B'0111',1(#15)   Store bignum length in header
         LA    #14,##VECDAT(#5,#15) Update availability pointer
         ST    #14,ZLCVSNXT        Store updated VSS pointer
         B     RET                 Return to caller
*
VSRETBM0 CH    #14,=H'8'           Two-word bignum?
         BNE   VSRETBM             No need to check futher for -2¬31
         CLC   ##VECDAT(8,#15),#W0W1 Compare agains possible -2¬31
         BE    MT31                Answer is -2¬31
VSRETBM  OI    ##VECDAT(#15),X'80' Insert minus sign bit into result
VSRETBP  STCM  #14,B'0111',1(#15)  Store bignum length in header
         LA    #14,##VECDAT(#14,#15) Update availability pointer
         ST    #14,ZLCVSNXT        Store updated VSS pointer
         B     RET                 Return to caller
*
MT31     LA    #15,#MT31           Load address of -2¬31
         B     RET
*
B1FM2HZF TM    ##VECDAT(#6),X'80'  Test sign of source bignum
         BO    RETFMC              Check for bits
         CL    #1,ZLCSFTHI         Compare with small fixnum table max
         LR    #2,#1               Proper register for consing fixnum
         BH    RETFIX              Need to cons the fixnum?
         SLA   #1,3                Compute offset in small fixnum table
         LA    #15,#SFT(#1)        Address in small fixnum table
         B     RET                 Return to caller
*
RETFMC   L     #0,##VECDAT(,#2)    Get lowest used word to check lowbit
         XR    #1,#1               Clear second word of pair
         SRDL  #0,0(#7)            Shift out unused bits
         LTR   #1,#1               Test shifted out bits
         BNZ   RETFSUB1            Return 1 less for neg fix result
         LTR   #3,#3               Are there whole words to check?
         BZ    RETFSUB0            Nope, don't subtract one from result
         LA    #2,##VECDAT(,#6)    Get start of area to check for 1-bit
         LA    #4,=X'80'           First byte to compare
         LA    #5,1                Compare 1 byte and 0-pad rest
         CLCL  #2,#4               Search for for 1-bits
         BNE   RETFSUB1            Return 1 less for neg fix result
RETFSUB0 L     #2,##VECDAT-4(#14,#15) Get what should be a fixnum
         LCR   #2,#2               Take negative
         B     RETFIX              Return fixnum
*
RETFSUB1 L     #2,##VECDAT-4(#14,#15) Get what should be a fixnum
         LCR   #2,#2               Take negative
         BCTR  #2,0                Subtract 1 because 1-bits went out
         B     RETFIX              Return fixnum
*
B1NF2    CLI   ##TYPE(#7),##BIGNUM Is arg 2 a bignum?
         BNE   ERROR2              Arg 2 is not an integer
B1B2     TM    ##VECDAT(#7),X'80'  Is arg2 bignum positive?
         BZ    ERROR3              Then result will be too big
B1IM2    TM    ##VECDAT(#6),X'80'  Is arg 1 integer positive?
         LA    #15,#SFT0           Load address of 0 in case we need it
         BZ    RET                 Arg 1 positive, all bits shifted out
RETM1    LA    #15,#SFTM1          Load address of -1, because arg1 neg
         B     RET                 Return to caller
*
         DS    0A                  Align bignum to fullword
#MT62    DC    YL1(##BIGNUM),AL3(12),X'80000000',F'0',F'1'  -2**62
#T31     DC    YL1(##BIGNUM),AL3(8),F'0',F'1' 2**31=bad bignum if neg
#MT31    DC    YL1(##FIXNUM),AL3(0),F'-2147483648'  Most neg fixnum
#W0W1    DC    F'0',F'1'  Upper two words of 2¬31 bignum
*
ERROR1   #ERR  'Argument 1 to ASH not an integer - ',(#6)
ERROR2   #ERR  'Argument 2 to ASH not an integer - ',(#7)
ERROR3   LM    #6,#7,0(#11)
         #ERR  'Maximum integer magnitude exceeded in ASH trying to shiX
               ft ',(#6),' by ',(#7)
         LTORG
         END
