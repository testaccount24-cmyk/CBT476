         TITLE 'ZILKERR - ZIL 1.3 KEYWORD ERROR HANDLING SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
*  THIS MODULE IS INVOKED FROM COMPILED CODE TO HANDLE ERRORS THAT    *
*  ARE DETECTED WHILE PROCESSING & KEY KEYWORD LISTS.                 *
*                                                                     *
*  REGISTERS ARE SET UP AS FOLLOWS ON ENTRY TO THIS ROUTINE:          *
*                                                                     *
*  #0 - ONE OF THE FOLLOWING:                                         *
*       ZERO - IF THIS ROUTINE WAS CALLED TO SIGNAL AN INVALID LIST   *
*              (I.E. ODD NUMBER OF VALUES IN &REST ARG)               *
*       OTHERWISE, THE ADDRESS OF THE :ALLOW-OTHER-KEYS SYMBOL.       *
*  #1 - IRRELEVANT EXCEPT THAT ITS CONTENTS MUST BE PRESERVED!        *
*  #2 - THE ADDRESS OF THE KEYWORD SYMBOL THAT WAS NOT RECOGNIZED     *
*  #3 - THE ADDRESS OF THE &REST ARG PASSED TO THE FUNCTION.          *
*                                                                     *
* REGISTERS #4 THROUGH #7 SHOULD NOT BE ALTERED.  IN THIS WAY THE     *
* COMPILER NEED NOT RELOAD BASE REGISTERS FOLLOWING A GENERATED       *
* CALL TO THIS ROUTINE.                                               *
*                                                                     *
* LOGIC:                                                              *
*                                                                     *
* IF #0 IS ZERO, AN "INVALID KEYWORD LIST PASSED" ERROR IS SIGNALLED. *
* CONTROL NEVER RETURNS.                                              *
*                                                                     *
* IF #0 IS NONZERO, THEN THE &REST LIST IS SEARCHED A LA GETK FOR     *
* THE :ALLOW-OTHER-KEYS KEYWORD.  IF THE VALUE OF THIS KEYWORD IS     *
* FOUND AND IS NON-NIL, THE ERROR IS IGNORED AND CONTROL IS RETURNED  *
* TO THE CALLER TO PROCEED.  OTHERWISE AN ERROR IS SIGNALLED AND      *
* CONTROL NEVER RETURNS.                                              *
*                                                                     *
* NOTE: THE LATTER CASE WILL NEVER INVOKE THIS ROUTINE IF THE         *
* LAMBDA LIST OF THE COMPILED FUNCTION CONTAINED &ALLOW-OTHER-KEYS.   *
* THE COMPILER DOES NOT GENERATE A CALL TO THIS ROUTINE IN THAT CASE. *
*                                                                     *
***********************************************************************
         SPACE 1
ZILKERR  #ZBEG NAME='ZILKERR'
         SPACE 1
         USING ZILKERR,#15
         SPACE 1
         LTR   #0,#0               IF CALLED BECAUSE OF BAD &REST LIST
         BZ    ERROR2              THEN GO SIGNAL THAT KIND OF ERROR
         SPACE 1
*                                  #3 = LIST, #0 = KEYWORD
         SPACE 1
LOOP     DS    0H
         CR    #3,#10              IF END OF KEYWORD LIST (NULL)
         BE    ERROR1              THEN :ALLOW-OTHER-KEYS NOT FOUND
         TM    ##TYPE(#3),##ATOM   IF KEYWORD (SUB)LIST ATOMIC
         BO    ERROR2              THEN ERROR - BAD KEYWORD LIST
         C     #0,##CAR(,#3)       IF (CAR SUBLIST) IS "EQ" TO KEYWORD
         BNE   NEXT                THEN...
         L     #3,##CDR(,#3)        GET CDR OF KEYWORD (SUB)LIST
         TM    ##TYPE(#3),##ATOM   IF KEYWORD (SUB)LIST ATOMIC
         BO    ERROR2              THEN ERROR - BAD KEYWORD LIST
         C     #10,##CAR(,#3)      IF (CAR SUBLIST) IS NIL
         BE    ERROR1              THEN OTHER KEYS NOT ALLOWED
*                                  ELSE OTHER KEYS ARE ALLOWED, SO...
         BR    #14                 RETURN TO CALLER
         SPACE 1
NEXT     DS    0H                  ELSE NOT THE ONE - CONTINUE
         L     #3,##CDR(,#3)        GET CDR OF KEYWORD (SUB)LIST
         TM    ##TYPE(#3),##ATOM   IF KEYWORD (SUB)LIST ATOMIC
         BO    ERROR2              THEN ERROR - BAD KEYWORD LIST
         L     #3,##CDR(,#3)       GET CDR OF KEYWORD (SUB)LIST
         B     LOOP                CONTINUE PROCESSING
         SPACE 1
ERROR1   DS    0H
         XR    #14,#14             Indicate error number 1
         B     ERRORS
ERROR2   DS    0H
         LA    #14,4               Indicate error number 2
******** B     ERRORS
ERRORS   DS    0H
         DROP  #15
         LR    #3,#15
         USING ZILKERR,#3
*
* DUMP THE FUNCTION NAME
*
         XR    #1,#1               Clear insert register
         STCM  #1,7,FUNLEN         Initialize fake string length to 0
         IC    #1,4(,#12)          Get length of module identifier
         SH    #1,=H'16'           Subtract length of date/time info
         BNP   SKIPNAME            If no name, skip move
         CH    #1,=Y(L'FUNTEXT)    If longer than maximum
         BNH   *+8                 then
         LA    #1,L'FUNTEXT         use maximum length
         STCM  #1,7,FUNLEN         Store length into fake string
         BCTR  #1,0                Reduce for execute
         EX    #1,MVCNAME          Move function name to fake string
SKIPNAME DS    0H
         B     THEERROR(#14)
THEERROR B     THEERR1
         B     THEERR2
         SPACE 1
THEERR1  #ERR  'ZIL1304 Undefined keyword ',(#2),' passed to function 'X
               ,FUNSTR,'.',PREFIX=NO
THEERR2  #ERR  'ZIL1305 Invalid keyword list passed to function ',     X
               FUNSTR,'.',PREFIX=NO
*
* Sorry, can't display the bad keyword list at this time.  To do so
* requires adding stuff to the generated compiled code.
*
         SPACE 1
         SPACE 1
MVCNAME  MVC   FUNTEXT(*-*),5(#12) Executed: move function name to str
         SPACE 1
         DS    0H,XL1
FUNSTR   DC    YL1(##STRING)
FUNLEN   DS    AL3
FUNTEXT  DS    CL64
         SPACE 1
         LTORG
         END
