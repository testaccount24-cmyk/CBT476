         TITLE 'ADD1 - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* ADD1 TAKES ONE ARGUMENT - A NUMERIC ATOM                            *
*                                                                     *
***********************************************************************
         SPACE
ADD1     #ZBEG MINARGS=1,MAXARGS=1,NAME='ADD1'
         SPACE
         #ZPDS 16                  DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
         SPACE
         L     #1,0(,#11)          LOAD FIRST (AND ONLY) ARGUMENT
         CLI   ##TYPE(#1),##FIXNUM IS IT A FIXNUM?
         BNE   NOTFIX              IF NOT, GO SOMEWHERE ELSE
         L     #2,##CDR(,#1)       Get value of fixnum
* Note: The following test assumes that the lowest small fixnum is 0.
         CL    #2,ZLCSFTHI         If within small fixnum table range
*                                  (and not equal to the largest small)
         BL    SMALLFIX            then go to increment small fixnum
         A     #2,#SFW1            ELSE ADD 1 TO FIXNUM
         BO    MAKTWO31            OVERFLOW...MUST BE 2**31
         LA    #0,16(,#11)         PASS CURRENT STACK LOCATION TO CONS
         #MKAT FIXED               MAKE A NEW FIXNUM
         B     RETURN
*
SMALLFIX DS    0H
*
***********************************************************************
*                                                                     *
* Fixnum between lowest and highest small fixnum from table           *
* (but not equal to the highest).  We load the address of the         *
* next higher fixnum from the table.                                  *
*                                                                     *
***********************************************************************
*
         SLA   #2,3                Multiply fixval by 8 for an index
         LA    #15,#SFT+8(#2)      Get address of (fixval+1)th fixnum
******** B     RETURN               from table and return with it
         SPACE 1
RETURN   DS    0H                  RETURN WITH NEW ATOM
         SPACE
         #ZRET ,                   RESTORE REGISTERS AND RETURN
*
NOTFIX   CLI   ##TYPE(#1),##BIGNUM IS IT A BIGNUM?
         BNE   NOTFXBG             NOT A BIGNUM NOR A FIXNUM
*---------------------------------------------------------------------*
*     IT'S A BIGNUM - pass control to ZILADD                          *
*---------------------------------------------------------------------*
         SPACE 1
         LA    #2,#SFT1            Get address of fixnum +1
         L     #15,@ZILADD         Get address of ZILADD
         LR    #1,#11              Restore stack pointer
         LM    #11,#12,4(#1)       Restore regs as if returning
         L     #14,12(,#1)         Pass original return address
         ST    #2,4(,#1)           Set arg 2 to ZILADD = fixnum 1
*                                  (arg 1 is the same as arg to ADD1)
         BR    #15                 Go to ZILADD to add +1 to bignum
         SPACE 1
         AGO   .SKIP               SKIP THIS CODE, CALL ZILADD INSTEAD
***********************************************************************
.        ICM   #6,15,##VECDAT(#1)  LOAD LS WORD AND TEST SIGN
.        BM    BIGM                NEGATIVE BIGNUM
.        AH    #6,=H'1'            ADD 1 TO LS WORD OF BIGNUM
.        BO    BIGC1               CARRY FROM FIRST WORD
*---------------------------------------------------------------------*
*     IT'S A POSITIVE BIGNUM WITH NO CARRY OUT OF FIRST WORD          *
*---------------------------------------------------------------------*
.        LA    #0,16(,#11)         PASS CURRENT STACK LOC TO ZILBIG
.        XR    #2,#2               CLEAR FOR 3-BYTE INSERT
.        ICM   #2,7,1(#1)          GET 3-BYTE LENGTH OF BIGNUM
.        L     #15,ZLCBIG
.        #BASR #14,#15
*
.        LA    #3,##VECDAT(,#2)    CALC LEN OF HEADER+BIGNUM
.        L     #4,0(,#11)          ADDRESS OF SOURCE
.        LR    #2,#15              ADDRESS OF DESTINATION
.        LR    #5,#3               LENGTH TO MOVE
.        MVCL  #2,#4               COPY BIGNUM TO DESTINATION
.        ST    #6,##VECDAT(,#15)   STORE UPDATED LS WORD IN NEW BIGN
.        ST    #2,ZLCVSNXT         UPDATE VSS POINTER
.        B     RETURN
*---------------------------------------------------------------------*
*     IT'S A POSITIVE BIGNUM WITH CARRY OUT OF FIRST WORD             *
*---------------------------------------------------------------------*
BIGC1    LA    #0,16(,#11)         PASS CURRENT STACK LOC TO ZILBIG
.        XR    #3,#3               CLEAR FOR 3-BYTE INSERT
.        ICM   #3,7,1(#1)          GET 3-BYTE LENGTH OF BIGNUM
.        LA    #2,4(,#3)           IT MIGHT BE ONE WORD LONGER
.        L     #15,ZLCBIG
.        #BASR #14,#15
*
.        L     #7,0(,#11)          GET ARG 1 AGAIN
.        LA    #0,##VECDAT(,#7)    CLCL PREP - SOURCE
.        LR    #1,#3               BIGNUM LENGTH
.        SH    #1,=H'4'            SUBTRACT LENGTH OF ONE WORD
.        LA    #4,##VECDAT+4(,#7)  COMPARE WITH ONE WORD AHEAD
.        LR    #5,#1               PUT IN BOTH OTHER CLCL LENGTH
.        CLCL  #4,#0               FIND FIRST WORD THAT WON'T CARRY
.        BE    BIGC1FUL            BIGNUM IS FULL - NEEDS NEW WORD
*
.        N     #4,=X'FFFFFFFC'     DROP DOWN TO NEAREST WORD BNDRY
.        LR    #0,#7               MVCL PREP - ARG BIGNUM
.        LA    #1,##VECDAT         MOVE ONLY HEADER, PAD REST WITH 0
.        LR    #6,#4               SAVE POSITION OF WORD TO BE INC
.        LR    #4,#15              DESTINATION - RESULT BIGNUM
.        LR    #5,#6
.        SR    #5,#7               CALCULATE LENGTH FOR MOVE & 0 PAD
.        MVCL  #4,#0               NOW WE ARE UP TO WORD TO BE INC'D
.        LA    #0,1
.        A     #0,0(,#6)           CLCL VERIFIED THIS CAN'T OVERFLOW
.        ST    #0,0(,#4)           MVCL PUT #4 IN RIGHT PLACE
.        LA    #0,4(,#6)           PREP NEXT MVCL SOURCE
.        LA    #4,4(,#4)           BUMP UP THE DESTINATION POINTER
.        LA    #1,##VECDAT(#3,#7)  POINT TO END OF BIGNUM ARGUMENT
.        SR    #1,#0               CALC LENGTH LEFT TO COPY
.        LR    #5,#1               DESTINATION LENGTH TOO
.        MVCL  #4,#0               COPY REST OF BIGNUM
.        ST    #4,ZLCVSNXT         UPDATE VSS POINTER TO END OF RESULT
.        B     RETURN
*
BIGC1FUL STCM  #2,7,1(#15)         STORE RESULT LEN (ONE WORD GREATER)
.        XR    #1,#1        ****   THIS SHOULD ALREADY BE 0 FROM CLCL
.        LA    #2,##VECDAT(,#15)   PREP FOR ZEROING DATA OF RESULT
.        MVCL  #2,#0               FILL LENGTH #3 WITH ZEROES
.        LA    #6,1                GENERATE 1 FOR MS WORD OF RESULT
.        ST    #6,0(,#2)           PUT 1 IN MS WORD
.        LA    #2,4(,#2)           POINT TO END FOR NEXT BIGNUM
.        ST    #2,ZLCVSNXT         UPDATE VSS POINTER
.        B     RETURN
*---------------------------------------------------------------------*
*                     IT'S A NEGATIVE BIGNUM                          *
*---------------------------------------------------------------------*
BIGM     CLC   0(12,#1),MTWO31M1   CHECK FOR -2**31 - 1 BIGNUM
.        BE    MAMTWO31              GENERATE MOST NEGATIVE FIXNUM
.        SH    #6,=H'1'            SUB1 (FOR SIGN AND MAGNITUDE)
.        BO    MBIGC1              MUST CARRY FROM HIGHER WORDS
*---------------------------------------------------------------------*
*     IT'S A NEGATIVE BIGNUM WITH NO CARRY OUT OF FIRST WORD          *
*---------------------------------------------------------------------*
.        LA    #0,16(,#11)         PASS CURRENT STACK LOC TO ZILBIG
.        XR    #2,#2               CLEAR FOR 3-BYTE INSERT
.        ICM   #2,7,1(#1)          GET 3-BYTE LENGTH OF BIGNUM
.        L     #15,ZLCBIG
.        #BASR #14,#15
*
.        LA    #3,##VECDAT(,#2)    CALC LEN OF HEADER+BIGNUM
.        L     #4,0(,#11)          ADDRESS OF SOURCE
.        LR    #2,#15              ADDRESS OF DESTINATION
.        LR    #5,#3               LENGTH TO MOVE
.        MVCL  #2,#4               COPY BIGNUM TO DESTINATION
.        ST    #6,##VECDAT(,#15)   STORE UPDATED LS WORD IN NEW BIGN
.        ST    #2,ZLCVSNXT         UPDATE VSS POINTER
.        B     RETURN
*---------------------------------------------------------------------*
*     IT'S A NEGATIVE BIGNUM WITH A CARRY OUT OF FIRST WORD           *
*---------------------------------------------------------------------*
MBIGC1   LA    #0,16(,#11)         PASS CURRENT STACK LOC TO ZILBIG
.        XR    #2,#2               CLEAR FOR 3-BYTE INSERT
.        ICM   #2,7,1(#1)          GET 3-BYTE LENGTH OF BIGNUM
.        L     #15,ZLCBIG
.        #BASR #14,#15
*
.        L     #3,0(,#11)          GET ARG 1 AGAIN
.        LA    #4,##VECDAT+4(,#3)  CLCL PREP - POINT TO SECOND WORD
.        LR    #5,#2               BIGNUM LENGTH
.        SH    #5,=H'8'            COMPARING FROM 2ND LS TO 2ND MS
.        XR    #1,#1               ZERO CLCL LENGTH AND PAD BYTE
.        CLCL  #4,#0               FIND FIRST NONZERO WORD
.        BE    MBIGCMS             CARRY FROM MS WORD
*
.        N     #4,=X'FFFFFFFC'     DROP DOWN TO NEAREST WORD BNDRY
.        L     #0,0(,#3)           GET HEADER OF ARG
.        L     #1,=X'7FFFFFFF'     7FFFFFFF FOR LS WORD, SIGN LATER
.        STM   #0,#1,0(#15)        STORE HEADER AND LS WORD
.        LA    #6,##VECDAT+4(,#15) MVCL PREP FOR COPYING 7FFFFFFF
.        LA    #0,##VECDAT(,#15)
.        LR    #7,#4
.        SR    #7,#3
.        SH    #7,=H'8'
.        LR    #1,#7
.        MVCL  #6,#0
.        L     #1,0(,#4)           GET WORD THAT CAN CARRY OUT
.        BCTR  #1,0                SUBTRACT ONE FROM WORD
.        ST    #1,0(,#6)           STORE DECREMENTED WORD IN RESULT
.        LA    #6,4(,#6)           BUMP TO NEXT FOR COPYING REST
.        LA    #0,4(,#4)           BUMP TO NEXT IN SOURCE BIGNUM
.        LA    #1,##VECDAT-4(#2,#3) POINT TO LAST WORD
.        SR    #1,#4               CALCULATE # WORDS TO BE COPIED
.        LR    #7,#1               PUT LENGTH IN BOTH MVCL OPERANDS
.        MVCL  #6,#0               COPY UNCHANGED END OF BIGNUM
.        OI    ##VECDAT(#15),X'80' SET NEGATIVE SIGN
.        ST    #6,ZLCVSNXT         UPDATE VSS POINTER TO END OF RESULT
.        B     RETURN
MBIGCMS  L     #5,0(,#4)           LOAD MS WORD WHICH MUST CARRY OUT
.        BCT   #5,MBIGMSP          SUBTRACT CARRY, STILL POSITIVE?
.        L     #5,=X'7FFFFFFF'
.        ST    #5,##VECDAT(,#15)
.        LA    #6,##VECDAT+4(,#15)
.        LR    #7,#2
.        SH    #7,=H'8'
.        LR    #1,#7
.        LA    #0,##VECDAT(,#15)
.        MVCL  #6,#0
.        OI    ##VECDAT(#15),X'80' SET SIGN TO NEGATIVE
.        SH    #2,=H'4'
.        STCM  #2,7,1(#15)         RESULT LEN (ONE WORD SHORTER)
.        ST    #6,ZLCVSNXT
.        B     RETURN
*
MBIGMSP  L     #7,=X'7FFFFFFF'
.        ST    #7,##VECDAT(,#15)
.        LA    #6,##VECDAT+4(,#15)
.        LR    #7,#2
.        SH    #7,=H'8'
.        LR    #1,#7
.        LA    #0,##VECDAT(,#15)
.        MVCL  #6,#0
.        OI    ##VECDAT(#15),X'80' SET SIGN TO NEGATIVE
.        STCM  #2,7,1(#15)         RESULT LEN (ONE WORD SHORTER)
.        ST    #5,0(,#6)           STORE NEW MS WORD
.        LA    #6,4(,#6)           INCREMENT TO NEXT AVAILABLE WRD
.        ST    #6,ZLCVSNXT         STORE NEXT AVAIL WRD POINTER
.        B     RETURN
*
*---------------------------------------------------------------------*
*                IT'S THE MOST NEGATIVE FIXNUM                        *
*---------------------------------------------------------------------*
MAMTWO31 LA    #15,MTWO31          POINT TO -2*31 FIXNUM INLINE
.        B     RETURN
***********************************************************************
.SKIP    ANOP  ,
*---------------------------------------------------------------------*
*              IT'S THE SMALLEST POSITIVE BIGNUM                      *
*---------------------------------------------------------------------*
MAKTWO31 LA    #15,TWO31           POINT TO 2**31 BIGNUM INLINE
         B     RETURN
*---------------------------------------------------------------------*
*  IT'S NOT A FIXNUM NOR A BIGNUM, MUST BE A FLOAT OR AN ERROR        *
*---------------------------------------------------------------------*
NOTFXBG  CLI   ##TYPE(#1),##SFLOAT IF NOT SINGLE-FLOAT
         BNE   NOTSFLO             THEN TRY SOMETHING ELSE
         LE    #F0,##CDR(,#1)      LOAD FLOAT VALUE
         AE    #F0,=E'1'           ADD 1
         STE   #F0,ZLCWORK         PUT RESULT IN ATOM-MAKING REGISTER
         L     #2,ZLCWORK
         LA    #0,16(,#11)         PASS CURRENT STACK LOCATION TO CONS
         #MKAT FLOAT               MAKE A FLONUM
         B     RETURN
         SPACE
NOTSFLO  CLI   ##TYPE(#1),##DFLOAT MUST BE DOUBLE-FLOAT
         BNE   ERROR1              ELSE ERROR
         LD    #F0,8(,#1)          LOAD FLOAT VALUE
         AD    #F0,=D'1'           ADD 1
         LA    #0,16(,#11)         PASS CURRENT STACK LOCATION TO CONS
         L     #15,ZLCMDF          GET ADDRESS OF ZILMDF
         #BASR #14,#15             CALL ZILMDF TO CONS DOUBLE FLOAT
         B     RETURN              Return with double float
         SPACE 1
ERROR1   DS    0H                  NOT A NUMERIC ATOM
         #ERR  2,'Argument to ADD1 not a number - ',0(#11)
         SPACE 1
ZILSUBRS DS    0A
@ZILADD  DC    V(ZILADD)           Address of subroutine
         DC    CL8'ZILADD'
ZILSUBRE EQU   *
         SPACE
         DS    0A                  FORCE ALIGNMENT TO FULLWORD BNDRY
TWO31    DC    YL1(##BIGNUM),AL3(8),F'0,1'  2**31 SMALLEST POS BIGNUM
         SPACE 1
         AGO   .SKIP2              DON'T NEED THESE WHEN SKIPPING
***********************************************************************
         DS    0A                  FORCE ALIGNMENT TO FULLWORD BNDRY
MTWO31M1 DC    YL1(##BIGNUM),AL3(8),X'80000001',F'1'  -2**31 - 1
         SPACE 1                       LEAST-NEGATIVE BIGNUM
         DS    0A                  FORCE ALIGNMENT TO FULLWORD BNDRY
MTWO31   DC    YL1(##FIXNUM),AL3(0),F'-2147483648'  MOST NEG FIXNUM
         SPACE 1
***********************************************************************
.SKIP2   ANOP  ,
         LTORG
         END
