         TITLE 'VERIFY - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* (VERIFY ARG1 ARG2 &OPTIONAL ARG3)...                                *
*                                                                     *
*  ARG1 IS A STRING          - THE STRING TO SEARCH WITHIN            *
*  ARG2 IS A STRING          - THE STRING OF CHARACTERS TO MATCH      *
*  ARG3 IS A FIXNUM OR NIL   - THE STARTING OFFSET FOR THE SEARCH     *
*                                                                     *
* THIS IS, LIKE, REALLY A PL/1 FUNCTION, MAN.  I MEAN, TAKEN          *
* STRAIGHT FROM THE COMPILER OBJECT CODE LISTINGS, RIGHT?             *
*                                                                     *
***********************************************************************
VERIFY   #ZBEG MINARGS=2,MAXARGS=3,NAME='STRING-VERIFY'
         #ZPDS 24                  DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
         SPACE
         LM    #5,#7,0(#11)        LOAD ARGS
         CLI   ##TYPE(#5),##STRING IF ARGUMENT IS A STRING
         BE    ARG1OK              THEN OK
         CLI   ##TYPE(#5),##SYMBOL IF ARGUMENT IS A SYMBOL
         BNE   ERROR1              THEN
         L     #5,##PNAME(,#5)      TAKE THE PRINT NAME, ELSE ERROR
ARG1OK   DS    0H                  CHECK ARG 2
         CLI   ##TYPE(#6),##STRING IF ARGUMENT IS A STRING
         BE    ARG2OK              THEN OK
         CLI   ##TYPE(#6),##SYMBOL IF ARGUMENT IS A SYMBOL
         BNE   ERROR2              THEN
         L     #6,##PNAME(,#6)      TAKE THE PRINT NAME, ELSE ERROR
ARG2OK   DS    0H
         LA    #2,1                DEFAULT STARTING OFFSET IS 1
         CR    #7,#13              IF ARG 3 IS NOT SUPPLIED
         BE    ARGSOK              THEN IT'S OK (OMITTED)
         CR    #7,#10              IF ARG 3 IS NIL
         BE    ARGSOK              THEN IT'S OK
         CLI   ##TYPE(#7),##FIXNUM IF ARG 3 IS NOT A FIXNUM
         BNE   ERROR3              THEN ERROR
         ICM   #2,15,##CDR(#7)     IF ARG3 PROVIDED, USE ITS VALUE
         BNP   ERROR3
ARGSOK   DS    0H                  #2 HAS 1-BASED START
         XR    #3,#3
         XR    #4,#4
         ICM   #3,7,1(#5)          #3 = LENGTH OF STRING ARG 1
         LA    #3,1(,#3)           ADJUST FOR ONE-BASEDNESS AND
         SR    #3,#2               ADJUST FOR OFFSET
         BNP   RETNIL              IF ARG1 IS NULL STRING, RETURN NIL
         ICM   #4,7,1(#6)          #4 = LENGTH OF STRING ARG 2
         BZ    RET1                IF ARG2 IS NULL STRING, RETURN 1
*
* #2 - 1-BASED START OF WHERE TO SCAN ARG1
* #3 - LENGTH OF STRING ARG1 MINUS OFFSET
* #4 - LENGTH OF STRING ARG2
* #5 - THE STRING ARG1
* #6 - THE STRING ARG2
*
         SPACE 1
***********************************************************************
*                                                                     *
* BUILD TRANSLATE TABLE FROM STRING ARG2                              *
*                                                                     *
***********************************************************************
         SPACE 1
         MVI   TRTBL,X'FF'         INITIALIZE TABLE TO STOP AT ALL
         MVC   TRTBL+1(255),TRTBL   CHARACTERS BY SETTING TO FF
         LA    #1,##VECDAT(,#6)    POINT TO TEXT OF STRING ARG2
         XR    #15,#15             CLEAR INSERT REGISTER
         XR    #0,#0               SET VALUE TO STICK INTO TABLE
         LR    #14,#4              GET LENGTH OF STRING ARG2 (NOT 0)
TBLDLOOP DS    0H
         IC    #15,0(,#1)          GET CHARACTER FROM STRING ARG2
         STC   #0,TRTBL(#15)       SET TABLE CHARACTER TO FLAG AS "OK"
         LA    #1,1(,#1)           INCREMENT CHARACTER POINTER
         BCT   #14,TBLDLOOP        CONTINUE UNTIL ARG2 EXHAUSTED
TBLDEND  DS    0H                  NOW THE TABLE IS BUILT
         SPACE 1
***********************************************************************
*                                                                     *
* SCAN THE STRING ARG1 USING THE TABLE                                *
*                                                                     *
***********************************************************************
         SPACE 1
         LA    #14,##VECDAT-1(#2,#5) POINT TO TEXT OF STRING + OFFSET
         LR    #15,#3              GET LENGTH OF STRING ARG1 - OFFSET
         LA    #0,256              SET UP CONSTANT 256
TRTLOOP  DS    0H                  LOOP TO SCAN STRING
         CR    #15,#0
         BNH   SHORTTRT
         TRT   0(256,#14),TRTBL    SCAN FOR CHARACTERS NOT IN ARG2
         BNZ   FOUNDONE            IF WE FOUND ONE, SET RESULT
         AR    #14,#0              ELSE BUMP UP POINTER TO TEXT
         SR    #15,#0              BUMP DOWN LENGTH
         B     TRTLOOP             AND CONTINUE SCANNING.
SHORTTRT DS    0H
         BCTR  #15,0               REDUCE LENGTH FOR EXECUTE
         EX    #15,EXTRT           SCAN FOR CHARACTERS NOT IN ARG2
         BZ    RETNIL              IF NO BAD CHARS, RETURN NIL
FOUNDONE DS    0H                  FOUND A CHAR NOT IN ARG2
         SPACE 1
***********************************************************************
*                                                                     *
* SET BY TRT:                                                         *
*                                                                     *
* #1 CONTAINS THE ADDRESS OF THE "BAD" CHARACTER                      *
* #2 CONTAINS THE BYTE FROM THE TABLE, BUT WE DON'T CARE ABOUT THAT   *
*                                                                     *
***********************************************************************
         SPACE 1
         LA    #2,0(,#1)           GET POINTER TO BAD CHAR FROM TRT
         LA    #0,##VECDAT-1(,#5)  GET ADDRESS OF ARG1 TEXT, ADJUSTED
         SR    #2,#0               TO CONVERT TO 1-BASED INDEX THEREOF
         SPACE 1
GOTIT    DS    0H                  #2 CONTAINS INDEX OF "BAD" CHAR
         LA    #0,24(,#11)         PASS CURRENT STACK POINTER TO CONS
         #MKAT FIXED               MAKE A FIXNUM OUT OF IT
         B     RETURN
RET1     DS    0H                  ALL CHARACTERS ARE "BAD"
         LA    #15,#SFT1           SO RETURN FIXNUM 1
         B     RETURN
RETNIL   DS    0H                  NO "BAD" CHARACTERS IN STRING
         LR    #15,#10             RETURN NIL
RETURN   DS    0H
         SPACE 1
         #ZRET ,                   RESTORE REGISTERS AND RETURN
         SPACE 1
EXTRT    TRT   0(*-*,#14),TRTBL    SCAN FOR CHARACTERS NOT IN ARG2
         SPACE 1
TRTBL    DS    XL256               AREA TO BUILD TRANSLATE TABLE
         SPACE 1
ERROR1   #ERR  'Argument 1 to STRING-VERIFY not a string - ',0(#11)
ERROR2   #ERR  'Argument 2 to STRING-VERIFY not a string - ',4(#11)
ERROR3   #ERR  'Argument 3 to STRING-VERIFY not a positive fixnum - ', X
               8(#11)
         SPACE 1
         LTORG
         END
