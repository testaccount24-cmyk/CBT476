         TITLE 'ZILPRIN - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* THIS SUBROUTINE HANDLES ALL PRINTING REQUESTS.                      *
*                                                                     *
* ON ENTRY THE CALLER MUST SET THE FOLLOWING REGISTERS:               *
*                                                                     *
*   #4 -> THE S-EXPRESSION TO BE PRINTED.                             *
*   #7 = THE FILE POINTER TO BE USED FOR THE PRINTING.                *
*                                                                     *
* THE CALLER MUST ALSO SET THE FOLLOWING BITS IN ZLCPFLGS:            *
*                                                                     *
*     ZLCPSLSH = 1 IF SLASHIFICATION IS REQUESTED, ELSE 0             *
*                                                                     *
***********************************************************************
         SPACE 1
ZILPRIN  #ZBEG NAME='ZILPRIN'
         USING ZILPRIN,#15
         USING ZLFILBLK,#7
         SPACE 1
         OI    ZLCPFLGS,ZLCPRINT   INDICATE ZILPRIN ACTIVE
         SPACE 1
         L     #6,ZLCPSADR         SET INITIAL PRINT STACK POINTER
         ST    #14,0(,#6)          SAVE REGISTER 14 (RETURN ADDRESS)
         ST    #5,4(,#6)           SAVE REGISTER 5 (PARAMETER REGISTER)
         ST    #12,8(,#6)          SAVE REGISTER 12 (BASE REGISTER)
         LA    #6,12(,#6)          BUMP UP STACK POINTER
         LA    #12,ZPCALL          CALL PRINTING ROUTINE
         #BASR #14,#12
         DROP  #15
         SPACE 1
         NI    ZLCPFLGS,255-ZLCPRINT NO MORE ZILPRIN ACTIVE
         SPACE 1
         LA    #14,12
         SR    #6,#14              BUMP DOWN STACK POINTER
         L     #14,0(,#6)          RESTORE REGISTER 14
         L     #5,4(,#6)           RESTORE REGISTER 5
         L     #12,8(,#6)          RESTORE REGISTER 12
         LR    #15,#4              SET RETURN VALUE TO THING PRINTED
         BR    #14                 RELOAD REGISTERS AND RETURN
         SPACE 1
ZP14     DS    A
         EJECT
ZPCALL   DS    0H                  THIS IS WHERE RECURSIVE CALLS GO
         SPACE 1
***********************************************************************
*                                                                     *
* #3 = THE CURRENT CHARACTER OFFSET                                   *
* #4 = THE THING TO BE PRINTED                                        *
* #5 = NOTHING MUCH                                                   *
* #6 = THE CURRENT CHARACTER POINTER                                  *
* #7 = THE FILE POINTER                                               *
*                                                                     *
***********************************************************************
         SPACE 1
         USING ZPCALL,#12
         LA    #0,12(,#6)          MAKE SURE WE HAVE ENOUGH STACK SPACE
         C     #0,ZLCPSEND         IF NOT,
         BNL   STKOVFLO            THEN CANNOT PRINT THIS
         ST    #14,0(,#6)          SAVE RETURN ADDRESS
         SPACE 1
         CR    #4,#13              IF EQUAL TO #13
         BE    ISUOA               THEN IT'S UNSUPPLIED OPTIONAL ARG
         C     #4,ZLCUNBND         IF EQUAL TO THE UNBOUND OBJECT
         BE    ISUNB               THEN IT'S THE UNBOUND OBJECT
         C     #4,ZLCRMNIL         IF EQUAL TO RMNIL
         BE    ISRMN               THEN IT'S RMNIL
         TM    ##TYPE(#4),##ATOM   IF NOT AN ATOM
         BZ    ISALIST             THEN IT MUST BE A LIST
         CLI   ##TYPE(#4),##VECTOR IF IT IS A VECTOR
         BE    ISAVEC              THEN WE HAVE TO PRINT IT AS A VECTOR
         CLI   ##TYPE(#4),##FUNARG IF IT IS A FUNARG
         BE    ISAFUN              THEN WE HAVE TO PRINT IT AS A FUNARG
         CLI   ##TYPE(#4),##STRUCT IF IT IS A STRUCTURE
         BE    ISASTR              THEN WE HAVE TO PRINT IT AS A STRUCT
         TM    ZLCPFLGS,ZLCPSLSH   IF SLASHIFICATION REQUESTED
         BNO   NOSLASH             THEN...
         LR    #1,#8                SET #1 TO GET SLASHIFICATION
         B     AFTSLASH            ELSE...
NOSLASH  LR    #1,#10               SET #1 NOT TO GET SLASHIFICATION
AFTSLASH LR    #2,#4               SET ATOM TO BE DUMPED
         L     #15,ZLCADMP         CALL ZILADMP TO DUMP FORMATTED ATOM
         #BASR #14,#15             INTO OUTPUT AREA
         SPACE 1
***********************************************************************
*                                                                     *
* IF WRITING TO A FILE WITH TABS MODE ON, AND NOT SLASHIFYING,        *
* SCAN THE DATA FOR TABS AND NEWLINES, AND REFORMAT IF NECESSARY.     *
* NOTE: CARRIAGE RETURNS (X'0D') AND NEWLINES (X'15') ARE TREATED     *
*       THE SAME WAY.                                                 *
*                                                                     *
* #0 = THE LENGTH OF THE DATA TO BE PRINTED                           *
* #1 --> THE DATA TO BE PRINTED                                       *
*                                                                     *
***********************************************************************
         SPACE 1
         LR    #4,#1               GET ADDRESS OF INPUT STRING
         LTR   #3,#0               GET ITS LENGTH.  IF NOT POSITIVE,
         BNP   RETURN              THEN RETURN WITHOUT PRINTING.
         TM    ZLCPFLGS,ZLCPSLSH   IF SLASHIFYING,
         BO    PUTASIS             THEN WRITE IT AS IS
         TM    ZLFFLAG2,ZLFTABS    IF NOT EXPANDING TABS/NEWLINES,
         BZ    PUTASIS             THEN WRITE IT AS IS
         LR    #14,#4              GET ADDRESS OF WHERE TO START SCAN
         LR    #15,#3              GET INITIAL LENGTH FOR SCAN
TRTLONG  DS    0H
         CH    #15,=H'256'         IF LENGTH EXCEEDS MAX TRT LENGTH
         BNH   TRTSHORT            THEN...
         XR    #1,#1                PRIME TRT REGISTER
         TRT   0(256,#14),TRTABLE   SCAN FOR TABS OR NEWLINES
         BNZ   REFORMAT             IF WE FOUND ONE, GO REFORMAT
         LA    #14,256(,#14)        ELSE BUMP POINTER TO SCAN
         SH    #15,=H'256'          BUMP DOWN SCAN LENGTH
         BZ    PUTASIS              IF NO MORE TO SCAN, PRINT ASIS
         B     TRTLONG              ELSE CONTINUE SCANNING
TRTSHORT DS    0H                  SCAN 256 CHARACTERS OR LESS
         BCTR  #15,0               REDUCE SCAN LENGTH FOR EXECUTE
         EX    #15,TRT1            SCAN FOR TABS OR NEWLINES
         BZ    PUTASIS             IF NONE FOUND, PRINT IT ASIS. ELSE
REFORMAT DS    0H                  WE HAVE TO DEAL WITH TABS/NEWLINES
*                                  #3 = LENGTH OF DATA
*                                  #4 --> DATA
*                                  #1 --> FIRST TAB OR NEWLINE CHAR
         LA    #0,0(#3,#4)         GET POINTER TO END OF DATA
         ST    #0,INPUTEND         SAVE IT
         LR    #5,#4               POINT TO INPUT TEXT
*                                  COMPUTE TAB OFFSET BASED ON CHARPOS
         L     #0,ZLFCHAR          GET CURRENT CHARACTER POSITION
         BCTR  #0,0                CONVERT FROM COLUMN TO OFFSET
         N     #0,=X'00000007'     CONVERT TO MODULO 8
         ST    #0,TABOFF           STORE AS COMPUTED OFFSET FOR TABBING
*
* GET A TAB EXPANSION WORKAREA.  MAX NEEDED = CONTENTS(#3) * 8.
*
         LA    #1,16(,#3)          LENGTH OF DATA PLUS FUDGE FACTOR
         SLA   #1,3                MULTIPLY BY (TABSIZE) 8
         C     #1,ZLCTWALN         IF EXCEEDS CURRENT WORKAREA LENGTH
         BNH   LENOK               THEN...
         LA    #2,7(,#1)            SAVE LENGTH TO BE NEEDED,
         N     #2,=X'FFFFFFF8'      ROUNDING IT UP TO DOUBLEWORD
         ICM   #0,15,ZLCTWALN       GET LENGTH OF CURRENT WORKAREA
         BZ    NOFRETWA             IF ZERO, THERE IS NONE RIGHT NOW
         L     #1,ZLCTWA            GET ADDRESS OF CURRENT WORKAREA
         FREEMAIN R,LV=(0),A=(1)    FREE IT
NOFRETWA DS    0H
         LR    #0,#2                GET LENGTH FOR GETMAIN
         #GETMAIN RC,LV=(0),LOC=BELOW GET STORAGE FOR TAB WORKAREA
         LTR   #15,#15             IF GETMAIN FAILED,
         BNZ   NOTENUF             THEN ERROR - NOT ENOUGH STORAGE
         ST    #1,ZLCTWA           SAVE NEW WORKAREA ADDRESS
         ST    #2,ZLCTWALN         SAVE LENGTH OF NEW WORKAREA
LENOK    DS    0H                  OK, NOW WE HAVE A WORKAREA
MORE     DS    0H
         C     #5,INPUTEND         WHEN REACHED END OF DATA
         BNL   RETURN              RETURN
         L     #14,ZLCTWA          GET ADDRESS OF START OF WORKAREA
SCANLOOP DS    0H
         L     #1,INPUTEND         PRIME TRT TERMINATOR
         LR    #15,#1              COMPUTE LENGTH OF DATA TO BE SCANNED
         SR    #15,#5              IF NO MORE DATA TO SCAN,
         BNP   FINISHED             THEN PROCESS WHAT WE HAVE
SCAN256  DS    0H
         CH    #15,=H'256'         IF LENGTH EXCEEDS MAX TRT LENGTH
         BNH   STRTSHRT            THEN...
         XR    #2,#2                CLEAR TRT REGISTER
         TRT   0(256,#5),TRTABLE    SCAN FOR NEXT TAB OR NEWLINE
         BNZ   SAFTTRT              IF WE FOUND ONE, GO PROCESS IT
         MVC   0(256,#14),0(#5)     ELSE MOVE REAL DATA TO WORK AREA
         LA    #14,256(,#14)        BUMP OUTPUT POINTER BY LENGTH
         LA    #5,256(,#5)          BUMP INPUT POINTER TO SCAN
         SH    #15,=H'256'          BUMP DOWN SCAN LENGTH
         BZ    FINISHED             IF NO MORE TO SCAN, FINISHED
         B     SCAN256              ELSE CONTINUE SCANNING
STRTSHRT DS    0H                  SCAN 256 CHARACTERS OR LESS
         BCTR  #15,0               ELSE REDUCE FOR EXECUTE
         XR    #2,#2               CLEAR TRT REGISTER
         EX    #15,TRT2            SCAN FOR NEXT TAB OR NEWLINE
SAFTTRT  DS    0H
*
* BEFORE PROCESSING FUNNY CHARACTER, MOVE NORMAL DATA TO TAB WORKAREA
*
* #1 POINTS TO END-OF-DATA OR FUNNY CHARACTER WHERE WE STOP
* #5 POINTS TO "NORMAL" INPUT DATA TO BE MOVED TO WORKAREA
* #6 POINTS TO CURRENT LOCATION IN WORKAREA TO MOVE TO
*
         LR    #15,#1
         SR    #15,#5              GET LENGTH OF DATA TO MOVE
         BNP   NOMOVE              SKIP IF ZERO
         BCTR  #15,0               REDUCE FOR EXECUTE
         EX    #15,MVCDATA         MOVE DATA FROM INPUT TO WORKAREA
         LA    #14,1(#15,#14)      BUMP OUTPUT POINTER BY LENGTH
NOMOVE   LA    #5,1(,#1)           BUMP INPUT POINTER PAST FUNNY CHAR
         B     CONTINUE(#2)        NOW BRANCH DEPENDING ON FUNNY CHAR
CONTINUE B     FINISHED            END OF STRING - FINISH UP
         B     HT                  FOUND TAB CHARACTER
         B     NL                  FOUND NEWLINE CHARACTER
         B     LB                  FOUND LEFT BRACKET
         B     RB                  FOUND RIGHT BRACKET
         SPACE 1
HT       DS    0H                  PROCESS TAB
         LA    #1,8(,#14)          SET UP ADDRESS TO TAB TO
         N     #1,=X'FFFFFFF8'     ALIGN TO NEXT HIGHER DOUBLEWORD
         S     #1,TABOFF           ADJUST FOR CHARACTER POSITION
         CR    #14,#1              IF THIS IS STILL NOT CORRECT
         BL    MTABLOOP            THEN
         LA    #1,8(,#1)            BUMP IT UP 8 MORE BYTES
MTABLOOP CR    #14,#1              LOOP TO MOVE DATA UNTIL TAB LOCATION
         BNL   SCANLOOP             IS HIT
         MVI   0(#14),X'40'        MOVE BLANK TO WORKAREA
         LA    #14,1(,#14)         BUMP OUTPUT WORKAREA POINTER
         B     MTABLOOP
         SPACE 1
NL       DS    0H                  PROCESS NEWLINE
         LR    #15,#14             COMPUTE LENGTH OF EXPANDED TEXT
         L     #14,ZLCTWA          USING ADDRESS OF EXPANDED TEXT
         SR    #15,#14             (= CURRENT POINTER - START POINTER)
         BNP   NONLPR              IF NOT POSITIVE, NOTHING TO PRINT
         C     #15,ZLCTWALN        IF LONGER THAN WORK AREA LENGTH
         BH    DISASTER            THEN WE REALLY BLEW IT
         #BAS  #2,PRINTIT          PRINT THIS PART OF THE TEXT
NONLPR   DS    0H                  THEN FORCE A TERPRI FOR THE NEWLINE
         L     #15,ZLCTERP         GET ADDRESS OF ZILTERP
         BALR  #14,#15             CALL ZILTERP TO FORCE PRINT OUTPUT
         XC    TABOFF,TABOFF       RESET TAB OFFSET TO ZERO
         B     MORE                CONTINUE PROCESSING
         SPACE 1
LB       DS    0H                  PROCESS LEFT SQUARE BRACKET
         MVC   0(1,#14),ZLCLB      REPLACE WITH COMMON AREA BRACKET
         LA    #14,1(,#14)         BUMP OUTPUT POINTER
         B     SCANLOOP            CONTINUE PROCESSING
         SPACE 1
RB       DS    0H                  PROCESS RIGHT SQUARE BRACKET
         MVC   0(1,#14),ZLCRB      REPLACE WITH COMMON AREA BRACKET
         LA    #14,1(,#14)         BUMP OUTPUT POINTER
         B     SCANLOOP            CONTINUE PROCESSING
         SPACE 1
FINISHED DS    0H
         LR    #15,#14             COMPUTE LENGTH OF EXPANDED TEXT
         L     #14,ZLCTWA          USING ADDRESS OF EXPANDED TEXT
         SR    #15,#14             (= CURRENT POINTER - START POINTER)
         BNP   MORE                IF NONE LEFT, CONTINUE
         #BAS  #2,PRINTIT          PRINT WHAT'S LEFT
         B     MORE                CONTINUE PROCESSING
         SPACE 1
NOTENUF  DS    0H                  NO STORAGE FOR WORKAREA
         #TPUT *,NEMSG,L'NEMSG     TELL THE USER
         B     PUTASIS             GO TO PRINT WITHOUT REFORMATTING
         SPACE 1
DISASTER DS    0H                  WE WENT PAST END OF WORKAREA
         #TPUT *,DEMSG,L'DEMSG     TELL THE USER
******** B     PUTASIS             GO TO PRINT WITHOUT REFORMATTING
         SPACE 1
PUTASIS  DS    0H                  PRINT WITHOUT REFORMATTING
         LR    #14,#4              GET ADDRESS OF DATA
         LR    #15,#3              GET LENGTH OF DATA
         B     TRYPRINT            GO TO PRINT IT
         SPACE 1
TRT1     TRT   0(*-*,#14),TRTABLE  SCAN FOR ANY TABS OR NEWLINES
TRT2     TRT   0(*-*,#5),TRTABLE   SCAN FOR NEXT TAB OR NEWLINE
MVCDATA  MVC   0(*-*,#14),0(#5)    MOVE FROM DATA TO WORK AREA
         EJECT
ISALIST  DS    0H                  THING TO BE PRINTED IS A LIST
         SPACE
         LA    #14,=C'('
         LA    #15,1
         #BAS  #2,PRINTIT          PRINT A LEFT PARENTHESIS
PRINTCAR DS    0H
         ST    #4,4(,#6)           SAVE REGISTER ON STACK
         L     #4,##CAR(,#4)       GET (CAR LIST)
         LA    #6,8(,#6)           BUMP STACK POINTER UP
         #BASR #14,#12             CALL ZILPRIN RECURSIVELY
         SH    #6,=H'8'            BUMP STACK POINTER DOWN
         L     #4,4(,#6)           RESTORE OUR REGISTER
         L     #14,##CDR(,#4)      LOOK AT (CDR LIST)
         CR    #14,#10             IF CDR IS NIL
         BE    LISTEND             THEN END OF LIST
         CR    #14,#13             IF EQUAL TO #13
         BE    DOTP                OR
         C     #14,ZLCUNBND        IF EQUAL TO THE UNBOUND OBJECT
         BE    DOTP                OR
         C     #14,ZLCRMNIL        IF EQUAL TO RMNIL
         BE    DOTP                OR
         TM    ##TYPE(#14),##ATOM  IF THE CDR IS AN ATOM
         BZ    NOTDOTP             THEN THIS IS A DOTTED PAIR
DOTP     LA    #14,=C' . '         SO PRINT SPACES AND A PERIOD
         LA    #15,3
         #BAS  #2,PRINTIT
         L     #4,##CDR(,#4)       GET (CDR LIST)
         LA    #6,4(,#6)           BUMP STACK POINTER UP
         #BASR #14,#12             CALL ZILPRIN RECURSIVELY
         SH    #6,=H'4'            BUMP STACK POINTER DOWN
         B     LISTEND             THEN GO TO PRINT END OF LIST
NOTDOTP  DS    0H                  LIST NOT A DOTTED PAIR
         LA    #14,=C' '           PRINT SPACE
         LA    #15,1
         #BAS  #2,PRINTIT
         L     #4,##CDR(,#4)       GET (CDR LIST)
         B     PRINTCAR            THEN CONTINUE PRINTING LIST
LISTEND  DS    0H
         LA    #14,=C')'           PRINT A RIGHT PARENTHESIS
         LA    #15,1               AND THEN RETURN
         B     TRYPRINT
         EJECT
ISASTR   DS    0H                  THING TO BE PRINTED IS A STRUCTURE
         SPACE
         LA    #14,=C'#<STRUCT '
         LA    #15,9
         #BAS  #2,PRINTIT          PRINT THE BEGINNING OF A STRUCTURE
         XR    #5,#5               CLEAR INSERT REGISTER
         ICM   #5,7,1(#4)          GET LENGTH OF STRUCTURE
         LA    #5,##VECDAT-4(#5,#4) POINT TO LAST STRUCTURE ELEMENT
         LA    #4,##VECDAT(,#4)    POINT TO FIRST STRUCTURE ELEMENT
PRINTELS DS    0H
         STM   #4,#5,4(#6)         SAVE REGISTERS ON STACK
         L     #4,0(,#4)           GET ELEMENT OF STRUCTURE
         LA    #6,12(,#6)          BUMP STACK POINTER UP
         #BASR #14,#12             CALL ZILPRIN RECURSIVELY
         SH    #6,=H'12'           BUMP STACK POINTER DOWN
         LM    #4,#5,4(#6)         RESTORE OUR REGISTERS
         CR    #4,#5               IF THIS IS THE LAST STRUCT ELEMENT
         BNL   STRUCEND            THEN FINISH PRINTING
         LA    #14,=C' '           ELSE PRINT SPACE
         LA    #15,1
         #BAS  #2,PRINTIT
         LA    #4,4(,#4)           BUMP TO NEXT STRUCTURE ELEMENT
         B     PRINTELS            THEN CONTINUE PRINTING STRUCTURE
STRUCEND DS    0H
         LA    #14,=C'>'           PRINT END-OF-STRUCTURE
         LA    #15,1               AND THEN RETURN
         B     TRYPRINT
         EJECT
ISAVEC   DS    0H                  THING TO BE PRINTED IS A VECTOR
         SPACE
         LA    #14,=C'#('
         LA    #15,2
         #BAS  #2,PRINTIT          PRINT A LEFT VECTOR-PARENTHESIS
         XR    #5,#5               CLEAR INSERT REGISTER
         ICM   #5,7,1(#4)          GET LENGTH OF VECTOR TEXT
         BZ    VECEND              IF NULL VECTOR, SKIP ELEMENT PRINT
         LA    #5,##VECDAT-4(#5,#4) POINT TO LAST VECTOR ELEMENT
         LA    #4,##VECDAT(,#4)    POINT TO FIRST VECTOR ELEMENT
PRINTEL  DS    0H
         STM   #4,#5,4(#6)         SAVE REGISTERS ON STACK
         L     #4,0(,#4)           GET ELEMENT OF VECTOR
         LA    #6,12(,#6)          BUMP STACK POINTER UP
         #BASR #14,#12             CALL ZILPRIN RECURSIVELY
         SH    #6,=H'12'           BUMP STACK POINTER DOWN
         LM    #4,#5,4(#6)         RESTORE OUR REGISTERS
         CR    #4,#5               IF THIS IS THE LAST VECTOR ELEMENT
         BNL   VECEND              THEN FINISH PRINTING
         LA    #14,=C' '           ELSE PRINT SPACE
         LA    #15,1
         #BAS  #2,PRINTIT
         LA    #4,4(,#4)           BUMP TO NEXT VECTOR ELEMENT
         B     PRINTEL             THEN CONTINUE PRINTING VECTOR
VECEND   DS    0H
         LA    #14,=C')'           PRINT A RIGHT PARENTHESIS
         LA    #15,1               AND THEN RETURN
         B     TRYPRINT
         EJECT
ISAFUN   DS    0H                  THING TO BE PRINTED IS A FUNARG
         LA    #14,=C'#<FUNARG '
         LA    #15,9
         #BAS  #2,PRINTIT          PRINT THE BEGINNING OF A FUNARG
         L     #4,##VECDAT+0(,#4)  GET FUNCTION COMPONENT OF FUNARG
         LA    #6,4(,#6)           BUMP STACK POINTER UP
         #BASR #14,#12             CALL ZILPRIN RECURSIVELY
         SH    #6,=H'4'            BUMP STACK POINTER DOWN
         LA    #14,=C'>'           PRINT THE ENDING OF IT AND RETURN
         LA    #15,1
         B     TRYPRINT
         EJECT
ISUOA    DS    0H                  THING TO BE PRINTED IS AN
*                                  UNSUPPLIED OPTIONAL ARGUMENT (#13)
         LA    #14,$UOA
         LA    #15,L'$UOA
         B     TRYPRINT            PRINT UNSUPPLIED OPTIONAL ARGUMENT
         EJECT
ISUNB    DS    0H                  THING TO BE PRINTED IS THE
*                                  UNBOUND OBJECT
         LA    #14,$UNB
         LA    #15,L'$UNB
         B     TRYPRINT            PRINT IT
         EJECT
ISRMN    DS    0H                  THING TO BE PRINTED IS THE
*                                  "NOTHING" READER MACRO OBJECT
         LA    #14,$RMN
         LA    #15,L'$RMN
         B     TRYPRINT            PRINT IT
         EJECT
STKOVFLO DS    0H                  NO ROOM ON STACK TO PRINT THING
         SPACE 1
         ST    #14,OF14            SAVE RETURN ADDRESS
         LA    #14,OFTHING
         LA    #15,L'OFTHING
         #BAS  #2,PRINTIT          PRINT WHAT WE GOT
         L     #14,OF14
         BR    #14                 RETURN
         SPACE 1
OF14     DS    A
OFTHING  DC    C'...#<PRINT STACK OVERFLOW>...'
$UOA     DC    C'#<UNSUPPLIED OPTIONAL ARGUMENT>'
$UNB     DC    C'#<UNBOUND>'
$RMN     DC    C'#<RMNIL>'
         EJECT
TRYPRINT DS    0H
         #BAS  #2,PRINTIT          PRINT WHAT WE GOT
         SPACE 1
RETURN   L     #14,0(,#6)          RELOAD RETURN ADDRESS
         BR    #14                 RETURN
         EJECT
PRINTIT  DS    0H
*
* #14 --> DATA TO BE PRINTED
* #15 = LENGTH OF DATA TO BE PRINTED
*
         LTR   #15,#15             IF LENGTH TO BE PRINTED IS ZERO
         BZR   #2                  THEN PRINT NOTHING
         SPACE 1
         ST    #2,SAVERET
         L     #2,ZLFCHAR          GET CURRENT CHARACTER POSITION
         BCTR  #2,0                CONVERT FROM COLUMN TO OFFSET
         LR    #0,#2               SAVE FOR CHARPOS TEST
         A     #2,ZLFCARD          ADD RECORD AREA LOCATION
         AR    #2,#15              ADD LENGTH OF DATA
         C     #2,ZLFEND           IF THIS EXTENDS PAST END OF CARD
         BNH   OK                   AND
         TM    ZLFFLAG1,ZLFNEWLN     THERE IS ALREADY DATA ON THE LINE
         BO    PT                     OR
         LTR   #0,#0                   CHARACTER POSITION PAST START
         BNP   OK                       THEN...
PT       DS    0H
         SPACE 1
* IF WE ARE CURRENTLY PRINTING A STACK TRACE, WE PRINT ONLY ONE LINE
* OF OUTPUT TO PREVENT INFINITE LOOPING.
         SPACE 1
         TM    ZLCERFLG,ZLCERTRC   IF STACK TRACING IS ACTIVE
         BZ    PRTNEWLN            THEN...
         NI    ZLCPFLGS,255-ZLCPRINT NO MORE ZILPRIN ACTIVE
         L     #6,ZLCPSADR          SET INITIAL PRINT STACK POINTER
         L     #14,0(,#6)           RESTORE REGISTER 14
         L     #5,4(,#6)            RESTORE REGISTER 5
         L     #12,8(,#6)           RESTORE REGISTER 12
         BR    #14                  RELOAD REGISTERS AND RETURN
         SPACE 1
PRTNEWLN DS    0H
         STM   #14,#15,P1SAVE       SAVE VOLATILE REGS
         L     #15,ZLCTERP          GET ADDRESS OF ZILTERP
         #BASR #14,#15              CALL ZILTERP TO FORCE PRINT OUTPUT
         LM    #14,#15,P1SAVE       RESTORE VOLATILE REGS
         SPACE 1
OK       DS    0H
         OI    ZLFFLAG1,ZLFNEWLN   SET NEW LINE INDICATION ON
         L     #3,ZLFCHAR          GET CURRENT CHARACTER POSITION
         LR    #2,#3               GET CURRENT CHARACTER POSITION
         BCTR  #2,0                CONVERT FROM COLUMN TO OFFSET
         A     #2,ZLFCARD          ADD RECORD AREA LOCATION
         CH    #15,ZLFLRECL        IF LENGTH EXCEEDS PRINT LENGTH
         BNH   OKLRECL             THEN
         LH    #1,ZLFLRECL         PRINT FOR THAT LENGTH ONLY
         BCTR  #1,0                Reduce for continuation character
         CH    #1,=H'256'          If length exceeds 256
         BNH   OKNOMVCL            then...
         STM   #2,#5,MVCLSAVE       Save registers
******** LR    #2,#2                Destination address = output ptr
         LR    #3,#1                Length to move
         LR    #4,#14               Source address = input pointer
         LR    #5,#3                Length to move
         MVCL  #2,#4                Move data to output record area
         LM    #2,#5,MVCLSAVE       Restore registers
         B     OKAFMVCL            Else...
OKNOMVCL DS    0H                   Length 256 or less
         BCTR  #1,0                 REDUCE FOR EXECUTE
         EX    #1,MVDATA            MOVE DATA TO OUTPUT RECORD AREA
         LA    #1,1(,#1)            Restore after execute
OKAFMVCL DS    0H                  Move done
         SR    #15,#1              SUBTRACT PRINT LENGTH FROM TOTAL
         AR    #14,#1              BUMP DATA POINTER ACCORDINGLY
         AR    #2,#1               BUMP DATA POINTER ACCORDINGLY
         MVI   0(#2),C'¢'          Move in continuation character
         LA    #1,2(,#1)           Restore to ZLFLRECL+1
         ST    #1,ZLFCHAR          RESET CHARACTER POINTER
         B     PRTNEWLN            GO TO TERPRI AND PRINT REST OF IT
OKLRECL  DS    0H                  ELSE ATOM WILL FIT ON ONE RECORD
         CH    #15,=H'256'         If length exceeds 256
         BNH   OKLNMVCL            then...
         STM   #2,#5,MVCLSAVE       Save registers
******** LR    #2,#2                Destination address = output ptr
         LR    #3,#15               Length to move
         LR    #4,#14               Source address = input pointer
         LR    #5,#3                Length to move
         MVCL  #2,#4                Move data to output record area
         LM    #2,#5,MVCLSAVE       Restore registers
         B     OKLAMVCL            Else...
OKLNMVCL DS    0H                   Length 256 or less
         LR    #1,#15              GET LENGTH
         BCTR  #1,0                REDUCE FOR EXECUTE
         EX    #1,MVDATA           MOVE DATA TO OUTPUT RECORD AREA
OKLAMVCL DS    0H                  Move done
         AR    #3,#15
         ST    #3,ZLFCHAR          UPDATE CURRENT CHAR POSITION
         L     #2,SAVERET
         BR    #2
MVDATA   MVC   0(0,#2),0(#14)      MOVE DATA TO OUTPUT
         SPACE
P1SAVE   DS    2A                  SAVE AREA
SAVERET  DS    1A                  SAVE AREA
MVCLSAVE DS    4A                  Save area
INPUTEND DS    A                   POINTER TO END OF DATA
TABOFF   DS    F                   COMPUTED TAB OFFSET
         SPACE 1
TRTABLE  DC    256X'00'            TABLE TO SCAN FOR TABS & NEWLINES
         ORG   TRTABLE+X'05'       HT
         DC    YL1(4)
         ORG   TRTABLE+X'0D'       CR
         DC    YL1(8)
         ORG   TRTABLE+X'15'       NL
         DC    YL1(8)
         ORG   TRTABLE+X'AD'       LEFT SQUARE BRACKET
         DC    YL1(12)
         ORG   TRTABLE+X'BD'       RIGHT SQUARE BRACKET
         DC    YL1(16)
         ORG   ,
         SPACE
NEMSG    DC    C'ZIL2049 NOT ENOUGH MEMORY TO EXPAND TABS OR NEWLINES.'
DEMSG    DC    C'ZILXXXX ZILPRIN WENT PAST END OF WORKAREA, POSSIBLE LOX
               SS OF DATA INTEGRITY OR OTHER SEVERE ERROR WILL RESULT.'
         SPACE 1
         LTORG
         END
