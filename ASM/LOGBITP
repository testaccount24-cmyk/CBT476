         TITLE 'LOGBITP - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* LOGBITP takes two integer arguments.                                *
*                                                                     *
* Common Lisp complete.                                               *
*                                                                     *
***********************************************************************
LOGBITP  #ZBEG MINARGS=2,MAXARGS=2,NAME='LOGBITP'
         SPACE 1
         LM    #6,#7,0(#1)         Load arguments
         CLI   ##TYPE(#6),##FIXNUM Is first arg a fixnum?
         BNE   NFIX1               Branch if not fixed
         CLI   ##TYPE(#7),##FIXNUM Is second argument a fixnum?
         BNE   NOTFIX2             Branch if not fixed
         ICM   #2,B'1111',##CDR(#6) Get value 1 (index)
         BM    ERROR2              If negative, error
         CH    #2,#SFT+31*8+6      If greater than 31,
         BH    MORE32              then check if arg 2 is neg
         LA    #3,1                Set up word with one 1-bit
         SLL   #3,0(#2)            Shift bit into testing position
         LR    #15,#10             Load FALSE for return value
         N     #3,##CDR(,#7)       Do logical AND with value 2
         BZR   #14                 If requested bit is zero, false
         LR    #15,#8              Load TRUE for return value
         BR    #14                 If requested bit is one, true
*
MORE32   TM    ##CDR(#7),X'80'     Sign test works for all integers
         LR    #15,#10             Get FALSE for possible return
         BZR   #14                 Return if FALSE
         LR    #15,#8              Get TRUE for return
         BR    #14                 Return to caller with TRUE
*---------------------------------------------------------------------*
* Arg 1 is FIXNUM.  Arg 2 is not a FIXNUM.                            *
*---------------------------------------------------------------------*
NOTFIX2  CLI   ##TYPE(#7),##BIGNUM Is second argument a bignum?
         BNE   ERROR3              Argument 2 is not an integer
         ICM   #5,B'1111',##CDR(#6) Load arg1 and test sign
         BM    ERROR2              Arg 1 should never be negative
         XR    #4,#4               Clear high word for divide
         D     #4,=F'31'           Divide arg 1 index by 31 (bits/word)
         SLA   #5,2                Words x 4 = bytes
         BZ    WORD1               Index pointing in lowest word?
         XR    #3,#3               Clear for loading bignum length
         ICM   #3,B'0111',1(#7)    Load 24-bit bignum length
         CR    #5,#3               Is index pointing beyond bignum?
         BNL   MORE32              If so, return sign as NIL/+ or T/-
         LA    #3,1                Load test bit
         SLL   #3,0(#4)            Slide test bit to position in word
         TM    ##VECDAT(#7),X'80'  Test the sign of the bignum
         BO    BIG2M               Branch if bignum is negative
         N     #3,##VECDAT(#5,#7)  AND test bit with bignum word
         LR    #15,#8              Prepare to return with TRUE
         BNZR  #14                 Return with TRUE if bit is 1
         LR    #15,#10             Load FALSE for return value
         BR    #14                 Return with FALSE, bit was 0
*
BIG2M    LR    #2,#3               Copy word with test bit in it
         BCTR  #2,0                Make mask of 1's below test bit
         N     #2,##VECDAT(#5,#7)  Are there 1's below test bit?
         BZ    CHKBITS             No?  Then we must check lesser word
         N     #3,##VECDAT(#5,#7)  OK, then we can test the bit
         LR    #15,#10             Prepare to return FALSE if needed
         BNZR  #14                 Bit was one, return complement (NIL)
         LR    #15,#8              Load TRUE for return value
         BR    #14                 Return to caller with TRUE
*
CHKBITS  LA    #2,##VECDAT(#5,#7)  Save pointer to word with test bit
         LA    #4,##VECDAT(,#7)    Get address of bignum LS word + byte
         LA    #6,=X'80'           One-byte compare for CLCL
         LA    #7,1                Compare length for CLCL
         CLCL  #4,#6               Compare with zero pad byte
         BE    LOWBITSZ            All the low bits are zero
NZHBYTE  N     #3,0(,#2)           Use test bit as mask
         LR    #15,#10             Prepare to return FALSE
         BNZR  #14                 If test bit 1, return FALSE
         LR    #15,#8              Test bit is 0, load TRUE
         BR    #14                 Return with TRUE
*
LOWBITSZ N     #3,0(,#2)           All low bits are 0, test bit
         LR    #15,#10             Get set to return FALSE, if needed
         BZR   #14                 Not complementing, bit=0,==> FALSE
         LR    #15,#8              Load up TRUE for return
         BR    #14                 Bit was 1, return TRUE
*
WORD1    L     #2,##VECDAT(,#7)    Get LS word of bignum
         LA    #3,1                Load test bit
         LPR   #2,#2               Complement if negative
         SLL   #3,0(#4)            Slide the test bit to index position
         NR    #3,#2               Test the bit in index position
         LR    #15,#10             Get set to return FALSE, if needed
         BZR   #14                 Return FALSE, if bit is zero
         LR    #15,#8              Load TRUE
         BR    #14                 Bit was 1, return with TRUE
*
NFIX1    CLI   ##TYPE(#6),##BIGNUM Is first arg a bignum?
         BNE   ERROR1              Arg 1 is not an integer
         TM    ##TYPE(#7),##INT    Is second argument an integer?
         BNO   ERROR3              Arg 2 is not an integer
B1NF2    TM    ##CDR(#6),X'80'     Test sign of arg 1
         BO    ERROR2              Arg 1 is negative
         TM    ##VECDAT(#7),X'80'  Only the sign of bignum matters
         LR    #15,#10             Prepare to return with FALSE
         BZR   #14                 If bignum positive, return FALSE
         LR    #15,#8              Bignum is negative, load TRUE
         BR    #14                 Return with TRUE
*
         DROP  #15
         USING LOGBITP,#3
         SPACE 1
ERROR1   LR    #3,#15
         #ERR  'Argument 1 to LOGBITP not an integer - ',(#6)
ERROR2   LR    #3,#15
         #ERR  'Argument 1 to LOGBITP is negative - ',(#6)
ERROR3   LR    #3,#15
         #ERR  'Argument 2 to LOGBITP not an integer - ',(#7)
         SPACE 1
         LTORG
         END
