         TITLE 'ZILERR - ZIL 1.3 ERROR PROCESSOR'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* THIS ROUTINE IS INVOKED FROM ASSEMBLER LANGUAGE SUBROUTINES THAT    *
* DETECT AN ERROR.  IT DISPLAYS AN ERROR MESSAGE AND THEN ISSUES A    *
* THROW TO THE TAG NIL, WHICH IS CAUGHT BY THE INTERPRETER; IF NO NIL *
* TAG EXISTS THEN THROW WILL ABEND THE PROGRAM WITH A USER CODE       *
* SPECIFIED BY THE MESSAGE PREFIX, IF THE MESSAGE BEGINS WITH THE     *
* CHARACTERS ZIL FOLLOWED BY 4 NUMERICS.                              *
*                                                                     *
* ON ENTRY TO THIS SUBROUTINE, REGISTER 1 CONTAINS THE ADDRESS OF     *
* THE MESSAGE TO BE DISPLAYED; REGISTER 0 CONTAINS ITS LENGTH.        *
*                                                                     *
* THIS ROUTINE USES NO STACK SPACE.  FURTHERMORE, SINCE IT WILL NEVER *
* RETURN TO WHENCE IT CAME, REGISTER 14 NEED NOT BE SAVED.            *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
* 11/18/86 - A NEW INTERFACE HAS BEEN ADDED TO THIS MODULE.           *
*                                                                     *
* IF REGISTER 1 IS ZERO, THEN REGISTER 0 IS A POINTER TO A            *
* PARAMETER LIST.  THIS PARAMETER LIST IDENTIFIES A LIST OF LISP      *
* OBJECTS TO BE PRINTED IN SUCCESSION TO THE STANDARD OUTPUT FILE,    *
* WHICH WILL CONSTITUTE THE ERROR MESSAGE.                            *
*                                                                     *
* TO BE MORE SPECIFIC:                                                *
*                                                                     *
* REGISTER 0 -->+0 |-----------|                                      *
*                  |SIGNAL BIT |   X'80' MEANS SIGNAL AN ERROR        *
*               +1 |           |                                      *
*                  | SEV CODE  |   0,1,2,3,4                          *
*               +2 |-----------|                                      *
*                  |-> OBJECT3 |  FOR EACH OBJECT, IF ITS ADDRESS IS  *
*               +4 |-----------|  ON AN ODD BOUNDARY (NON-HALFWORD-   *
*                  |-> OBJECT2 |  ALIGNED), IT IS PRINTED WITHOUT     *
*               +6 |-----------|  SLASHIFICATION; OTHERWISE IT IS     *
*                  |-> OBJECT3 |  SLASHIFICATION.                     *
*               ...|-----------|                                      *
*                  |    ...    |                                      *
*                  |-----------|                                      *
*                  |  X'0FFF'  |                                      *
*                  |-----------|                                      *
*                                                                     *
***********************************************************************
         SPACE 1
ZILERR   #ZBEG NAME='ZILERR'
         SPACE 1
         LTR   #1,#1               IF REGISTER 1 = ZERO
         BZ    MULTERR             THEN GO TO PROCESS NEW INTERFACE
         SPACE 1
         LR    #12,#15
         DROP  #15
         USING ZILERR,#12
         SPACE 1
         LR    #3,#1               SAVE MESSAGE ADDRESS
         LR    #4,#0               SAVE MESSAGE LENGTH
         SPACE 1
         MVI   ZLCDFLGS,0          CLEAR ALL ZILADMP FLAGS
         SPACE 1
         SPACE 1
         L     #15,X'224'          ASCB ADDRESS
         ICM   #15,15,X'3C'(#15)   TSB ADDRESS
         BZ    NOTTSO              IF NO TSB, NOT UNDER TSO
* ON TSO, SEND MESSAGE TO TERMINAL REGARDLESS OF OUTPUT DEST.
* THE SEVERITY LEVEL IS 2 (ERROR).
         #TPUT 2,(1),(0)            USE TPUT TO DISPLAY THE MESSAGE
         B     AFTTSO
         SPACE 1
NOTTSO   DS    0H                  ELSE...
         SPACE 1
* IN BATCH, ISSUE WRITE-TO-PROGRAMMER MESSAGE.
         SPACE 1
         MVI   WTPTEXT,C' '        CLEAR MESSAGE TEXT TO BLANKS
         MVC   WTPTEXT+1(WTPLEN-1),WTPTEXT
         LR    #15,#0              GET LENGTH OF MESSAGE
         CH    #15,WTPLEN          IF LONGER THAN MAX WTP LENGTH
         BNH   *+8                  THEN
         LA    #15,WTPLEN            USE MAXIMUM LENGTH
         BCTR  #15,0               REDUCE THIS LENGTH FOR EXECUTE
         EX    #15,WTPMOVE         MOVE MESSAGE TEXT
         WTO   MF=(E,WTPMSG),ROUTCDE=11 WRITE TO PROGRAMMER MESSAGE
         SPACE 1
AFTTSO   DS    0H                  WHICHEVER WAY IT WAS DISPLAYED...
         SPACE 1
*
* TRY TO EXTRACT MESSAGE ID FROM MESSAGE TEXT (ZILNNNN...)
* THIS WILL BE PASSED TO THROW, WHICH MAY USE IT AS AN ABEND CODE.
*
         XR    #1,#1               INITIALIZE THROW NUMBER TO ZERO
         CH    #4,=H'7'            IF LENGTH IS AT LEAST 7
         BL    THROW                AND
         CLC   0(3,#3),=C'ZIL'      MESSAGE BEGINS WITH ZIL....
         BNE   THROW                 THEN
         LA    #2,3(,#3)            POINT TO NEXT 4 POSITIONS
         LA    #0,4
TNUMLOOP DS    0H                  TEST FOR 4 NUMERICS
         CLI   0(#2),X'F0'
         BL    THROW
         CLI   0(#2),X'F9'
         BH    THROW
         LA    #2,1(,#2)
         BCT   #0,TNUMLOOP
         PACK  ZLCDBL(8),3(4,#3)   CONVERT MESSAGE NUMBER TO DECIMAL
         CVB   #1,ZLCDBL           AND THEN TO BINARY
THROW    DS    0H                  NOW WE HAVE NUMBER TO PASS
         STH   #1,ZLCABEND         STORE INTO USER ABEND CODE NUMBER
         OI    ZLCERFLG,ZLCERSET   INDICATE USER ABEND CODE SET
         SPACE 1
         LR    #1,#10              SET THROW TAG TO NIL
         LR    #2,#10              SET THROW RESULT TO NIL
         L     #15,ZLCTHROW        GET ADDRESS OF THROW PROCESSOR
         BR    #15                 INVOKE THROW TO TAG NIL
         SPACE 1
WTPMOVE  MVC   WTPTEXT(*-*),0(#1)  EXECUTED = MOVE ERROR TO MSG TEXT
WTPMSG   WTO   '                                                       X
                                                                       X
                              ',ROUTCDE=11,MF=L
WTPEND   EQU   *
WTPTEXT  EQU   WTPMSG+4
WTPLEN   EQU   WTPEND-WTPTEXT
         SPACE 1
MULTERR  DS    0H                  THIS IS THE NEW INTERFACE
*                                  #0 -> PARAMETER LIST
         LR    #1,#15
         DROP  #12
         USING ZILERR,#1
         STM   #0,#14,MSAVE        SAVE ALL REGISTERS ON ENTRY
         LR    #12,#1              SET UP OUR BASE REGISTER
         DROP  #1
         USING ZILERR,#12
         LR    #3,#0               POINT TO BEGINNING OF PARAMETER LIST
         XR    #6,#6
         IC    #6,1(,#3)           #4 = SEVERITY LEVEL
         STC   #6,MSEV             SAVE SEVERITY LEVEL
         SPACE 1
         LA    #5,2(,#3)           POINT TO BEGINNING OF PARAMETER LIST
         L     #7,ZLCSTDOU         GET STANDARD OUTPUT FILE POINTER
         USING ZLFILBLK,#7
         TM    ZLFFLAG1,ZLFNEWLN   IF OUTPUT DATA WAITING ON THIS LINE
         BZ    SKIPTERP            THEN...
         ST    #3,SAVEPARM          SAVE #3 ACROSS CALL TO TERPRI
         L     #15,ZLCTERP          GET ADDRESS OF ZILTERP
         #BASR #14,#15              CALL ZILTERP TO GET A NEW LINE
         L     #3,SAVEPARM          RESTORE #3
SKIPTERP DS    0H
         CLC   MSEV(1),ZLCMSLVL    IF SEVERITY CODE LESS THAN MSGLEVEL
         BL    MSKIP               THEN SKIP PRINTING THIS ITEM
         CLI   MSEV,X'FF'          IF SEVERITY CODE IS *
         BE    NOHEADER            THEN DON'T PREFIX MESSAGE HEADER
         TM    0(#3),X'40'         IF SUPPRESS-PREFIX BIT IS ON
         BO    NOHEADER            THEN DON'T PREFIX MESSAGE HEADER
         SLA   #6,2                CONVERT SEVERITY CODE TO INDEX
         L     #4,MSTRINGS(#6)     LOAD APPROPRIATE MESSAGE HEADER
         NI    ZLCPFLGS,255-ZLCPSLSH REQUEST NO SLASHIFICATION BE DONE
         L     #15,ZLCPRIN         GET ADDRESS OF ZILPRIN
         #BASR #14,#15             CALL ZILPRIN TO PRINT MESSAGE HEADER
NOHEADER DS    0H
MLOOP    DS    0H                  PROCESS EACH PARAMETER
         CLI   0(#5),X'0F'         IF THIS IS THE END OF THE LIST
         BE    MLOOPEND            THEN EXIT LOOP
         SPACE 1
         CLC   MSEV(1),ZLCMSLVL    IF SEVERITY CODE LESS THAN MSGLEVEL
         BL    MSKIP               THEN SKIP PRINTING THIS ITEM
         SPACE 1
         XR    #2,#2               START GENERATING ADDRESS OF THE
         XR    #3,#3                DATA TO BE PRINTED
         ICM   #3,B'1100',0(#5)    #2 = X'00000000', #3 = X'BDDD0000'
         SLDL  #2,4                #2 = X'0000000B', #3 = X'DDD00000'
         SRL   #3,20               #2 = X'0000000B', #3 = X'00000DDD'
         STC   #2,MBASE            SAVE BASE REGISTER
         LTR   #2,#2               IF BASE REGISTER IS ZERO
         BNE   NOTZERO             THEN...
         SLA   #3,2                 CONVERT DISPLACEMENT (REG) TO INDEX
         L     #4,MSAVE(#3)         LOAD CONTENTS OF THAT REGISTER
         ST    #4,MFIXNUM+4         SAVE INTO PHONY FIXNUM
         LA    #4,MFIXNUM           POINT TO PHONY FIXNUM
         B     AFTSETSL             AND PRINT (SLASHIFIC'N IRRELEVANT)
NOTZERO  DS    0H                  ELSE...
         SLA   #2,2                 CONVERT TO INDEX INTO MSAVE
         L     #4,MSAVE(#2)         LOAD CONTENTS OF THAT BASE REGISTER
         ALR   #4,#3                ADD DISPLACEMENT
         CLI   MBASE,11             IF BASE REGISTER IS 11
         BNE   NOT11                THEN IT'S AN INDIRECT STACK POINTER
         L     #4,0(,#4)            SO GET WHAT IT POINTS TO
NOT11    DS    0H
         ST    #4,MADDRESS          SAVE ADDRESS OF DATA
         TM    MADDRESS+3,X'01'     IF OBJECT IS ON ODD BOUNDARY
         BZ    DOSETSL              THEN
         NI    ZLCPFLGS,255-ZLCPSLSH REQUEST NO SLASHIFICATION BE DONE
         B     AFTSETSL             ELSE
DOSETSL  OI    ZLCPFLGS,ZLCPSLSH    REQUEST SLASHIFICATION BE DONE
AFTSETSL DS    0H                  #4 POINTS TO DATA TO BE PRINTED
         L     #15,ZLCPRIN         GET ADDRESS OF ZILPRIN
         #BASR #14,#15             CALL ZILPRIN TO PRINT THE THING
MSKIP    DS    0H
         LA    #5,2(,#5)           ELSE BUMP TO NEXT PARAMETER
         B     MLOOP               AND CONTINUE
MLOOPEND DS    0H
         TM    ZLFFLAG1,ZLFNEWLN   IF OUTPUT DATA WAITING ON THIS LINE
         BZ    SKIPTER2            THEN...
         L     #15,ZLCTERP         GET ADDRESS OF ZILTERP
         #BASR #14,#15             CALL ZILTERP TO TERPRI THE LINE
SKIPTER2 DS    0H
         SPACE 1
         L     #1,MSAVE0           GET POINTER TO ORIGINAL PLIST
         TM    0(#1),X'80'         IF WE ARE TO SIGNAL AN ERROR
         BNO   MDONE               THEN...
         XR    #1,#1                SET ABEND CODE TO 000
         B     THROW                GO TO THROW TO SIGNAL ERROR
MDONE    DS    0H                  ELSE...
         LA    #15,2(,#5)          RETURN ADDRESS AFTER LAST PARAMETER
         LM    #0,#14,MSAVE        RESTORE ALL REGS THAT WERE SAVED
         BR    #15                 RETURN TO CALLER
         SPACE 2
MSAVE    DS    14A                 SAVE AREA FOR REGS 0-14
         ORG   MSAVE
MSAVE0   DS    A
         DS    A                   (ACTUALLY REG 1 WASN'T SAVED)
MSAVE2   DS    A
MSAVE3   DS    A
MSAVE4   DS    A
MSAVE5   DS    A
MSAVE6   DS    A
MSAVE7   DS    A
MSAVE8   DS    A
MSAVE9   DS    A
MSAVE10  DS    A
MSAVE11  DS    A
MSAVE12  DS    A
MSAVE13  DS    A
MSAVE14  DS    A
         ORG   ,
MFIXNUM  #IATM 0                   PHONY FIXNUM FOR PRINTING VALUES
MADDRESS DS    A                   ADDRESS OF DATA TO BE PRINTED
SAVEPARM DS    A                   PLACE TO SAVE REGISTER
MSEV     DS    X                   SEVERITY CODE
MBASE    DS    X                   BASE REGISTER FROM S-CONSTANT
         SPACE 1
MSTRINGS DC    A(MSTRING0,MSTRING1,MSTRING2,MSTRING3,MSTRING4)
         SPACE 1
MSTRING0 #SATM 'ZIL4000 '
MSTRING1 #SATM 'ZIL4001 Warning: '
MSTRING2 #SATM 'ZIL4002 Error: '
MSTRING3 #SATM 'ZIL4003 '
MSTRING4 #SATM 'ZIL4004 '
         SPACE 1
         LTORG
         SPACE 1
         END
