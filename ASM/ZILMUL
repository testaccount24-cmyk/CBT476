         TITLE 'ZILMUL - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* ZILMUL TAKES TWO ARGUMENTS. BOTH MUST BE NUMERIC ATOMS.             *
*                                                                     *
* CONVERSION RULES ARE AS FOLLOWS: (INTEGERS ARE FIXNUMS AND BIGNUMS) *
*                                                                     *
* 1. BOTH ARGS INTEGER       - PERFORM INTEGER MULTIPLICATION.        *
* 2. BOTH ARGS FLOAT         - PERFORM REAL MULTIPLICATION.           *
* 3. ONE INTEGER, ONE FLOAT  - CONVERT INTEGER ARGUMENT TO            *
*                              FLOAT AND PERFORM REAL MULTIPLICATION. *
*                                                                     *
* ANY OTHER TYPES CAUSE AN ERROR.                                     *
*                                                                     *
***********************************************************************
         SPACE
ZILMUL   #ZBEG MINARGS=2,MAXARGS=2,NAME='ZILMUL'
         #ZPDS 20                  DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
         SPACE
         LM    #6,#7,0(#11)        LOAD ARGUMENTS
         CLI   ##TYPE(#6),##FIXNUM
         BNE   ARG1NFIX
         CLI   ##TYPE(#7),##FIXNUM
         BNE   FX1NFX2
*---------------------------------------------------------------------*
*           FIXNUM BY FIXNUM MULTIPLY                                 *
*---------------------------------------------------------------------*
         L     #3,##CDR(,#6)       GET FIXED VALUE 1
         M     #2,##CDR(,#7)       MULTIPLY THEM
         SLDA  #2,32               SQUEEZE TO SIGNED 32 BITS
         BO    FFBIG               FIXNUM OVERFLOW? THEN MAKE BIGNUM
         #MKAT FIXED               MAKE A FIXNUM
******** B     RETURN              AND RETURN WITH IT
         SPACE
RETURN   DS    0H                  RETURN WITH NEW ATOM
         SPACE
         #ZRET ,                   RESTORE REGISTERS AND RETURN
         SPACE
*---------------------------------------------------------------------*
*       FIXNUM MULTIPLICATION OVERFLOWS AND CREATES A BIGNUM          *
*---------------------------------------------------------------------*
FFBIG    LTR   #2,#2               TEST FOR SIGN
         BM    FFBIGM              IT'S A NEGATIVE BIGNUM
         L     #7,##CDR(,#7)       LOAD ARG2
         M     #6,##CDR(,#6)       MULTIPLY BY ARG1
         SLDA  #6,1                ALIGN #6 FOR 31-BIT RADIX
         BO    FFBIG3              MUST BE 2**62, 3-WORD BIGNUM!
         SRL   #7,1                RESTORE #7 AFTER #6 ALIGNMENT
         L     #15,ZLCBIG          GET ADDRESS OF ZILBIG
         LA    #2,##VECDAT+8       GET SIZE TO PASS TO ZILBIG
         #BASR #14,#15             GET BIGNUM SPACE FROM STRING SPACE
         L     #4,BIG8             PREP TYPE AND LENGTH WORD
         LR    #5,#7               PREP LEAST SIGNIFICANT WORD FOR STM
         LA    #1,##VECDAT+8(,#15) POINT TO END OF BIGNUM
         STM   #4,#6,0(#15)        STORE WHOLE WORD
         ST    #1,ZLCVSNXT         MAKE IT A PERMANENT OBJECT
         B     RETURN
         SPACE
FFBIGM   L     #5,##CDR(,#6)       GET FIRST MULTIPLICAND
         L     #7,##CDR(,#7)       GET SECOND MULTIPLICAND
         LNR   #5,#5               MAKE SURE WE CAN MULT THESE
         LNR   #7,#7               BUT WE DONT KNOW WHICH IS NEG
         MR    #6,#5               MULTIPLY TO GET POS RESULT
         SLDA  #6,1                SHIFT TO RADIX-31
         SRL   #7,1                RESTORE LS WORD
         O     #7,=X'80000000'     IF 0 WE REALLY WANT -0
         L     #15,ZLCBIG          GET ADDRESS FOR ZILBIG
         LA    #2,##VECDAT+8       GET SIZE TO PASS TO ZILBIG
         #BASR #14,#15             CALL ZILBIG
         LM    #4,#5,BIG8M         LOAD HEADER AND MINUS SIGN
         OR    #5,#7               MOVE LS WORD TO #5 AND SET SIGN
         LA    #1,##VECDAT+8(,#15) POINT TO END OF BIGNUM
         STM   #4,#6,0(#15)        STORE BIGNUM, INCLUDING HEADER
         ST    #1,ZLCVSNXT         MAKE IT A PERMANENT OBJECT
         B     RETURN
         SPACE
FFBIG3   LA    #15,TWO62           GET ADDRESS OF IN-LINE 2**62 BIGNUM
         B     RETURN              RETURN WITH IT
         SPACE 1
*---------------------------------------------------------------------*
* ARG 1 IS FIXED BUT ARG 2 IS NOT                                     *
*---------------------------------------------------------------------*
         SPACE 1
FX1NFX2  CLI   ##TYPE(#7),##BIGNUM
******** BE    FIXBIG              FIXED * BIG   = BIG
         BNE   FX1NBF2
         SPACE
*---------------------------------------------------------------------*
* FIXNUM BY BIGNUM MULTIPLY                                           *
*---------------------------------------------------------------------*
FIXBIG   ST    #7,0(,#11)          EXCHANGE POINTERS IN #6 AND #7
         ST    #6,4(,#11)           AND ALSO IN THE STACK
         LM    #6,#7,0(#11)        LOAD EXCHANGED REGS FROM STACK
*
BIGFIX   ICM   #7,15,##CDR(#7)     LOAD FIXNUM AND SIGN TEST
         BZ    BIGFIX0             RESULT IS 0
         BM    BIGFIXM             IT'S A BIGNUM * NEG FIXNUM
         XR    #5,#5               CLEAR FOR ICM OF LENGTH
         ICM   #5,7,1(#6)          GET BIGNUM LENGTH
*
         L     #15,ZLCBIG          GET ADDRESS OF ZILBIG
         LA    #2,##VECDAT+4(,#5)  GET SIZE TO PASS TO ZILBIG
         #BASR #14,#15             CALL ZILBIG
*
         L     #6,0(,#11)          GC MAY HAVE MOVED BIGNUM POINTER
         ICM   #3,15,##VECDAT(#6)  GET LS WORD OF BIGNUM
         BM    BIGMFIXP            IT'S A NEG BIGNUM AND POS FIXNUM
*
PBIGFIX  LA    #4,4                WORD SIZE - BXLE INCREMENT SIZE
         MR    #2,#7
         SLDL  #2,1
         SRL   #3,1
         LR    #1,#4               SHOULD BE SET TO ##VECDAT
BFCONT   ST    #3,##VECDAT-4(#1,#15)
         LR    #14,#2
         AR    #1,#4
         LA    #0,1                USEFUL FOR FAST CARRY
BFLOOP   L     #3,##VECDAT-4(#1,#6)
         MR    #2,#7
         ALR   #3,#14              ADD IN PREVIOUS CARRY
         BC    12,BFNCARRY         NO CARRY NEEDED
         AR    #2,#0               ADD 1 TO HIGHER WORD
BFNCARRY SLDA  #2,1                SHIFT TO 31-RADIX
         BO    BFBUG        *****  SHOULDN'T OVERFLOW HERE
         SRL   #3,1                RESTORE POSITION OF LS WORD
         ST    #3,##VECDAT-4(#1,#15) STORE RESULT WORD
         LR    #14,#2              STORE CARRY WORD
         BXLE  #1,#4,BFLOOP        ANOTHER WORD TO DO?
*
         LTR   #2,#2
         BZ    BFRETURN
         ST    #2,##VECDAT-4(#1,#15)
         LA    #2,##VECDAT(#1,#15) A(BIGNUM) + L'BIGNUM + L'HEADER
         STCM  #1,7,1(#15)         STORE BIGNUM LENGTH
         ST    #2,ZLCVSNXT         MAKE IT PERMANENT
         B     RETURN
BFRETURN LA    #2,##VECDAT-4(#1,#15)
         SR    #1,#4
         STCM  #1,7,1(#15)
         ST    #2,ZLCVSNXT
         B     RETURN
         SPACE
BIGFIX0  L     #15,4(,#11)         GET POINTER TO 0 FROM STACK
         B     RETURN              RETURN WITH POINTER TO 0
         SPACE
BIGFIXM  LPR   #7,#7
         BO    BIGFIXMC
         CL    #7,=F'1'
         BE    BIGFIXM1            (* 2**31 -1) IS FIXNUM
         XR    #5,#5
         ICM   #5,7,1(#6)
         L     #15,ZLCBIG
         LA    #2,##VECDAT+4(,#5)  GET SIZE TO PASS TO ZILBIG
         #BASR #14,#15
         L     #6,0(,#11)
         ICM   #3,15,##VECDAT(#6)
         BM    BIGMFIXM
         LA    #4,4
         MR    #2,#7
         SLDL  #2,1
         SRL   #3,1
         LR    #1,#4
         O     #3,=X'80000000'
         B     BFCONT
*
BIGFIXM1 CLC   TWO31(12),0(#6)     COMPARE BIGNUM TO 2**31
         BE    MTWO31M             ANSWER IS MOST NEG FIXNUM
*
         ICM   #7,7,1(#6)          GET BIGNUM LENGTH
         LA    #7,##VECDAT(,#7)    TOTAL LENGTH OF RESULT BIGNUM
         L     #15,ZLCBIG          GET ADDRESS OF ZILBIG
         LR    #2,#7               DESIRED LENGTH FOR ZILBIG
         #BASR #14,#15             CALL ZILBIG
*
         L     #6,0(,#11)          RESTORE BIGNUM POINTER AFTER GC
         LR    #4,#15              PREP DESTINATION FOR MVCL
         LR    #5,#7               PUT LENGTH IN BOTH FIELDS FOR MVCL
         MVCL  #4,#6               MOVE BIGNUM
         XI    ##VECDAT(#15),X'80' TOGGLE SIGN OF RESULT
         ST    #4,ZLCVSNXT         BUMP UP BIGNUM AVAILABILITY POINTER
         B     RETURN
MTWO31M  LA    #15,TWO31M          RETURN MOST NEGATIVE FIXNUM
         B     RETURN
         SPACE
BIGMFIXP N     #3,=X'7FFFFFFF'
         LA    #4,4
         MR    #2,#7
         SLDL  #2,1
         SRL   #3,1
         LR    #1,#4
         O     #3,=X'80000000'
         B     BFCONT
         SPACE
BIGMFIXM N     #3,=X'7FFFFFFF'
         B     PBIGFIX
         SPACE
BIGFIXMC XR    #5,#5               CLEAR FOR GETTING 3-BYTE LENGTH
         ICM   #5,7,1(#6)          GET LENGTH OF BIGNUM
         L     #15,ZLCBIG          RESULT MUST BE ONE WORD LONGER
         LA    #2,##VECDAT+4(,#5)  GET SIZE TO PASS TO ZILBIG
         #BASR #14,#15             MAKE NEW BIGNUM SPACE
         L     #6,0(,#11)          RECOVER BIGNUM ARG IN CASE OF GC
         L     #2,=X'80000000'     PREP TO MASK ALL BUT SIGN OF BIGNUM
         L     #3,##VECDAT(,#6)    BRING IN THE BIGNUM LS WORD + SIGN
         NR    #2,#3               EXTRACT SIGN FROM BIGNUM LS WORD
         LA    #1,4(,#5)           CALCULATE LENGTH OF RESULT BIGNUM
         X     #2,=X'80000000'     COMPLEMENT THE SIGN
         STCM  #1,7,1(#15)         STORE NEW BIGNUM LENGTH
         N     #3,=X'7FFFFFFF'     MASK OUT THE SIGN IN THE LS WORD
         STM   #2,#3,##VECDAT(#15) STORE LS AND 2ND LS WORDS OF RESULT
         LA    #4,##VECDAT+8(,#15) POINT TO NEXT WORD IN RESULT TO FILL
         LA    #6,##VECDAT+4(,#6)  POINT TO NEXT WORD IN ARG TO COPY
         SH    #5,=H'4'            PREPARE TO MOVE ALL BUT 2 LS WRDS OF
         LR    #7,#5                OLD BIGNUM TO NEW BIGNUM
         MVCL  #4,#6               COPY BIGNUM TO ONE WORD MORE SIGNIF.
         ST    #4,ZLCVSNXT         BUMP UP BIGNUM AVAILABILITY POINTER
         B     RETURN
         SPACE
ARG1NFIX CLI   ##TYPE(#6),##SFLOAT
         BE    ARG1SFLO
         CLI   ##TYPE(#6),##BIGNUM
         BE    ARG1BIG
         CLI   ##TYPE(#6),##DFLOAT
         BE    ARG1DFLO
         B     ERROR1
ARG1BIG  DS    0H
*
* ARG 1 IS A BIGNUM - NOW CHECK ARG2
*
         CLI   ##TYPE(#7),##FIXNUM
         BE    BIGFIX              BIGNUM * FIXNUM
         CLI   ##TYPE(#7),##BIGNUM
         BE    BIGBIG              BIGNUM * BIGNUM
         CLI   ##TYPE(#7),##SFLOAT
         BE    BIGSFLO             BIGNUM * SINGLE FLOAT
         CLI   ##TYPE(#7),##DFLOAT
         BE    BIGDFLO             BIGNUM * DOUBLE FLOAT
         B     ERROR2
         SPACE 1
BIGBIG   DS    0H
         SPACE 1
***********************************************************************
* BIGNUM BY BIGNUM MULTIPLY ROUTINE.  31-BIT RADIX IS ASSUMED         *
* FOR THE "DIGITS" OF THE BIGNUM (EACH DIGIT IS A 31-BIT WORD).       *
* BIGNUMS ARE REPRESENTED BY SIGN AND MAGNITUDE.                      *
* THE SIGN IS REPRESENTED BY THE LEFTMOST BIT OF THE LS WORD.         *
*                                                                     *
* ASSUME VECTOR STRUCTURE IS WORD INDICATING LENGTH OF VECTOR, WHICH  *
* STARTS IN THE NEXT WORD.  A THREE WORD VECTOR WOULD BE REPRESENTED  *
* IN 4 WORDS (32 BITS/WORD) AS FOLLOWS:                               *
*                                                                     *
*       ---------------------------------------------------------     *
*       | C8 00 00 0C | 7F FF 00 FF | 72 34 56 78 | 7F FF FF 23 |     *
*       --==-========--------------------------------------------     *
*        TYPE LENGTH      LS WORD       NEXT WORD     MS WORD         *
*                                                                     *
* HELPFUL DIAGRAM WITH REGISTER LABELLED (NUMBERS REFER TO REGISTERS  *
* WHICH ARE POINTING TO THESE LOCATIONS). "===" LINES INDICATE        *
* SIZE WHICH AN INDEX (OFFSET) REGISTER WILL NEVER GO UNDER.          *
* "---" LINES INDICATE INDEX (OFFSET) VALUES WHICH INDEX REGISTERS    *
* WILL TRAVERSE. "..." INDICATES AREAS WHICH ABSOLUTE POINTERS        *
* (BASE REGISTERS) WILL TRAVERSE IN THE COURSE OF THE COMPUTATION.    *
* REGISTERS WITH ONLY "====" OR NO OTHER PUNCTUATION ON THE SAME      *
* LINE ARE EITHER CONSTANT INDEX VALUES OR ABSOLUTE POINTERS          *
* WHICH DO NOT CHANGE IN THE COURSE OF THE COMPUTATION.  E.G.,        *
* THE FOLLOWING DIAGRAM INDICATES THAT REGISTER 11 IS A CONSTANT      *
* BASE POINTER, REGISTER 6 IS A MOVING BASE POINTER, REGISTER         *
* 5 IS A FIXED INDEX REGISTER, REGISTER 14 IS A MOVING INDEX          *
* REGISTER, ETC.  THE NOTATION IS NOT LOGICALLY COMPLETE AND IS       *
* INTENDED ONLY AS A VISUAL AID IN UNDERSTANDING THE ASSEMBLER        *
* CODE WHICH FOLLOWS.                                                 *
*                                                                     *
*                                                                     *
*               11                                                    *
* 6....6....6....6                                                    *
* ---------------------                                               *
* |    | LS |    | MS |                           BIGNUM1             *
* ---------------------                                               *
*                                                                     *
*                                                                     *
* ==========-------------14>                                          *
* ========================5>                                          *
* 7                                                                   *
* -------------------------------                                     *
* |    | LS |    |    |    | MS |                 BIGNUM2             *
* -------------------------------                                     *
*                                                                     *
*                                                                     *
* 1....1....1=========-------------14>                                *
* 15                                                                  *
* ----------------------------------------------                      *
* |    | LS |    |    |    |    |    |    | ?? |  RESULT BIGNUM       *
* ----------------------------------------------                      *
*                                                                     *
*                                                                     *
*                                                                     *
*                                 ------                              *
*                                 |  0 |                              *
*                                 ------                              *
*                                 ------                              *
*                            X    |  3 |                              *
*                                 ------                              *
*                          -------------                              *
*                          ------ ------                              *
*                          |  2 | |  3 |                              *
*                          ------ ------                              *
*                                                                     *
* PROOF THAT CARRY TO NEXT LOOP IS NEVER GREATER THAN 2 OUT OF        *
* EACH ITERATION OF THE INNER LOOP (THE AL RIGHT AFTER ILOOP):        *
*                                                                     *
* ASSUME     B = 2**31 (WORD RADIX)                                   *
*            C = MAXIMUM CARRY                                        *
*                                                                     *
* THEN       B - 1  = MAXIMUM POSSIBLE WORD VALUE                     *
*            B - 2  = MAXIMUM POSSIBLE VALUE FOR MOST SIGNIFICANT     *
*                     WORD IN A MULTIPLY SINCE (B-1)(B-1)=(B-2)B+1    *
*                                                                     *
*  SINCE THE LARGEST POSSIBLE SUM IN EACH ITERATION OF THE INNER      *
*  LOOP CAN ONLY OCCUR WHEN EACH COMPONENT OF THE SUM HAS ITS         *
*  MAXIMUM POSSIBLE VALUE, WE TRY IT AND SEE WHAT THE RESULT          *
*  WOULD BE.  WE MUST SUM THE CARRY FROM THE PREVIOUS COLUMN,         *
*  THE MOST SIGNIFICANT WORD FROM THE PREVIOUS MULTIPLY, THE          *
*  LEAST SIGNIFICANT WORD FROM THE PRESENT MULTIPLY, AND THE          *
*  WORD REPRESENTING THE SUM (FOR THIS PLACE OF SIGNIFICANCE) OF      *
*  ALL PREVIOUS ITERATIONS (THIS SITS IN THE RESULT BIGNUM AND        *
*  BECOMES THE CORRECT ANSWER WHEN ALL ITERATIONS HAVE COMPLETED).    *
*  WE THEN HAVE:                                                      *
*                                                                     *
*     C + (B - 2) + (B - 1) + (B - 1)                                 *
*                                                                     *
*  =  C + 3 B - 4                                                     *
*                                                                     *
*  =  C + 2 B + (B - 4)                                               *
*                                                                     *
*  =  (2)B + (B - 4 + C)                                              *
*                                                                     *
*  WE CAN SEE THAT THIS WILL BE CONSISTENT AND NOT OVERFLOW IF        *
*  C = 2 (EVEN THOUGH C = 3 WOULD NOT HAVE CAUSED AN OVERFLOW IN THIS *
*  CASE.  BUT WE CONCLUDE THAT C = 2 IS THE MAXIMUM CARRY BECAUSE     *
*  IT APPEARS AS THE COEFFICIENT TO "B" IN THE LAST EQUATION.  THE    *
*  B IN (B-4+C) IS REQUIRED TO MAKE THAT TERM A POSITIVE VALUE SINCE  *
*  WE ARE ASSUMING THAT REGISTERS WILL ONLY HOLD POSITIVE TWO'S       *
*  COMPLEMENT NUMBERS OF 32 BITS - RESULTING IN THE UPPER BIT ALWAYS  *
*  BEING ZERO AND EFFECTIVELY BECOMING A 31-BIT RADIX.  31-BIT RADIX  *
*  IS USED FOR BIGNUM REPRESENTATION PRIMARILY BECAUSE OF HARDWARE    *
*  LIMITATIONS IN THE DIVIDE AND MULTIPLY INSTRUCTIONS (THERE IS NO   *
*  UNSIGNED MULTIPLY AND DIVIDE ON THE IBM/370.)  ADD LOGICAL IS      *
*  USED IN THE INNER LOOP HERE TO CONVENIENTLY USE THE UPPER BIT      *
*  AS A CARRY POSITION FOR THE LOWER ORDER BIT OF THE POSSIBLE TWO-   *
*  BIT CARRY.                                                         *
*                                                                     *
*  AN ADDITIONAL REFINEMENT IN ANALYZING THE MAXIMUM VALUES THAT      *
*  CAN BE CARRIED IS TO OBSERVE THAT IF THE HIGHER ORDER WORD         *
*  OF A MULTIPLY (AFTER 31-BIT RADIX NORMALIZATION) IS (B-2) THEN     *
*  THE LOWER ORDER WORD FROM SAME MULTIPLY MUST BE 1, SINCE THE       *
*  PROBLEM MUST HAVE BEEN THE MULTIPLICATION (B-1) * (B-1).           *
***********************************************************************
         XR    #3,#3               ZERO LEFT BYTE FOR ICM
         XR    #5,#5               ZERO LEFT BYTE FOR ICM
         ICM   #3,7,1(#6)          GET LENGTH OF FIRST BIGNUM
         ICM   #5,7,1(#7)          GET LENGTH OF SECOND BIGNUM
         L     #15,ZLCBIG          GET ADDRESS OF ZILBIG SERVICE
         LA    #2,##VECDAT(#3,#5)  PRODUCT MAY BE SUM OF LENGTHS
         #BASR #14,#15             CALL ZILBIG - GET SPACE FOR RESULT
*
         STM   #8,#11,ZLCISAVE     NEED MORE REGISTERS (NOT #12,#13)
         OI    ZLCIFLGS,ZLCISVD    INDICATE THERE ARE REGISTERS SAVED
*
         LR    #1,#15              SET UP BASE POINTER IN RESULT
         LM    #6,#7,0(#11)        RESTORE BIGNUM POINTERS MOVED BY GC
         LA    #11,##VECDAT-4(#3,#6) POINT TO LAST WORD OF BIGNUM1
         LA    #4,4                NEED QUANTITY 4 FOR GENERAL USE
         LA    #8,1                NEED QUANTITY 1 FOR CARRY
         LR    #10,#4              NEED QUANTITY 4 FOR FOR BXLE
         LA    #14,##VECDAT+4      PREPARE INDEX FOR 2ND LS WORD
         LA    #6,##VECDAT(,#6)    #6 POINTS TO LS WORD OF BIGNUM1
*---------------------------------------------------------------------*
*    INITIALIZATION COMPLETE - NOW PROCESS LS WORD OF BOTH BIGNUMS    *
*---------------------------------------------------------------------*
BBGO     ICM   #0,15,0(#6)         LOAD LS WORD OF BIGNUM1, CHECK SIGN
         BM    BBM1                BIGNUM1 IS NEGATIVE
         ICM   #3,15,##VECDAT(#7)  LOAD LS WORD OF BIGNUM2, CHECK SIGN
         BM    BBP1M2              BIGNUM2 IS NEGATIVE, BIGNUM1 IS +
         MR    #2,#0               MULTIPLY TWO POSITIVE LS WORDS
         SLDL  #2,1                MAKE UPPER WORD 31-RADIX
         SRL   #3,1                BRING BACK LS WORD OF PRODUCT
         LR    #9,#2               SAVE CARRY WORD
         ST    #3,##VECDAT(,#15)   STORE IN LS WORD OF RESULT
*---------------------------------------------------------------------*
*    FIRST TIME LOOP - NO PREVIOUS ROW TO ADD IN                      *
*---------------------------------------------------------------------*
ILOOP1   L     #3,0(#14,#7)        GET NEXT WORD OF BIGNUM2
         MR    #2,#0               MULTIPLY BY LS WORD OF BIGNUM1
         ALR   #3,#9               INCLUDE CARRY WORD FROM LAST MULT
         BC    12,NCI1             BRANCH IF NO CARRY
         AR    #2,#8               ADD 1 IF THERE WAS A CARRY
NCI1     SLDL  #2,1                IT'S RADIX 31, YOU KNOW
         SRL   #3,1                MOVE 31 BITS BACK TO THE RIGHT
         LR    #9,#2               CARRY HIGHER WORD TO NEXT ITERATION
         ST    #3,0(#14,#1)        STORE RESULT
         BXLE  #14,#4,ILOOP1       DO NEXT WORD IN BIGNUM2?
         ST    #2,0(#14,#1)        STORE LAST RESULT USING BIGNUM1 LS
*
         AR    #6,#4               INCREMENT BIGNUM1 INDEX POINTER
         B     OLOOP
*---------------------------------------------------------------------*
*    SPECIAL INITIALIZATIONS FOR SIGNS BEFORE THE FIRST TIME LOOP     *
*---------------------------------------------------------------------*
BBM1     ICM   #3,15,##VECDAT(#7)  GET LS WORD OF BIGNUM2
         BNM   BBM1P2              BIGNUM2 IS POSITIVE (0 MEANS + TOO)
         N     #0,=X'7FFFFFFF'     MAKE BOTH BIGNUM LS WORDS POSITIVE
         N     #3,=X'7FFFFFFF'     MAKE BOTH BIGNUM LS WORDS POSITIVE
         MR    #2,#0               MULTIPLY LS WORDS
         SLDL  #2,1                CONVERT TO 31-BIT RADIX
         SRL   #3,1                CONVERT TO 31-BIT RADIX
         LR    #9,#2               SAVE CARRY WORD
         ST    #3,##VECDAT(,#15)   STORE LS WORD IN RESULT VECTOR
         B     ILOOP1              GO TO FIRST TIME THROUGH LOOP
*
BBP1M2   N     #3,=X'7FFFFFFF'     TAKE POSITIVE VALUE FOR MULTIPLY
         MR    #2,#0               MULT TWO POSITIVE NUMBERS
         SLDL  #2,1                CONVERT TO 31-RADIX
         SRL   #3,1                CONVERT TO 31-RADIX
         LR    #9,#2               SAVE CARRY WORD
         O     #3,=X'80000000'     SET LS WORD TO NEGATIVE
         ST    #3,##VECDAT(,#15)   STORE IN LS WORD OF RESULT
         B     ILOOP1              GO TO FIRST PART OF LOOP
*
BBM1P2   N     #0,=X'7FFFFFFF'     TAKE POSITIVE VALUE FOR MULTIPLY
         MR    #2,#0               MULT TWO POSITIVE NUMBERS
         SLDL  #2,1                CONVERT TO 31-RADIX
         SRL   #3,1                CONVERT TO 31-RADIX
         LR    #9,#2               SAVE CARRY WORD
         O     #3,=X'80000000'     SET LS WORD TO NEGATIVE
         ST    #3,##VECDAT(,#15)   STORE IN LS WORD OF RESULT
         B     ILOOP1              GO TO FIRST PART OF LOOP
*---------------------------------------------------------------------*
*    MAIN OUTER LOOP FOR BIGNUM X BIGNUM MULTIPLY                     *
*---------------------------------------------------------------------*
OLOOP    AR    #1,#4               INCREMENT BASE FOR RESULT BIGNUM
         LA    #14,##VECDAT+4      PREPARE INDEX FOR 2ND LS WORD
         L     #3,4(,#7)           GET LS WORD OF BIGNUM2
         L     #0,0(,#6)           GET NEXT WORD OF BIGNUM1
         N     #3,=X'7FFFFFFF'     TAKE POSITIVE VALUE
         MR    #2,#0               DO THE MULTIPLICATION
         AL    #3,4(,#1)           ADD FROM PREVIOUS ROW
         BC    12,NCO              NO CARRY?
         AR    #2,#8               YES, ADD 1 TO HIGHER WORD
NCO      SLDL  #2,1                31-BIT RADIX, YOU KNOW
         SRL   #3,1                RESTORE LEFT 31 BITS
         LR    #9,#2               CARRY WORD TO NEXT ITERATION
         ST    #3,4(,#1)           STORE RESULT
*---------------------------------------------------------------------*
*    INNER LOOP FOR BIGNUM X BIGNUM MULTIPLY - OPTIMIZED FOR SPEED    *
*---------------------------------------------------------------------*
ILOOP    L     #3,0(#14,#7)        GET NEXT WORD IN BIGNUM2
         AL    #9,0(#14,#1)        CARRY+LAST ROW, WON'T OVERFLOW!
         BC    3,BUG2        ***** NOT EXPECTED - DELETE WHEN DEBUGGED
         MR    #2,#0               MULTIPLY, NO NEGATIVES ENCOUNTERED
         ALR   #3,#9               ADD TO PRESENT MULT RESULT
         BC    12,NCI              NO CARRY?
         AR    #2,#8               ADD 1 TO WORD TO BE CARRIED
NCI      SLDL  #2,1                31-BIT RADIX, YOU KNOW
         SRL   #3,1                RESTORE 31 BITS IN RIGHT WORD
         LR    #9,#2               SO CARRY WON'T BE BASHED BY MR
         ST    #3,0(#14,#1)        STORE RESULT
         BXLE  #14,#4,ILOOP        NOT AT END OF BIGNUM2 YET?
*
         ST    #2,0(#14,#1)        STORE MS WORD IN THIS ROW OF SUM
         BXLE  #6,#10,OLOOP        NOT END OF BIGNUM1 YET?
*---------------------------------------------------------------------*
*      END OF INNER AND OUTER LOOPS FOR BIGNUM X BIGNUM MULTIPLY      *
*---------------------------------------------------------------------*
*
         LTR   #2,#2               IF HIGHEST WORD IS 0
         BNZ   BBEXTRA             THEN...
         AR    #14,#1               REDUCE BY 4 TO CHOP OFF LEADING 0
         ST    #14,ZLCVSNXT        STORE ADDRESS FOR NEXT VSS OBJ
         SR    #14,#15             CALCULATE LENGTH OF BIGNUM
         SR    #14,#4              IT'S ONE WORD SHORTER HERE
         STCM  #14,7,1(#15)        STORE INTO LENGTH FIELD OF RESULT
         B     LRETURN             ===>interruptability exposure above
*
BBEXTRA  AR    #14,#1               MAKE THE BIGNUM PERMANENT
         AR    #4,#14
         SR    #14,#15
         STCM  #14,7,1(#15)        STORE LENGTH OF DATA PORTION
         ST    #4,ZLCVSNXT
*
LRETURN  LM    #8,#11,ZLCISAVE     RESTORE THE SAVED REGISTERS
         NI    ZLCIFLGS,255-ZLCISVD  INDICATE THAT REGISTERS RESTORED
         B     RETURN
         SPACE 1
BIGSFLO  DS    0H                  BIGNUM * SINGLE FLOAT
         L     #15,ZLCCVBF         Get address of ZILCVBF
         LR    #5,#6               Arg1 is bignum, arg2 is float
         #BASR #14,#15             Convert bignum to float
         LER   #F2,#F0             Get float value for arg1
         B     MULSFLO1            Go to multiply arg1 by float arg2
BIGDFLO  DS    0H                  BIGNUM * DOUBLE FLOAT
         L     #15,ZLCCVBF         Get address of ZILCVBF
         LNR   #5,#6               Arg1 is bignum, arg2 is float
         #BASR #14,#15             Convert bignum to float
         LDR   #F2,#F0             Get float value for arg1
         B     MULDFLO1            Go to multiply arg1 by float arg2
         SPACE 1
FX1NBF2  DS    0H                  ARG 1 IS FIXED BUT ARG2 IS NOT
         SPACE
*---------------------------------------------------------------------*
*                      CHECK TYPE OF ARG 2                            *
*---------------------------------------------------------------------*
         CLI   ##TYPE(#7),##SFLOAT
         BE    FIXSFLO             FIXED * SFLOAT = SFLOAT
         CLI   ##TYPE(#7),##DFLOAT
         BE    FIXDFLO             FIXED * DFLOAT = DFLOAT
         B     ERROR2              FIXED * NONUM = ERROR
FIXSFLO  L     #0,##CDR(,#6)       GET FIXED VALUE 1
         #BAS  #14,FIX2FLO         CONVERT FIXED TO FLOAT
         LRER  #F2,#F0             GET SINGLE FLOAT VALUE 1
         B     MULSFLO1
FIXDFLO  L     #0,##CDR(,#6)       GET FIXED VALUE 1
         #BAS  #14,FIX2FLO         CONVERT FIXED TO FLOAT
         LDR   #F2,#F0             GET DOUBLE FLOAT VALUE 1
         B     MULDFLO1
         SPACE
ARG1SFLO DS    0H                  ARG 1 IS SINGLE FLOAT
         SPACE
*---------------------------------------------------------------------*
*                      CHECK TYPE OF ARG 2                            *
*---------------------------------------------------------------------*
         CLI   ##TYPE(#7),##SFLOAT
         BE    SMULSFLO            SFLOAT * SFLOAT = SFLOAT
         CLI   ##TYPE(#7),##DFLOAT
         BE    SMULDFLO            SFLOAT * DFLOAT = DFLOAT
         CLI   ##TYPE(#7),##FIXNUM
         BE    SFLOPFIX            SFLOAT * FIXED = SFLOAT
         CLI   ##TYPE(#7),##BIGNUM
         BNE   ERROR2              SFLOAT * NONUM = ERROR
         LE    #F2,##CDR(,#6)      Get single float value 1
         L     #15,ZLCCVBF         Get address of ZILCVBF
         LR    #5,#7               Arg1 is float, arg2 is bignum
         #BASR #14,#15             Convert bignum to float
         LER   #F4,#F0             Get float value for arg2
         B     MULSFLO2            Go to MUL float arg1 to arg2
         SPACE 1
*---------------------------------------------------------------------*
*                      FIXNUM TO SINGLE FLOAT                         *
*---------------------------------------------------------------------*
SFLOPFIX LE    #F2,##CDR(,#6)      Get single float value 1
         L     #0,##CDR(,#7)       GET FIXED VALUE 2
         #BAS  #14,FIX2FLO         CONVERT FIXED TO FLOAT
         LRER  #F4,#F0             GET FLOAT VALUE 2
         B     MULSFLO2            FLOAT * FIXED = FLOAT
         SPACE
ARG1DFLO DS    0H                  ARG 1 IS DOUBLE FLOAT
         SPACE
         LD    #F2,8(,#6)          GET FLOAT VALUE 1
*---------------------------------------------------------------------*
*                      CHECK TYPE OF ARG 2                            *
*---------------------------------------------------------------------*
         CLI   ##TYPE(#7),##DFLOAT
         BE    MULDFLO1            DFLOAT * DFLOAT = DFLOAT
         CLI   ##TYPE(#7),##SFLOAT
         BE    DMULSFLO            DFLOAT * SFLOAT = DFLOAT
         CLI   ##TYPE(#7),##FIXNUM
         BE    DFLOPFIX            DFLOAT * FIXED = DFLOAT
         CLI   ##TYPE(#7),##BIGNUM
         BNE   ERROR2              DFLOAT * NONUM = ERROR
         L     #15,ZLCCVBF         Get address of ZILCVBF
         LNR   #5,#7               Arg1 is float, arg2 is bignum
         #BASR #14,#15             Convert bignum to float
         LDR   #F4,#F0             Get float value for arg2
         B     MULDFLO2            Go to MUL float arg1 to arg2
         SPACE 1
*---------------------------------------------------------------------*
*                      FIXNUM TO DOUBLE FLOAT                         *
*---------------------------------------------------------------------*
DFLOPFIX L     #0,##CDR(,#7)       GET FIXED VALUE 2
         #BAS  #14,FIX2FLO         CONVERT FIXED TO FLOAT
         LDR   #F4,#F0             GET FLOAT VALUE 2
         B     MULDFLO2            FLOAT * FIXED = FLOAT
         SPACE
*---------------------------------------------------------------------*
*                       SINGLE FLOAT MULTIPLY                         *
*---------------------------------------------------------------------*
SMULSFLO DS    0H
         LE    #F2,##CDR(,#6)      Get single float value 1
MULSFLO1 DS    0H
         LE    #F4,##CDR(,#7)      Get single float value 2
MULSFLO2 DS    0H
*
* Warning: result of single-precision multiply is DOUBLE PRECISION...
*
         MER   #F2,#F4             MULTIPLY THEM
         LRER  #F2,#F2             ROUND DOUBLE DOWN TO SINGLE
         STE   #F2,ZLCWORK         PUT RESULT IN REG FOR ATOM-MAKING
         L     #2,ZLCWORK
         LA    #0,20(,#11)         SET STACK LOCATION FOR CONS
         #MKAT FLOAT               MAKE A FLONUM
         B     RETURN              AND RETURN WITH IT
         SPACE 1
*---------------------------------------------------------------------*
*                       DOUBLE FLOAT MULTIPLY                         *
*---------------------------------------------------------------------*
DMULSFLO DS    0H
         SDR   #F4,#F4
         LE    #F4,##CDR(,#7)      Get double float value 2
         B     MULDFLO2
SMULDFLO DS    0H
         SDR   #F2,#F2
         LE    #F2,##CDR(,#6)      Get double float value 1
MULDFLO1 DS    0H
         LD    #F4,8(,#7)          Get double float value 2
MULDFLO2 DS    0H
         MDR   #F2,#F4             MULTIPLY THEM
         LDR   #F0,#F2
         L     #15,ZLCMDF          Get address of ZILMDF
         #BASR #14,#15             Call ZILMDF to make a double-float
         B     RETURN              AND RETURN WITH IT
         EJECT
         COPY  FIX2FLO             FIXED TO FLOAT CONVERSION SUBROUTINE
         EJECT
         PUSH  PRINT
         PRINT DATA
         SPACE 1
         DS    0A                  ALIGN FIXNUM TO FULLWORD
TWO31M   DC    YL1(##FIXNUM),AL3(0),F'-2147483648'  MOST NEG FIXNUM
         SPACE 1
         DS    0A                  ALIGN BIGNUM TO FULLWORD
TWO31    DC    YL1(##BIGNUM),AL3(8),F'0,1'    2**31 SMALLEST BIGNUM
         SPACE 1
         DS    0A                  ALIGN BIGNUM TO FULLWORD
TWO62    DC    YL1(##BIGNUM),AL3(12),F'0,0,1' 2**62 BIGNUM
         SPACE 1
         DS    0A                  ALIGN BIGNUM TO FULLWORD
BIG8M    DC    YL1(##BIGNUM),AL3(8),X'80000000'
BIG8     EQU   BIG8M,4
         SPACE 1
         POP   PRINT
         SPACE 1
ERROR1   #ERR  'Argument 1 to multiply not a number - ',0(#11)
ERROR2   #ERR  'Argument 2 to multiply not a number - ',4(#11)
BFBUG    #ERR  'Internal bug in ZILMUL BLFOOP routine multiplying ',   X
               0(#11),' and ',4(#11)
BUG2     DS    0H                  BUG
         LM    #8,#11,ZLCISAVE     RESTORE THE SAVED REGISTERS
         NI    ZLCIFLGS,255-ZLCISVD  INDICATE THAT REGISTERS RESTORED
         #ERR  'Internal bug in ZILMUL',                               X
               X'0D',              carriage return                     X
               'Overflow on add logical when adding previous sum to carX
               ry while multiplying ',                                 X
               0(#11),' and ',4(#11)
         SPACE 1
         LTORG
         END
