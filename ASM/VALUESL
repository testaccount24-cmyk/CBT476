         TITLE 'VALUES-LIST - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* "VALUES-LIST "                                                      *
*                                                                     *
* VALUESL takes one argument - a list of forms to be returned         *
* as multiple values.  It does this by passing control to the         *
* ZILVALS function to perform the multiple value operation.           *
*                                                                     *
* CLtL, p. 135:  (values-list <list>) == (apply #'values <list>)      *
*                                                                     *
***********************************************************************
         SPACE
VALUESL  #ZBEG MINARGS=1,MAXARGS=1,NAME='VALUES-LIST'
         SPACE 1
         USING VALUESL,#15
         SPACE 1
         LA    #3,4(,#1)           Point to where to store values
         L     #5,0(,#1)           Load list of values from stack
         XR    #2,#2               Initialize value counter
LOOP     DS    0H
         CR    #5,#10              Until list is null,
         BE    DONE
         LA    #0,4(,#3)           Get stack pointer
         #ZPDS (0)                 Check for stack overflow
         LM    #4,#5,##CAR(#5)     Get CAR and CDR of list
*                                  ...Note: This check isn't in VALUES!
         LTR   #4,#4               If it was actually an atom,
         BM    ERROR               then error
         ST    #4,0(,#3)           Store form on stack
         LA    #2,1(,#2)           Increment value counter
         LR    #3,#0               Increment stack pointer
         B     LOOP
DONE     DS    0H                  Done, #1 still points to argument
         LA    #1,4(,#1)           Point to values on stack
         XR    #0,#0               Signify normal VALUES operation
         L     #15,ZLCVALS         Get address of ZILVALS
         BR    #15                 Pass control to ZILVALS to do it
         SPACE 1
         #ZRET ,                   Restore registers and return
         SPACE 1
ERROR    DS    0H
         DROP  #15
         USING VALUESL,#3
         LR    #3,#15
         L     #2,0(,#1)
         #ERR  'Argument to VALUES-LIST not a proper list - ',(#2)
         SPACE 1
         LTORG
         END
