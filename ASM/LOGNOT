         TITLE 'LOGNOT - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* LOGNOT takes one integer argument.                                  *
*                                                                     *
* LOGNOT is not worth vectorizing because of the sign and magnitude   *
* implementation of bignums.  This is actually an advantage in this   *
* case, since, on the average, most of the bignum is simply copied.   *
* The equivalent LOGNOT operation is simply adding or subtracting     *
* one to the magnitude and flipping the sign.  For large bignums      *
* the most important speed operation is copying.  Note that MVCL      *
* is not the fastest way to copy on current IBM hardware.             *
*                                                                     *
***********************************************************************
LOGNOT   #ZBEG MINARGS=1,MAXARGS=1,NAME='LOGNOT'
         #ZPDS 1*4+12+0 (= 16)     DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
*
         L     #6,0(,#11)          Load argument
         CLI   ##TYPE(#6),##FIXNUM Is arg a fixnum?
         BNE   NF                  If not, branch to Not Fixnum
F        L     #2,##CDR(,#6)       Get arg
         X     #2,#SFWM1           Do logical XOR with X'FFFFFFFF'
         #MKAT FIXED               Cons up a fixnum answer
RET      #ZRET ,                   RESTORE REGISTERS AND RETURN
*
NF       CLI   ##TYPE(#6),##BIGNUM Is arg a bignum?
         BNE   ERROR1              Arg is not an integer
B        XR    #5,#5               Clear for inserting bignum length
         ICM   #5,B'0111',1(#6)    Insert bignum length of arg
         ICM   #7,B'1111',##VECDAT(#6) Get LS word and test sign
         L     #15,ZLCBIG          Preload bignum-maker address
         BM    BM                  Bignum is negative
BP       LA    #2,##VECDAT+4(,#5)  May need bignum one word longer
         #BASR #14,#15             Ask for bignum space and location
         AH    #7,=H'1'            Pretend 2's complement, so must +1
         BO    BPO                 Overflow, we must carry to next word
         O     #7,=X'80000000'     Put negative sign in LS word
         ST    #7,##VECDAT(#15)    Store LS word in result bignum
         STCM  #5,B'0111',1(#15)   Store bignum length in header
         LA    #2,##VECDAT+4(,#15) Start of area to copy to
         SH    #5,=H'4'            One word less to copy
         LA    #4,##VECDAT+4(,#6)  Start of area to copy from
         LR    #3,#5               Source and destination lengths same
         MVCL  #2,#4               Copy unchanged part of bignum
         ST    #2,ZLCVSNXT         Update availability pointer
         B     RET                 Return to caller
*
BPO      ST    #7,##VECDAT(#15)    Store X'80000000' in LS word
         XR    #2,#2               Generate 0 for storing
         LA    #3,8                Starting index for loop
         LA    #4,4                Word size for increment
BPOLOOP  L     #7,##VECDAT-4(#3,#6) Load next word
         AH    #7,=H'1'            Add the carry from previous word
         BNO   BPNO                No overflow, stop adding
         ST    #2,##VECDAT-4(#3,#15) Store 0 word in result bignum
         BXLE  #3,#4,BPOLOOP       More words to examine?
*
         LA    #5,4(,#5)           Add 1 word to bignum length
         LA    #7,1                1 to store
         ST    #7,##VECDAT-4(#5,#15) Store 1 in high word
         STCM  #5,B'0111',1(#15)   Store bignum length in header
         LA    #2,##VECDAT(#5,#15) Update availability pointer
         ST    #2,ZLCVSNXT         Store availability pointer
         B     RET                 Return to caller
*
BPNO     ST    #7,##VECDAT-4(#3,#15) Store carried-to word in result
         STCM  #5,B'0111',1(#15)   Store bignum length in header
         SR    #5,#3               Remaining length to copy
         LA    #4,##VECDAT(#3,#6)  Start of unchanged bignum part
         LR    #3,#5               Remaining length to copy
         LA    #2,##VECDAT(#3,#15) Start for storing unchanged bignum
         MVCL  #2,#4               Copy unchanged part of bignum
         ST    #2,ZLCVSNXT         Update availability pointer
         B     RET                 Return to caller
*
BM       LA    #2,##VECDAT(,#5)    Size of possible required bignum
         #BASR #14,#15             Ask for bignum space and location
         N     #7,=X'7FFFFFFF'     Mask out the sign bit
         SH    #7,=H'1'            Pretend 2's complement, so must -1
         BM    BMU                 Underflow, must borrow from next wrd
         ST    #7,##VECDAT(#15)    Store LS word in result bignum
         STCM  #5,B'0111',1(#15)   Store bignum length in header
         LA    #2,##VECDAT+4(,#15) Start of area to copy to
         SH    #5,=H'4'            One word less to copy
         LA    #4,##VECDAT+4(,#6)  Start of area to copy from
         LR    #3,#5               Source and destination lengths same
         MVCL  #2,#4               Copy unchanged part of bignum
         ST    #2,ZLCVSNXT         Update availability pointer
         B     RET                 Return to caller
*
BMU      ST    #7,##VECDAT(#15)    Store X'80000000' in LS word
         L     #2,=X'7FFFFFFF'     Generate max pos word for storing
         LA    #3,8                Starting index for loop
         LA    #4,4                Word size for increment
BMOLOOP  L     #7,##VECDAT-4(#3,#6) Load next word
         SH    #7,=H'1'            Sub the borrow from previous word
         BNM   BMNM                No minus, stop subtracting
         ST    #2,##VECDAT-4(#3,#15) Store 0 word in result bignum
         BXLE  #3,#4,BMOLOOP       More words to examine?
*
         B     ERROR2              Severe error, should never get here
*
BMNM     ST    #7,##VECDAT-4(#3,#15) Store borrowed-from-word in result
         CR    #5,#3               Remaining length to copy
         BZ    BMNZ                Nothing more to copy with MVCL
         STCM  #5,B'0111',1(#15)   Store bignum length in header
         SR    #5,#3               Remaining length to copy
         LA    #4,##VECDAT(#3,#6)  Start of unchanged bignum part
         LR    #3,#5               Remaining length to copy
         LA    #2,##VECDAT(#3,#15) Start for storing unchanged bignum
         MVCL  #2,#4               Copy unchanged part of bignum
         ST    #2,ZLCVSNXT         Update availability pointer
         B     RET                 Return to caller
*
BMNZ     LTR   #7,#7               Is highest word a zero?
         BZ    BMNL                Result must be one word less
         ST    #7,##VECDAT-4(#5,#15) Store highest word in result
         STCM  #5,B'0111',1(#15)   Store bignum length in header
         LA    #2,##VECDAT(#5,#15) Update availability pointer
         ST    #2,ZLCVSNXT         Store availability pointer
         B     RET
*
BMNL     SH    #5,=H'4'            Length is one word less
         STCM  #5,B'0111',1(#15)   Store bignum length in header
         LA    #2,##VECDAT(#5,#15) Update availability pointer
         ST    #2,ZLCVSNXT         Store availability pointer
         B     RET
*
ERROR1   #ERR  'Argument to LOGNOT not an integer - ',(#6)
ERROR2   #ERR  'System error in LOGNOT - defective bignum - ',(#6)
         LTORG
         END
