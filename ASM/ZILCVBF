         TITLE 'ZILCVBF - ZIL 1.3 BIGNUM-TO-FLOAT CONVERSION ROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* This subroutine is invoked from arithmetic functions that need      *
* to convert a bignum to a flonum.  The interface is:                 *
*                                                                     *
*    L  #5,<pointer to bignum>                                        *
*    L  #15,ZLCCVBF                                                   *
*    BALR #14,#15                                                     *
*    <flonum value is in FPR0)                                        *
*                                                                     *
* On entry #5 points to the bignum to be converted.                   *
* The flonum value is returned in FPR0 (no consing of flonums).       *
*                                                                     *
* If #5 is negative, a double-float is to be built; otherwise a       *
* single-float will be built.                                         *
*                                                                     *
* This routine saves, uses and restores regs 0 thru 4.  Regs 14 and   *
* 15 are the "branch and link" registers.                             *
*                                                                     *
* Note:  #15 is the base reg throughout, except when an error must    *
*        be signalled for floating-point overflow.                    *
*                                                                     *
* Logic:  See the similar routine in the FLOAT function.              *
*                                                                     *
***********************************************************************
         SPACE 1
ZILCVBF  #ZBEG NAME='ZILCVBF'
         SPACE 1
         USING ZILCVBF,#15
         SPACE 1
***********************************************************************
*                                                                     *
* See if a single-float or a double-float is required.                *
*                                                                     *
***********************************************************************
         SPACE 1
         LTR   #5,#5               If negative
         BM    B2D                 then go process double-float code
         SPACE 1
***********************************************************************
*                                                                     *
* Bignum to float conversion routine.                                 *
*                                                                     *
* This code is based on the observation that a single-precision       *
* flonum has only 24 bits of actual precision in it.  Therefore,      *
* we need only take the high-order 24 bits of the bignum (well,       *
* maybe we should consider the 25th bit for rounding purposes)        *
* and set the exponent of the flonum to represent the bit size        *
* of the bignum.  To do this, we need the following 2 pieces          *
* of information:                                                     *
*                                                                     *
* (a) the number of significant bits in the bignum (HAULONG)          *
* (b) the high-order 24 bits of the bignum (HAIPART)                  *
*                                                                     *
* We then determine the characteristic of the flonum to be (a)/4,     *
* except that a is a multiple of 31.  Therefore, we may have to       *
* shift (b) over to the right by (4-remainder) bits to make it        *
* a valid mantissa for the flonum whose exponent is that many bits    *
* short of representing (a).                                          *
*                                                                     *
***********************************************************************
*                                                                     *
* First, get the number of significant bits in the bignum (HAULONG).  *
* At the same time we extract the high-order 24 bits (HAIPART).       *
*                                                                     *
***********************************************************************
         SPACE 1
         STM   #0,#4,ZSAVE         Save regs
         SPACE 1
         XR    #4,#4               Clear insert register
         ICM   #4,7,1(#5)          Get length of bignum text
         SH    #4,=H'8'            Bump down by 2 words
         LA    #0,4(,#4)           Save length of bignum minus 4
         LA    #4,##VECDAT(#4,#5)  Point to 2 MSW's of bignum
         L     #2,4(,#4)           Get most significant word of bignum
         L     #3,0(,#4)           Get next most sig. word of bignum
         N     #3,=X'7FFFFFFF'     Zero possible sign bit to make ABS
         SLL   #3,1                Bring halves together
         SRDL  #2,1                Shift 62-bit number into reg pair
         SRA   #0,2                Divide length by 4 to get # of bytes
         LR    #1,#0               then to # of bigits less M.S.W.
         SLA   #1,5                Multiply by 31 (32X - X = 31X)
         SR    #1,#0               to get number of bits in these words
         LA    #1,32(,#1)          Set presumed bit count so far,
*                                   plus 1 because we shifted #2 right
HAULOOP  DS    0H                  Loop until we determine # of bits
         SLDL  #2,1                Shift out leftmost bit
         LTR   #2,#2               Test sign to see if we hit a 1-bit
*        BZ    ...                 (can never be zero, from a bignum)
         BM    GOTIT               If 1-bit leftmost, we got it
         BCT   #1,HAULOOP          Reduce bit count and continue
GOTIT    DS    0H                  Now #1 contains (HAULONG bignum)
*             and #2 contains (HAIPART bignum 24) in high-order 24 bits
         SPACE 1
***********************************************************************
*                                                                     *
* We then determine the characteristic of the flonum to be (#1)/4,    *
* except that a is a multiple of 31.  Therefore, we may have to       *
* shift (#2) over to the right by (4-remainder) bits to make it       *
* a valid mantissa for the flonum whose exponent is that many bits    *
* short of representing (#1).                                         *
*                                                                     *
***********************************************************************
         SPACE 1
         SRL   #2,8                Make 24-bit HAIPART value = mantissa
         LA    #4,4                 compute shift amount
*                                  #1 contains (HAULONG bignum)
         XR    #0,#0               Clear other half of reg pair
         DR    #0,#4               #0 = remainder, #1 = quotient
         LTR   #0,#0               If remainder is nonzero,
         BZ    RZERO               then...
         LA    #1,1(,#1)            bump quotient (represents exponent)
         SR    #4,#0                = 4 minus remainder
         SRL   #2,0(#4)             shift mantissa right by that amount
RZERO    DS    0H
         CH    #1,=H'63'           If exponent too high, error
         BH    ERROR
         LA    #1,64(,#1)          Convert characteristic to excess-64
         SLL   #1,24               Shift into high-order 8 bits
         OR    #2,#1               Combine characteristic with mantissa
         ST    #2,ZLCWORK          Store into work area
         TM    ##VECDAT(#5),X'80'  If original bignum was negative
         BZ    BNOTNEG             then
         OI    ZLCWORK,X'80'        make flonum negative
BNOTNEG  DS    0H
         LE    #F0,ZLCWORK         Load single-precision float value
         LM    #0,#4,ZSAVE         Restore saved regs
         BR    #14                 Return with it in FPR0
         EJECT
B2D      DS    0H                  Convert bignum to double-float
         SPACE 1
         LPR   #5,#5               Make address good
         SPACE 1
         SPACE 1
***********************************************************************
*                                                                     *
* This routine is similar to the single-float conversion routine,     *
* except (of course) that we need to extract the first 56 bits, not   *
* the first 24.  This makes things slightly more complicated in that  *
* we must manage a register "triple" (3-register "pair") to hold      *
* (HAIPART bignum 56).  However, we can simplify things somewhat by   *
* breaking down the processing into 3 cases:                          *
*                                                                     *
*   Case 1  -  a 2-word bignum with (HAULONG bignum) <= 56 bits       *
*                                                                     *
*              For this case, we can take the bits and make a         *
*              flonum out of them directly, after converting          *
*              the bigits to a 63-bit (actually 56-bit) doubleword.   *
*                                                                     *
*   Case 2  -  a 2-word bignum with (HAULONG bignum) > 56 bits        *
*                                                                     *
*   Case 3  -  a 3-word bignum.  (HAULONG bignum) will be > 62 bits.  *
*                                                                     *
* In both case 2 and case 3, we extract (HAIPART bignum 56) and       *
* then process the contents of the register triple by finding the     *
* proper amount(s) to shift as for the single-float algorithm         *
* described above.                                                    *
*                                                                     *
***********************************************************************
         SPACE 1
         STM   #0,#4,ZSAVE         Save registers used in this code
         XR    #4,#4               Clear insert register
         ICM   #4,7,1(#5)          Get length of bignum
         CH    #4,=H'8'            If length greater than 8
         BH    CASE3               then more than 2 words in bignum
         TM    ##VECDAT+4(#5),B'01111110' If more than 31+25=56 bits on
         BNZ   CASE2               then process slightly-long bignum
*                                  Else 56 bits or less in bignum
         L     #2,##VECDAT+4(,#5)  Load MSW
         L     #3,##VECDAT+0(,#5)  Load (M-1)SW
         N     #3,=X'7FFFFFFF'     Clear sign bit
         SLL   #3,1                Convert from bigits
         SRDL  #2,1                to 62-bit value in register pair
*                                  Note hi-order 8 bits of #2 must be 0
         STM   #2,#3,ZLCWORK       Store 56-bit mantissa-to-be
         MVI   ZLCWORK,X'4E'       Assign characteristic
         TM    ##VECDAT(#5),X'80'  If original bignum negative
         BZ    C1NM                then...
         OI    ZLCWORK,X'80'        set flonum negative
C1NM     DS    0H
         SDR   #F0,#F0             Normalize flonum value
         AD    #F0,ZLCWORK          by adding to normalized double zero
         LM    #0,#4,ZSAVE         Restore caller's registers
         BR    #14                 Return with value in #F0
         SPACE 1
CASE2    DS    0H                  2-word bignum with more than 56 bits
         SPACE 1
         STM   #0,#7,ZSAVE         Save registers used in this code
         LA    #0,4                Set length of bignum minus 4
         L     #2,##VECDAT+4(,#5)  Load MSW
         L     #3,##VECDAT+0(,#5)  Load (M-1)SW
         N     #3,=X'7FFFFFFF'     Clear sign bit
         XR    #7,#7               Set (M-2)SW to zeroes
         B     C3PROC              Process like a Case 3 bignum
         SPACE 1
CASE3    DS    0H                  Bignum of 3 words or more
         SPACE 1
***********************************************************************
*                                                                     *
* First, get the number of significant bits in the bignum (HAULONG).  *
* At the same time we extract the high-order 56 bits (HAIPART).       *
* To manage this in a register "triple", we do some clever shifting.  *
*                                                                     *
***********************************************************************
         SPACE 1
         STM   #0,#7,ZSAVE         Save regs
         SPACE 1
         XR    #4,#4               Clear insert register
         ICM   #4,7,1(#5)          Get length of bignum text
         SH    #4,=H'12'           Bump down by 3 words
         LA    #0,8(,#4)           Save length of bignum minus 4
         LA    #4,##VECDAT(#4,#5)  Point to 3 MSW's of bignum
         L     #2,8(,#4)           Get most significant word of bignum
         L     #3,4(,#4)           Get next most sig. word of bignum
         L     #7,0(,#4)           Get third most sig. word of bignum
         N     #7,=X'7FFFFFFF'     Zero possible sign bit to make ABS
C3PROC   DS    0H                  Cases 2 and 3 come together here
         SPACE 1
***********************************************************************
*                                                                     *
* Convert bigits in register triple #2+#3+#7 to 93-bit number.        *
*                                                                     *
***********************************************************************
         SPACE 1
         LR    #6,#3               Set up auxiliary register pair
         SLL   #7,1
         SRDL  #6,1
         LR    #3,#6
         SLL   #3,2
         SRDL  #2,2
         SPACE 1
***********************************************************************
*                                                                     *
* Now register triple #2+#3+#7 (also #2+#6+#7) has 93-bit bigit.      *
* Compute HAULONG value while tracking how much to shift all words.   *
*                                                                     *
***********************************************************************
         SPACE 1
         LR    #6,#3               Prepare for HAIPART computation
         SRA   #0,2                Divide length by 4 to get # of bytes
         LR    #1,#0               then to # of bigits less M.S.W.
         SLA   #1,5                Multiply by 31 (32X - X = 31X)
         SR    #1,#0               to get number of bits in these words
         LA    #1,33(,#1)          Set presumed bit count so far,
*                                   plus 2 because of 3 leading 0-bits
         XR    #4,#4               Clear shift counter
C3HAULP  DS    0H                  Loop until we determine # of bits
         LA    #4,1(,#4)           while increment shift counter
         SLDL  #2,1                Shift out leftmost bit
         LTR   #2,#2               Test sign to see if we hit a 1-bit
*        BZ    ...                 (can never be zero, from a bignum)
         BM    C3GOTIT             If 1-bit leftmost, we got it
         BCT   #1,C3HAULP          Reduce bit count and continue
C3GOTIT  DS    0H                  Now #1 contains (HAULONG bignum)
*             and #4 contains amount to shift to complete HAIPART oper.
         SLDL  #6,0(#4)            Shift rest of triple by that amount
         LR    #3,#6               Get all registers in triple correct
         SPACE 1
***********************************************************************
*                                                                     *
* Now #2+#3+#7 (or #2+#6+#7) contains (HAIPART bignum 56) in the      *
* high-order 56 bits.  This means that we no longer care about        *
* what's in #7, so we have a register pair #2+#3 that contains        *
* what we need.                                                       *
*                                                                     *
* We then determine the characteristic of the flonum to be (#1)/4,    *
* except that a is a multiple of 31.  Therefore, we may have to       *
* shift (#2+#3) over to the right by (4-remainder) bits to make it    *
* a valid mantissa for the flonum whose exponent is that many bits    *
* short of representing (#1).                                         *
*                                                                     *
***********************************************************************
         SPACE 1
         SRDL  #2,8                Make 56-bit HAIPART value = mantissa
         LA    #4,4                 compute shift amount
*                                  #1 contains (HAULONG bignum)
         XR    #0,#0               Clear other half of reg pair
         DR    #0,#4               #0 = remainder, #1 = quotient
         LTR   #0,#0               If remainder is nonzero,
         BZ    C3RZERO             then...
         LA    #1,1(,#1)            bump quotient (represents exponent)
         SR    #4,#0                = 4 minus remainder
         SRDL  #2,0(#4)             shift mantissa right by that amount
C3RZERO  DS    0H
         CH    #1,=H'63'           If exponent too high, error
         BH    ERROR
         LA    #1,64(,#1)          Convert characteristic to excess-64
         SLL   #1,24               Shift into high-order 8 bits
         OR    #2,#1               Combine characteristic with mantissa
         STM   #2,#3,ZLCWORK       Store into work area
         TM    ##VECDAT(#5),X'80'  If original bignum was negative
         BZ    C3NOTNEG            then
         OI    ZLCWORK,X'80'        make flonum negative
C3NOTNEG DS    0H
         SDR   #F0,#F0             Normalize (just in case we f*ed up)
         AD    #F0,ZLCWORK         Load double-precision float value
         LM    #0,#7,ZSAVE         Restore saved regs
         BR    #14                 Return with it in FPR0
         EJECT
ERROR    DS    0H                  Floating-point overflow would occur
         SPACE 1
         USING ZILCVBF,#15
         SPACE 1
***********************************************************************
*                                                                     *
* For the purposes of this routine (and laziness), we assume that     *
* the only callers thereof will have a "normal" function header       *
* and a function name of reasonable length (i.e. 8 bytes or less).    *
*                                                                     *
***********************************************************************
         SPACE 1
         MVC   Z+4(8),5(#12)       Move caller's name to fake string
         XR    #0,#0
         IC    #0,4(,#12)          Get length of function name
         SH    #0,=H'16'
         STCM  #0,7,Z+1            Store length of function name
         LR    #4,#15
         DROP  #15
         USING ZILCVBF,#4
         #ERR  'ZIL4102 ',Z,': Floating-point overflow converting ',   X
               (#5),' to float.',PREFIX=NO
         SPACE 1
ZSAVE    DS    8A                  Register save area
         SPACE 1
         DS    0H,XL1              Align to non-halfword boundary
Z        DC    YL1(##STRING),AL3(0) Place to build function name string
         DS    CL12
         SPACE 1
         LTORG
         SPACE 1
         END
