         TITLE 'ZILIMPL - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
* ZILIMPL TAKES 3 ARGUMENTS, OF WHICH THE LAST 2 ARE OPTIONAL.        *
* THE FIRST IS A LIST OF ATOMS TO BE IMPLODED INTO A SINGLE ATOM.     *
*  SPECIFICATION OF AN ATOM OR OF A LIST CONTAINING NESTED LISTS IS   *
*  ERRONEOUS AND WILL BE FLAGGED AS AN ERROR BY ZILADMP OR ZILABLD.   *
* THE SECOND SPECIFIES WHETHER (NON-NIL) OR NOT (NIL) TO INTERN THE   *
*  GENERATED ATOM ON THE OBLIST (NOTE THAT DEFAULT IS NOT TO).        *
* THE THIRD SPECIFIES WHETHER (NON-NIL) OR NOT (NIL) TO FORMAT THE    *
*  ATOM AS NUMERIC WHERE POSSIBLE (DEFAULT IS TO ASSUME ALPHA).       *
* THIS ROUTINE IS NOT RECURSIVE AND USES NO EXTRA STACK SPACE.        *
***********************************************************************
*                                                                     *
* ZILADMP IS CALLED TO DUMP EACH ATOM IN THE LIST INTO OUR WORK AREA. *
*                                                                     *
***********************************************************************
         SPACE
ZILIMPL  #ZBEG MINARGS=1,MAXARGS=3,NAME='ZILIMPL'
         #ZPDS 24                  DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
         SPACE
         L     #6,0(,#11)          GET FIRST ARGUMENT
         XR    #5,#5               INIT LENGTH SO FAR TO ZERO
         CR    #6,#10              IF END OF LIST OR NULL LIST
         BE    NOMORE              THEN END LOOP
LOOP     DS    0H
         ICM   #2,15,##CAR(#6)     GET EACH CAR OF ARG 1 TO ZILIMPL
         BM    ERROR1              IF ARG 1 WAS AN ATOM, ERROR
         TM    ##TYPE(#2),##ATOM   IF IT'S NOT AN ATOM
         BZ    ERROR2              THEN ERROR
         TM    ##TYPE(#2),##VEC    IF IT'S A VECTOR
         BO    ERROR2              THEN ERROR
         L     #15,ZLCADMP         GET ADDRESS OF ZILADMP
         LR    #1,#10              SET #1 FOR ZILADMP
         #BASR #14,#15             CALL ZILADMP TO DUMP ATOM
         LR    #7,#1               SAVE ADDRESS OF DUMPED ATOM
         LTR   #4,#0               GET LENGTH OF DUMPED ATOM
         BNP   AFTMOVE             IF ZERO LENGTH, SKIP THIS ONE
         AR    #0,#5               GET DUMPED-ATOM LENGTH PLUS TOTAL
         C     #0,ZLCWALEN         IF EXCEEDS CURRENT WORKAREA LENGTH
         BNH   LENOK               THEN...
*
* (1) GETMAIN A NEW WORKAREA WHOSE SIZE IS >= #0.
* (2) COPY CONTENTS OF OLD WORKAREA TO THE NEW WORKAREA, LENGTH = #5.
* (3) FREEMAIN THE OLD WORKAREA.
*
* #0 = TOTAL LENGTH NEEDED SO FAR, INCLUDING DUMPED-BUT-NOT-ADDED-YET
* #1 = NOT IN USE
* #2 = NOT IN USE, WILL CONTAIN NEW WORK AREA LENGTH
* #3 = NOT IN USE, WILL CONTAIN NEW WORK AREA ADDRESS
* #4 = LENGTH OF DUMPED ATOM TEXT THAT WE WANT TO ADD ON
* #5 = TOTAL LENGTH DUMPED SO FAR, NOT INCLUDING THIS STUFF
* #6 = ADDRESS OF THE SUBLIST CURRENTLY BEING PROCESSED
* #7 = ADDRESS OF DUMPED ATOM TEXT THAT WE WANT TO ADD ON
*
         LR    #2,#0                SAVE LENGTH TO BE NEEDED
         LA    #2,7(,#2)            GET A LARGER WORK AREA
         N     #2,=X'FFFFFFF8'      ROUNDED UP TO MULTIPLE OF 8
         LR    #0,#2                SAVE THE NEW WORK AREA LENGTH
         #GETMAIN RC,LV=(0),LOC=BELOW GET A NEW WORK AREA
         LTR   #15,#15              IF GETMAIN FAILED
         BNZ   ERROR3               THEN ERROR - NOT ENOUGH STORAGE
         LR    #3,#1                SAVE NEW WORKAREA ADDRESS
         ICM   #14,15,ZLCWA         #14 = ADDRESS OF OLD AREA
         BZ    NOFREE               IF NONE, THEN SKIP MOVE & FREE
         LR    #0,#3                #0 = ADDRESS OF NEW AREA
         LR    #1,#5                #1 = LENGTH OF DUMPED TEXT
         LR    #15,#1               #15 = LENGTH OF DUMPED TEXT
         MVCL  #0,#14               COPY DATA FROM OLD AREA TO NEW AREA
         L     #1,ZLCWA             GET CURRENT WORK AREA ADDRESS
         L     #0,ZLCWALEN          GET CURRENT WORK AREA LENGTH
         FREEMAIN R,LV=(0),A=(1)    FREE THE OLD WORK AREA
NOFREE   DS    0H
         ST    #3,ZLCWA             SET NEW ZIL WORKAREA ADDRESS
         ST    #2,ZLCWALEN          SET NEW ZIL WORKAREA LENGTH
         SPACE 1
LENOK    DS    0H                  OTHERWISE - STILL ROOM
         L     #0,ZLCWA            WORKAREA ADDRESS + WORK AREA LENGTH
         AR    #0,#5               POINTS TO WHERE TO MOVE DUMPED ATOM
         LR    #1,#4               SOURCE LENGTH = DUMPED ATOM LENGTH
         LR    #15,#4              TARGET LENGTH = DUMPED ATOM LENGTH
         LR    #14,#7              SOURCE ADDRESS = WHERE DUMPED ATOM
         MVCL  #0,#14              MOVE DUMPED ATOM TO WORK AREA
         AR    #5,#4               INCREMENT TOTAL LENGTH SO FAR
AFTMOVE  DS    0H
         L     #6,##CDR(,#6)       GET REST OF LIST
         CR    #6,#10              WHILE LIST IS NOT NIL,
         BNE   LOOP                CONTINUE.
NOMORE   DS    0H                  LIST HAS BEEN PROCESSED
         L     #1,ZLCWA            POINT TO GIANT ATOM DATA
         LR    #0,#5               SET LENGTH OF GIANT ATOM
         LM    #2,#3,4(#11)        SET INTERN FLAG = ARG 2 TO ZILIMPL
         LA    #4,24(,#11)         SET CURRENT STACK POINTER FOR CONS
*                                  SET FORMAT FLAG = ARG 3 TO ZILIMPL
         L     #15,ZLCABLD         CALL ZILABLD TO MAKE AN ATOM FROM IT
         #BASR #14,#15             (RETURNS ATOM IN #15)
         SPACE
         #ZRET ,                   RESTORE REGISTERS AND RETURN
         SPACE 1
SAVE56   DS    2A                  SAVE AREA
         SPACE 1
ERROR1   #ERR  'Argument 1 to ZILIMPL not a proper list - ',0(#11)
ERROR2   #ERR  'Argument 1 to ZILIMPL contains nested list or vector-tyX
               pe structure - ',(#2),X'0D',                            X
               'Cannot implode list - ',0(#11)
ERROR3   DS    0H                  ERROR - NOT ENOUGH STORAGE
         XR    #0,#0               CLEAR WORK AREA ADDRESS AND LENGTH
         ST    #0,ZLCWA
         ST    #0,ZLCWALEN
         #ERR  PREFIX=NO,                                              X
               'ZIL2007 ZILIMPL: Not enough memory to build symbol nameX
                from list - ',0(#11)
         SPACE 1
         LTORG
         END
