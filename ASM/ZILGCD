         TITLE 'ZILGCD - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* This is fixnum-by-fixnum GCD, implemented in assembler for speed.   *
*                                                                     *
* Called by GCD2 when both arguments are fixnums only.                *
*                                                                     *
***********************************************************************
*                                                                     *
* ZILGCD TAKES TWO ARGUMENTS. BOTH MUST BE INTEGERS.                  *
*                                                                     *
* ANY OTHER TYPES CAUSE AN ERROR.                                     *
*                                                                     *
* ===> BIGNUM ARGUMENTS NOT YET IMPLEMENTED                           *
*                                                                     *
*  ALGORITHM FOR FIXNUM ARGUMENTS IS EUCLID'S ALGORITHM.              *
*  SPECIAL BRANCHES ARE NECESSARY TO HANDLE SPECIAL CASES INVOLVING   *
*  NEGATIVE ARGUMENTS, ZERO ARGUMENTS, AND THE FACT THAT THE          *
*  ABSOLUTE VALUE OF THE MOST NEGATIVE FIXNUM BECOMES A POSITIVE      *
*  BIGNUM.                                                            *
*                                                                     *
*  BASIC IDEA OF EUCLIDS ALGORITHM:                                   *
*                                                                     *
*  REM  = MOD(ARG ,ARG )                                              *
*     1          1    2                                               *
*                                                                     *
*  REM  = MOD(ARG ,REM )                                              *
*     2          2    1                                               *
*                                                                     *
*  REM  = MOD(REM ,REM )                                              *
*     3          1    2                                               *
*                                                                     *
*  REM  = MOD(REM ,REM )                                              *
*     4 .        2    3                                               *
*       .                                                             *
*       .                                                             *
*  (UNTIL REM  = 0, THEN ANSWER IS REM   )                            *
*            N                        N-1                             *
*                                                                     *
***********************************************************************
         SPACE
ZILGCD   #ZBEG MINARGS=2,MAXARGS=2,NAME='ZILGCD'
         #ZPDS 20                  DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
         SPACE
         LM    #2,#3,0(#11)        LOAD ARGUMENTS
         CLI   ##TYPE(#2),##FIXNUM
         BNE   ERROR1
         CLI   ##TYPE(#3),##FIXNUM
         BNE   ERROR2
*---------------------------------------------------------------------*
*           FIXNUM BY FIXNUM GCD                                      *
*---------------------------------------------------------------------*
         ICM   #4,15,##CDR(#2)     LOAD ARG2 AND FIND OUT SIGN
         BZ    FIXFIX0             ARG2 IS ZERO
         L     #6,##CDR(,#3)       GET ARG1
         SRDA  #6,32               CLEAR REG 6 BEFORE DIVIDE
         DR    #6,#4               DO FIRST DIVIDE
         LPR   #7,#6               TEST FOR ZERO
         BZ    FFD0                RESULT OF FIRST DIVIDE IS ZERO
         SRDA  #4,32               EXTEND SIGN AND CLEAR FOR NEXT DIV
         DR    #4,#7               DIVIDE SECOND TIME
         LPR   #5,#4               TEST FOR ZERO
         BZ    FFX                 ANSWER IN REG 7
         XR    #6,#6               CLEAR FOR NEXT DIVIDE
         DR    #6,#5               ANOTHER GCD STEP
         SRDA  #6,32               REG 6 ==> REG 7, CLEAR 6 FOR NXT DIV
         BZ    FFY                 ANSWER IN REG 5
         XR    #4,#4               ANSWER IN REG 5
         DR    #4,#7               ANOTHER GCD STEP
         SRDA  #4,32               REG 4 ==> REG 5, CLEAR 4 FOR NXT DIV
         BZ    FFX                 ANSWER IN REG 7
MORE     DR    #6,#5               ANOTHER GCD STEP
         SRDA  #6,32               REG 6 ==> REG 7, CLEAR 6 FOR NXT DIV
         BZ    FFY                 ANSWER IN REG 5
         DR    #4,#7               ANOTHER GCD STEP
         SRDA  #4,32               REG 4 ==> REG 5, CLEAR 4 FOR NXT DIV
         BZ    FFX                 ANSWER IN REG 7
         DR    #6,#5               ANOTHER GCD STEP
         SRDA  #6,32               REG 6 ==> REG 7, CLEAR 6 FOR NXT DIV
         BZ    FFY                 ANSWER IN REG 5
         DR    #4,#7               ANOTHER GCD STEP
         SRDA  #4,32               REG 4 ==> REG 5, CLEAR 4 FOR NXT DIV
         BZ    FFX                 ANSWER IN REG 7
         DR    #6,#5               ANOTHER GCD STEP
         SRDA  #6,32               REG 6 ==> REG 7, CLEAR 6 FOR NXT DIV
         BZ    FFY                 ANSWER IN REG 5
         DR    #4,#7               ANOTHER GCD STEP
         SRDA  #4,32               REG 4 ==> REG 5, CLEAR 4 FOR NXT DIV
         BNZ   MORE                MUST DO MORE, BUT LET'S SAVE SPACE
FFX      LR    #2,#7
         #MKAT FIXED               MAKE A FIXNUM
         B     RETURN              AND RETURN WITH IT
*
FFY      LR    #2,#5
         #MKAT FIXED               MAKE A FIXNUM
         B     RETURN              AND RETURN WITH IT
*
FIXFIX0  ICM   #7,15,##CDR(#3)     LOAD ARG1 AND TEST SIGN
         BM    FIXMFIX0            ARG2 IS NEGATIVE
         LR    #15,#3              JUST RETURN ARG1
         B     RETURN
*
FIXMFIX0 LCR   #2,#7               TAKE POS VALUE AND PREP FOR MKAT
         BO    TWO31               ANSWER MUST BE POSITIVE 2**31 BIGNUM
         #MKAT FIXED               MAKE A FIXNUM
         B     RETURN
*
FFD0     LCR   #4,#4
         BC    3,FFD0PO            POSITIVE OR OVERFLOW
         LR    #15,#2              RETURN WITH ARG2
         B     RETURN
*
FFD0PO   BO    TWO31               ANSWER MUST BE POSITIVE 2**31 BIGNUM
         LR    #2,#4               MAKE POSITIVE VERSION OF ARG1
         #MKAT FIXED               MAKE A FIXNUM
         B     RETURN
*
TWO31    LA    #15,#TWO31          RETURN POINTER TO INLINE BIGNUM
******** B     RETURN
*
RETURN   DS    0H                  RETURN WITH NEW ATOM
         #ZRET ,                   RESTORE REGISTERS AND RETURN
*
         DS    0A                  ALIGN BIGNUM TO FULLWORD
#TWO31   DC    YL1(##BIGNUM),AL3(8),F'0,1'    2**31 SMALLEST BIGNUM
         SPACE 1
ERROR1   DS    0H                  NOT A FIXNUM
         #ERR  'Argument 1 to ZILGCD not a fixnum - ',0(#11)
         SPACE 1
ERROR2   DS    0H                  NOT A FIXNUM
         #ERR  'Argument 2 to ZILGCD not a fixnum - ',4(#11)
         SPACE 1
         LTORG
         END
