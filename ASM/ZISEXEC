         TITLE 'ZISEXEC - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
* ZISEXEC TAKES AN &REST ARG - LIST OF ATOMS TO BE CONCATENATED INTO  *
* A SINGLE CHARACTER STRING, WHICH IS THEN INVOKED AS AN ISPF DIALOG  *
* SERVICE CALL.                                                       *
*                                                                     *
* ZISEXEC RETURNS A FIXNUM CONTAINING THE RETURN CODE AS RETURNED BY  *
* ISPEXEC/ISPLINK.                                                    *
*                                                                     *
* THIS ROUTINE IS NOT RECURSIVE AND USES NO EXTRA STACK SPACE.        *
***********************************************************************
*                                                                     *
* ZILADMP IS CALLED TO DUMP EACH ATOM IN THE LIST INTO OUR WORK AREA. *
*                                                                     *
***********************************************************************
*                                                                     *
* Change activity:                                                    *
*                                                                     *
* 09/16/88 - Automatic uppercasing of command buffer is not done if   *
*            this is a SELECT service request.                        *
*                                                                     *
***********************************************************************
         SPACE
ZISEXEC  #ZBEG MINARGS=0,MAXARGS=0,RESTARG=T,NAME='ZISEXEC'
         #ZPDS 16                  DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
         SPACE
         L     #6,0(,#11)          GET &REST ARGUMENT
         XR    #5,#5               INIT LENGTH REQUIRED SO FAR
LOOP     DS    0H
         CR    #6,#10              IF END OF LIST OR NULL LIST
         BE    NOMORE              THEN END LOOP
         L     #2,##CAR(,#6)       GET ATOM (ARG 1 TO ZISEXEC)
         TM    ##TYPE(#2),##ATOM   IF IT'S NOT AN ATOM
         BZ    BADLIST             THEN ERROR
         TM    ##TYPE(#2),##VEC    IF IT'S SOME KIND OF VECTOR
         BO    BADLIST             THEN ERROR
         L     #15,ZLCADMP         GET ADDRESS OF ZILADMP
         LR    #1,#10              SET #1 FOR ZILADMP
         #BASR #14,#15             CALL ZILADMP TO DUMP ATOM
         LR    #7,#1               SAVE ADDRESS OF DUMPED ATOM
         LTR   #4,#0               GET LENGTH OF DUMPED ATOM
         BNP   AFTMOVE             IF ZERO LENGTH, SKIP THIS ONE
         AR    #0,#5               GET DUMPED-ATOM LENGTH PLUS TOTAL
         C     #0,ZLCWALEN         IF EXCEEDS CURRENT WORKAREA LENGTH
         BNH   LENOK               THEN...
*
* (1) GETMAIN A NEW WORKAREA WHOSE SIZE IS >= #0.
* (2) COPY CONTENTS OF OLD WORKAREA TO THE NEW WORKAREA, LENGTH = #5.
* (3) FREEMAIN THE OLD WORKAREA.
*
* #0 = TOTAL LENGTH NEEDED SO FAR, INCLUDING DUMPED-BUT-NOT-ADDED-YET
* #1 = NOT IN USE
* #2 = NOT IN USE, WILL CONTAIN NEW WORK AREA LENGTH
* #3 = NOT IN USE, WILL CONTAIN NEW WORK AREA ADDRESS
* #4 = LENGTH OF DUMPED ATOM TEXT THAT WE WANT TO ADD ON
* #5 = TOTAL LENGTH DUMPED SO FAR, NOT INCLUDING THIS STUFF
* #6 = ADDRESS OF THE SUBLIST CURRENTLY BEING PROCESSED
* #7 = ADDRESS OF DUMPED ATOM TEXT THAT WE WANT TO ADD ON
*
         LR    #2,#0                SAVE LENGTH TO BE NEEDED
         LA    #2,7(,#2)            GET A LARGER WORK AREA
         N     #2,=X'FFFFFFF8'      ROUNDED UP TO MULTIPLE OF 8
         LR    #0,#2                SAVE THE NEW WORK AREA LENGTH
         #GETMAIN RC,LV=(0),LOC=BELOW GET A NEW WORK AREA
         LTR   #15,#15              IF GETMAIN FAILED
         BNZ   ERROR3               THEN ERROR - NOT ENOUGH STORAGE
         LR    #3,#1                SAVE NEW WORKAREA ADDRESS
         ICM   #14,15,ZLCWA         #14 = ADDRESS OF OLD AREA
         BZ    NOFREE               IF NONE, THEN SKIP MOVE & FREE
         LR    #0,#3                #0 = ADDRESS OF NEW AREA
         LR    #1,#5                #1 = LENGTH OF DUMPED TEXT
         LR    #15,#1               #15 = LENGTH OF DUMPED TEXT
         MVCL  #0,#14               COPY DATA FROM OLD AREA TO NEW AREA
         L     #1,ZLCWA             GET CURRENT WORK AREA ADDRESS
         L     #0,ZLCWALEN          GET CURRENT WORK AREA LENGTH
         FREEMAIN R,LV=(0),A=(1)    FREE THE OLD WORK AREA
NOFREE   DS    0H
         ST    #3,ZLCWA             SET NEW ZIL WORKAREA ADDRESS
         ST    #2,ZLCWALEN          SET NEW ZIL WORKAREA LENGTH
         SPACE 1
LENOK    DS    0H                  OTHERWISE - STILL ROOM
         L     #0,ZLCWA            WORKAREA ADDRESS + WORK AREA LENGTH
         AR    #0,#5               POINTS TO WHERE TO MOVE DUMPED ATOM
         LR    #1,#4               SOURCE LENGTH = DUMPED ATOM LENGTH
         LR    #15,#1              TARGET LENGTH = DUMPED ATOM LENGTH
         LR    #14,#7              SOURCE ADDRESS = WHERE DUMPED ATOM
         MVCL  #0,#14              MOVE DUMPED ATOM TO WORK AREA
         AR    #5,#4               INCREMENT TOTAL LENGTH SO FAR
AFTMOVE  DS    0H
         L     #6,##CDR(,#6)       GET REST OF LIST
         B     LOOP                CONTINUE.
NOMORE   DS    0H                  LIST HAS BEEN PROCESSED
         SPACE 1
*
* Translate the entire buffer to upper case
*
* This is skipped for a SELECT service request, since the SELECT
* service doesn't require uppercase keywords and often the contents
* are desired to be lowercase.  Other services fail if lowercase
* keywords are present.
*
* For simplicity, we check only that the first 6 characters of the
* buffer are "SELECT".  Too bad if you have trailing blanks.
*
* ZLCWA -> the dialog service string
* #5 = length thereof
*
         CH    #5,=Y(L'$SELECT)    If too short to be SELECT
         BL    NOTSEL              then it's not a SELECT call. Else
         L     #1,ZLCWA            Get address of string
         MVC   SELTEST,0(#1)       Move beginning to testing area
         TR    SELTEST,UPTBL       Fold to uppercase
         CLC   SELTEST,$SELECT     If string starts with SELECT
         BE    DONTFOLD            then skip translation.  Else...
NOTSEL   DS    0H                  It's not a SELECT service call...
         L     #1,ZLCWA
         LR    #2,#5
         LA    #0,256
TRLOOP   DS    0H
         CR    #2,#0
         BNH   TR1
         TR    0(256,#1),UPTBL
         AR    #1,#0
         SR    #2,#0
         B     TRLOOP
TR1      DS    0H
         BCTR  #2,0
         EX    #2,EXTR
DONTFOLD DS    0H                  It's translated if it should've been
*
* SET UP PARAMETER LIST FOR ISPEX
*
         ST    #5,BUFLEN           STORE PARM LENGTH
         LA    #1,BUFLEN           GET ADDRESS OF COMMAND WORK AREA
         ST    #1,PARM1            SET PARAMETER LIST POINTER
         L     #1,ZLCWA            GET ADDRESS OF COMMAND WORK AREA
         ST    #1,PARM2            SET PARAMETER LIST POINTER
         OI    PARM2,X'80'         SET VL BIT
*
* Get ISPEX
*
         ICM   #15,15,@ISPEX       Get address of ISPEX
         BNZ   EXOK                If not loaded, then
         LOAD  EPLOC==CL8'ISPEX',ERRET=NOSPF
         ST    #0,@ISPEX           Save entry point
         LR    #15,#0              Get entry point
EXOK     DS    0H
*
* INVOKE THE DIALOG SERVICE VIA ISPEX
*
         ST    #9,ZLCISV09         Save #9 in case of interrupt
         LA    #1,PARMS            POINT TO PARAMETER LIST FOR ISPEX
         OI    ZLCIFLGS,ZLCISYS    Indicate non-ZIL code running
         #BASR #14,#15             Call ISPEX
         TM    ZLCIFLGS,ZLCIATTN   If attention interrupt occurred
         BOR   #13                 then go to handle it
         NI    ZLCIFLGS,255-ZLCISYS Indicate ZIL code running again
*
* CONVERT THE RETURN CODE FROM THE COMMAND INTO A FIXNUM
*
         LR    #2,#15              GET RETURN CODE INTO REG FOR FIXNUM
         LA    #0,16(,#11)         PASS CURRENT STACK LOCATION TO CONS
         #MKAT FIXED               USING CONTENTS OF #15, MAKE FIXNUM
         SPACE 1
RETURN   DS    0H
         SPACE 1
         #ZRET ,                   RESTORE REGISTERS AND RETURN
         SPACE 1
EXTR     TR    0(*-*,#1),UPTBL
         SPACE 1
@ISPEX   DC    A(0)                Address of ISPEX (aka ISPEXEC)
         SPACE 1
PARMS    DS    0A
PARM1    DS    A                   BUFFER LENGTH
PARM2    DS    A                   BUFFER ADDRESS
BUFLEN   DC    F'0'
         SPACE 1
$SELECT  DC    C'SELECT '
SELTEST  DS    CL(L'$SELECT)
         SPACE 1
UPTBL    DC    256YL1(*-UPTBL)
         ORG   UPTBL+C'a'
         DC    C'ABCDEFGHI'
         ORG   UPTBL+C'j'
         DC    C'JKLMNOPQR'
         ORG   UPTBL+C's'
         DC    C'STUVWXYZ'
         ORG   ,
         SPACE 1
NOSPF    DS    0H                  HERE IF LINK FAILS
         #ERR  PREFIX=NO,                                              X
               'ZIL2121 ISPF dialog services not available, module ISPEX
               X not found in ZIL library - ',                         X
               0(#11)              (try to print out list of strings)
         SPACE 1
BADLIST  DS    0H
         #ERR  PREFIX=NO,                                              X
               'ZIL2122 ZISEXEC: Cannot convert argument to string - ',X
               (#2),                                                   X
               X'0D',              carriage return                     X
               '(it''s a list, vector, funarg, or structure).'
         SPACE 1
ERROR3   DS    0H                  ERROR - NOT ENOUGH STORAGE
         XR    #0,#0               CLEAR WORK AREA ADDRESS AND LENGTH
         ST    #0,ZLCWA
         ST    #0,ZLCWALEN
         #ERR  PREFIX=NO,                                              X
               'ZIL2123 ZISEXEC: Not enough memory to build ISPF dialogX
                service call string',                                  X
               0(#11)              (try to print out list of strings)
         SPACE 1
         LTORG
         END
