         TITLE 'ZILSINT - ZIL 1.3 COMPILED CODE OBJECT INITIALIZATION'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* THIS MODULE IS INVOKED VIA BALR FROM EXTERNAL FUNCTIONS WHICH HAVE  *
* ATOMS OR LISTS WITHIN THEM, ONE TIME ONLY.  IT RELOCATES ATOMS,     *
* INTERNS SYMBOLS AND CONVERTS 0 AND 1 POINTERS TO NIL AND T.         *
*                                                                     *
* THIS MODULE USES NO STACK SPACE,  SINCE IT'S NOT RECURSIVE.         *
*                                                                     *
* ON ENTRY REG 1 POINTS TO THE BEGINNING OF THE AREA CONTAINING THE   *
* LISTS AND ATOMS TO BE PROCESSED.                                    *
*                                                                     *
***********************************************************************
*                                                                     *
* NOTE: OBVIOUSLY, THIS PROGRAM MUST NOT CONTAIN ANY ATOMS OR LISTS.  *
*                                                                     *
***********************************************************************
         SPACE 1
ZILSINT  #ZBEG NAME='ZILSINT'
         SPACE ,
         STM   #12,#14,AINTSAVE    SAVE REGISTERS
         LR    #12,#15             SET UP BASE REGISTER
         DROP  15
         USING ZILSINT,#12         ESTABLISH ADDRESSABILITY
         USING ZLHEADER,#1         ESTABLISH ADDRESSABILITY
         SPACE 1
***********************************************************************
*                                                                     *
* INITIALIZE THE PARAMETERS USED TO SCAN THE ATOMS TO BE INITIALIZED  *
*                                                                     *
* IF THE ATOM POINTERS ARE ZERO, THEN THIS IS A CALL FROM A NON-MAIN  *
* FUNCTION, SO ONLY POINTER RELOCATION IS TO BE PERFORMED; FURTHER,   *
* IN THAT CASE THE OFFSETS ARE NEGATIVE SO THEY ARE TO BE SUBTRACTED. *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
* IN CASE THIS ROUTINE WAS INTERRUPTED AND GETS ENTERED AGAIN         *
* BECAUSE THE CALLER NEVER GOT TO ZAP ITS BRANCH-AROUND, SET THE      *
* HIGH-ORDER BIT OF ZLHATOMA TO MAKE THIS CODE DO A NO-OP IF IT       *
* IS EVER CALLED BY THIS MODULE AGAIN.                                *
*                                                                     *
***********************************************************************
         SPACE 1
         OI    ZLCGCFLG,ZLCGCBLD   TURN ON SPECIAL CONSING FLAG
         OI    ZLCIFLGS,ZLCISMC    SET NOT INTERRUPTIBLE
         L     #3,ZLHATOMA         START FROM BEGINNING OF ATOMS
         OI    ZLHATOMA,X'80'      ZAP IT SO IT'S NEVER GOOD AGAIN
         L     #5,ZLHLISTE         END WITH END OF LISTS
         LTR   #3,#3               IF ATOMS POINTER IS ZEROES
         BZ    MRELOC              THEN DO SUBFUNCTIONAL RELOCATION
         CLR   #3,#5               COMPARE POINTERS
         BNL   ENDLISTS            SKIP IF NO LISTS OR ATOMS
*
* Start to pass over main-function pointers.  We have to set a
* pointer to the inline pointers that we have processed so far,
* so that in case of a GC during our processing (before we have
* built a vector to reference this stuff) the pointers we have
* relocated so far will be found by the GC.
*
         ST    #3,ZLCSIN1          Set pointer to start of pointers
         LA    #4,4                SET BXLE REGISTER
         BCTR  #5,0                ADJUST END PTR FOR BXLE
         LA    #2,1                MAKE A 1 FOR COMPARES
         DROP  1
*
* IN THE MODULE, ALL REFERENCES TO NIL AND T IN LISTS ARE ASSEMBLED AS
* FULLWORD VALUES OF 0 AND 1 RESPECTIVELY.
* THIS CODE CONVERTS THESE TO THE ACTUAL ATOMS NIL AND T.
* IN ADDITION, ALL POINTERS HEREIN ARE RELATIVE AND MUST BE RELOCATED.
*
* FOR EACH POINTER, EITHER CONVERT IT TO NIL/T OR ADD IT TO OBJECT LIST
* AFTER RELOCATING IT
*
LISTLOOP DS    0H                  CONVERT ALL T AND NIL POINTERS
         SPACE 1
         L     #7,0(,#3)           PICK UP CONTENTS
         LTR   #7,#7               IF ZERO
         BZ    MAKENIL             THEN CHANGE TO NIL
         CR    #7,#2               ELSE IF ONE
         BE    MAKET               THEN CHANGE TO T
         A     #7,AINTSAVE+0       ELSE RELOCATE BY ADDING ENTRY POINT
         ST    #7,0(,#3)           UPDATE POINTER IN MODULE
         B     ISITATOM            CONTINUE
MAKENIL  DS    0H
         ST    #10,0(,#3)
         B     NEXTLIST
MAKET    DS    0H
         ST    #8,0(,#3)
         B     NEXTLIST
         EJECT
ISITATOM DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* OBJECT LIST INITIALIZATION                                          *
*                                                                     *
* GO THROUGH ALL ATOM POINTERS.                                       *
* SYMBOLS ARE RELOCATED AND PLACED ON THE OBJECT LIST.                *
* OTHER KINDS OF ATOMS ARE IGNORED.                                   *
*                                                                     *
* #7 POINTS TO THE ATOM IN QUESTION.                                  *
*                                                                     *
***********************************************************************
*                                                                     *
*  LOGIC IS AS FOLLOWS:  SYMBOLS ARE STORED IN COMPILED ZIL CODE IN   *
*  UNINITIALIZED FORM (SYMBOL TYPE BITS FOLLOWED BY 3 BYTES OF ZEROES *
*  AND A HASH CODE). WHEN A SYMBOL IS INTERNED (DUE TO ITS NOT BEING  *
*  FOUND ON THE OBLIST YET), ITS POINTER IS RETURNED BY ZILINTN;      *
*  IF AN IDENTICAL SYMBOL IS FOUND ON THE OBLIST, THE FORWARDING BIT  *
*  IN THE SYMBOL AREA IS SET TO 1 AND THE TRUE ADDRESS OF THE SYMBOL  *
*  (AS FOUND ON THE OBLIST) IS STORED BACK IN THE SYMBOL POINTER.     *
*  A FORWARDING POINTER IS DEPOSITED IN THE SYMBOL AREA, BUT NOT THE  *
*  POINTER TO THE ACTUAL SYMBOL (BECAUSE THAT WILL BE INACCESSIBLE    *
*  AFTER THE GC RELOCATES THE SYMBOL).  THEREFORE, WE STORE THE       *
*  POINTER TO THE ORIGINAL POINTER, WHICH CAN BE FOUND AS THE         *
*  FORWARDING POINTER.  THUS, WHEN ZILSINT SCANS ATOM POINTERS AND    *
*  FINDS A SYMBOL, IT ACTS APPROPRIATELY DEPENDING ON THE CONTENTS    *
*  OF THE FIRST AND SECOND WORDS.                                     *
*                                                                     *
***********************************************************************
         SPACE 1
         CLI   ##TYPE(#7),##SYMBOL IF IT'S NOT A SYMBOL
         BNE   NEXTLIST            THEN DON'T PROCESS IT
         SPACE 1
         TM    ##FWBYTE(#7),##FWBIT IF SYMBOL NOT FOUND/FORWARDED YET
         BZ    OBSEARCH            THEN NEW SYMBOL, GO SEARCH OBLIST
         L     #7,##FWWD2(,#7)     ELSE GET IT VIA FORWARDING POINTER
         L     #7,0(,#7)           FOLLOW POINTER TO TRUE POINTER
         ST    #7,0(,#3)           STORE TRUE SYMBOL POINTER BACK
         B     NEXTLIST            CONTINUE PROCESSING WITH NEXT ATOM
         SPACE 1
OBSEARCH DS    0H                  SEARCH THE OBLIST FOR THIS SYMBOL
         SPACE 1
***********************************************************************
*                                                                     *
* Observe that #7 is greater than zero, being a pointer to a pair of  *
* words in the load module, and that there may be a preset hash code  *
* contained therein which ZILINTN might be able to use.               *
*                                                                     *
***********************************************************************
         SPACE 1
         ST    #3,ZLCSIN2          Point to end of pointers so far
*                                  in case of GC during internment
         L     #15,ZLCINTN         GET ADDRESS OF ZILINTN
         LA    #6,8(,#7)           ADDRESS OF PRINT NAME STRING
         #BASR #14,#15             CALL ZILINTN TO INTERN THE SYMBOL
         ST    #15,0(,#3)          CHANGE PTR TO POINT TO OBLIST SYMBOL
         LA    #14,0(,#3)          POINT TO LOCATION OF TRUE POINTER
         ST    #14,##FWWD2(,#7)    SET FORWARDING POINTER IN OUR SYMBOL
         OI    ##FWBYTE(#7),##FWBIT SET FORWARDING BIT IN OUR SYMBOL
NEXTLIST DS    0H
         BXLE  #3,#4,LISTLOOP      CONTINUE FOR ALL LISTS
         SPACE 1
ENDLISTS DS    0H
         SPACE 1
         XR    #3,#3               Clear temporary pointer pointers
         ST    #3,ZLCSIN1          that were used in case of GC
******** ST    #3,ZLCSIN2          (we really don't have to clear #2)
         SPACE 1
***********************************************************************
*                                                                     *
* At this point, add the compiled code header pointer to the ZIL      *
* "master vector" of compiled code headers, used by the GC to collect *
* all inline compiled code objects.  All the code that allocates and  *
* maintains this data structure is contained herein.                  *
*                                                                     *
***********************************************************************
         SPACE 1
         LR    #6,#1               Save pointer to module header
         ICM   #4,15,ZLCICPA       Get address of "master vector"
         BNZ   GOTICPA             If zero, then...
         LA    #3,2048              load a good initial length
         LR    #0,#3                use it for getmain
         #GETMAIN RC,LV=(0),LOC=ANY get storage for it
         LTR   #15,#15              if getmain failed
         BNZ   GERROR               then disaster
         ST    #3,ZLCICPL           store length
         ST    #1,ZLCICPA           store address
         LR    #4,#1                load address of "master vector"
         XR    #0,#0                set length used (zero so far)
         ST    #0,ZLCICPU           store it
GOTICPA  DS    0H                  Now #4 points to the "master vector"
         L     #5,ZLCICPU          Get length used so far
         C     #5,ZLCICPL          See if entire length used up
         BL    ICPOK               If not, we can proceed.  Else...
         LA    #3,2048(,#5)        Increment length by a good amount
         LR    #0,#3               Use it for getmain
         #GETMAIN RC,LV=(0),LOC=ANY Get storage for new space
         LTR   #15,#15             If getmain failed
         BNZ   GERROR              then disaster
         ST    #3,ZLCICPL          Store new length
         LR    #2,#1               Save address of new space
         ST    #2,ZLCICPA          Store it
         LR    #0,#4               Address of old space
         LR    #1,#5               Used length of old space
         MVCL  #2,#0               Copy pointers from old space to new
         LR    #1,#4               Get address of old space
         LR    #0,#5               Get old length (assume used EQUALS)
         FREEMAIN RU,LV=(0),A=(1)  Free the old space
         L     #4,ZLCICPA          Get address of new space
ICPOK    DS    0H                  Now we know there's enough room
         ST    #6,0(#5,#4)         Store header in next available slot
         LA    #5,4(,#5)           Increment used length
         ST    #5,ZLCICPU          Store it
         SPACE 1
* Finished.
         SPACE 1
         NI    ZLCGCFLG,255-ZLCGCBLD TURN OFF SPECIAL CONSING FLAG
         NI    ZLCIFLGS,255-ZLCISMC  TURN OFF NON-INTERRUPTIBLE FLAG
         TM    ZLCIFLGS,ZLCIATTN   If attention interrupt occurred
         BOR   #13                 then go to handle it
         LM    #12,#14,AINTSAVE    RESTORE REGISTERS
         BR    #14                 RETURN TO CALLER
         EJECT
MRELOC   DS    0H                  RELOCATE SUBFUNCTION LIST POINTERS
         SPACE 1
         USING ZLHEADER,#1
         L     #5,ZLHLISTA         POINT TO START OF POINTERS
         L     #3,ZLHLISTE         POINT TO END OF POINTERS
         CR    #5,#3               IF NO LISTS
         BNL   ENDLISTS            THEN DO NO PROCESSING
         LA    #2,4                SET UP BXH INCREMENT REGISTER
         BCTR  #3,0                ADJUST BXH TERMINATION REGISTER
         L     #6,AINTSAVE+0       GET SAVED #12 = FUNCTION CODE ADDR
         B     MLOOPF              SKIP FIRST INCREMENT
MLOOP    BXH   #5,#2,ENDLISTS      EXIT AT END OF LIST OF POINTERS
MLOOPF   LR    #7,#6               FUNCTION ADDR MINUS OFFSET OF OBJ
         S     #7,0(,#5)           GIVES ADDRESS OF OBJECT IN MAIN CODE
         CLI   ##TYPE(#7),##SYMBOL IF THIS IS NOT A SYMBOL
         BNE   MSTORE              THEN JUST UPDATE POINTER. ELSE...
         TM    ##FWBYTE(#7),##FWBIT IT MUST POINT TO A FORWARDED SYMBOL
         BZ    MERROR              ELSE ERROR
         L     #7,##FWWD2(,#7)     LOAD FORWARDING POINTER FROM SYMBOL
         L     #7,0(,#7)           FOLLOW POINTER TO TRUE POINTER
MSTORE   ST    #7,0(,#5)           STORE TRUE POINTER BACK INTO CODE
         B     MLOOP               CONTINUE FOR ALL POINTERS
         SPACE 1
AINTSAVE DS    3A                  SAVE AREA FOR REGISTERS 12-14
         EJECT
GERROR   DS    0H
         #ERR  PREFIX=NO,                                              X
               'ZIL0071 ZILSINT: Not enough memory for inline compiled X
               object storage.'
MERROR   DS    0H
         WTO   'ZIL0070: INDIRECT SYMBOL POINTER NOT FORWARDED.',      X
               ROUTCDE=11
         ABEND 0070,DUMP
         SPACE
         LTORG
         SPACE
         #ZHDR ,
         SPACE
         END
