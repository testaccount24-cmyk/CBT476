         TITLE 'GREATERP - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* GREATERP TAKES TWO ARGUMENTS. BOTH MUST BE NUMERIC OR ALPHA ATOMS.  *
*                                                                     *
***********************************************************************
*                                                                     *
* THIS ROUTINE IS NOT RECURSIVE AND USES NO STACK SPACE.              *
*                                                                     *
***********************************************************************
*                                                                     *
* CONVERSION RULES ARE AS FOLLOWS:                                    *
*                                                                     *
* 1. BOTH ARGS FIXED         - PERFORM INTEGER COMPARISON.            *
* 2. BOTH ARGS FLOAT         - PERFORM REAL COMPARISON.               *
* 3. ONE FIXED, ONE FLOAT    - CONVERT THE FIXED ARGUMENT TO          *
*                              FLOAT AND PERFORM REAL COMPARISON.     *
* 4. BOTH ARGS ALPHA         - PERFORM CHARACTER COMPARISON.          *
*                                                                     *
* ANY OTHER TYPES CAUSE AN ERROR.                                     *
*                                                                     *
***********************************************************************
*                                                                     *
* ===> BIGNUM - FLOAT COMPARISON NOT YET IMPLEMENTED                  *
*                                                                     *
***********************************************************************
*                                                                     *
* SUPPORT FOR STRING AND SYMBOL COMPARES.  THE FOLLOWING COMPARISONS  *
*            ARE LEGAL:                                               *
*                                                                     *
*  SYMBOL TO SYMBOL                                                   *
*  STRING TO STRING                                                   *
*  SYMBOL TO STRING                                                   *
*  STRING TO SYMBOL                                                   *
*                                                                     *
* ALL MAY BE REMOVED FOR FULL COMMON LISP.                            *
*                                                                     *
***********************************************************************
GREATERP #ZBEG MINARGS=2,MAXARGS=2,NAME='GREATERP'
         SPACE
         LR    #3,#15
         DROP  #15
         USING GREATERP,#3
         SPACE
         LM    #1,#2,0(#1)         LOAD ARGUMENTS
         LR    #15,#10             PRESET RETURN VALUE TO NIL
         CR    #1,#2               IF ARGS ARE "EQ"
         BER   #14                 THEN RETURN NIL
*
* CHECK TYPE OF ARG 1
*
         CLI   ##TYPE(#1),##FIXNUM
         BE    ARG1FIX
         CLI   ##TYPE(#1),##SFLOAT
         BE    ARG1SFLO
         CLI   ##TYPE(#1),##BIGNUM
         BE    ARG1BIG
         CLI   ##TYPE(#1),##DFLOAT
         BE    ARG1DFLO
*
* --- DELETE THIS CODE FOR FULL COMMON LISP
*
         CLI   ##TYPE(#1),##STRING
         BE    ARG1STR
         CLI   ##TYPE(#1),##SYMBOL
         BE    ARG1ALF
*
* --- END CODE TO DELETE FOR FULL COMMON LISP
*
         B     ERROR
         EJECT
ARG1FIX  DS    0H                  ARG 1 IS FIXED
         SPACE
         L     #0,##CDR(,#1)       GET FIXED VALUE 1
*
* CHECK TYPE OF ARG 2
*
         CLI   ##TYPE(#2),##FIXNUM
         BE    CFIXFIX             FIXED - FIXED = OK
         CLI   ##TYPE(#2),##BIGNUM
         BE    CFIXBIG             FIXED - BIG   = OK
         CLI   ##TYPE(#2),##SFLOAT
         BE    CFIXSFLO            FIXED - FLOAT = OK
         CLI   ##TYPE(#2),##DFLOAT
         BE    CFIXDFLO            FIXED - FLOAT = OK
         B     ERROR               ANYTHING ELSE = ERROR
CFIXSFLO DS    0H                  FIXED VALUE 1 ALREADY IN #0
         LR    #7,#14              SAVE RETURN REGISTER
         #BAS  #14,FIX2FLO         CONVERT FIXED TO FLOAT
         LR    #14,#7              RESTORE RETURN REGISTER
         LRER  #F2,#F0             GET SINGLE FLOAT VALUE 1
         B     COMSFLO1
         SPACE
CFIXDFLO DS    0H                  FIXED VALUE 1 ALREADY IN #0
         LR    #7,#14              SAVE RETURN REGISTER
         #BAS  #14,FIX2FLO         CONVERT FIXED TO FLOAT
         LR    #14,#7              RESTORE RETURN REGISTER
         LDR   #F2,#F0             GET DOUBLE FLOAT VALUE 1
         B     COMDFLO1
         SPACE
CFIXFIX  DS    0H                  GOOD FOR FIXNUMS
         C     #0,##CDR(,#2)       COMPARE
         BNHR  #14
         LR    #15,#8
         BR    #14
         SPACE
ARG1SFLO DS    0H                  ARG 1 IS SINGLE FLOAT
         SPACE
*
* CHECK TYPE OF ARG 2
*
         CLI   ##TYPE(#2),##SFLOAT
         BE    SFLOSFLO            SFLOAT - SFLOAT = OK
         CLI   ##TYPE(#2),##DFLOAT
         BE    SFLODFLO            SFLOAT - DFLOAT = OK
         CLI   ##TYPE(#2),##FIXNUM
         BE    SFLOFIX             FLOAT - FIXED = OK
         CLI   ##TYPE(#2),##BIGNUM
         BE    SFLOBIG             FLOAT - BIG   = OK
         B     ERROR               FLOAT - NONUM = ERROR
SFLOFIX  DS    0H
         LE    #F2,##CDR(,#1)      GET SINGLE FLOAT VALUE 1
         L     #0,##CDR(,#2)       GET FIXED VALUE 2
         LR    #7,#14              SAVE RETURN REGISTER
         #BAS  #14,FIX2FLO         CONVERT FIXED TO FLOAT
         LR    #14,#7              RESTORE RETURN REGISTER
         LRER  #F4,#F0             GET SINGLE FLOAT VALUE 2
         B     COMSFLO2
         SPACE
SFLODFLO DS    0H                  SINGLE FLOAT 1, DOUBLE FLOAT 2
         SDR   #F2,#F2
         LE    #F2,##CDR(,#1)      GET DOUBLE FLOAT VALUE 1
         B     COMDFLO1
SFLOSFLO DS    0H                  SINGLE FLOAT 1, SINGLE FLOAT 2
         LE    #F2,##CDR(,#1)      GET FLOAT VALUE 1
COMSFLO1 DS    0H
         LE    #F4,##CDR(,#2)      GET SINGLE FLOAT VALUE 1
COMSFLO2 DS    0H
         CER   #F2,#F4             COMPARE
         BNHR  #14
         LR    #15,#8
         BR    #14
         EJECT
ARG1DFLO DS    0H                  ARG 1 IS DOUBLE FLOAT
         SPACE
         LD    #F2,8(,#1)          GET DOUBLE FLOAT VALUE 1
*
* CHECK TYPE OF ARG 2
*
         CLI   ##TYPE(#2),##DFLOAT
         BE    DFLODFLO            DFLOAT - DFLOAT = OK
         CLI   ##TYPE(#2),##SFLOAT
         BE    DFLOSFLO            DFLOAT - SFLOAT = OK
         CLI   ##TYPE(#2),##FIXNUM
         BE    DFLOFIX             FLOAT - FIXED = OK
         CLI   ##TYPE(#2),##BIGNUM
         BE    DFLOBIG             FLOAT - BIG   = OK
         B     ERROR               FLOAT - NONUM = ERROR
DFLOFIX  DS    0H
         L     #0,##CDR(,#2)       GET FIXED VALUE 2
         LR    #7,#14              SAVE RETURN REGISTER
         #BAS  #14,FIX2FLO         CONVERT FIXED TO FLOAT
         LR    #14,#7              RESTORE RETURN REGISTER
         LDR   #F4,#F0             GET DOUBLE FLOAT VALUE 2
         B     COMDFLO2
         SPACE
DFLOSFLO DS    0H                  DOUBLE FLOAT 1, SINGLE FLOAT 2
         SDR   #F4,#F4
         LE    #F4,##CDR(,#2)      GET DOUBLE FLOAT VALUE 2
         B     COMDFLO2
DFLODFLO DS    0H                  DOUBLE FLOAT 1, DOUBLE FLOAT 2
COMDFLO1 DS    0H
         LD    #F4,8(,#2)          GET DOUBLE FLOAT VALUE 1
COMDFLO2 DS    0H
         CDR   #F2,#F4             COMPARE
         BNHR  #14
         LR    #15,#8
         BR    #14
         EJECT
ARG1BIG  DS    0H                  ARG1 IS A BIGNUM
         SPACE
*
* CHECK TYPE OF ARG 2
*
         CLI   ##TYPE(#2),##FIXNUM
         BE    CBIGFIX             FIXED - FIXED = OK
         CLI   ##TYPE(#2),##BIGNUM
         BE    CBIGBIG             FIXED - BIG   = OK
         CLI   ##TYPE(#2),##SFLOAT
         BE    CBIGSFLO            FIXED - FLOAT = OK
         CLI   ##TYPE(#2),##DFLOAT
         BE    CBIGDFLO            FIXED - FLOAT = OK
         B     ERROR               ANYTHING ELSE = ERROR
         SPACE
CFIXBIG  DS    0H                  COMPARE FIXNUM TO BIGNUM
         SPACE
         TM    ##VECDAT(#2),X'80'  TEST SIGN OF BIGNUM
         BZR   #14                 IF BIGNUM POSITIVE, FIX NOT GT BIG
         LR    #15,#8              IF BIGNUM NEGATIVE, FIX IS GT BIG
         BR    #14                  SO RETURN T
         SPACE
CBIGFIX  DS    0H                  COMPARE BIGNUM TO FIXNUM
         SPACE
         TM    ##VECDAT(#1),X'80'  TEST SIGN OF BIGNUM
         BOR   #14                 IF BIGNUM NEGATIVE, BIG NOT GT FIX
         LR    #15,#8              IF BIGNUM POSITIVE, BIG IS GT FIX
         BR    #14                  SO RETURN T
         EJECT
CBIGBIG  DS    0H                  COMPARE BIGNUM TO BIGNUM
         SPACE 1
***********************************************************************
*                                                                     *
* THE FOLLOWING CODE DEPENDS ON THESE FACTS:                          *
*                                                                     *
*  (1) ALL BIGNUMS ARE NORMALIZED.                                    *
*  (2) BIGNUMS ARE STORED IN 31-BIT "DIGITS", EACH DIGIT OCCUPYING A  *
*      WORD, WITH THE LEAST SIGNIFICANT WORD LEFTMOST.  I.E. THE      *
*      BIGNUM "DIGITS" ARE STORED "BACKWARDS".                        *
*  (3) NEGATIVE BIGNUMS ARE STORED AS THEIR ABSOLUTE VALUE, EXCEPT    *
*      THAT THE LEAST SIGNIFICANT (LEFTMOST) WORD HAS THE HIGH-ORDER  *
*      BIT SET TO 1 (BUT IT IS NOT TWO'S COMPLEMENT).                 *
*                                                                     *
***********************************************************************
         SPACE 1
         ICM   #4,15,##VECDAT(#1)  TEST SIGN OF BIGNUM 1
         BM    B1NEG               IF BIGNUM 1 NEGATIVE, CHECK BIG# 2
         TM    ##VECDAT(#2),X'80'  BIG 1 IS POSITIVE.  SO...
         BO    TRUE                IF BIGNUM 2 NEGATIVE, RETURN TRUE
*                                  ELSE COMPARE 2 POSITIVE BIGNUMS
         XR    #5,#5               CLEAR INSERT REGISTER
         XR    #7,#7               CLEAR INSERT REGISTER
         ICM   #5,7,1(#1)          GET BIGNUM LENGTH 1
         ICM   #7,7,1(#2)          GET BIGNUM LENGTH 2
         CR    #5,#7               COMPARE LENGTHS
         BLR   #14                 IF FIRST IS SHORTER, B1 < B2
         BH    TRUE                IF FIRST IS LONGER, B1 > B2
         LA    #7,4                OTHERWISE WE HAVE TO COMPARE THEM.
         LCR   #7,#7               SET INCREMENT REGISTER TO -4
         AR    #5,#7               INIT INDEX TO BIGNUM LENGTH - 4
BBPLOOP  DS    0H                  LOOP FROM LAST WORD THRU TO FIRST
         L     #0,##VECDAT(#5,#1)  COMPARE WORD FROM BIGNUM 1
         C     #0,##VECDAT(#5,#2)  WITH WORD FROM BIGNUM 2
         BH    TRUE                IF GREATER, B1 > B2
         BLR   #14                 IF LESS, B1 < B2
         BXH   #5,#7,BBPLOOP       =, DECREMENT INDEX AND LOOP UNTIL...
         BR    #14                 NO MORE WORDS: ALL =, B1 NOT GT B2
         SPACE
B1NEG    DS    0H                  BIGNUM 1 IS NEGATIVE
         ICM   #6,15,##VECDAT(#2)  IF BIGNUM 2 IS POSITIVE
         BNMR  #14                 THEN RETURN FALSE. ELSE...
*                                  COMPARE 2 NEGATIVE BIGNUMS
         XR    #5,#5               CLEAR INSERT REGISTER
         XR    #7,#7               CLEAR INSERT REGISTER
         ICM   #5,7,1(#1)          GET BIGNUM LENGTH 1
         ICM   #7,7,1(#2)          GET BIGNUM LENGTH 2
         CR    #5,#7               COMPARE LENGTHS
         BL    TRUE                IF FIRST IS SHORTER, B1 > B2
         BHR   #14                 IF FIRST IS LONGER, B1 < B2
         LA    #7,4                OTHERWISE WE HAVE TO COMPARE THEM.
         LCR   #7,#7               SET INCREMENT REGISTER TO -4
         AR    #5,#7               INIT INDEX TO BIGNUM LENGTH - 4
BBNLOOP  DS    0H                  LOOP FROM LAST WORD THRU TO FIRST
         L     #0,##VECDAT(#5,#1)  COMPARE WORD FROM BIGNUM 1
         CL    #0,##VECDAT(#5,#2)  WITH WORD FROM B2 (IGNORE SIGN BIT)
         BHR   #14                 IF GREATER, B1 < B2
         BL    TRUE                IF LESS, B1 > B2
         BXH   #5,#7,BBNLOOP       =, DECREMENT INDEX AND LOOP UNTIL...
         BR    #14                 NO MORE WORDS: ALL =, B1 NOT GT B2
         SPACE 1
TRUE     DS    0H
         LR    #15,#8              TRUE... RESULT IS T
         BR    #14
         EJECT
*
* --- DELETE THIS CODE FOR FULL COMMON LISP
*
ARG1STR  DS    0H                  ARG 1 IS STRING
*
* CHECK TYPE OF ARG 2
*
         CLI   ##TYPE(#2),##STRING
         BE    COMPSS              STRING - STRING IS OK
         CLI   ##TYPE(#2),##SYMBOL
         BE    COMPSA              STRING - SYMBOL IS OK
         B     ERROR               ALL OTHERS ARE NO GOOD
         SPACE
ARG1ALF  DS    0H                  ARG 1 IS SYMBOL
*
* CHECK TYPE OF ARG 2
*
         CLI   ##TYPE(#2),##STRING
         BE    COMPAS              SYMBOL - STRING IS OK
         CLI   ##TYPE(#2),##SYMBOL
         BE    COMPAA              SYMBOL - SYMBOL IS OK
         B     ERROR               ALL OTHERS ARE NO GOOD
         SPACE
COMPAS   DS    0H                  SYMBOL-TO-STRING COMPARE
         L     #1,##PNAME(,#1)     GET PRINT NAME OF SYMBOL 1
         B     COMPSS              COMPARE STRINGS
         SPACE
COMPSA   DS    0H                  STRING-TO-SYMBOL COMPARE
         L     #2,##PNAME(,#2)     GET PRINT NAME OF SYMBOL 2
         B     COMPSS              COMPARE STRINGS
         SPACE
COMPAA   DS    0H                  SYMBOL-TO-SYMBOL COMPARE
         L     #1,##PNAME(,#1)     GET PRINT NAME OF SYMBOL 1
         L     #2,##PNAME(,#2)     GET PRINT NAME OF SYMBOL 2
******** B     COMPSS              COMPARE STRINGS
         SPACE
COMPSS   DS    0H                  STRING-TO-STRING COMPARE
         SPACE 1
         XR    #5,#5               CLEAR INSERT REGISTER
         XR    #7,#7               CLEAR INSERT REGISTER
         ICM   #5,7,1(#1)          GET STRING LENGTH 1
         ICM   #7,7,1(#2)          GET STRING LENGTH 2
         LA    #4,##VECDAT(,#1)    POINT TO STRING TEXT 1
         LA    #6,##VECDAT(,#2)    POINT TO STRING TEXT 2
*
*                                  #4 = ADDRESS OF ARG 1 DATA
*                                  #5 = LENGTH OF ARG 1 DATA
*                                  #6 = ADDRESS OF ARG 2 DATA
*                                  #7 = LENGTH OF ARG 2 DATA
*
         CR    #5,#7               COMPARE LENGTHS
         BL    SHORTCOM            IF FIRST IS SHORTER, GO HANDLE THAT
         BH    LONGCOM             IF FIRST IS LONGER, GO HANDLE THAT
         CLCL  #4,#6               OTHERWISE JUST DO COMPARE
         BNHR  #14                 ARG1 LE ARG2: RETURN NIL
         LR    #15,#8              ARG1 GT ARG2: RETURN T
         BR    #14
         SPACE 1
SHORTCOM DS    0H                  ARG1 SHORTER THAN ARG2
         LR    #7,#5               USE SHORT LENGTH FOR COMPARE
         CLCL  #4,#6               DO COMPARE
         BNHR  #14                 ARG1 LE ARG2: RETURN NIL
         LR    #15,#8              ARG1 GT ARG2: RETURN T
         BR    #14
         SPACE 1
LONGCOM  DS    0H                  ARG1 LONGER THAN ARG2
         LR    #5,#7               USE SHORT LENGTH FOR COMPARE
         CLCL  #4,#6               DO COMPARE
         BLR   #14                 ARG1 LT ARG2: RETURN NIL
         LR    #15,#8              ARG1 GE ARG2: RESULT IS T
         BR    #14
*
* --- END CODE TO DELETE FOR FULL COMMON LISP
*
         EJECT
         COPY  FIX2FLO             FIXED TO FLOAT CONVERSION ROUTINE
         EJECT
CBIGSFLO DS    0H
CBIGDFLO DS    0H
SFLOBIG  DS    0H
DFLOBIG  DS    0H
         LR    #5,#1
         LR    #6,#2
         #ERR  2,'ZIL4101 GREATERP: Float-to-bignum compare not supportX
               ed.',PREFIX=NO,SIGNAL=NO
         B     BOMBOUT
ERROR    DS    0H                  INVALID TYPES
         LR    #5,#1
         LR    #6,#2
BOMBOUT  #ERR  'Type conflict, GREATERP cannot compare ',              X
               (#5),' and ',(#6)
         SPACE 1
         LTORG
         END
