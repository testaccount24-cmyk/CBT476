         TITLE 'LOGCOUNT - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* LOGCOUNT takes one integer argument.                                *
*                                                                     *
* Common Lisp complete.                                               *
*                                                                     *
* Scalar and vector versions.                                         *
*                                                                     *
***********************************************************************
         GBLB  &ZILVF
LOGCOUNT #ZBEG MINARGS=1,MAXARGS=1,NAME='LOGCOUNT'
*---------------------------------------------------------------------*
* Calculate the number of 1 bits in a positive fixnum, or the number  *
* of 0 bits in a negative fixnum.  This is done in a way that works   *
* for both cases by simply counting the number of overflows when      *
* shifting every significant bit to the left with an arithmetic shift *
* instruction.                                                        *
*                                                                     *
* A scheme using the TR instruction is probably considerably          *
* faster, though this may involve extra time to load the cache        *
* containing the TR table for short bignums, relatively speaking.     *
*                                                                     *
* For the vector facility version, the vector facility is always      *
* used, in which case even the fixnum bit count must special-case     *
* with regard to the sign.  For bignum calculations, the negative     *
* bignum case adds an additional complication, since the 0 bits must  *
* be counted as if the representation is in 2's complement, which it  *
* is not.  The scheme is then to count zeroes from the right until    *
* you hit a 1.  Then you count the 1's to the left of the rightmost   *
* 1.  This involves an intermediate step for special handling of      *
* the word containing the rightmost 1 of the bignum.                  *
*---------------------------------------------------------------------*
         AIF   (&ZILVF).VFIX
*---------------------------------------------------------------------*
* Scalar version.                                                     *
*---------------------------------------------------------------------*
         L     #7,0(,#1)           Load argument
         CLI   ##TYPE(#7),##FIXNUM Is arg a fixnum?
         BNE   NFIX                Branch if not fixed
*
FIX      L     #7,##CDR(,#7)       Load fixnum
         XR    #5,#5               Clear the bit-counter
         LA    #6,31               # of sifnificant fixnum bits
FIXLOOP  SLA   #7,1                Shift out a bit on the left
         BNO   NOFIXBIT            Did we get overflow?
         LA    #5,8(,#5)           No overflow, one fewer bit to count
NOFIXBIT BCT   #6,FIXLOOP          More bits to test?
         LA    #15,#SFT(#5)        Compute small fixnum address
         BR    #14                 Return with small fixnum
*
NFIX     CLI   ##TYPE(#7),##BIGNUM Is arg a bignum?
         BNE   ERROR1              Branch if not integer
         TM    ##VECDAT(#7),X'80'  Test sign of bignum
         BO    BIGM                Branch if negative bignum
         XR    #2,#2               Clear bit counter
         LA    #3,##VECDAT         Starting offset of WORDLOOP
         LA    #4,4                Increment (bytes in a word)
         XR    #5,#5               Clear for load of 3-byte length
         ICM   #5,B'0111',1(#7)    Load bignum length in bytes
WORDLOOP L     #1,##VECDAT-4(#3,#7) Load word with bits to be counted
         LA    #6,31               Number of bits in a word to test
BITLOOP  SLA   #1,1                Shift to see if we get overflow
         BNO   NOBIGBIT            No overflow?  Then, don't count bit
         BCTR  #2,0                Count bit (in a negative way).
NOBIGBIT BCT   #6,BITLOOP          More bits to check?
         BXLE  #3,#4,WORDLOOP      More words for to bit-count?
*
         LCR   #2,#2               Make the count positive
         CL    #2,ZLCSFTHI         Compare with largest SFT?
         BH    FCONS               Not a small fixnum?
FSMALL   SLA   #2,3                Create offset in SFT
         LA    #15,#SFT(#2)        Get address of small fixnum
         BR    #14
*
BIGM     LA    #2,##VECDAT(,#7)    Start of bignum for CLCL
         XR    #3,#3               Clear for loading bignum length
         ICM   #3,B'0111',1(#7)    Load the bignum length
         LA    #4,=X'80'           Point to pattern of the minus bit
         LA    #5,1                Pad byte=0, length=1
         CLCL  #2,#4               Search for word with first 1 bit
         N     #2,=X'FFFFFFFC'     Point to nonzero word
         L     #5,0(,#2)           Load first nonzero word
         N     #5,=X'7FFFFFFF'     Remove sign bit if LS word of bignum
         LCR   #1,#5               Complement word with rightmost 1
         LR    #3,#2               Make extra copy pointer to 1st 1
         SR    #2,#7               (#2-#7-4)*31/4= number of 0 bits
         SH    #2,=H'4'            -4, because of the 4-byte header
         MH    #2,=H'-31'          *31, also make it negative bit count
         SRA   #2,2                /4, number of bytes per word
         LA    #6,31               Number of bits to test in word
BMULOOP  SLA   #1,1                Shift out one bit, 0 will overflow
         BNO   BMUNOBIT            Branch if no zero bit to count
         BCTR  #2,0                Count 0-bit
BMUNOBIT BCT   #6,BMULOOP          Not finished with all 31 bits?
         SLR   #3,#7               Absolute address to bignum offset
         LA    #4,4                Increment (bytes/word)
         XR    #5,#5               Clear for load of 3-byte length
         ICM   #5,B'0111',1(#7)    Load bignum length in bytes
         BXLE  #3,#4,WORDLOOP      Words left of word with leftmost 1?
*
         LCR   #2,#2               Make the count positive
         CL    #2,ZLCSFTHI         Compare with largest SFT?
         BNH   FSMALL              Not a small fixnum?
*
FCONS    LR    #7,#14              Save return address
         #MKAT FIXED               Make fixnum
         BR    #7                  Return to caller
*=====================================================================*
         AGO   .CONTIN1
.VFIX    ANOP
*---------------------------------------------------------------------*
*  Vector version of LOGCOUNT.                                        *
*---------------------------------------------------------------------*
         L     #7,0(,#1)           Load argument
         VRCL  0                   Clear vector interrupt index
         CLI   ##TYPE(#7),##FIXNUM Is arg a fixnum?
         BNE   NFIX                Branch if not fixed
*
FIX      LA    #6,##CDR(,#7)       Make pointer to fixnum quantity
         LA    #4,32               Number of bits to test in vec loop
         XR    #5,#5               Clear the 1-bit count
         VLVCU #4                  Set vector count to # of bits
FIXVLOOP VLVM  #6                  Load a section of bits
         VCOVM #5                  Count the 1-bits
         VLVCU #4                  Update vector count
         BC    3,FIXVLOOP          More bits?
         SLA   #5,3                Convert to displacement in SFT
         TM    ##CDR(#7),X'80'     Test sign of fixnum
         LA    #15,#SFT(#5)        Load address of small fixnum
         BNOR  #14                 Return 1-count if positive fixnum
*
         LCR   #5,#5               Take negative of offset in SFT
         LA    #15,#SFT+32*8(#5)   Add to address of 32 (total bits)
         BR    #14                 Return 0-count of negative fixnum
*
NFIX     CLI   ##TYPE(#7),##BIGNUM Is arg a bignum?
         BNE   ERROR1              Branch if not integer
         TM    ##VECDAT(#7),X'80'  Test sign of bignum
         BO    BIGM                Bignum is negative
         XR    #3,#3               Clear for loading bignum length
         XR    #2,#2               Clear bit counter
         ICM   #3,B'0111',1(#7)    Load bignum length
         SLA   #3,3                Bytes x 8 = bits in bignum
         LA    #4,##VECDAT(,#7)    Get address of first bignum word
         VLVCU #3                  Set up vector loop counter
BPLOOP   VLVM  #4                  Load a chunk of bignum bits
         VCOVM #2                  Count the 1-bits in the chunk
         VLVCU #3                  Decrement element count, set sec siz
         BC    3,BPLOOP            Not done with all bits?
         CL    #2,ZLCSFTHI         Compare with largest SFT?
         BH    FCONS               Not a small fixnum?
         SLA   #2,3                Create offset in SFT
         LA    #15,#SFT(#2)        Get address of small fixnum
         BR    #14
*
FCONS    LR    #7,#14              Save return address
         #MKAT FIXED               Make fixnum
         BR    #7                  Return to caller
*
BIGM     LA    #2,##VECDAT(,#7)    Start of bignum for CLCL
         XR    #3,#3               Clear for loading bignum length
         ICM   #3,B'0111',1(#7)    Load the bignum length
         LA    #4,=X'80'           Point to pattern of the minus bit
         LA    #5,1                Pad byte=0, length=1
         CLCL  #2,#4               Search for word with first 1 bit
         N     #2,=X'FFFFFFFC'     Point to nonzero word
         L     #5,0(,#2)           Load first nonzero word
         N     #5,=X'7FFFFFFF'     Remove sign bit if LS word of bignum
         LCR   #5,#5               Complement word with rightmost 1
         ST    #5,ZLCDBL           Store for later bit-count by VF
         LR    #5,#2               Make extra copy pointer to 1st 1
         SR    #2,#7               (#2-#7-4)*31/4= number of 0 bits
         SH    #2,=H'4'            -4
         MH    #2,=H'31'           *31
         SRA   #2,2                /4
         LA    #6,32               Number of bits to check
         LA    #4,ZLCDBL           Address of complemented temp word
         VLVCU #6                  Set section size to no. of bits
BMWLOOP  VLCVM #4                  We count 0's, so load complement
         VCOVM #2                   before counting, add count to #5
         VLVCU #6                  Set section size to no. of bits
         BC    3,BMWLOOP           More bit vector sections in word?
         BCTR  #3,0                Round length left to lower multiple
         N     #3,=X'FFFFFFFC'      of 4, that is, only rest of bignum
         SLA   #3,3                Convert bytes-remaining to bits
         LA    #5,4(,#5)           Set to word after rightmost "1"
         VLVCU #3                  Set up vector loop counter
BMLOOP   VLVM  #5                  Load a chunk of bignum bits
         VCOVM #2                  Count the 1-bits in the chunk
         VLVCU #3                  Decrement element count, set sec siz
         BC    3,BMLOOP            Not done with all bits?
         CL    #2,ZLCSFTHI         Compare with largest SFT?
         BH    FCONS               Not a small fixnum?
         SLA   #2,3                Create offset in SFT
         LA    #15,#SFT(#2)        Get address of small fixnum
         BR    #14                 Return with bit-count of neg bignum
*=====================================================================*
.CONTIN1 ANOP
*
         DROP  #15
         USING LOGCOUNT,#3
         SPACE 1
ERROR1   LR    #3,#15
         #ERR  'Argument to LOGCOUNT not an integer - ',(#7)
         SPACE 1
         LTORG
         END
