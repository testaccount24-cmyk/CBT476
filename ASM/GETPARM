         TITLE 'GETPARM - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* GETPARM TAKES TWO (OPTIONAL) ARGUMENTS:                             *
*                                                                     *
* (1) WHETHER (T) OR NOT (NIL) TO INTERN THE RESULTING ATOM.          *
* (2) WHETHER (T) OR NOT (NIL) TO CONVERT TO NUMERIC FORMAT.          *
*                                                                     *
***********************************************************************
*                                                                     *
*    IF THE PARM DATA BEGINS WITH A BACKSLASH "\", SKIP OVER          *
*    ALL DATA UP TO THE NEXT BACKSLASH.  THIS IS DESIGNED TO          *
*    ALLOW INITIALIZATION SPECS TO BE PASSED TO ZIL.                  *
*                                                                     *
***********************************************************************
*                                                                     *
* Note:  This is an MVS-dependent function.  Actually, it is kind of  *
*        obsolete, since there should be a new function coded that    *
*        returns the PARM stuff as a STRING rather than a symbol.     *
*                                                                     *
***********************************************************************
         GBLB  &ZILTSO
         #ZSYS
         EJECT
GETPARM  #ZBEG MINARGS=0,MAXARGS=2,NAME='GETPARM'
         #ZPDS 20                  DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
         SPACE
         L     #1,4(,#13)          GET ADDRESS OF ZLBSAVE (COM'S HSA)
         L     #1,4(,#1)           GET ADDRESS OF ZILMAIN'S SAVE AREA
         L     #1,24(,#1)          GET ORIGINAL PARM POINTER
         AIF   (NOT &ZILTSO).PGMCALL
*----------------------------------------------------------------------
* TSO ONLY
*----------------------------------------------------------------------
         TM    0(#1),X'80'         IF THERE IS 1 PARAMETER
         BO    PGMCALL              THEN WE WERE CALLED AS A PROGRAM
         TM    4(#1),X'80'         IF THERE ARE 2 PARAMETERS
         BO    PGMCALL              THEN WE WERE CALLED AS A PROGRAM
         TM    8(#1),X'80'         IF THERE ARE 3 PARAMETERS
         BO    PGMCALL              THEN WE WERE CALLED AS A PROGRAM
*                                  ELSE WE WERE CALLED AS A COMMAND
         USING CPPL,#1
         L     #2,CPPLCBUF         GET ADDRESS OF COMMAND BUFFER
         LH    #0,0(,#2)           GET LENGTH OF COMMAND BUFFER
         AR    #0,#2               POINT TO END OF COMMAND BUFFER
         LH    #1,2(,#2)           GET OFFSET OF COMMAND TEXT
         LA    #1,4(#1,#2)         POINT TO START OF COMMAND TEXT
         SR    #0,#1               GET LENGTH OF COMMAND TEXT
         B     GOTIT
*----------------------------------------------------------------------
* END TSO ONLY
*----------------------------------------------------------------------
.PGMCALL ANOP  ,
PGMCALL  DS    0H
         L     #1,0(,#1)           GET ADDRESS OF PARM STRING
         LH    #0,0(,#1)           GET LENGTH OF PARM STRING
         LA    #1,2(,#1)           POINT TO TEXT OF PARM
GOTIT    DS    0H                  #1 = ADDRESS, #0 = LENGTH
* GET THE TRUE PARM, NOT INCLUDING LEADING DATA ENCLOSED IN BACKSLASHES
         LTR   #0,#0               IF PARM LENGTH IS ALREADY ZERO
         BZ    GOTREAL             THEN THIS IS IT
         CLI   0(#1),C'\'          IF PARM DOESN'T BEGIN WITH BACKSLASH
         BNE   GOTREAL             THEN THIS IS IT
         LA    #1,1(,#1)           ELSE SKIP OVER INITIAL BACKSLASH
         BCTR  #0,0                DECREMENT PARM LENGTH
BSLOOP   DS    0H                  LOOP TO FIND TERMINATING BACKSLASH
         LTR   #0,#0               IF PARM LENGTH DOWN TO ZERO
         BZ    GOTREAL             THEN STOP SCANNING, RETURN ||
         CLI   0(#1),C'\'          IF BACKSLASH FOUND
         BE    BSEND               THEN PROCESS REMAINDER OF STRING
         LA    #1,1(,#1)           ELSE INCREMENT POINTER
         BCTR  #0,0                DECREMENT LENGTH
         B     BSLOOP
BSEND    DS    0H                  WE FOUND TERMINATING BACKSLASH
         LA    #1,1(,#1)           POINT TO DATA FOLLOWING BACKSLASH
         BCTR  #0,0                DECREMENT LENGTH
GOTREAL  DS    0H                  #1 = ADDRESS, #0 = LENGTH
* NOW WE GOT THE TRUE PARM
         L     #2,0(,#11)          GET ARG 1 = WHETHER TO INTERN IT
         L     #3,4(,#11)          GET ARG 2 = WHETHER TO FORMAT IT
         L     #15,ZLCABLD         GET ADDRESS OF ZILABLD
         LA    #4,20(,#11)         GET CURRENT STACK POINTER FOR CONS
         #BASR #14,#15             CALL ZILABLD TO BUILD THE ATOM
*                                   MAKING #15 POINT TO NEW ATOM
         SPACE
RETURN   DS    0H
         SPACE 1
         #ZRET ,                   RESTORE REGISTERS AND RETURN
         SPACE 1
         LTORG
         EJECT
         AIF   (NOT &ZILTSO).AFTCPPL
*----------------------------------------------------------------------
* TSO ONLY
*----------------------------------------------------------------------
         IKJCPPL
*----------------------------------------------------------------------
* END TSO ONLY
*----------------------------------------------------------------------
.AFTCPPL ANOP  ,
         SPACE
         END
