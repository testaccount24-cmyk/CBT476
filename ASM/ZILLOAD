         TITLE 'ZILLOAD - ZIL 1.3 SUBROUTINE LOADER'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* THIS MODULE IS INVOKED BY THE EVAL/APPLY PROCESS WHEN A FUNCTION    *
* NAME DOES NOT HAVE A FUNCTION DEFINITION ASSOCIATED WITH IT.  IT    *
* ISSUES A SYSTEM LOAD FOR THE FUNCTION OUT OF THE TASK LIBRARY       *
* ASSOCIATED WITH IT AND RETURNS A COMPILED CODE OBJECT AS THE VALUE  *
* (THIS IS A SPECIAL TYPE OF LISP ENTITY WHICH IS PROCESSED VIA THE   *
* ZILXSUB AND ZILXFUN FUNCTIONS AND IS GENERALLY STORED AS THE VALUE  *
* OF THE "SUBR" PROPERTY).                                            *
*                                                                     *
***********************************************************************
*                                                                     *
* TWO ALTERNATE ENTRY POINTS EXIST FOR THIS MODULE (THESE ARE ONLY    *
* INTERNAL AND ARE THEREFORE NOT REQUIRED TO BE MADE KNOWN TO THE     *
* LINKAGE EDITOR):                                                    *
*                                                                     *
* ZILLOADN - USED WHEN AN 8-CHARACTER MODULE NAME IS PASSED AND THE   *
*            LOAD MODULE MUST BE LOADED.                              *
*                                                                     *
* ZILLOADA - USED WHEN THE LOAD MODULE ADDRESS IS KNOWN AND THE       *
*            EXTERNAL REFERENCES MUST BE RESOLVED.                    *
*                                                                     *
***********************************************************************
*                                                                     *
* THIS ROUTINE IS RECURSIVE AND THEREFORE USES STACK SPACE.           *
*                                                                     *
* IT IS NOT REENTRANT, BUT IT IS REUSABLE.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* A vector table of commonly used functions (most likely to be linked *
* in with the interpreter) used to be incorporated into this module.  *
* It is now a separate module ZILMODS.                                *
*                                                                     *
***********************************************************************
         GBLB  &ZILVPS
         #ZSYS
         EJECT
ZILLOAD  #ZBEG MINARGS=1,MAXARGS=1,NAME='ZILLOAD'
         #ZPDS 16                  DEFINE INITIAL STACK SPACE
         #ZSAV ,                   SAVE REGISTERS
         SPACE 1
         L     #1,0(,#11)          GET FIRST PARM
         ST    #1,16(,#11)         STORE AS ARG
         L     #15,@LOAD1          GET ADDRESS OF MAIN LOADER
         LA    #1,16(,#11)         POINT TO ARG ON STACK
         OI    ZLCIFLGS,ZLCISMC    INDICATE NON-INTERRUPTIBLE ZIL CODE
         #BASR #14,#15             CALL THE MAIN LOADER
         NI    ZLCIFLGS,255-ZLCISMC TURN OFF NON-INTERRUPTIBILITY FLAG
         TM    ZLCIFLGS,ZLCIATTN   If attention interrupt occurred
         BOR   #13                 then go to handle it
         SPACE 1
         CR    #15,#10             IF WE'RE RETURNING NIL,
         BE    JUSTRET             THEN DON'T CONS UP ANYTHING.
         LR    #1,#15              ARG 1 TO CONS = POINTER TO CODE
         XR    #2,#2               ARG 2 TO CONS = ZEROES
         L     #15,ZLCCONS         GET ADDRESS OF CONS
         LA    #0,16(,#11)         SET CURRENT STACK POINTER FOR CONS
         #BASR #14,#15             CALL CONS TO MAKE A SUBR OBJECT
         MVI   ##TYPE(#15),##SUBR  SET TYPE = ATOMIC AND SUBR
*
* IN FUTURE, SET OTHER TYPE BITS BASED ON WHETHER THE COMPILED CODE
* OBJECT IS SUBR, FSUBR, MSUBR, OR LSUBR.  IGNORE FOR NOW.
*
JUSTRET  DS    0H
         SPACE 1
         #ZRET ,                   RESTORE REGISTERS AND RETURN
         SPACE 2
@LOAD1   DC    A(ZILLOAD1)         ADDRESS OF MAIN LOADER
         EJECT
ZILLOAD1 DS    0H
         NI    ZLCLDFLG,255-ZLCLDGAD-ZLCLDGNM INDICATE NORMAL ENTRY
         LR    #15,#12             COPY BASE REG FROM FIRST LEVEL
         B     START-ZILLOAD(,#15)
         SPACE 2
ZILLOADN DS    0H
         OI    ZLCLDFLG,ZLCLDGNM   INDICATE ENTRY VIA ZILLOADN W.NAME
         NI    ZLCLDFLG,255-ZLCLDGAD
         LR    #15,#12             COPY BASE REG FROM FIRST LEVEL
         B     START-ZILLOAD(,#15)
         SPACE 2
ZILLOADA DS    0H
         OI    ZLCLDFLG,ZLCLDGAD   INDICATE ENTRY VIA ZILLOADA W.ADDR
         NI    ZLCLDFLG,255-ZLCLDGNM
         LR    #15,#12             COPY BASE REG FROM FIRST LEVEL
         B     START-ZILLOAD(,#15)
         EJECT
START    DS    0H                  NOTE REG 15 -> TRUE ENTRY POINT
         DROP  #12                 (RESTORED BY #ZSAV MACRO)
         USING *,15 DUMMY DUMMY... DUMMY USING FOR #ZSAV MACRO
         #ZPDS 32                  DEFINE STACK SPACE REQUIRED
         #ZSAV ,                   SAVE REGISTERS
         SPACE 2
         TM    ZLCLDFLG,ZLCLDGAD   IF ENTRY VIA ZILLOADA (GOT ADDRESS)
         BO    GOTADDR1            THEN PARM 1 -> LOAD ADDRESS
         TM    ZLCLDFLG,ZLCLDGNM   IF ENTRY VIA ZILLOADN (GOT NAME)
         BO    GOTNAME2            THEN PARM 1 -> NAME
         SPACE
         L     #2,0(,#11)          GET ADDRESS OF ARG 1 = ALPHA ATOM
         CLI   ##TYPE(#2),##STRING IF ARG 1 IS A STRING
         BE    ISALPHA             THEN OK
         CLI   ##TYPE(#2),##SYMBOL IF ARG 1 IS A SYMBOL
         BNE   BADARG1             THEN
         L     #2,##PNAME(,#2)      GET ITS PRINT NAME
ISALPHA  DS    0H
         XR    #15,#15             CLEAR INSERT REGISTER
         MVI   LNAME,C' '          CLEAR LOAD MODULE NAME TO BLANKS
         MVC   LNAME+1(7),LNAME
         ICM   #15,7,1(#2)         GET LENGTH OF STRING
         BZ    FINDIT              IF ZERO, USE ALL-BLANK NAME
         CH    #15,=H'8'           IF MORE THAN 8 CHARACTER
         BH    BADNAME             THEN ERROR
         BCTR  #15,0               REDUCE FOR EXECUTE
         EX    #15,MOVENAME        MOVE STRING TO LOAD MODULE NAME
         B     FINDIT
         SPACE 1
MOVENAME MVC   LNAME(0),##VECDAT(#2) EXECUTED - MOVE STRING TO NAME
         SPACE 1
BADARG1  DS    0H                  ARG NOT A STRING OR SYMBOL
         #TPUT 1,ZIL1009
         LR    #15,#10
         B     RETURN
         SPACE 1
BADNAME  DS    0H                  NAME WRONG LENGTH
         #TPUT 0,ZIL1005
         LR    #15,#10
         B     RETURN
         SPACE 1
GOTNAME2 DS    0H                  ENTRY VIA ZILLOADN - PARM1 -> NAME
         L     #2,0(,#11)          GET POINTER TO NAME
         MVC   LNAME(8),0(#2)      MOVE NAME TO BLDL LIST
         SPACE 1
FINDIT   DS    0H
         EJECT
***********************************************************************
*                                                                     *
* FIRST SEARCH THE TABLE OF IN-LINE CODE AND LINKED-IN MODULES TO SEE *
* IF THE REQUESTED MODULE IS THERE.                                   *
*                                                                     *
* Note: This is a binary search that assumes that the length of each  *
*       table entry is 16.                                            *
*                                                                     *
***********************************************************************
         SPACE 1
         XR    #3,#3               Clear entry table pointer
         L     #0,=X'FFFFFFF0'     Constant to AND addresses with
         L     #15,ZLCMODS         Address of ZILMODS table
         USING ZMOD,#15
         L     #1,ZMODSTB          Address of first module table entry
         L     #15,ZMODETB         Address of end of module table
         DROP  #15
MODLOOP  DS    0H
         LR    #2,#15              Get number of entries being searched
         SR    #2,#1               Get distance between first & last
         BM    MODNF               If negative, search over, not found
         SRL   #2,1                Halve it
         NR    #2,#0               Round down to multiple of 16
         BZ    MODCOMP             If zero, only 1 entry, compare it
         AR    #2,#1               Convert to address of middle entry
         CLC   LNAME(8),4(#2)      Compare our name with entry
         BE    MODGOT              If equal, we got the module already
******** BL    MODLT               If less, repeat with lower half
         BH    MODGT               If greater, repeat with upper half
MODLT    DS    0H                  Here if our name less than entry
         LR    #15,#2              Reset upper bound of search
         B     MODLOOP             Continue search
MODGT    DS    0H                  Here if our name greater than entry
         LR    #1,#2               Reset lower bound of search
         B     MODLOOP             Continue search
MODCOMP  DS    0H                  Here if only one entry in table
         LR    #2,#1               Point to the only entry
         CLC   LNAME(8),4(#2)      Compare our name with only entry
         BNE   MODNF               If not equal, it's not found
MODGOT   DS    0H                  FOUND IN TABLE - WE MIGHT HAVE IT
         ICM   #4,15,0(#2)         PICK UP ADDRESS OF CODE
         BNZ   RESOLVE             IF RESOLVED, GO PROCESS IT.  ELSE...
* Entry found but no module loaded...
         LR    #3,#2               Set pointer to entry to be filled in
MODNF    DS    0H                  NOT FOUND IN TABLE - SEARCH SYSTEM
         EJECT
***********************************************************************
*                                                                     *
* THEN, SEARCH THE LOAD LIST OF THE CURRENT TASK TO SEE IF THE MODULE *
* IS ALREADY LOADED.                                                  *
*                                                                     *
***********************************************************************
*                                                                     *
* In the future, we should maintain our own queue of loaded ZIL       *
* modules instead.  In that way we can invoke a ZIL process           *
* recursively without fear of failure, even if not subtasking.        *
*                                                                     *
***********************************************************************
         SPACE 1
         L     #15,X'21C'          ADDRESS OF CURRENT TCB
         ICM   #15,15,X'24'(#15)   TCBLLS: ADDRESS OF LOAD LIST
LLSLOOP  DS    0H                  IF NO MORE LOAD LIST ENTRIES
         BZ    NOTLDED             THEN EXIT - NOT IN STORAGE
         L     #14,4(,#15)         GET ADDRESS OF CDE FOR LLS ENTRY
         CLC   8(8,#14),LNAME      IF MODULE NAME MATCHES
         BE    INSTOR              THEN MODULE IS IN STORAGE
         ICM   #15,15,0(#15)       ELSE GET NEXT LOAD LIST ENTRY
         B     LLSLOOP
INSTOR   DS    0H                  #14 -> CDE ENTRY FOR MODULE
         L     #4,X'10'(,#14)      PICK UP ENTRY POINT
         B     RESOLVE             GO TO RESOLVE EXTERNAL REFERENCES
NOTLDED  DS    0H                  NOT IN LOAD LIST - TRY BLDL
*
* DO BLDL TO SEE IF IT EXISTS IN LIBRARY.  NOTE THAT THE MODULE
* MUST BE FOUND IN THE CURRENT TASK LIBRARY (OR STEPLIB IN BATCH).
* ON TSO THIS WILL BE THE LIBRARY SPECIFIED ON THE CALL COMMAND.
*
         BLDL  0,BLDLLIST
         B     BLDLRET(#15)
BLDLRET  B     BLDL0
         B     BLDL4
* BLDL RETURN CODE 8 - SOMETHING IS WRONG
         NI    ZLCIFLGS,255-ZLCISMC  CAN'T BE NONINTERRUPTIBLE ANYMORE
         TM    ZLCIFLGS,ZLCIATTN   If attention interrupt occurred
         BOR   #13                 then go to handle it
         LR    #2,#0               GET REASON CODE IN REG 2
         B     BLDL8(#2)
BLDL8    B     BLDL8R0
         B     BLDL8R4
         #TPUT 2,ZIL1008           BLDL RC=8, REASON=8
         B     BLOWUP
BLDL8R0  #TPUT 2,ZIL1006           BLDL RC=8, REASON=0
         B     BLOWUP
BLDL8R4  #TPUT 2,ZIL1007           BLDL RC=8, REASON=4
         B     BLOWUP
         SPACE 1
BLDL4    DS    0H                  BLDL RC=4 - LOAD MODULE NOT FOUND
         TM    ZLCLDFLG,ZLCLDGNM   IF  ENTRY VIA ZILLOADN W.NAME
         BNO   NBYNAME             THEN
         MVC   ZIL1002+8(8),LNAME  MOVE FUNCTION NAME INTO MESSAGE
         #TPUT 2,ZIL1002           SAY FUNCTION NOT FOUND
         B     RETNIL              ELSE
NBYNAME  DS    0H
         MVC   ZIL1001+8(8),LNAME  MOVE FUNCTION NAME INTO MESSAGE
         #TPUT 1,ZIL1001           SAY FUNCTION NOT FOUND
         B     RETNIL              RETURN NIL
BLDL0    DS    0H
         AIF   (&ZILVPS).NCLIZ2
         CLI   Z,2                 MODULE MUST BE IN JOB-/STEP-/TASKLIB
         BNE   BLDL4               OTHERWISE PRETEND IT WASN'T FOUND
.NCLIZ2  ANOP
         LOAD  DE=LNAME,ERRET=LOADERR
         LR    #4,#0               GET ENTRY POINT
* DISPLAY MESSAGE UPON SUCCESSFUL LOADING
         MVC   NAME1010(8),LNAME
         STCM  #4,15,ADDR1010
         NI    ADDR1010,B'01111111' CLEAR HIGH ORDER BIT OF ADDRESS
         UNPK  ADDR1010(9),ADDR1010(5)
         TR    ADDR1010(8),TRTBL
         MVI   ADDR1010+8,C'.'
         #TPUT 0,ZIL1010           DISPLAY "LOADED AT..." MESSAGE
         B     RESOLVE             GO TO RESOLVE EXTERNAL REFERENCES
         SPACE
GOTADDR1 DS    0H                  ENTRY VIA ZILLOADA - ALREADY HAVE IT
         L     #4,0(,#11)          PARM IS POINTER TO CODE
******** B     RESOLVE             GO TO RESOLVE EXTERNAL REFERENCES
         SPACE
RESOLVE  DS    0H                  RESOLVE EXTERNAL REFERENCES
         STCM  #4,B'1000',TESTBYTE TEST HIGH-ORDER BYTE OF LOAD MODULE
         NI    TESTBYTE,X'7F'      TURN OFF AMODE BIT
         BNZ   BADRMODE            IF RMODE=ANY, ERROR
         SPACE 1
         LTR   #3,#3               If there is a module entry to fill
         BZ    NOFILLEN            then
         ST    #4,0(,#3)            store address into our table
NOFILLEN DS    0H
         SPACE 1
*
* FOR EACH LOADED MODULE, IF THERE ARE ANY UNRESOLVED EXTERNAL
* REFERENCES THEY ARE TO BE RESOLVED DYNAMICALLY.  THIS IS A
* RECURSIVE PROCESS.  THE HIGH-ORDER BIT OF THE ADDRESS OF THE
* LIST OF SUBROUTINE ADDRESSES IS SET ON TO PREVENT INFINITE
* RECURSION IN THE CASE OF MODULES THAT REFER TO EACH OTHER OR
* TO THEMSELVES DIRECTLY OR INDIRECTLY.
*
         XR    #14,#14             CLEAR INSERT REG
         IC    #14,4(,#4)          GET LENGTH OF IDENTIFIER
         LA    #5,5+3(#14,#4)      POINT TO MODULE CODE PAST IDENTIFIER
         N     #5,=X'FFFFFFFC'     ROUNDING UP TO NEXT FULLWORD
         USING ZINT,#5             TO POINT TO "ZINT" AREA
         TM    ZINFLAGS,ZINGSUBR   IF NO SUBRS ARE PRESENT
         BZ    NORES               THEN EXIT WITHOUT RESOLVING
         TM    ZINSUBRA,X'80'      ELSE IF MODULE ALREADY RESOLVED
         BO    NORES               THEN EXIT WITHOUT RESOLVING
         L     #3,ZINSUBRA         ELSE POINT TO START&END OF SUBRS
         OI    ZINSUBRA,X'80'      INDICATE THIS SUBR IS PROCESSED
RESLOOP  DS    0H                  DO FOR EACH SUBR IN LIST
         C     #3,ZINSUBRE         UNTIL FINISHED WITH LIST
         BNL   ENDRES
         ICM   #2,15,0(#3)         GET ADDRESS OF SUBROUTINE
         BZ    MUSTLOAD            IF ZERO, IT MUST BE LOADED
         LA    #15,ZILLOADA        ELSE GET ADDRESS OF ZILLOADA
         B     RESCALL             GO TO CALL IT
MUSTLOAD DS    0H                  EXTERNAL MODULE MUST BE LOADED
         LA    #2,4(,#3)           POINT TO THE NAME OF THE MODULE
         LA    #15,ZILLOADN        GET ADDRESS OF ZILLOADN
RESCALL  DS    0H
         STM   #3,#5,16(#11)       PUSH CURRENT POINTERS ONTO STACK
         ST    #2,28(,#11)         PUT ARGUMENT ON STACK
         LA    #1,28(,#11)         POINT TO NEW STACK LOCATION
         #BASR #14,#15             RECURSIVE INVOCATION TO RESOLVE
         LM    #3,#5,16(#11)       RESTORE VALUES FROM STACK
         CR    #15,#10             IF NOT RESOLVED (RESULT = NIL),
         BNE   STOREIT             THEN
         L     #15,=A(ZLERR)        SET ADDRESS OF ERROR ROUTINE
STOREIT  DS    0H                  ELSE (RESOLVED)...
         ST    #15,0(,#3)           SET ADDRESS OF SUBROUTINE
         LA    #3,12(,#3)          BUMP TO NEXT IN LIST
         B     RESLOOP             CONTINUE
ENDRES   DS    0H                  END RESOLVING CODE
NORES    DS    0H                  NO RESOLVING CODE
         SPACE
FINISHED DS    0H
         LR    #15,#4              GET ENTRY POINT INTO RETURN REG
         B     RETURN              RETURN WITH IT AS VALUE
         SPACE
LOADERR  DS    0H
         CH    #1,=Y(X'106')       IF ABEND CODE WAS 106
         BNE   NOT106C             AND
         CH    #15,=H'12'          REASON CODE WAS C
         BNE   NOT106C             THEN
         LA    #1,ZIL1003           ERROR = INSUFFICIENT STORAGE
         LA    #0,L'ZIL1003
         B     SHOWERR
NOT106C  DS    0H                  ELSE
         LA    #1,ZIL1004           ERROR = SOMETHING ELSE
         LA    #0,L'ZIL1004
         B     SHOWERR
BADRMODE DS    0H                  MODULE LOADED ABOVE 16MB LINE
         LA    #1,ZIL1012           ERROR = SOMETHING ELSE
         LA    #0,L'ZIL1012
SHOWERR  DS    0H
         MVC   8(8,#1),LNAME       MOVE FUNCTION NAME INTO MESSAGE
         #TPUT 3,(1),(0)           DISPLAY SEVERE ERROR
RETNIL   DS    0H
         LR    #15,#10             SET RETURN TO NIL
******** B     RETURN
         SPACE
RETURN   DS    0H
         #ZRET ,                   RESTORE REGISTERS AND RETURN
         SPACE
BLOWUP   DS    0H
         NI    ZLCIFLGS,255-ZLCISMC Turn off non-interruptibility flag
         TM    ZLCIFLGS,ZLCIATTN   If attention interrupt occurred
         BOR   #13                 then go to handle it
         MVC   NAMETXT,LNAME
         #ERR  'ZIL1014 ZILLOAD: Unable to load compiled function ',   X
               NAMESTR,PREFIX=NO
         SPACE 1
         DS    0H,XL1
NAMESTR  DC    YL1(##STRING),AL3(8)
NAMETXT  DS    CL8
         SPACE 1
BLDLLIST DC    H'1',H'58'          BLDL LIST FOR FUNCTION NAME
LNAME    DC    CL8' '              NAME OF FUNCTION FOR BLDL AND LOAD
TTR      DS    CL3
K        DS    CL1
Z        DS    CL1
C        DS    CL1
         DS    CL44
         DC    C'0123456789ABCDEF'
TRTBL    EQU   *-256
         SPACE 1
TESTBYTE DS    C
         SPACE 1
ZIL1001  DC    C'ZIL1001 ________ NOT FOUND ON ZIL LOAD MODULE LIBRARY.X
               '
ZIL1002  DC    C'ZIL1002 ________ NOT FOUND, FUNCTION REFERENCE NOT RESX
               OLVED.'
ZIL1003  DC    C'ZIL1003 ________ LOAD FAILED, NOT ENOUGH SYSTEM STORAGX
               E.'
ZIL1004  DC    C'ZIL1004 ________ LOAD FAILED, CHECK SYSTEM MESSAGES FOX
               R REASON.'
ZIL1005  DC    C'ZIL1005 CANNOT LOAD FUNCTION, NAME LONGER THAN 8 CHARAX
               CTERS.'
ZIL1006  DC    C'ZIL1006 BLDL ERROR - INVALID TASK LIBRARY OR STEPLIB DX
               D SPECIFICATION.'
ZIL1007  DC    C'ZIL1007 BLDL ERROR - NOT ENOUGH SYSTEM STORAGE.'
ZIL1008  DC    C'ZIL1008 BLDL ERROR - RETURN CODE 8, REASON CODE 8.'
ZIL1009  DC    C'ZIL1009 CANNOT LOAD FUNCTION, NAME NOT A STRING OR SYMX
               BOL.'
ZIL1012  DC    C'ZIL1012 ________ LOAD FAILED, RMODE=ANY MODULE LOADED X
               ABOVE 16 MB LINE.'
MSG1010  DC    C'ZIL1010 '
NAME1010 DC    CL8'________'
         DC    C' LOADED AT ADDRESS '
ADDR1010 DC    CL8'________'
         DC    C'.'
ZIL1010  EQU   MSG1010,*-MSG1010,C'C'
         EJECT
         LTORG
         EJECT
ZLERR    DS    0A
         SPACE 1
***********************************************************************
*                                                                     *
* THIS IS A ROUTINE WHOSE ADDRESS GETS PLUGGED INTO COMPILED CODE     *
* WHEREVER AN UNRESOLVED COMPILED CODE FUNCTION REFERENCE OCCURS.     *
* IT DISPLAYS AN ERROR MESSAGE AND ISSUES A THROW TO TAG NIL.         *
*                                                                     *
***********************************************************************
         SPACE 1
         B     ZLERR2-*(,#15)
         DC    YL1(ZLERR1-*-1)
         DC    C'#<UNRESOLVED COMPILED FUNCTION>'
         DC    CL16' '
ZLERR1   EQU   *
ZLERR2   DS    0H
         LR    #3,#15
         DROP  #12
         USING ZLERR,#3
         #ERR  'ZIL1200 Call to unresolved compiled function.',        X
               PREFIX=NO
         SPACE 1
         DROP  #3
         EJECT
         #ZINT
         EJECT
         #ZMOD
         END
