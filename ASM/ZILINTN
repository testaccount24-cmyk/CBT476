          TITLE 'ZILINTN - ZIL 1.3 SYMBOL INTERNMENT SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
*  THIS SUBROUTINE INTERNS SYMBOLS ON THE OBLIST.                     *
*                                                                     *
*  THERE ARE SEVERAL CALLERS OF THIS ROUTINE IN ZIL:                  *
*     ZILSINT                                                         *
*     ZILABLD                                                         *
*     MAKE-SYMBOL (?)                                                 *
*  EACH HAS ITS OWN REQUIREMENTS FOR THIS ROUTINE.                    *
*                                                                     *
*  ENHANCED WITH AN EXTERNAL HASH TABLE AS A PERMANENT SOLUTION       *
*  TO THE EXCEEDINGLY LONG INTERNING TIME.  THE TABLE HAS 65536       *
*  ENTRIES.  SPACE IS FOUND FOR NEW ITEMS BY SIMPLY INCREMENTING      *
*  UNTIL A FREE SLOT IS FOUND. ALSO, THE A SEARCH IS STOPPED AT THE   *
*  FIRST FREE SLOT.  THIS WORKS BECAUSE ITEMS ARE ADDED TO THE TABLE  *
*  BUT NEVER REMOVED.                                                 *
*                                                                     *
*  ===> INCLUDE MORE IN RETURNST, UPDATE COUNT BEFORE STORE           *
*                                                                     *
*  ===> INCLUDE MAXIMUM INITIAL COUNT IN ERROR MESSAGE                *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
* Change activity:                                                    *
*                                                                     *
* 05/22/89 - New bit in compiled code symbol header means that the    *
*            symbol is not to be interned.  This routine will skip    *
*            the interning process for such symbols.                  *
*                                                                     *
* 10/29/91 - Fix bug causing invalid object in VSS.  Occurs when GC   *
*            required when building symbol after print name has been  *
*            consed up.  The fix involves a novel technique for       *
*            insuring that the print name pointer gets relocated,     *
*            since it would be a hassle to come up with a stack slot. *
*                                                                     *
***********************************************************************
*
ZILINTN  #ZBEG NAME='ZILINTN'
         DROP  #15
         STM   #12,#7,SAVEREGS-ZILINTN(#15) SAVE REGS IN OUR OWN PLACE
         LR    #12,#15
         USING ZILINTN,#12
         OI    ZLCGCFLG,ZLCGCBLD   TELL CONS WE'RE OK
*---------------------------------------------------------------------*
* CHECK PARAMETER REGISTERS.                                          *
*                                                                     *
* #0 IS ASSUMED TO BE SET UP PROPERLY FOR CONSING AT ENTRY.           *
*                                                                     *
* IF #7 IS <= 0, THEN:  #4 --> TEXT OF STRING TO BE INTERNED          *
*                       #5 = LENGTH OF STRING TO BE INTERNED          *
*                                                                     *
* IF #7 IS NEGATIVE, THEN JUST RETURN THE PRINT NAME'S HASH CODE.     *
* IF #7 IS ZERO, THEN ACTUALLY INTERN THE SYMBOL, MAKING A COPY OF    *
* THE PRINT NAME AS A STRING.                                         *
*                                                                     *
* (THAT'S HOW ZILABLD CALLS ME)                                       *
*                                                                     *
* OTHERWISE, #7 POINTS TO A PAIR OF FULLWORDS IN MEMORY, OF WHICH     *
*            THE SECOND COULD CONTAIN A PRESET HASH CODE IF THE       *
*            APPROPRIATE FLAG IN THE FIRST WORD IS ON.                *
*                                                                     *
*            #6 --> THE ALREADY-PRPEPARED PRINT NAME                  *
*                                                                     *
* (THAT'S HOW ZILSINT CALLS ME)                                       *
*                                                                     *
* RETURN WITH POINTER TO SYMBOL IN #15 (OR HASH CODE IN #15)          *
*                                                                     *
*---------------------------------------------------------------------*
*
         LTR   #7,#7               If called with prepared print name
         BNP   HASH                then...
         XR    #5,#5                 CLEAR INSERT REGISTER
         LA    #4,##VECDAT(,#6)      SET ADDRESS-OF-TEXT REGISTER
         ICM   #5,7,1(#6)            SET LENGTH-OF-TEXT REGISTER
         TM    ##FWBYTE(#7),##FWGSYM If this symbol not to be interned
         BO    NOINTERN              then skip interning procedure
         TM    ##FWBYTE(#7),##FWHASH if there's a preset hash code
         BZ    HASH                  then
*
* Wait! Don't you have to check the version number of the hashing
* algorithm first?
*
         L     #6,##FWWD2(,#7)        load it
         B     COOKHASH               and go use it
HASH     DS    0H                  #4 AND #5 SET UP FOR PRINT NAME HASH
         SPACE 1
***********************************************************************
*                                                                     *
* This is the hashing algorithm.  Note that the compiler may be using *
* this by calling SXHASH, which MUST call ZILINTN to get the correct  *
* hash value for a print name.  Therefore, don't change this hashing  *
* algorithm unless a mechanism exists for checking the version of the *
* algorithm that generated the hash code, so that code compiled with  *
* hash algorithm A can still work with a ZILINTN using algorithm B.   *
*                                                                     *
***********************************************************************
         SPACE 1
         LH    #15,=H'-4'          DECREMENT AMOUNT FOR BXH
         LR    #2,#5               MAKE ANOTHER COPY OF STR LENGTH
         AR    #2,#15              INDEX TO LAST WORD IN STRING
         LR    #14,#5              COMPUTE STRING LENGTH * 32
         SLL   #14,5                SO THAT IF LENGTH IS 4 OR LESS WE
         BNP   LEN01234(#14)         DO COMPUTED BRANCH BASED ON LENGTH
         L     #6,0(#2,#4)         ELSE GET LAST 4 BYTES OF STRING
         NR    #2,#15              MAKE LENGTH A MULTIPLE OF 4
         SLL   #6,1                SO THAT XORING WITH ITSELF NOT 0
XLOOP    X     #6,0(#2,#4)         XOR NEXT WORD
         BXH   #2,#15,XLOOP        HAVEN'T REACHED FIRST WORD?
         LR    #2,#6               MAKE ANOTHER COPY
         SRL   #2,12               MOVE DOWN MOST SIGNIFICANT CHARS.
         SLL   #6,2                MAKE IT A MULTIPLE OF 4
         XR    #6,#2               COMBINE CHAR 0,1 AND 2,3
         B     COOKHASH            #6 HAS RAW HASH CODE, GO FIX IT UP
*
* COMPUTED BRANCH AREAS 32 BYTES APART
*
LEN01234 DS    0H
E0       DS    0H                  SYMBOL NAME LENGTH = 0
*
         XR    #6,#6               MAKE HASH CODE 0 FOR NO LENGTH
         B     COOKHASH            THE SIMPLEST HASH CODE OF ALL!
*
         ORG   LEN01234+32
E1       DS    0H                  SYMBOL NAME LENGTH = 1
*
         XR    #6,#6               CLEAR FOR INSERT OF SINGLE LETTER
         ICM   #6,B'0010',0(#4)    ONLY POSITION THAT WORKS
         B     COOKHASH            HASH CODE GENERATED, SIMPLE EH?
*
         ORG   LEN01234+64
E2       DS    0H                  SYMBOL NAME LENGTH = 2
*
         L     #6,0(,#4)           LOAD TWO BYTES
         SRL   #6,16               SQUEEZE OUT UNKNOWN BYTES
         SLL   #6,2                MUST BE MULTIPLE OF 4
         B     COOKHASH            HASH CODE GENERATED, STRAIGHT VALUE
*
         ORG   LEN01234+96
E3       DS    0H                  SYMBOL NAME LENGTH = 3
*
         L     #6,0(,#4)           CLEAR FOR INSERT OF 3 LETTERS
         SRL   #6,8                MUST BE MULT OF 4 AND < 2**18
         LR    #14,#6              MAKE TEMPORARY COPY
         SRL   #14,11              SHIFT BY STRANGE AMOUNT
         XR    #6,#14              COMBINE UPPER CHAR WITH LOW CHARS
         SLL   #6,2                MAKE IT A MULTIPLE OF 4
         B     COOKHASH
*
         ORG   LEN01234+128
E4       DS    0H                  SYMBOL NAME LENGTH = 4
*
         L     #6,0(,#4)           LOAD ALL 4 LETTERS
         LR    #2,#6               MAKE ANOTHER COPY FOR XOR OVERLAY
         SRL   #2,14               SHIFT UPPER 2 BYTES TO LOWER POS.
         XR    #6,#2               HASH THE TWO
         SLL   #6,2                MAKE IT A MULTIPLE OF 4
*
* #6 CONTAINS THE RAW HASH CODE. MUST BE MULTIPLE OF 4 AND < 2**18
*
COOKHASH DS    0H
         LTR   #7,#7               If #7<0 (called for hash code only)
         BNM   NOTJUSTH            then...
         LR    #15,#6               put raw hash code in #15
         B     RETURN               and return with it
NOTJUSTH DS    0H                  Else using hash code
         SPACE 1
***********************************************************************
*                                                                     *
* Before proceeding, check that the size of the hash array is what    *
* we are assuming it to be.  If not, then this system is bogus.       *
*                                                                     *
***********************************************************************
         SPACE 1
         CLC   =F'65536',ZLCOBDIM  DO WE AGREE WITH COMMON AREA?
         BNE   ERROR2              ERROR IF WE DON'T AGREE
         N     #6,=X'0003FFFC'     Make it modulo 64K, assuming obsize
         L     #7,ZLCOBHSH         GET BEGINNING OF HASH TABLE
         TM    ZLCGCFLG,ZLCGCINT   IF CALLED BY ZILINIT
         BO    CONSIT2             THEN NO SEARCH REQUIRED
*
*---------------------------------------------------------------------*
* #4 -> TEXT                                                          *
* #5 = LENGTH                                                         *
*                                                                     *
* NOTE: NO PRE-CHECK FOR T OR NIL REQUIRED.  WE ARE GUARANTEED NEVER  *
*       TO BE CALLED TO INTERN T OR NIL.                              *
*---------------------------------------------------------------------*
         LR    #14,#5              GET LENGTH OF TEXT TO SEARCH FOR
         ICM   #14,B'1000',=YL1(##STRING) MAKE #14 LOOK LIKE PNAME HDR
         CH    #5,=H'256'          IF LENGTH GREATER THAN 256
         BH    OBLOOP2             THEN DO CLCL-BASED SEARCH
         LTR   #15,#5              TEST LENGTH OF TEXT TO SEARCH FOR
         BZ    OBLOOP0             IF ZERO, DO SEARCH FOR NULL SYMBOL
         BCTR  #15,0               ELSE REDUCE LENGTH FOR CLC INSTR.
         STC   #15,CLCPNAME+1      ZAP CLC INSTRUCTION WITH THAT LENGTH
         B     OBLOOP1             GO DO CLC LOOP FOR OBLIST SEARCH
*
OBLOOP0X LA    #6,4(,#6)           GET NEXT SYMBOL POINTER
         N     #6,=X'0003FFFC'     ENSURE ARRAY WRAPAROUND
OBLOOP0  L     #15,0(#6,#7)        LOAD SYMBOL POINTER FROM HASH ARRAY
         LTR   #15,#15             ZERO INDICATES SEARCH CAN STOP
         BZ    NOTONOB             THEN THIS ATOM IS NOT INTERNED YET
         L     #2,##PNAME(,#15)    GET PRINT NAME OF THAT SYMBOL
         CL    #14,0(,#2)          TEST LENGTH OF THE PRINT NAME
         BNE   OBLOOP0X            THEN SKIP THIS ONE, CONTINUE
         B     RETURN              IF = OURS, NULL SYMBOL IS INTERNED
*
OBLOOP1X LA    #6,4(,#6)           INCREMENT HASH ARRAY POINTER
         N     #6,=X'0003FFFC'     ENSURE ARRAY WRAPAROUND
OBLOOP1  L     #15,0(#6,#7)        LOAD SYMBOL POINTER FROM HASH ARRAY
         LTR   #15,#15             ZERO INDICATES SEARCH CAN STOP
         BZ    NOTONOB             THEN THIS ATOM IS NOT INTERNED YET
         L     #2,##PNAME(,#15)    GET PRINT NAME OF THAT SYMBOL
         CL    #14,0(,#2)          IF LENGTH DOESN'T MATCH OURS
         BNE   OBLOOP1X            THEN SKIP THIS ONE, CONTINUE
CLCPNAME CLC   ##VECDAT(*-*,#2),0(#4) COMPARE PRINT NAME TEXT
         BNE   OBLOOP1X            PRINT NAME WASN'T IDENTICAL
         B     RETURN              IF EQUAL, SYMBOL ALREADY INTERNED
*
OBLOOP2X LA    #6,4(,#6)           INCREMENT HASH ARRAY POINTER
         N     #6,=X'0003FFFC'     ENSURE ARRAY WRAPAROUND
OBLOOP2  L     #15,0(#6,#7)        LOAD SYMBOL POINTER FROM HASH ARRAY
         LTR   #15,#15             ZERO INDICATES SEARCH CAN STOP
         BZ    NOTONOB             THEN THIS ATOM IS NOT INTERNED YET
         L     #2,##PNAME(,#15)    GET PRINT NAME OF THAT SYMBOL
         CL    #14,0(,#2)          IF LENGTH DOESN'T MATCH OURS
         BNE   OBLOOP2X            THEN SKIP THIS ONE, CONTINUE
         LR    #3,#5               GET LENGTH FOR CLCL
         LA    #2,##VECDAT(,#2)    ELSE POINT TO TEXT OF SYMBOL'S NAME
         LR    #1,#3               GET LENGTH FOR CLCL
         LR    #0,#4               GET ADDRESS FOR CLCL
         CLCL  #2,#0               COMPARE PRINT NAMES
         BNE   OBLOOP2X            PRINT NAMES WEREN'T IDENTICAL
         B     RETURN              IF EQUAL, SYMBOL ALREADY INTERNED
         SPACE 1
***********************************************************************
*                                                                     *
* This section of code gets executed when it is determined that no    *
* search for an existing symbol is required (i.e. call is during      *
* ZILINIT processing).  Just find the first zero slot in the hash     *
* table starting from the location determined by the hash code.       *
* A new symbol will always have to be consed up.                      *
*                                                                     *
* Note: The branch-in is to CONSIT2; CONSIT2X is looped back to only. *
*                                                                     *
***********************************************************************
         SPACE 1
*---------------------------------------------------------------------*
* FIND FIRST EMPTY SLOT IN HASH ARRAY AT OR AFTER THE HASH INDEX      *
* LOCATION.                                                           *
*---------------------------------------------------------------------*
CONSIT2X LA    #6,4(,#6)           GET NEXT HASH ARRAY LOCATION
         N     #6,=X'0003FFFC'     ENSURE HASH ARRAY WRAPAROUND
CONSIT2  L     #15,0(#6,#7)        LOAD SYMBOL POINTER FROM HASH ARRAY
         LTR   #15,#15             ZERO INDICATES EMPTY SLOT FOUND
         BNZ   CONSIT2X            NOT AN EMPTY SLOT, CHECK NEXT ONE
*                                  When empty slot found, use it
NOTONOB  DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* Symbol determined to be not on oblist - build a new symbol          *
*                                                                     *
***********************************************************************
         SPACE 1
*---------------------------------------------------------------------*
* IF #3 (I.E.#7 ON INPUT) = 0, WE MUST CONS UP A STRING AND A SYMBOL. *
* OTHERWISE, WE MUST CONS UP A SYMBOL ONLY - THE STRING EXISTS.       *
*---------------------------------------------------------------------*
         ICM   #3,B'1111',SAVER7   #3 = #7 on input
         BP    GETPNAME            If positive, we have a print name
*                                  Otherwise we must build a print name
*---------------------------------------------------------------------*
* MAKE A NEW PRINTNAME                                                *
* CONS UP A PRINT NAME STRING. REQUIRED LENGTH (#5)+4,ROUNDED UP BY 4.*
*---------------------------------------------------------------------*
NEWPNAME L     #0,SAVER0           GET #0, STACK POINTER FOR CONS
         LTR   #5,#5               IF TEXT IS NULL
         BNZ   GETPNLEN            THEN...
         LA    #3,4                 SET STRING LENGTH TO 8
         B     GOTPNLEN            ELSE...
GETPNLEN LA    #3,3(,#5)           GET LENGTH NEEDED FOR STRING
         N     #3,=X'FFFFFFFC'     ROUND UP TO FULLWORD BOUNDARY
GOTPNLEN L     #15,ZLCVSADR        GET ADDRESS OF VECTOR/STRING SPACE
         A     #15,ZLCVSLEN        PLUS LENGTH = ADDR OF END OF IT
         L     #2,ZLCVSNXT         GET ADDRESS OF NEXT AVAILABLE SLOT
         LA    #1,4(#3,#2)         GET POINTER TO WHERE OURS WILL END
         CR    #1,#15              IF OURS GOES PAST AVAILABLE AREA
         BH    NOROOM              THEN NO ROOM - GO TO FIND SOME MORE
         ST    #14,0(,#2)          SET TYPE AND LENGTH OF NEW STRING
         ST    #1,ZLCVSNXT         ELSE UPDATE SLOT POINTER TO AFT OURS
         LA    #14,##VECDAT(,#2)   POINT TO TEXT OF NEW STRING
         LR    #15,#3              GET LENGTH OF NEW STRING AREA
         MVCL  #14,#4              MOVE OUR TEXT TO NEW STRING
         LR    #4,#2               Make #4 point to print name string
         B     GOTPNAME            Go with newly built print name
         SPACE 1
GETPNAME DS    0H                  Here if PNAME provided by caller
         L     #4,SAVER6           Load address of caller's print name
GOTPNAME DS    0H                  Now we have PNAME <- #4
         L     #0,SAVER0           Get stack pointer for consing
GOTPN2   DS    0H                  Retry point in case GC necessary
         L     #15,ZLCVSADR        Get address of vector/string space
         A     #15,ZLCVSLEN        plus length = address of end of it
         L     #2,ZLCVSNXT         Get address of next available slot
         LA    #5,##SYMLEN(,#2)    Get pointer to slot + symbol length
         CR    #5,#15              If available area not big enough
         BH    NOROOM2             then no room - go to find some more
         MVC   0(##SYMLEN,#2),ZLCNSYM Initialize symbol from template
         ST    #4,##PNAME(,#2)     PNAME word = address of PNAME string
*
* debug
*
*        CLI   0(#4),##STRING      If print name is not a string
*        BNE   BADPNAM2            then error
*
* end debug
*
*
* (Eventually the package pointer must be passed to ZILINTN somehow!)
*
         ST    #8,##PPKG(,#2)      Set package cell to T (interned)
*
* Also, if it's the keyword package, set value cell to self (#2)
*
* For the current implementation, if the print name of the smnbol
* begins with a colon, assume it's a "keyword" and set the binding
* cell of the symbol to itself, so that it will be constant.
* Don't know who, if anyone, checks for this, but it could be
* useful for somebody.
*
         CLI   ##VECDAT(#4),C':'   If symbol is a ""keyword""
         BNE   NOTKWD              then
         ST    #2,##PVALUE(,#2)     set binding (value) cell to self
NOTKWD   DS    0H
         ST    #5,ZLCVSNXT         Update slot ptr to past symbol
         LR    #1,#2               Arg 1 to CONS = new symbol
         L     #2,ZLCOBCNT         Get count of hash slots left
         BCT   #2,RETCONS          Go to add to oblist if count nonzero
         B     ERROR3              If count went to 0, error - no slots
*---------------------------------------------------------------------*
*                 ADD NEW SYMBOL TO THE "OBLIST"
*---------------------------------------------------------------------*
RETCONS  ST    #2,ZLCOBCNT         STORE DECREMENTED SLOT-AVAIL COUNT
         L     #0,SAVER0           Get stack pointer for consing
         L     #15,ZLCCONS         GET ADDRESS OF CONS
         L     #2,ZLCOBLST         ARG 2 TO CONS = CURRENT OBLIST
         #BASR #14,#15             CALL CONS TO ADD SYMBOL TO OBLIST
         ST    #15,ZLCOBLST        (SETQ OBLIST (CONS SYMBOL OBLIST))
         ST    #1,0(#6,#7)         STORE NEW SYMBOL IN HASH ARRAY
         LR    #15,#1              GET POINTER TO SYMBOL BACK AS RETVAL
*---------------------------------------------------------------------*
*                 PREPARE FOR RETURN TO CALLER
*---------------------------------------------------------------------*
RETURN   DS    0H
         NI    ZLCGCFLG,255-ZLCGCBLD TURN OFF SPECIAL FLAG FOR CONS
         ST    #15,SAVER15         RESTORE REGS EXCEPT FOR #15,
         LM    #12,#7,SAVEREGS      WHICH POINTS TO THE INTERNED SYMBOL
         BR    #14                 RETURN TO CALLER
*
* debug - replace above 2 lines with:
*
*        ST    #15,ZLCDBL
*        UNPK  MESSAGEX(9),ZLCDBL(5)
*        TR    MESSAGEX(8),HEXTBL
*        MVI   MESSAGEX+8,C'.'
*        L     #0,##PNAME(,#15)
*        ST    #0,ZLCDBL
*        UNPK  MESSAGEQ(9),ZLCDBL(5)
*        TR    MESSAGEQ(8),HEXTBL
*        MVI   MESSAGEQ+8,C'.'
*        LA    #1,MESSAGE
*        LA    #0,MESSAGEL
*        #TPUT *,(1),(0)
*        L     #15,SAVER15
*
* end debug
*
*        LM    #12,#7,SAVEREGS      WHICH POINTS TO THE INTERNED SYMBOL
*        BR    #14                 RETURN TO CALLER
*
* debug
*
*MESSAGE  DC    C'ZILINTN: Symbol created at '
*MESSAGEX DC    C'XXXXXXXX'
*         DC    C' '
*MESSAGEP DC    C' Print name at '
*MESSAGEQ DC    C'XXXXXXXX'
*         DC    C' '
*MESSAGEL EQU   *-MESSAGE
*         DC    C'0123456789ABCDEF'
*HEXTBL   EQU   *-256
*
* end debug
*
*---------------------------------------------------------------------*
* Here when a symbol is to be built but not interned...               *
*---------------------------------------------------------------------*
NOINTERN DS    0H
         ICM   #3,B'1111',SAVER7   #3 = #7 on input
         L     #4,SAVER6           Load address of caller's print name
         L     #0,SAVER0           Get stack pointer for consing
GOTPN3   DS    0H                  Retry point in case GC necessary
         L     #15,ZLCVSADR        Get address of vector/string space
         A     #15,ZLCVSLEN        plus length = address of end of it
         L     #2,ZLCVSNXT         Get address of next available slot
         LA    #5,##SYMLEN(,#2)    Get pointer to slot + symbol length
         CR    #5,#15              If available area not big enough
         BH    NOROOM3             then no room - go to find some more
         MVC   0(##SYMLEN,#2),ZLCNSYM Initialize symbol from template
         ST    #4,##PNAME(,#2)     PNAME word = address of PNAME string
*
* debug
*
*        CLI   0(#4),##STRING      If print name is not a string
*        BNE   BADPNAM3            then error
*
* end debug
*
         ST    #10,##PPKG(,#2)     Set package cell = NIL
         ST    #5,ZLCVSNXT         Update slot ptr to past symbol
         LR    #15,#2              Get address of new symbol
         B     RETURN              Go to return with newly built symbol
*---------------------------------------------------------------------*
*           BUT WHAT IF THERE'S NO ROOM FOR NEW STRING?               *
*---------------------------------------------------------------------*
NOROOM   LTR   #0,#0               IF GC ALREADY TRIED
         BZ    ERROR1              THEN ERROR - NO V/S SPACE AVAILABLE
         L     #9,ZLCGCEND         FORCE GC
         LR    #1,#10              DUMMY ARG 1 TO CONS = NIL
         LR    #2,#10              DUMMY ARG 2 TO CONS = NIL
         L     #15,ZLCCONS         GET ADDRESS OF ZILCONS
         #BASR #14,#15             CALL CONS TO FORCE A GC
         XR    #0,#0               CLEAR STACK POINTER TO PREVENT RETRY
         LR    #14,#5              GET LENGTH OF TEXT
         ICM   #14,B'1000',=YL1(##STRING) MAKE #14 LOOK LIKE PNAME HDR
         B     GOTPNLEN            GO TRY AGAIN
*---------------------------------------------------------------------*
*           BUT WHAT IF THERE'S NO ROOM FOR NEW SYMBOL?               *
* Note that we use the print name pointer in #4 as part of the dummy  *
* argument, to insure that it gets updated by GC if necessary.        *
*---------------------------------------------------------------------*
NOROOM2  LTR   #0,#0               IF GC ALREADY TRIED
         BZ    ERROR1              THEN ERROR - NO V/S SPACE AVAILABLE
         L     #9,ZLCGCEND         FORCE GC
         LR    #1,#4               DUMMY ARG 1 TO CONS = PRINT NAME
         LR    #2,#10              DUMMY ARG 2 TO CONS = NIL
         L     #15,ZLCCONS         GET ADDRESS OF ZILCONS
         #BASR #14,#15             CALL CONS TO FORCE A GC
         XR    #0,#0               CLEAR STACK POINTER TO PREVENT RETRY
         L     #4,0(,#15)          RELOAD POSSIBLY-RELOCATED PRINT NAME
         B     GOTPN2              GO TRY AGAIN
*---------------------------------------------------------------------*
*           BUT WHAT IF THERE'S NO ROOM FOR NEW UNINTERNED SYMBOL?    *
*---------------------------------------------------------------------*
NOROOM3  LTR   #0,#0               IF GC ALREADY TRIED
         BZ    ERROR1N             THEN ERROR - NO V/S SPACE AVAILABLE
         L     #9,ZLCGCEND         FORCE GC
         LR    #1,#10              DUMMY ARG 1 TO CONS = NIL
         LR    #2,#10              DUMMY ARG 2 TO CONS = NIL
         L     #15,ZLCCONS         GET ADDRESS OF ZILCONS
         #BASR #14,#15             CALL CONS TO FORCE A GC
         XR    #0,#0               CLEAR STACK POINTER TO PREVENT RETRY
         B     GOTPN3              GO TRY AGAIN
*
         DS    0D                  FORCE DOUBLEWORD ALIGNMENT FOR EFF.
         SPACE 1
SAVEREGS DS    12A                 REGISTER SAVE AREA
         ORG   SAVEREGS
SAVER12  DS    A                   REGISTER SAVE AREA
SAVER13  DS    A                   REGISTER SAVE AREA
SAVER14  DS    A                   REGISTER SAVE AREA
SAVER15  DS    A                   REGISTER SAVE AREA
SAVER0   DS    A                   REGISTER SAVE AREA
SAVER1   DS    A                   REGISTER SAVE AREA
SAVER2   DS    A                   REGISTER SAVE AREA
SAVER3   DS    A                   REGISTER SAVE AREA
SAVER4   DS    A                   REGISTER SAVE AREA
SAVER5   DS    A                   REGISTER SAVE AREA
SAVER6   DS    A                   REGISTER SAVE AREA
SAVER7   DS    A                   REGISTER SAVE AREA
         ORG   ,
*
ERROR1   #ERR  PREFIX=NO,                                              X
               'ZIL2300 ZILINTN: No vector/string space available to inX
               tern symbol.'
ERROR1N  #ERR  PREFIX=NO,                                              X
               'ZIL2300 ZILINTN: No vector/string space available to buX
               ild uninterned symbol.'
ERROR2   L     #2,ZLCOBDIM
         #ERR  PREFIX=NO,                                              X
               'ZIL2301 ZILINTN: Internal error, can''t handle oblist hX
               ash table size of ',#2,'.'
ERROR3   #ERR  PREFIX=NO,                                              X
               'ZIL2302 ZILINTN: More than 50,000 interned symbols.',  X
               X'0D',                                                  X
               'New symbol not interned, oblist hash table limit reacheX
               d.'
*
* debug
*
*ADPNAM2 #ERR  PREFIX=NO,                                              X
               'ZIL2303 ZILINTN: Print name of interned symbol is not aX
                string - ',#4
*ADPNAM3 #ERR  PREFIX=NO,                                              X
               'ZIL2303 ZILINTN: Print name of uninterned symbol is notX
                a string - ',#4
*
* end debug
*
*
         LTORG
*
         END
