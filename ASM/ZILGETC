         TITLE 'ZILGETC - INTERNAL ZIL 1.3 ROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* THIS ROUTINE IS INVOKED BY READ AND READCH.  THE INTERFACE IS       *
* NON-STANDARD, AS FOLLOWS:                                           *
*                                                                     *
*     L    2,=V(ZILGETC)                                              *
*     BALR 14,2                                                       *
*                                                                     *
* ZILGETC RETURNS ONE CHARACTER FROM THE INPUT FILE POINTED TO BY     *
* REGISTER 7.  IT HANDLES ALL INPUT FILE I/O.  ON ENTRY REGISTER 3    *
* CONTAINS THE CURRENT CHARACTER POINTER (CONTENTS OF ZLFCHAR),       *
* AND ON RETURN REGISTER 6 CONTAINS THE ADDRESS OF THE ACTUAL         *
* CHARACTER RETURNED, UNLESS NEWLINE OR EOF IS ENCOUNTERED.           *
*                                                                     *
* ON RETURN REGISTER 3 CONTAINS ONE OF THE FOLLOWING:                 *
*                                                                     *
*    LT 0 ... NEWLINE ENCOUNTERED                                     *
*    EQ 0 ... EOF ENCOUNTERED                                         *
*    GT 0 ... CURRENT CHARACTER POINTER (REGISTER 6 POINTS TO IT)     *
*                                                                     *
* NOTE THAT FOR EFFICIENCY'S SAKE, THIS ROUTINE DOES NOT UPDATE       *
* ZLFCHAR ITSELF (UNLESS A NEW LINE IS READ).  THE CALLER IS          *
* RESPONSIBLE FOR MAINTAINING THE CORRESPONDENCE BETWEEN REGISTER 3   *
* AND ZLFCHAR AT ALL TIMES.                                           *
*                                                                     *
* ALSO NOTE THAT THIS ROUTINE DOES NOT SET THE ZLFEOF AND ZLFNEWLN    *
* BITS.  THESE ARE SET BY THE READ AND READCH ROUTINES.  THE STATUS   *
* OF THE VALUE TO RETURN TO THE CALLER IS DETERMINED BY THE SIGN OF   *
* ZLFCHAR, I.E. REGISTER 3.                                           *
*                                                                     *
* THIS ROUTINE USES REGS 2 (RETURN), 3, 6.                            *
* NOTE THAT REG 15 MUST BE PRESERVED ACROSS A CALL TO THIS ROUTINE,   *
* SINCE THE CALLERS MAY BE HOLDING A RETURN VALUE IN IT.              *
*                                                                     *
***********************************************************************
*                                                                     *
*            NOW THAT WE HAVE SUPPORT FOR COMMONALITY OF TERMINAL I/O *
*            WE CAN IMPLEMENT THIS ENHANCEMENT:  IF THERE IS PENDING  *
*            TERMINAL OUTPUT (PRIN1), WE DO A TPUT ASIS TO SEND IT    *
*            OUT WITHOUT A CARRIAGE RETURN.  GIVES NICE PROMPT DATA.  *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
* Change activity:                                                    *
*                                                                     *
*  11/16/88 - Fix problem of putting out TPUT ASIS prompts even when  *
*             an input-longer-than-80-characters situation exists.    *
*                                                                     *
***********************************************************************
*
         GBLB  &ZILXA
         #ZSYS
         EJECT
         #ZEQU ,
         EJECT
         #ZCOM ,
         #ZSFT ,
         EJECT
         USING ZILGETC,#2          ESTABLISH BASE REGISTER
         USING ZLFILBLK,#7         ESTABLISH ADDRESSABILITY TO FILE
         #ZUSING ,                 ESTABLISH ADDR'Y TO COMMON & SFT
         EJECT
ZILGETC  CSECT ,
         SPACE 1
         LTR   #6,#3               TEST CURRENT CHARACTER POINTER
         BM    GET                 IF NEWLINE, READ A NEW RECORD
         BZR   #14                 IF EOF, RETURN WITHOUT READING
*                                  ELSE CONVERT CHARACTER POINTER
         A     #6,ZLFCARD          FROM RELATIVE COLUMN TO ABSOLUTE
         LA    #3,1(,#3)           ADDRESS WHILE BUMPING IT BY 1
         C     #6,ZLFEND           IF NOT AT END OF RECORD YET
         BLR   #14                 THEN PROCESS THIS CHAR. ELSE...
GATEND   DS    0H                  END OF RECORD REACHED...
         TM    ZLFFLAG2,ZLFTGT12   IF TERMINAL AND LAST TGET INCOMPLETE
         BO    GET                 THEN DO ANOTHER READ (NO NEWLINES)
         XR    #3,#3               ELSE SET CHARACTER POINTER TO -1
         BCTR  #3,0                (NEGATIVE VALUE MEANS NEWLINE)
         BR    #14                 AND RETURN WITH THAT VALUE.
         SPACE 2
GET      DS    0H                  GET AN INPUT RECORD
         SPACE 1
         STM   #14,#7,ZLCSAVE2     SAVE VOLATILE REGISTERS
         TM    ZLFFLAG1,ZLFTERM    IF INPUT IS FROM TERMINAL
         BZ    NOTTERM             THEN
*
* ABOUT TO READ INPUT FROM THE TERMINAL.  IF THERE IS ANY PENDING
* TERMINAL OUTPUT THEN WE SEND IT TO THE TERMINAL WITHOUT A CARRIAGE
* RETURN SO THAT THE FOLLOWING READ HAS THE CURSOR POSITIONED ON THE
* SAME LINE.
*
         TM    ZLFFLAG2,ZLFTGT12   If completing an incomplete TGET
         BO    NOWRITEA            then skip
         LR    #5,#7               SAVE OUR FILE BLOCK ADDRESS
         ICM   #7,15,ZLCOFTRM      @ TERMINAL OUTPUT FILE BLOCK
         BZ    NOWRITE             IF NONE, SKIP
         TM    ZLFFLAG1,ZLFNEWLN   IF NO DATA WAITING TO BE PRINTED
         BZ    NOWRITE             THEN SKIP
         L     #1,ZLFCARD          GET ADDRESS OF OUTPUT BUFFER
         L     #14,ZLFCHAR         GET CURRENT CHARACTER POSITION
         BCTR  #14,0               SUBTRACT 1 TO CONVERT TO LENGTH
         LTR   #0,#14              IF LENGTH ZERO OR LESS
         BNP   NOWRITE             THEN SKIP
         BCTR  #14,0               ELSE REDUCE LENGTH FOR EXECUTE
         L     #15,ZLCTRMTR        GET TERMINAL OUTPUT TRANSLATE TABLE
         EX    #14,TRANS           TRANSLATE THE OUTPUT LINE
         #TPUT *,(1),(0),ASIS      TPUT WITHOUT CARRIAGE RETURN
         LA    #0,1                SET CHARACTER POSITION
         ST    #0,ZLFCHAR          TO ONE
         NI    ZLFFLAG1,255-ZLFNEWLN CLEAR NEW LINE INDICATION
         LA    #15,X'40'           SOURCE LENGTH = 0
         SLL   #15,24              FILL = BLANK
         XR    #14,#14             SOURCE = NULL
         LH    #1,ZLFLRECL         LENGTH = LENGTH OF OUTPUT AREA
         L     #0,ZLFCARD          TARGET = OUTPUT AREA
         MVCL  #0,#14              CLEAR OUTPUT AREA TO BLANKS
NOWRITE  DS    0H
         LR    #7,#5               RESTORE OUR FILE BLOCK ADDRESS
NOWRITEA DS    0H
*
* OK, GO AHEAD AND READ FROM THE TERMINAL.
*
         NI    ZLFFLAG2,255-ZLFTGT12 CLEAR INCOMPLETE-TGET FLAG
TGETRTRY DS    0H
*
* The following XC necessary due to bug in PIE/Sessions PA2 processing
*
         XC    ZLFLINE(80),ZLFLINE  CLEAR TGET INPUT BUFFER
*
         TGET  ZLFLINE,80           DO A TGET
         CH    #15,=H'8'            IF TGET RC WAS 8 (ATTENTION)
         BE    TGETRTRY             THEN RETRY THE TGET
         STH   #1,ZLFLRECL          STORE COUNT OF TGOTTEN INPUT DATA
         LTR   #1,#1                IF DATA LENGTH IS NONZERO,
         BNP   NOTGTRAN             THEN...
         BCTR  #1,0                  REDUCE LENGTH FOR EXECUTE
         EX    #1,INTRANS            TRANSLATE TERMINAL INPUT
NOTGTRAN DS    0H
         CH    #15,=H'12'           IF TGET RC WAS 12 (DATA PENDING)
         BNE   NOTRC12              THEN
         OI    ZLFFLAG2,ZLFTGT12     INDICATE INCOMPLETE TGET
NOTRC12  DS    0H                   ELSE ASSUME TGET WAS OK
         ICM   #1,15,ZLCDRIBL       IF THERE'S A DRIBBLE FILE
         BZ    NODRIBI              THEN...
         AIF   (NOT &ZILXA).SKIP1
*---------------------------------SWITCH FROM CURRENT AMODE TO AMODE 24
         LA    #15,PUT24           ADDRESS OF THIS CODE
         LA    #4,PUT24E           RETURN ADDRESS
         BSM   #4,#15
PUT24    DS    0H
*---------------------------------THE AMODE IS NOW 24
.SKIP1   ANOP
         ST    #9,ZLCISV09           SAVE ZIL REGS
         OI    ZLCIFLGS,ZLCISYS      INDICATE NON-ZIL CODE RUNNING
         PUT   (1)                   DO PUT LOCATE
         NI    ZLCIFLGS,255-ZLCISYS
         AIF   (NOT &ZILXA).SKIP2
*---------------------------------SWITCH FROM AMODE 24 TO CURRENT AMODE
         BSM   0,#4
PUT24E   DS    0H
*---------------------------------THE AMODE IS NOW SAME AS ON ENTRY
.SKIP2   ANOP
         TM    ZLCIFLGS,ZLCIATTN    IF ATTENTION INTERRUPT OCCURRED
         BOR   #13                  THEN GO TO HANDLE IT
         MVC   0(80,#1),ZLFLINE      MOVE DATA TO DRIBBLE OUTPUT BUFFER
NODRIBI  DS    0H
         LA    #1,ZLFLINE           SAVE BUFFER ADDRESS
         LH    #0,ZLFLRECL          CHECK LENGTH OF INPUT FROM TERMINAL
         LTR   #0,#0                IF INPUT FROM TERMINAL IS NULL
         BNP   NULLREC              THEN RETURN NEWLINE (NULL INPUT)
         LA    #3,1                 ELSE SET CHARACTER COLUMN = 1
         B     GETSET               GO SET REST OF FILE PARAMETERS
NOTTERM  DS    0H                  ELSE
         TM    ZLFFLAG1,ZLFSTART    IF FIRST RECORD ALREADY WAS READ
         BZ    NOTGOT1              THEN SKIP THIS GET
         NI    ZLFFLAG1,255-ZLFSTART TURN OFF FIRST-RECORD-READ FLAG
         L     #1,ZLFREC1            GET ADDRESS OF THAT RECORD
         B     GOT1                 AND SKIP THIS GET.
NOTGOT1  DS    0H                  ELSE...
         LA    #1,GETEODAD          ADDRESS OF END-OF-FILE ROUTINE
         STCM  #1,7,ZLFDCB+33       SET EODAD ROUTINE ADDRESS IN DCB
         AIF   (NOT &ZILXA).SKIP3
         LA    #15,GETSET           GET ADDRESS OF EOF CONTINUATION
         BSM   #15,0                ROUTINE AND ADD THE CURRENT AMODE
         ST    #15,AGETSET          STORE THIS VALUE
.SKIP3   ANOP
         AIF   (NOT &ZILXA).SKIP4
*---------------------------------SWITCH FROM CURRENT AMODE TO AMODE 24
         LA    #15,GET24           ADDRESS OF THIS CODE
         LA    #4,GET24E           RETURN ADDRESS
         BSM   #4,#15
GET24    DS    0H
*---------------------------------THE AMODE IS NOW 24
.SKIP4   ANOP
         ST    #9,ZLCISV09          SAVE ZIL REGS
         OI    ZLCIFLGS,ZLCISYS     INDICATE NON-ZIL CODE RUNNING
         LA    #1,ZLFDCB            DO A GET LOCATE
         GET   (1)                  GET A RECORD, GET LOCATE MODE
         NI    ZLCIFLGS,255-ZLCISYS
         AIF   (NOT &ZILXA).SKIP5
*---------------------------------SWITCH FROM AMODE 24 TO CURRENT AMODE
         BSM   0,#4
GET24E   DS    0H
*---------------------------------THE AMODE IS NOW SAME AS ON ENTRY
.SKIP5   ANOP
         TM    ZLCIFLGS,ZLCIATTN    IF ATTENTION INTERRUPT OCCURRED
         BOR   #13                  THEN GO TO HANDLE IT
GOT1     DS    0H
         LA    #3,1                 SET CHARACTER COLUMN = 1
         TM    ZLFFLAG2,ZLFRECV     IF RECFM=V(B)...
         BZ    SEEIFU               THEN...
         LH    #0,0(,#1)             PICK UP CURRENT RECORD LENGTH
         LA    #15,4                 LENGTH OF RDW TO SUBTRACT
         TM    ZLFFLAG2,ZLFNUM       IF FILE IS LINE NUMBERED
         BZ    NOTLN                 THEN...
         LA    #15,8(,#15)            ADD 8 FOR LINE NUMBER FIELD
NOTLN    SR    #0,#15                COMPUTE LENGTH OF TEXT IN RECORD
         STH   #0,ZLFLRECL           SET RECORD LENGTH
         BNP   NULLREC               IF NO TEXT, IGNORE THIS RECORD
         AR    #1,#15                BUMP POINTER UP TO TEXT
         B     GETSET                GO TO SET FILE PARAMETERS
NULLREC  DS    0H                   VARIABLE-LENGTH RECORD TOO SHORT...
         L     #3,#SFWM1            SET CURRENT CHARACTER POINTER TO -1
*                                   (NEGATIVE VALUE MEANS NEWLINE)
         B     GETSET              GO SET REST OF FILE PARAMETERS
         SPACE 1
SEEIFU   DS    0H                  RECFM NOT V, MAYBE IT'S U
         TM    ZLFFLAG2,ZLFRECU    IF RECFM = U
         BZ    GETSET              THEN...
         LH    #0,ZLFDCB+82         GET DCB LRECL
         STH   #0,ZLFLRECL          USE AS CURRENT LRECL
         B     GETSET
         SPACE 1
GETEODAD DS    0H                  END OF FILE ON READ
*                                  NOTE: THIS GETS CONTROL IN AMODE24!
         NI    ZLCIFLGS,255-ZLCISYS RESET NON-ZIL-CODE RUNNING FLAG
         XR    #1,#1               CLEAR RECORD POINTER
         XR    #3,#3               CLEAR CHARACTER POINTER
         AIF   (NOT &ZILXA).SKIP6
         L     #15,AGETSET         GO SET REST OF FILE PARAMETERS
         BSM   0,#15               (RETURNING TO AMODE OF CALLER)
AGETSET  DS    A                   POINTER DEFINED LINKAGE FOR GETSET
.SKIP6   ANOP
         SPACE 1
GETSET   DS    0H                  GET EITHER WORKED OR DIDN'T
         SPACE 1
         TM    ZLCIFLGS,ZLCIATTN    IF ATTENTION INTERRUPT OCCURRED
         BOR   #13                  THEN GO TO HANDLE IT
         SPACE 1
* AT THIS POINT #1 = CURRENT RECORD ADDRESS
* AT THIS POINT #3 = CURRENT CHARACTER POINTER (0=EOF, -1=NEWLINE)
         SPACE 1
         LR    #6,#1               SET ABSOLUTE CHARACTER ADDRESS
         ST    #6,ZLFCARD          SET ADDRESS OF RECORD
         ST    #3,ZLFCHAR          SET ADDRESS OF RECORD
         LH    #0,ZLFLRECL         GET RECORD LENGTH
         ALR   #0,#6               ADD RECORD ADDRESS
         ST    #0,ZLFEND           GIVING ADDRESS OF END OF RECORD
         SPACE 1
*
* CODE ADDED 11/17/86 TO SUPPORT ECHO FILES
*
         LTR   #6,#6               IF NO INPUT RECORD (E.G. EOF)
         BNP   NOECHO              THEN NO ECHO
         ICM   #0,15,ZLFECHO       GET ECHO FILE BLOCK
         BZ    NOECHO              IF NONE, NO ECHO
         LR    #5,#7               SAVE OUR FILE BLOCK ADDRESS
         LR    #7,#0               GET ECHO FILE BLOCK ADDRESS
         TM    ZLFFLAG2,ZLFOPEN    IF ECHO FILE IS NOT OPEN
         BZ    NOECHO2             THEN DON'T ECHO
         TM    ZLFFLAG1,ZLFTERM    IF OUTPUT IS TO TERMINAL
         BZ    OKTOECHO             AND
         TM    ZLFFLAG1-ZLFILBLK(#5),ZLFTERM  INPUT IS FROM TERMINAL
         BZ    OKTOECHO               THEN
         TM    ZLFFLAG2,ZLFETIO        IF NOT OK TO ECHO TERM-TO-TERM
         BZ    NOECHO2                  THEN DON'T ECHO
OKTOECHO DS    0H
         LH    #1,ZLFLRECL         GET OUTPUT RECORD LENGTH
         L     #0,ZLFCHAR          GET CURRENT OUTPUT CHAR POSITION
         BCTR  #0,0                CONVERT FROM COLUMN TO OFFSET
         SR    #1,#0               OUTPUT LENGTH REMAINING
         A     #0,ZLFCARD          ADD RECORD AREA LOCATION
         TM    ZLFFLAG1,ZLFNEWLN   IF THERE'S ALREADY DATA IN OUTPUT
         BZ    NOASIS              THEN
         AH    #0,=H'1'             BUMP OUTPUT DESTINATION UP BY 1
         BCTR  #1,0                 BUMP OUTPUT LENGTH DOWN BY 1
NOASIS   DS    0H
         LR    #14,#6              INPUT ADDRESS
         LA    #15,X'40'           FILL CHARACTER
         SLL   #15,24
         AH    #15,ZLFLRECL-ZLFILBLK(,#5) INPUT LENGTH
MOVELOOP DS    0H
         LTR   #1,#1               IF LENGTH TO BE MOVED NOT POSITIVE
         BNP   SKIPMVCL            THEN SKIP MOVE. ELSE
         MVCL  #0,#14              MOVE DATA FROM INPUT TO OUTPUT
         S     #0,ZLFCARD          ADDRESS OF END OF MOVED DATA MINUS
         AH    #0,=H'1'             START PLUS 1
         ST    #0,ZLFCHAR            GIVES NEW CHARACTER POSITION
SKIPMVCL DS    0H
         CLM   #15,B'0111',=X'000000' IF ALL TO BE MOVED WAS MOVED
         BE    MOVEDONE            THEN FINISHED. ELSE...
         STM   #14,#15,SAVEMVCL    SAVE OTHER PARAMETERS
         L     #15,ZLCTERP         GET ADDRESS OF ZILTERP
         #BASR #14,#15             CALL ZILTERP TO PRINT THE NEW LINE
         L     #2,ZLCSAVE2+16      RELOAD BASE REGISTER
         LM    #14,#15,SAVEMVCL    GET MVCL REGISTERS
         L     #0,ZLFCARD          GET NEXT NEW OUTPUT ADDRESS
         LH    #1,ZLFLRECL         GET NEXT NEW OUTPUT LENGTH
         B     MOVELOOP            GO MOVE SOME MORE DATA
MOVEDONE DS    0H                  WHEN FINISHED MOVING DATA...
         L     #15,ZLCTERP         GET ADDRESS OF ZILTERP
         #BASR #14,#15             CALL ZILTERP TO PRINT THE NEW LINE
         L     #2,ZLCSAVE2+16      RELOAD BASE REGISTER
NOECHO2  DS    0H
         LR    #7,#5               RESTORE OUR FILE BLOCK ADDRESS
         L     #6,ZLFCARD          GET ADDRESS OF RECORD
         L     #3,ZLFCHAR          GET ADDRESS OF RECORD
NOECHO   DS    0H
*
* END ECHO CODE
*
         SPACE 1
         LM    #14,#2,ZLCSAVE2     RESTORE VOLATILE REGISTERS
         LM    #4,#5,ZLCSAVE2+24   EXCEPT #3 AND #6
         L     #7,ZLCSAVE2+36      WHICH MUST BE RETURNED TO CALLER
         SPACE 1
         BR    #14                 RETURN TO CALLER
         SPACE 1
TRANS    TR    0(*-*,#1),0(#15)    TRANSLATE OUTPUT LINE
INTRANS  TR    ZLFLINE(*-*),INTRANTB  TRANSLATE INPUT LINE
         SPACE 1
*
* TERMINAL INPUT TRANSLATE TABLE.  THE ONLY PURPOSE OF THIS TABLE IS
* REALLY TO INSURE THAT VARIOUS KINDS OF INPUT GET INTERPRETED AS
* SQUARE BRACKETS.
*
INTRANTB DC    256YL1(*-INTRANTB)
         ORG   INTRANTB+X'41'
         DC    X'AD'               LEFT BRACKET
         ORG   INTRANTB+X'42'
         DC    X'BD'               RIGHT BRACKET
         ORG   INTRANTB+X'BA'
         DC    X'AD'               LEFT BRACKET
         ORG   INTRANTB+X'BB'
         DC    X'BD'               RIGHT BRACKET
         ORG   ,
         SPACE 1
SAVEMVCL DS    4A                  MVCL REGISTER SAVE AREA
         LTORG
         SPACE 1
         END
