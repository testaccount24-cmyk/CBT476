         TITLE 'GENSYM - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* GENSYM TAKES 1 OPTIONAL ARGUMENT.                                   *
*                                                                     *
* The following description is based on the one in CLtL, page 169,    *
* 1st edition:                                                        *
*                                                                     *
* GENSYM creates a new, unique, uninterned symbol, consisting of a    *
* prefix (which defaults to "G") followed by a decimally dumped       *
* number, which is incremented by 1 each time GENSYM is called.       *
*                                                                     *
* If the optional argument is present, then:                          *
*                                                                     *
*   If it is an integer, then it must be non-negative, and the        *
* internal GENSYM counter is set to that value for FUTURE use         *
* rather than having it be incremented the normal way.                *
*                                                                     *
*   If it is a string, then that string is made the default GENSYM    *
* prefix for THIS and FUTURE calls to GENSYM.                         *
*                                                                     *
* After handling the argument, GENSYM creates a symbol as it would    *
* with no argument.  This means that if the optional argument is      *
* present and is an integer, then that value becomes part of the      *
* GENSYM name.                                                        *
*                                                                     *
***********************************************************************
*                                                                     *
* For this implementation:                                            *
*                                                                     *
*  (1) It is illegal for the argument to be a bignum.  Sorry.         *
*      Maybe some other day.                                          *
*  (2) If the argument is a symbol, the print name is used as if      *
*      a string were passed.                                          *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
* Change activity:                                                    *
*                                                                     *
* 05/22/89 - Set package cell to NIL.                                 *
*                                                                     *
***********************************************************************
*
GENSYM   #ZBEG MINARGS=0,MAXARGS=1,NAME='GENSYM'
         SPACE 1
         #ZPDS 16                  DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
         SPACE 1
         L     #1,0(,#11)          Get arg 1
         CR    #1,#13              If arg 1 is omitted,
         BE    INCR                then go increment counter
         CLI   ##TYPE(#1),##FIXNUM If arg 1 is a fixnum
         BE    ARG1FIX             then go process integer arg1
         CLI   ##TYPE(#1),##STRING If arg 1 is a string
         BE    ARG1STR             then go process string arg1
         CLI   ##TYPE(#1),##SYMBOL If arg 1 is a symbol
         BE    ARG1SYM             then go process symbol arg1
         B     ERROR1              Else invalid type for arg1
         SPACE 1
ARG1FIX  DS    0H                  Arg 1 is a fixnum
         ICM   #2,15,##CDR(#1)     Get fixnum value
         BM    ERROR1              If negative, error
         ST    #2,ZLCGSCNT         Store as new GENSYM counter
         B     AFTINCR             Skip normal increment and go
         SPACE 1
ARG1SYM  DS    0H                  Arg 1 is a symbol
         L     #1,##PNAME(,#1)     Get print name and use as string
ARG1STR  DS    0H                  Arg 1 is a string
         ST    #1,ZLCGSPRE         Store GENSYM prefix
******** B     INCR                Go to increment GENSYM counter
         SPACE 1
INCR     DS    0H                  OK, increment the counter
         LA    #2,1                Add 1 to GENSYM counter
         A     #2,ZLCGSCNT
         ST    #2,ZLCGSCNT
         SPACE 1
AFTINCR  DS    0H                  GENSYM counter updated whatever way
         SPACE 1
***********************************************************************
*                                                                     *
* Compute length of integer and length of prefix                      *
*                                                                     *
***********************************************************************
         SPACE 1
* Get length of integer
         MVC   GWORK(12),=X'F02020202020202120202020'
         LA    #1,GWORK+7          Initialize EDMK pattern and register
         CVD   #2,ZLCDBL           Convert incremented GENSYM counter
         EDMK  GWORK(12),ZLCDBL+2  Edit decimal counter into pattern
* Never allowed to be negative.  Don't even bother to check.
         LA    #5,GWORK+12         Compute length of significant part
         SR    #5,#1               Length of converted integer
         LR    #6,#1               Get address of converted integer
* Get length of prefix
         ICM   #1,15,ZLCGSPRE      Get GENSYM prefix string
         BZ    NOPREFIX            If there is one, then...
         LA    #7,##VECDAT(,#1)     get address of prefix string
         XR    #4,#4                clear insert register
         ICM   #4,7,1(#1)           get length of GENSYM prefix
         B     AFTPREFX            else
NOPREFIX DS    0H                   ... no GENSYM prefix in use...
         LA    #4,1                 get length of default GENSYM prefix
         XR    #7,#7                clear address of GENSYM prefix
AFTPREFX DS    0H
*                                  #4 = length of prefix
*                                  #7 = address of prefix
*                                  #5 = length of converted integer
*                                  #6 = address of converted integer
         SPACE 1
***********************************************************************
*                                                                     *
* Get storage for the entire GENSYM in one swoop. This consists of    *
*                                                                     *
* (1) storage for the symbol header - ##SYMLEN bytes                  *
* (2) storage for the print name of the GENSYM, consisting of...      *
*                                                                     *
*     ##VECDAT + length of prefix + length of converted counter       *
*                                                                     *
***********************************************************************
         SPACE 1
REPEAT   DS    0H                  Back here in case GC was required
         SPACE 1
         LA    #14,3+##SYMLEN+##VECDAT(#4,#5)
         N     #14,=X'FFFFFFFC'    Round up to fullword
         SPACE 1
******** L     #1,ZLCVSADR         Get address of vector/string space
******** L     #2,ZLCVSLEN         Get length of vector/string space
******** L     #3,ZLCVSNXT         Get address of next available slot
         LM    #1,#3,ZLCVSADR      Get all of the above
         AR    #14,#3              Next slot + needed length = new end
         AR    #1,#2               Get address of end of V/S space
         CR    #14,#1              If out of room
         BH    NOROOM              then go try to get some more
         LR    #0,#4               Get length of prefix string into #0
         LR    #4,#14              Get end-pointer-to-be
         MVC   0(##SYMLEN,#3),ZLCNSYM Init from new symbol template
         LA    #14,##SYMLEN(,#3)   PNAME = other part of space
         ST    #14,##PNAME(,#3)    Store into print name cell
* Package cell remains "uninterned"
         ST    #10,##PPKG(,#3)     Set package cell to NIL
         LR    #14,#0              Get prefix string length
         AR    #14,#5              Add integer length
         ST    #14,##SYMLEN+0(,#3) Store print name string length
         MVI   ##SYMLEN+0(#3),##STRING Set print name string type
         LR    #15,#0              Destination length of prefix string
         LTR   #0,#7               Source address of GENSYM prefix
         BNZ   MVCLPRFX            If zero, then
         MVI   ##SYMLEN+##VECDAT(#3),C'G'  set default prefix
         LA    #14,##SYMLEN+##VECDAT+1(,#3)
         B     AFTMPRFX            else
MVCLPRFX DS    0H                   use user-set prefix
         LR    #1,#15               Source length of GENSYM prefix
         LA    #14,##SYMLEN+##VECDAT(,#3) Dest addr in string area
         MVCL  #14,#0               Move prefix text to string area
AFTMPRFX DS    0H
* Now #14 points to where to put the rest of the text.
         BCTR  #5,0                Adjust length of suffix for EX
         EX    #5,MOVEINT          Move converted integer to string
         ST    #4,ZLCVSNXT         Update next-slot VSS pointer
         LR    #15,#3              Point to newly built GENSYM
         SPACE 1
RETURN   DS    0H                  RETURN WITH NEW ATOM <-- REG 15
         SPACE 1
         #ZRET ,                   RESTORE REGISTERS AND RETURN
         SPACE 1
MOVEINT  MVC   0(*-*,#14),0(#6)    Executed: move converted integer suf
         SPACE 1
GWORK    DS    CL12                Work area for converting counter
         SPACE 1
NOROOM   DS    0H                  WHAT IF THERE'S NO STRING SPACE?
         LTR   #0,#0               IF THIS IS THE SECOND ATTEMPT
         BZ    ERROR               THEN FAIL - SPACE ALL FULL
         L     #9,ZLCGCEND         FORCE END OF FREE LIST
         LR    #1,#10              SET DUMMY ARG 1 TO CONS = NIL
         LR    #2,#10              SET DUMMY ARG 2 TO CONS = NIL
*                                  #0 ALREADY POINTS TO CUR STACK LOC
         L     #15,ZLCCONS         GET ADDRESS OF ZILCONS
         #BASR #14,#15             CALL CONS:FORCE A GARBAGE COLLECTION
         XR    #0,#0               CLEAR #0 TO PREVENT ANOTHER GC
         B     REPEAT              AND TRY IT AGAIN
         SPACE
ERROR1   DS    0H
         #ERR  'Argument 1 to GENSYM not a string or nonnegative fixnumX
                - ',0(#11)
         SPACE
ERROR    DS    0H
         #ERR  'ZIL2025 No string space available to create GENSYM.',  X
               PREFIX=NO
         SPACE 1
         LTORG
         END
