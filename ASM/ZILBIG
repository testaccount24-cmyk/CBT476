         TITLE 'ZILBIG - ZIL 1.3 BIGNUM ALLOCATION ROUTINES'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* THIS SUBROUTINE HANDLES REQUESTS FROM ASSEMBLER LANGUAGE PROGRAMS   *
* FOR BIGNUM SPACE.                                                   *
*                                                                     *
* THIS ROUTINE PERFORMS THE FOLLOWING FUNCTIONS:                      *
*                                                                     *
*  INSURES THAT SUFFICIENT SPACE IS PRESENT IN VECTOR/STRING SPACE.   *
*  IF NOT, FORCES A GARBAGE COLLECTION AND RECHECKS.                  *
*                                                                     *
*  MINIMALLY FORMATS THE SPACE WITH TYPE BITS ONLY.                   *
*                                                                     *
*  THIS ROUTINE DOES NOT FILL IN ANY OF THE REST OF THE BIGNUM AREA,  *
*  NOR DOES IT UPDATE THE END-OF-USED-VSS POINTER.  IT IS THE         *
*  RESPONSIBILITY OF THE CALLER TO FILL IN THE LENGTH AND SET THE     *
*  "ZLCVSNXT" FIELD AS SOON AS THE TRUE LENGTH IS KNOWN.  THIS ALSO   *
*  GIVES THE CALLER THE OPPORTUNITY OF USING THE BIGNUM AREA AS A     *
*  TEMPORARY WORK AREA WHICH WILL NEVER BECOME A PERMANENT OBJECT.    *
*                                                                     *
*  THIS ROUTINE WILL SIGNAL AN ERROR IF NO SPACE IS AVAILABLE TO      *
*  BUILD THE BIGNUM.  FOR SPEED, NO VALIDITY CHECKING OF THE INPUT    *
*  IS DONE.                                                           *
*                                                                     *
*  ON ENTRY:                                                          *
*                                                                     *
*  REGISTER 0 POINTS TO THE CURRENT STACK LOCATION.                   *
*  REGISTER 1 IS NOT USED.                                            *
*  REGISTER 2 CONTAINS THE LENGTH IN BYTES OF THE BIGNUM SPACE.       *
*             THAT INCLUDES THE 4-BYTE HEADER!!!                      *
*             THIS FIGURE MUST ALLOW FOR THE MAXIMUM POSSIBLE SPACE   *
*             THAT THE BIGNUM MAY OCCUPY (THERE IS NO "SLUSH FUND").  *
*                                                                     *
*  REGISTERS 14 AND 15 HAVE THEIR STEREOTYPICAL VALUES ON ENTRY.      *
*                                                                     *
*  ON RETURN:                                                         *
*                                                                     *
*  REGISTER 15 POINTS TO THE HEADER OF THE BIGNUM OBJECT, WHICH HAS   *
*              THE BIGNUM TYPE BITS SET AND NOTHING ELSE.             *
*                                                                     *
*  THIS ROUTINE CLOBBERS REGISTERS 1 AND 4.  HOWEVER, REGISTERS       *
*  0 AND 2 ARE THE SAME UPON RETURN.                                  *
*                                                                     *
***********************************************************************
         SPACE 1
ZILBIG   CSECT
         SPACE 1
         LR    #4,#15
         USING ZILBIG,#4
         USING ZLCOMMON,#13
         SPACE 1
RETRY    DS    0H
         L     #1,ZLCVSADR         GET ADDRESS OF V/S SPACE
         L     #15,ZLCVSNXT        GET ADDRESS OF AVAILABLE SLOT
         A     #1,ZLCVSLEN         ADD LENGTH TO POINT TO END OF SPACE
         SR    #1,#15              GET LENGTH OF SPACE NOW AVAILABLE
         CR    #2,#1               IF SPACE REQUESTED IS LARGER
         BH    ZBIGGC              THEN GO TO GC AND RETRY. ELSE
DOIT     DS    0H
         MVI   0(#15),##BIGNUM     SET TYPE BITS = BIGNUM
         BR    #14                 RETURN TO CALLER
         SPACE 1
ZBIGGC   DS    0H                  HERE IF NO ROOM FOR OBJECT
         SPACE 1
***********************************************************************
*                                                                     *
* THIS ROUTINE IS EXECUTED WHEN THERE ISN'T ENOUGH ROOM TO            *
* PERFORM THE REQUESTED OPERATION AND A GARBAGE COLLECTION IS TO      *
* BE ATTEMPTED SO THAT ENOUGH ROOM WILL BE AVAILABLE.                 *
*                                                                     *
***********************************************************************
         SPACE 1
         L     #9,ZLCGCEND         FORCE END OF FREE LIST
*
* NOW DO SOME DUMMY CONS TO FORCE A GARBAGE COLLECTION TO OCCUR.
*
         STM   #14,#2,ZBIGSAVE     SAVE VOLATILE REGS
         LR    #1,#10              SET CONS ARG 1 TO NIL (CAR-TO-BE)
         LR    #2,#10              SET CONS ARG 1 TO NIL (CAR-TO-BE)
         L     #15,ZLCCONS         GET ADDRESS OF ZILCONS
         #BASR #14,#15             CALL CONS TO DO GARBAGE COLLECTION
         LM    #14,#2,ZBIGSAVE     RESTORE VOLATILE REGS
*
* START OVER...
*
         L     #1,ZLCVSADR         GET ADDRESS OF V/S SPACE
         L     #15,ZLCVSNXT        GET ADDRESS OF AVAILABLE SLOT
         A     #1,ZLCVSLEN         ADD LENGTH TO POINT TO END OF SPACE
         SR    #1,#15              GET LENGTH OF SPACE NOW AVAILABLE
         CR    #2,#1               IF SPACE REQUESTED IS LARGER
         BNH   DOIT                THEN FAIL. ELSE WE GOT IT, GO TO IT
         SPACE 1
         #ERR  'ZIL3101 ZILBIG: No vector/string space available for biX
               gnum.',PREFIX=NO
         SPACE 1
ZBIGSAVE DS    5A                  SAVE REGS ACROSS GC
         SPACE 1
         LTORG
         SPACE 1
         #ZEQU ,
         SPACE 1
         #ZCOM ,
         END
