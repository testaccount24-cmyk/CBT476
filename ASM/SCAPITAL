***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
         TITLE 'STRING-CAPITALIZE - MACROS'
         MACRO
&SYM     XTRT  &DATR,&TABLE,&LENR=,&EX=,&F256=#0
         LCLC  &LBLA,&LBLB,&LBLC
&LBLA    SETC  'XTRA&SYSNDX'
&LBLB    SETC  'XTRB&SYSNDX'
         AIF   ('&SYM' EQ '').FOO
&LBLC    SETC  '&SYM'
         AGO   .BAR
.FOO     ANOP
&LBLC    SETC  'XTRC&SYSNDX'
.BAR     ANOP
&LBLC    DS    0H
         CR    &LENR,&F256          If length greater than 256
         BNH   &LBLA                then...
         TRT   0(256,&DATR),&TABLE   scan for desired characters
         BNZ   &LBLB                 If we found something, exit
         AR    &DATR,&F256           Else increment text pointer by 256
         SR    &LENR,&F256           Decrement length by 256
         B     &LBLC                 Continue scanning.
&LBLA    DS    0H                  Else...
         BCTR  &LENR,0              Reduce length for execute
         EX    &LENR,&EX            Scan for desired characters
&LBLB    DS    0H
         MEND
         TITLE 'STRING-CAPITALIZE - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* STRING-CAPITALIZE                                                   *
*                                                                     *
* Reference:  CLtL, pp. 303-304.                                      *
*                                                                     *
* 06/20/90 - Fixed bug - looping during scan                          *
*                                                                     *
***********************************************************************
         SPACE 1
SCAPITAL #ZBEG MINARGS=1,MAXARGS=1,NAME='STRING-CAPITALIZE'
         #ZPDS 16                  DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
         SPACE
         L     #3,0(,#11)          LOAD ARG1
         CLI   ##TYPE(#3),##STRING IF ARGUMENT IS A STRING
         BE    ARG1OK              THEN OK
         CLI   ##TYPE(#3),##SYMBOL IF ARGUMENT IS A SYMBOL
         BNE   ERROR1              THEN
         L     #3,##PNAME(,#3)      TAKE THE PRINT NAME, ELSE ERROR
ARG1OK   DS    0H
         XR    #7,#7               CLEAR INSERT REGISTER
         ST    #3,0(,#11)          STORE BACK ON STACK FOR FUTURE USE
         ICM   #7,7,1(#3)          GET LENGTH OF STRING
         BZ    RETSELF             IF ZERO-LENGTH STRING, RETURN SELF
         LA    #14,##VECDAT(,#3)   POINT TO TEXT OF STRING
         LR    #15,#7              GET LENGTH
         LA    #0,256              SET UP CONSTANT 256
TALOOP   DS    0H                  LOOP TO SCAN STRING
         XTRT  #14,TRTALPHA,LENR=#15,EX=EXTRTA  Scan for any alpha's
         BZ    RETSELF             IF NO BAD CHARS, RETURN SELF
COPYIT   DS    0H                  ALPHABETIC DATA, HAVE TO COPY
         LR    #2,#7               GET LENGTH INTO REG FOR ZILVSS
         XR    #1,#1               ENTRY CODE 0 = ALLOCATE NEW SPACE
         L     #15,ZLCVSS          GET ADDRESS OF ZILVSS
         LA    #0,16(,#11)         SET CURRENT STACK POINTER FOR GC
         #BASR #14,#15             CALL ZILVSS TO CREATE A STRING
         LTR   #4,#15              IF STRING BUILD FAILED
         BZ    ERROR2              THEN ERROR
         L     #1,0(,#11)          GET POINTER TO ORIGINAL STRING
         LA    #0,##VECDAT(,#1)    POINT TO STRING TEXT
         LA    #14,##VECDAT(,#4)   POINT TO WHERE TO MOVE STRING TEXT
         LR    #1,#7               GET LENGTH OF STRING TEXT TO MOVE
         LR    #15,#7
         MVCL  #14,#0              MOVE TEXT FROM OLD STRING TO NEW
         LA    #5,##VECDAT(,#4)    POINT TO TEXT OF STRING
         LR    #15,#7              GET LENGTH
         LA    #0,256              SET UP CONSTANT 256
         LA    #3,0(#5,#7)         Preset to point to end of string
TRTNEXT  DS    0H                  Loop to translate string
         LR    #15,#3              End of string minus where we are now
         SR    #15,#5              Get length of string remaining
         XR    #1,#1               Preset in case nothing found
         LR    #14,#5              Load pointer for extended TRT
         XTRT  #14,TRTANUM,LENR=#15,EX=EXTRTAN   Find next alphanumeric
         LTR   #5,#1               Point to start of found substring
         BZ    DONE                If none, finished translating
         LR    #1,#3               Preset to point to end of string
         LR    #15,#3              End of string minus where we are now
         SR    #15,#5              Get length of string remaining
         LR    #14,#5              Load pointer for extended TRT
         XTRT  #14,TRTNANUM,LENR=#15,EX=EXTRTNAN  Find next nonalphanum
         LR    #2,#1               End of substring minus start thereof
         SR    #2,#5               Get length of substring to translate
         BNP   TRTNEXT             If not > 0, nothing to translate
         TR    0(1,#5),TRUPPER     Translate first letter to upper case
         LA    #5,1(,#5)           Bump to next characters
         BCT   #2,TRLOOP           Decrement length
         B     TRUDONE             Skip rest of translation if zero
TRLOOP   DS    0H
         CR    #2,#0               If longer than 256,
         BNH   SHORTTR             then...
         TR    0(256,#5),TRLOWER   Translate rest to lower case
         AR    #5,#0               Bump to next 256 characters
         SR    #2,#0               Bump down length
         B     TRLOOP              and continue translating.
SHORTTR  DS    0H
         BCTR  #2,0                Reduce length for execute
         EX    #2,EXTRL            Translate to lower case
TRUDONE  DS    0H                  Finished translating this substring
         LR    #5,#1               Point to next part of string
         CR    #5,#3               As long as there's data left,
         BL    TRTNEXT             Continue looking for data to trans
DONE     DS    0H                  ALL FINISHED
         LR    #15,#4              POINT TO NEWLY BUILT STRING
         B     RETURN              RETURN THE ATOM IN #15
         SPACE 1
RETSELF  DS    0H                  Null string, or no alphabetics
         LR    #15,#3              RETURN THE STRING PASSED
RETURN   DS    0H
         SPACE 1
         #ZRET ,                   RESTORE REGISTERS AND RETURN
         SPACE 1
EXTRTA   TRT   0(*-*,#14),TRTALPHA EXECUTED: SCAN FOR ALPHABETICS
EXTRTAN  TRT   0(*-*,#14),TRTANUM  EXECUTED: SCAN FOR NONALPHANUMERICS
EXTRTNAN TRT   0(*-*,#14),TRTNANUM EXECUTED: SCAN FOR NONALPHANUMERICS
EXTRL    TR    0(*-*,#5),TRLOWER   EXECUTED: TRANSLATE TO LOWERCASE
         SPACE 1
TRTALPHA DC    256X'00'            TABLE TO SCAN FOR ALPHABETIC CHARS
         ORG   TRTALPHA+C'A'-X'40'
         DC    9XL1'FF'
         ORG   TRTALPHA+C'J'-X'40'
         DC    9XL1'FF'
         ORG   TRTALPHA+C'S'-X'40'
         DC    8XL1'FF'
         ORG   TRTALPHA+C'A'
         DC    9XL1'FF'
         ORG   TRTALPHA+C'J'
         DC    9XL1'FF'
         ORG   TRTALPHA+C'S'
         DC    8XL1'FF'
         ORG   ,
         SPACE 1
TRTANUM  DC    256X'00'            TABLE TO SCAN FOR ALPHANUMERICS
         ORG   TRTANUM+C'A'-X'40'
         DC    9XL1'FF'
         ORG   TRTANUM+C'J'-X'40'
         DC    9XL1'FF'
         ORG   TRTANUM+C'S'-X'40'
         DC    8XL1'FF'
         ORG   TRTANUM+C'A'
         DC    9XL1'FF'
         ORG   TRTANUM+C'J'
         DC    9XL1'FF'
         ORG   TRTANUM+C'S'
         DC    8XL1'FF'
         ORG   TRTANUM+C'0'
         DC    10XL1'FF'
         ORG   ,
         SPACE 1
TRTNANUM DC    256X'FF'            TABLE TO SCAN FOR NON-ALPHANUMERICS
         ORG   TRTNANUM+C'A'-X'40'
         DC    9XL1'00'
         ORG   TRTNANUM+C'J'-X'40'
         DC    9XL1'00'
         ORG   TRTNANUM+C'S'-X'40'
         DC    8XL1'00'
         ORG   TRTNANUM+C'A'
         DC    9XL1'00'
         ORG   TRTNANUM+C'J'
         DC    9XL1'00'
         ORG   TRTNANUM+C'S'
         DC    8XL1'00'
         ORG   TRTNANUM+C'0'
         DC    10XL1'00'
         ORG   ,
         SPACE 1
TRUPPER  DC    256YL1(*-TRUPPER)   TABLE TO TRANSLATE TO UPPERCASE
         ORG   TRUPPER+C'A'-X'40'
         DC    C'ABCDEFGHI'
         ORG   TRUPPER+C'J'-X'40'
         DC    C'JKLMNOPQR'
         ORG   TRUPPER+C'S'-X'40'
         DC    C'STUVWXYZ'
         ORG   ,
         SPACE 1
TRLOWER  DC    256YL1(*-TRLOWER)   TABLE TO TRANSLATE TO LOWERCASE
         ORG   TRLOWER+C'A'
         DC    C'abcdefghi'
         ORG   TRLOWER+C'J'
         DC    C'jklmnopqr'
         ORG   TRLOWER+C'S'
         DC    C'stuvwxyz'
         ORG   ,
         SPACE 1
ERROR1   #ERR  'Argument to STRING-CAPITALIZE not a string - ',(#3)
         SPACE 1
ERROR2   #ERR  PREFIX=NO,          NOT ENUF ROOM                       X
               'ZIL4010 STRING-CAPITALIZE: Not enough vector/string spaX
               ce to build string.'
         SPACE 1
         LTORG
         END
