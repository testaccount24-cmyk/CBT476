         TITLE 'HAULONG - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* HAULONG takes one integer argument.                                 *
*                                                                     *
* Maclisp complete.                                                   *
*                                                                     *
* Idiom for (INTEGER-LENGTH (ABS n)) in Common Lisp.                  *
*                                                                     *
* Scalar and vector versions.                                         *
*                                                                     *
***********************************************************************
         GBLB  &ZILVF
HAULONG  #ZBEG MINARGS=1,MAXARGS=1,NAME='HAULONG'
*---------------------------------------------------------------------*
* Calculate the number of significant bits in the integer.  The       *
* number of bits up to and including the lefmost "1" bit of the       *
* magnitude of the integer.  This scheme results in the number 0      *
* having a length of 0.                                               *
*                                                                     *
* For bignums, it's the HAULONG of the most significant word, plus 31 *
* times the number of remaining words.                                *
*                                                                     *
* In the scalar version, speed is biased towards the smaller fixnums  *
* by searching for the leftmost significant bit by searching from     *
* the right.                                                          *
*                                                                     *
* The difference in speed between the vector and scalar versions      *
* is always marginal on an IBM 3090.  For small fixnums, the scalar   *
* version is actually a tiny bit faster, due to the bias to small     *
* numbers, but the vector version should generally be implemented     *
* for machines that have IBM/370 Vector Facilities because the        *
* potential speedup of the vector hardware in future products is      *
* greater than the speedup of the scalar instructions used to do the  *
* job, which are already fast 1-cycle instructions on the IBM 3090.   *
*                                                                     *
* The vector instruction VCZVM does exactly what we want.  We should  *
* stick to that rather than second-guessing hardware bottlenecks      *
* and programming around them.  As an example, when going from the    *
* IBM 3084 to the IBM 3090, the double-shift scalar instructions      *
* speeded up from about 5 cycles to 1 cycle, while the single-shift   *
* instructions were the same number of cycles.  Thus, anyone who      *
* simulated certain uses of double shifts in alternate ways because   *
* of the slow speed of the double-shift, got screwed and can't get    *
* the benefit now that the double-shifts are speeded up on the IBM    *
* 3090.                                                               *
*---------------------------------------------------------------------*
         AIF   (&ZILVF).VFIX
*---------------------------------------------------------------------*
* Scalar version.  Start here for all cases.                          *
*---------------------------------------------------------------------*
         L     #7,0(,#1)           Load argument
         XR    #5,#5               Clear, need this for many paths
         CLI   ##TYPE(#7),##FIXNUM Is arg a fixnum?
         BNE   NF                  Branch if not fixed
*
F        L     #6,##CDR(,#7)       Load fixnum
         LPR   #6,#6               We need only the magnitude
         BZ    FZ                  Fixnum is zero, no count
         BO    RET32               It's most neg fixnum, 32 bits
FPLOOP   SRA   #6,1                Have at least one 1, pop it out
         LA    #5,8(,#5)           Count by 1 in small fixnum table
         BNZ   FPLOOP              We have more bits to count
         LA    #15,#SFT(#5)        Point to correct number in SFT
         BR    #14                 Return to caller
*
FZ       LA    #15,#SFT            Point to 0 in SFT
         BR    #14                 Return to caller
*
RET32    LA    #15,#SFT+8*32       Point to 32 in SFT
         BR    #14                 Return to caller
*---------------------------------------------------------------------*
* Scalar version.  Continue here if not a fixnum.  Note that a faulty *
* bignum containing a leading 0 word will loop forever at label MORE. *
*---------------------------------------------------------------------*
NF       CLI   ##TYPE(#7),##BIGNUM Is arg a bignum?
         BNE   ERROR1              Branch if not fixed
         ICM   #5,B'0111',1(#7)    Load bignum length
         LR    #2,#5               Make extra copy of bignum length
         L     #6,##VECDAT-4(#5,#7) Get most significant word
         SRA   #2,2                /4, change bytes to words
         MH    #2,=H'31'           *31, words to bits, max possible
         SLA   #6,1                Shift out a bit on the left
         BO    COUNTED             Most significant bit shifted out
MORE     SLA   #6,1                Shift out another bit on the right
         BCTR  #2,0                Decrease count of bits
         BNO   MORE                More bits need to be examined
COUNTED  CL    #2,ZLCSFTHI         Is answer in small fixnum table?
         BH    FCONS               No?  Must cons up a new fixnum
         SLL   #2,3                *8 for offset in SFT
         LA    #15,#SFT(#2)        Calculate small fixnum table addr
         BR    #14                 Return to caller
*
FCONS    LR    #6,#14              Save return address
         #MKAT FIXED               Cons up a fixnum
         BR    #6                  Return to caller
*=====================================================================*
         AGO   .CONTIN1
.VFIX    ANOP
*---------------------------------------------------------------------*
*  Vector version of HAULONG.                                         *
*                                                                     *
*  The vector mask instructions are used to count the zeroes to the   *
*  left of the leftmost 1 in the fixnum (highest word if bignum)      *
*  This is then subtracted from the maximum number of bits the        *
*  word could have contained (highest word for bignum).  (For         *
*  bignums, the number of bits below the highest word are computed    *
*  and added to the count.                                            *
*---------------------------------------------------------------------*
         L     #7,0(,#1)           Load argument
         XR    #5,#5               Clear, need this for many paths
         CLI   ##TYPE(#7),##FIXNUM Is arg a fixnum?
         VRCL  0                   Clear vector interrupt index
         BNE   NF                  Branch if not fixed
*
F        L     #6,##CDR(,#7)       Load fixnum
         LPR   #6,#6               We need only the magnitude
         LA    #4,32               Number of bits to test in vec loop
         ST    #6,ZLCDBL           Store in temporary for VLVM
         LA    #6,ZLCDBL           Make pointer to fixnum quantity
         VLVCU #4                  Set vector count to # of bits
FPZLOOP  VLVM  #6                  Load a section of bits
         VCZVM #5                  Count the left contiguous 0-bits
         VLVCU #4                  Update vector count
         BC    3,FPZLOOP           More bits?
         LCR   #5,#5               Take negative, need 32-(#5)
         SLA   #5,3                Convert to displacement in SFT
         LA    #15,#SFT+32*8(#5)   Add to address of 32 (total bits)
         BR    #14                 Return position of leftmost 1
*---------------------------------------------------------------------*
* Vector version.  Continue here if not a fixnum.                     *
*---------------------------------------------------------------------*
NF       CLI   ##TYPE(#7),##BIGNUM Is arg a bignum?
         BNE   ERROR1              Branch if not fixed
         XR    #2,#2               Clear for loading 3-byte length
         ICM   #2,B'0111',1(#7)    Load bignum length
         LA    #4,32               Number of bits to examine
         LR    #3,#2               Save bignum length for later
         LA    #6,##VECDAT-4(#2,#7) Get most significant word
         VLVCU #4                  Set vector count to # of bits
BLOOP    VLVM  #6                  Load a section of bits
         VCZVM #5                  Count the left contiguous 0-bits
         VLVCU #4                  Update vector count
         BC    3,BLOOP             More bits?
         SRA   #2,2                /4, change bytes to words
         L     #6,##VECDAT-4(#3,#7) Get most significant word
         BCTR  #5,0                Don't include bit 0 of VCZVM count
         MH    #2,=H'31'           *31, words to bits, max possible
         SLL   #6,2(#5)            Shift out the leftmost 1 to left
         SLR   #2,#5               Position of leftmost 1 in bignum
COUNTED  CL    #2,ZLCSFTHI         Is answer in small fixnum table?
         BH    FCONS               No?  Must cons up a new fixnum
         SLA   #2,3                *8 for offset in SFT
         LA    #15,#SFT(#2)        Small fixnum
         BR    #14                 Return to caller
*
FCONS    LR    #6,#14              Save return address
         #MKAT FIXED               Cons up a fixnum
         BR    #6                  Return to caller
*=====================================================================*
.CONTIN1 ANOP
*
         DROP  #15
         USING HAULONG,#3
         SPACE 1
ERROR1   LR    #3,#15
         #ERR  'Argument to HAULONG not an integer - ',(#7)
         SPACE 1
         LTORG
         END
