         TITLE 'ZILADD - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* ZILADD TAKES TWO ARGUMENTS. BOTH MUST BE NUMERIC ATOMS.             *
*                                                                     *
* CONVERSION RULES ARE AS FOLLOWS:                                    *
*                                                                     *
* 1. BOTH ARGS INTEGER       - PERFORM INTEGER ADDITION.              *
* 2. BOTH ARGS FLOAT         - PERFORM REAL ADDITION.                 *
* 3. ONE FIXED, ONE FLOAT    - CONVERT THE FIXED ARGUMENT TO          *
*                              FLOAT AND PERFORM REAL ADDITION.       *
*                                                                     *
* ANY OTHER TYPES CAUSE AN ERROR.                                     *
*                                                                     *
* For future consideration:                                           *
*                                                                     *
* ===> Make short path for FIXNUM + FIXNUM = FINXUM such that there   *
*      is no stack saving or restoring.                               *
*                                                                     *
***********************************************************************
         SPACE
ZILADD   #ZBEG MINARGS=2,MAXARGS=2,NAME='ZILADD'
         SPACE
         #ZPDS 20                  DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
         SPACE
         LM    #6,#7,0(#11)        LOAD ARGUMENTS
         CLI   ##TYPE(#6),##FIXNUM
         BNE   NFIX1
         CLI   ##TYPE(#7),##FIXNUM
         BNE   FX1NFX2
*---------------------------------------------------------------------*
*                      FIXNUM TO FIXNUM ADD                           *
*---------------------------------------------------------------------*
         L     #2,##CDR(,#6)       GET FIXED VALUE 1
         A     #2,##CDR(,#7)       ADD THEM
         BO    OVERFIX             OVERFLOW OCCURRED, MUST BE BIGNUM
         #MKAT FIXED               MAKE A FIXNUM
******** B     RETURN              AND RETURN WITH IT
         SPACE 1
RETURN   DS    0H                  RETURN WITH NEW ATOM
         SPACE 1
         #ZRET ,                   RESTORE REGISTERS AND RETURN
*
*---------------------------------------------------------------------*
*         FIXNUM ADD OVERFLOWED - MUST RESULT IN BIGNUM               *
*---------------------------------------------------------------------*
OVERFIX  LCR   #3,#2               EXAMINE RESULT, ALSO #3 MAY BE NICE
         BP    FFBIGP              RESULT IS POSITIVE BIGNUM
         BM    FFBIGM              RESULT IS NEGATIVE BIGNUM
         BZ    FFBIGM32            RESULT IS NEG BIGNUM -2**32
         LA    #15,#TWO31          OVERFLOW, BIGNUM IS 2**31
         B     RETURN
*
FFBIGM32 LA    #15,#MTWO32         POINT TO -2**32
         B     RETURN
*
FFBIGP   LR    #3,#2               SAVE IN #3, #2 USED BY ZILBIG
         N     #3,=X'7FFFFFFF'     MASK OUT CARRY BIT
FFBIGM   L     #15,ZLCBIG          ADDRESS OF BIGNUM MAKER
         LA    #2,12               LENGTH OF BIGNUM NEEDED FOR RESULT
         #BASR #14,#15             MAKE BIGNUMS, NOT WAR
         MVC   0(12,#15),#TWO31    USEFUL TEMPLATE, SAVES WORK
         ST    #3,##VECDAT(,#15)   STORE LS WORD IN RESULT
         AR    #2,#15              POINT TO END OF RESULT
         ST    #2,ZLCVSNXT         UPDATE AVAILABILITY POINTER
         B     RETURN
*
NFIX1    CLI   ##TYPE(#6),##BIGNUM
         BNE   NFXBG1              ARG1 NOT FIXED NOR BIG
*
* ARG 1 IS A BIGNUM
*
         CLI   ##TYPE(#7),##FIXNUM
         BE    BIGFIX              ARG1 IS BIGNUM, ARG2 IS FIXNUM
         CLI   ##TYPE(#7),##BIGNUM
         BE    BIGBIG              ARG1 IS BIGNUM, ARG2 IS BIGNUM
         CLI   ##TYPE(#7),##SFLOAT
         BE    BIGSFLO             ARG1 IS BIGNUM, ARG2 IS SINGLE-FLOAT
         CLI   ##TYPE(#7),##DFLOAT
         BE    BIGDFLO             ARG1 IS BIGNUM, ARG2 IS DOUBLE-FLOAT
         B     ERROR2
BIGSFLO  DS    0H                  Bignum and single-float
         L     #15,ZLCCVBF         Get address of ZILCVBF
         LR    #5,#6               Arg1 is bignum, arg2 is float
         #BASR #14,#15             Convert bignum to float
         LER   #F2,#F0             Get float value for arg1
         B     ADDSFLO1            Go to add arg1 to float arg2
BIGDFLO  DS    0H                  Bignum and double-float
         L     #15,ZLCCVBF         Get address of ZILCVBF
         LNR   #5,#6               Arg1 is bignum, arg2 is float
         #BASR #14,#15             Convert bignum to float
         LDR   #F2,#F0             Get float value for arg1
         B     ADDDFLO1            Go to add arg1 to float arg2
*---------------------------------------------------------------------*
*                      BIGNUM TO BIGNUM ADD                           *
*---------------------------------------------------------------------*
BIGBIG   XR    #5,#5               CLEAR FOR LOADING BIGNUM LENGTH ARG1
         XR    #3,#3               CLEAR FOR LOADING BIGNUM LENGTH ARG2
         ICM   #5,7,1(#6)          LOAD LENGTH OF ARG1
         ICM   #3,7,1(#7)          LOAD LENGTH OF ARG2
         CR    #5,#3               COMPARE LENGTHS
         BH    BBNEXCH             DON'T EXCHANGE POINTERS
         BE    BBEQLN              SAME LENGTHS - BETTER CHECK SIGNS
         ST    #7,0(,#11)          STORE #7 IN PLACE OF OLD #6
         ST    #6,4(,#11)          STORE #6 IN PLACE OF OLD #7
         LR    #6,#5               EXCHANGE LENGTHS IN #3 AND #5
         LR    #5,#3                           "
         LR    #3,#6                           "
BBNEXCH  L     #15,ZLCBIG          GET ADDRESS OF ZILBIG
         LA    #2,##VECDAT+4(,#5)  ASSUME ARG1 IS GREATER OR EQ IN LEN.
         #BASR #14,#15             SET UP A BIGNUM
         LM    #6,#7,0(#11)        GC MAY HAVE MOVED POINTERS
         LA    #2,4                INCREMENT AMOUNT FOR BXLE(WORD SIZE)
         ICM   #0,15,##VECDAT(#6)  GET LS WORD OF ARG1
         BM    BMB                 BIGNUM1 IS NEGATIVE
         ICM   #1,15,##VECDAT(#7)  GET LS WORD OF ARG2
         BM    BPBM                BIGNUM1 POSITIVE, BIGNUM2 NEGATIVE
BPBP     ALR   #0,#1               ADD LS WORDS OF BIGNUMS
         SRDL  #0,31               SHIFT CARRY BIT TO #0, 31 BIT RADIX
         SRL   #1,1                RESTORE SHIFTED WORD, HIGH BIT NOW 0
BMBMCONT ST    #1,##VECDAT(,#15)   STORE LS WORD OF SUM
         LA    #4,8                SET OFFSET POINTER FOR LOOP
BPBPL1   AL    #0,0(#4,#6)         ADD NEXT WORD OF ARG1 TO CARRY
         AL    #0,0(#4,#7)         ADD NEXT WORD OF ARG2 TO THIS SUM
         SRDL  #0,31               SHIFT RIGHT ALL BUT CARRY BIT
         SRL   #1,1                RIGHT JUSTIFY 31 BIT NUMBER IN #1
         ST    #1,0(#4,#15)        STORE INTO RESULT BIGNUM
         BXLE  #4,#2,BPBPL1        NOT DONE WITH SHORTER BIGNUM
         CR    #3,#5               COMPARE TWO LENGTHS
         BE    BPBPSTOP            RAN OUT OF LONGER BIGNUM TOO
         LR    #3,#5               PUT LENGTH OF LONGER BIGNUM IN LIMIT
BPBPL2   AL    #0,0(#4,#6)         ADD NEXT WORD OF ARG1 TO CARRY
         SRDL  #0,31               SHIFT RIGHT ALL BUT CARRY BIT
         SRL   #1,1                RESTORE SHIFTED WORD, HIGH BIT NOW 0
         ST    #1,0(#4,#15)        STORE INTO RESULT BIGNUM
         BXLE  #4,#2,BPBPL2        NOT DONE WITH SHORTER BIGNUM
BPBPSTOP LTR   #0,#0               CARRY BIT LEFT OVER?
         BNZ   BPBPXC              YES, THERE IS AN EXTRA CARRY
         STCM  #3,7,1(#15)         STORE LENGTH INTO RESULT HEADER
         AR    #4,#15              CHANGE WHEN ##VECDAT CHANGES
         ST    #4,ZLCVSNXT         UPDATE AVAILABILITY POINTER
         B     RETURN
*
BPBPXC   STCM  #4,7,1(#15)         STORE LENGTH INTO RESULT HEADER
         ST    #0,0(#4,#15)        STORE CARRY (WHICH MUST BE 1)
         LA    #4,##VECDAT(#4,#15) CALCULATE POINTER TO END
         ST    #4,ZLCVSNXT         UPDATE AVAILABILITY POINTER
         B     RETURN
*
BMBM     ALR   #0,#1               ADD LS WRDS OF BIGNUMS,SIGNS CANCEL
         SRDL  #0,31               SHIFT CARRY BIT TO #0, 31 BIT RADIX
         SRL   #1,1                RESTORE SHIFTED WORD, HIGH BIT NOW 0
         O     #1,=X'80000000'     SET NEGATIVE SIGN ON LS RESULT WORD
         B     BMBMCONT            CAN SHARE THE REST OF CODE WITH BPBP
*
BBEQLN   TM    ##VECDAT(#6),X'80'  CHECK SIGN OF BIGNUM 1
         BO    EBMB                BIGNUM1 IS NEGATIVE
         TM    ##VECDAT(#7),X'80'  CHECK SIGN OF BIGNUM 2
         BNO   BBNEXCH             BIG 1 IS POS, BIG 2 IS POS
EBPBM    LA    #3,4                4 FOR BXH INDEX
         LR    #4,#5               POINT OFFSET TO MS WORD
         LCR   #2,#3               -4 IS BXH INCREMENT AMOUNT
EBPBML   L     #1,##VECDAT-4(#4,#6) GET WORD OF BIG1 FOR COMPARE
         C     #1,##VECDAT-4(#4,#7) COMPARE WITH WORD OF BIG2
         BH    B1B2SUB             OK BIG1 MUST BE BIGGER IN SIZE
         BL    B2B1SUB             OK BIG2 MUST BE BIGGER IN SIZE
         BXH   #4,#2,EBPBML        THIS WORD SAME, TRY NEXT
         L     #2,##VECDAT(,#6)    MADE IT HERE - MUST BE FIXNUM
         S     #2,##VECDAT(,#7)    DO SUBTRACTION OF LS PARTS
         X     #2,=X'80000000'     toggle out the sign bit from big2
         #MKAT FIXED               MAKE FIXNUM
         B     RETURN
*
EBMB     TM    ##VECDAT(#7),X'80'  CHECK SIGN OF BIGNUM 2
         BO    BBNEXCH             BOTH BIGNUMS ARE NEGATIVE
         ST    #7,0(,#11)          STORE #7 IN PLACE OF OLD #6
         LR    #14,#6              EXCHANGE REGS 6 AND 7
         LR    #6,#7               EXCHANGE REGS 6 AND 7
         LR    #7,#14              EXCHANGE REGS 6 AND 7
         STM   #6,#7,0(#11)        SAVE POINTERS FOR GC
         B     EBPBM               BIGNUMS SWITCHED, PROCEED
*
B1B2SUB  LR    #5,#4               SAVE MAX LENGTH OF RESULT
         L     #15,ZLCBIG          GET ADDRESS OF ZILBIG
         LA    #2,##VECDAT(,#5)    CALC MAXIMUM LENGTH FOR RESULT VECT
         #BASR #14,#15             SET UP A BIGNUM
         LM    #6,#7,0(#11)        GC MAY HAVE MOVED POINTERS
         LR    #4,#3               4 INTO REG 4 (ASSUMED FROM ABOVE)
         AR    #3,#3               8 INTO REG 3 (STARTING OFFSET)
         L     #0,##VECDAT(,#6)
         S     #0,##VECDAT(,#7)
         X     #0,=X'80000000'     TOGGLE UPPER BIT (CAUSED BY NEG)
         SRDA  #0,31               SHIFT RIGHT ALL BUT BORROW BIT
         SRL   #1,1                RESTORE SHIFTED WORD, HIGH BIT NOW 0
         ST    #1,##VECDAT(,#15)   STORE INTO RESULT BIGNUM
B1B2SUBL A     #0,##VECDAT-4(#3,#6) ADD TO BORROW FROM PREVIOUS SUBTRCT
         S     #0,##VECDAT-4(#3,#7)
         SRDA  #0,31               LEAVE BORROW IN REG 0
         SRL   #1,1                PUT REMAINING 31 BITS IN REG 1
         ST    #1,##VECDAT-4(#3,#15) STORE WORD INTO RESULT VECTOR
         BXLE  #3,#4,B1B2SUBL
         LTR   #1,#1               TEST FOR MS RESULT WORD BEING ZERO
         BZ    B1B2SUBX            OOPS, NEED TO WIPE OUT LEADING ZEROS
         AR    #3,#15              CALCULATE NEXT AVAILABLE VSS LOC.
         STCM  #5,7,1(#15)         STORE LENGTH INTO RESULT HEADER
         CLC   0(12,#15),MTWO31X   COMPARE NUMERIC PART AGAINST -2**31
         BE    MTWO31
         ST    #3,ZLCVSNXT         UPDATE VSS AVAILABILITY POINTER
         B     RETURN
*
B1B2SUBX LR    #3,#5               WIPING OUT LEADING ZEROS, DATA LEN.
         LR    #5,#4               GENERATE 4 FOR BXH LIMIT
         LCR   #4,#4               GENERATE -4 FOR BXH DECREMENT
         AR    #3,#4               DECREMENT POINTER
         CR    #3,#5               COMPARE AGAINST LS WORD OFFSET
         BE    B1B2SUBF            MUST BE FIXNUM RESULT
B1B2SUBM L     #0,##VECDAT-4(#3,#15) ONLY SOME LEADING ZEROS
         LTR   #0,#0               IS IT ZERO?
         BNZ   B1B2SUBZ            FOUND NONZERO WORD, STOP LOOP
         BXH   #3,#4,B1B2SUBM      GO AND TEST NEXT LESS SIGNIF WORD
B1B2SUBF L     #2,##VECDAT(,#15)   LS WORD OF BIGNUM NEEDS TO BE FIXNUM
         LA    #0,20(,#11)         RESTORE TOP-OF-STACK POINTER
         #MKAT FIXED               FORGET BIGNUM, IT'S FIXED
         B     RETURN
*
B1B2SUBZ LA    #1,##VECDAT(#3,#15) CALCULATE NEXT AVAILABLE VSS LOC.
         STCM  #3,7,1(#15)         STORE BIGNUM LENGTH IN HEADER
         CLC   0(12,#15),MTWO31X   COMPARE NUMERIC PART AGAINST -2**31
         BE    MTWO31
         ST    #1,ZLCVSNXT         UPDATE AVAILABILITY POINTER
         B     RETURN
*
B2B1SUB  ST    #7,0(,#11)          STORE #7 IN PLACE OF OLD #6
         ST    #6,4(,#11)          STORE #6 IN PLACE OF OLD #7
         LR    #5,#4               SAVE MAX LENGTH OF RESULT
         L     #15,ZLCBIG          GET ADDRESS OF ZILBIG
         LA    #2,##VECDAT(,#5)    CALC MAXIMUM LENGTH FOR RESULT VECT
         #BASR #14,#15             SET UP A BIGNUM
         LM    #6,#7,0(#11)        GC MAY HAVE MOVED POINTERS
         LR    #4,#3               4 INTO REG 4 (ASSUMED FROM ABOVE)
         AR    #3,#3               8 INTO REG 3 (STARTING OFFSET)
         L     #0,##VECDAT(,#6)    LOAD LS WORD FOR FIRST SUBTRACT
         S     #0,##VECDAT(,#7)    SUBTRACT LS WORD OF OTHER BIGNUM
         X     #0,=X'80000000'     TOGGLE UPPER BIT (CAUSED BY NEG)
         SRDA  #0,31               SHIFT RIGHT ALL BUT BORROW BIT
         SRL   #1,1                RESTORE SHIFTED WORD, HIGH BIT NOW 0
         LR    #14,#1              SAVE LS WORD OF BIGNUM
B2B1SUBL A     #0,##VECDAT-4(#3,#6) ADD TO BORROW FROM PREVIOUS SUBTRCT
         S     #0,##VECDAT-4(#3,#7) SUBTRACT SMALLER BIGNUM
         SRDA  #0,31               LEAVE BORROW IN REG 0
         SRL   #1,1                PUT REMAINING 31 BITS IN REG 1
         ST    #1,##VECDAT-4(#3,#15) STORE WORD INTO RESULT VECTOR
         BXLE  #3,#4,B2B1SUBL      NOT AT HIGHEST DIFFERENT WORD YET
         LTR   #1,#1               TEST FOR MS RESULT WORD BEING ZERO
         BZ    B2B1SUBX            OOPS, NEED TO WIPE OUT LEADING ZEROS
         O     #14,=X'80000000'    PUT NEGATIVE SIGN ON RESULT LS WORD
         ST    #14,##VECDAT(,#15)  STORE LS WORD OF RESULT BIGNUM
         AR    #3,#15              CALCULATE NEXT AVAILABLE VSS LOC.
         STCM  #5,7,1(#15)         STORE LENGTH INTO RESULT HEADER
         CLC   0(12,#15),MTWO31X   COMPARE NUMERIC PART AGAINST -2**31
         BE    MTWO31
         ST    #3,ZLCVSNXT         UPDATE VSS AVAILABILITY POINTER
         B     RETURN
*
B2B1SUBX LR    #3,#5               WIPING OUT LEADING ZEROS, DATA LEN.
         LR    #5,#4               GENERATE 4 FOR BXH LIMIT
         LCR   #4,#4               GENERATE -4 FOR BXH DECREMENT
         AR    #3,#4               DECREMENT POINTER
         CR    #3,#5               COMPARE AGAINST LS WORD OFFSET
         BE    B2B1SUBF            MUST BE FIXNUM RESULT
B2B1SUBM L     #0,##VECDAT-4(#3,#15) ONLY SOME LEADING ZEROS
         LTR   #0,#0               IS IT ZERO?
         BNZ   B2B1SUBZ            FOUND NONZERO WORD, STOP LOOP
         BXH   #3,#4,B2B1SUBM      GO AND TEST NEXT LESS SIGNIF WORD
B2B1SUBF LCR   #2,#14              GET LS WORD OF RESULT AND COMPLEMENT
         LA    #0,20(,#11)         RESTORE TOP-OF-STACK POINTER
         #MKAT FIXED               FORGET BIGNUM, IT'S FIXED
         B     RETURN
*
B2B1SUBZ LA    #1,##VECDAT(#3,#15) CALCULATE NEXT AVAILABLE VSS LOC.
         O     #14,=X'80000000'    PUT NEGATIVE SIGN ON RESULT LS WORD
         ST    #14,##VECDAT(,#15)  STORE LS WORD OF RESULT BIGNUM
         STCM  #3,7,1(#15)         STORE BIGNUM LENGTH IN HEADER
         CLC   0(12,#15),MTWO31X   COMPARE NUMERIC PART AGAINST -2**31
         BE    MTWO31
         ST    #1,ZLCVSNXT         UPDATE AVAILABILITY POINTER
         B     RETURN
*
BPBM     N     #1,=X'7FFFFFFF'     mask out the sign
         SR    #0,#1               subtract lowest words
         SRDA  #0,31               leave only subtract carry in #0
         SRL   #1,1                right justify the ls result word
         LA    #4,##VECDAT+4       set index for first iteration
         LR    #14,#1              save for fixnum or end of bignum
BPBML1   A     #0,##VECDAT-4(#4,#6) add carry to next word in big1
         S     #0,##VECDAT-4(#4,#7) subtract the word in big2
         SRDA  #0,31               leave only subtract carry in #0
         SRL   #1,1                right justify the ls result word
         ST    #1,##VECDAT-4(#4,#15) store the result word
         BXLE  #4,#2,BPBML1        any more words in big2?
         LR    #3,#5               LENGTH1 INTO LIMIT REGISTER
BPBML2   A     #0,##VECDAT-4(#4,#6) add carry to next word in big1
         SRDA  #0,31               no big2 left, keep carry in #0
         SRL   #1,1                right justify difference in #1
         ST    #1,##VECDAT-4(#4,#15) store the result word
         BXLE  #4,#2,BPBML2        any more words in big1?
         LR    #5,#2               GENERATE 4 FOR BXH LIMIT
         LCR   #4,#2               GENERATE -4 FOR BXH DECREMENT
BPBMSUBM L     #0,##VECDAT-4(#3,#15) ONLY SOME LEADING ZEROS
         LTR   #0,#0               IS IT ZERO?
         BNZ   BPBMSUBZ            FOUND NONZERO WORD, STOP LOOP
         BXH   #3,#4,BPBMSUBM      GO AND TEST NEXT LESS SIGNIF WORD
         LR    #2,#14              LS WORD OF BIGNUM NEEDS TO BE FIXNUM
         LA    #0,20(,#11)         RESTORE TOP-OF-STACK POINTER
         #MKAT FIXED               FORGET BIGNUM, IT'S FIXED
         B     RETURN
*
BPBMSUBZ LA    #1,##VECDAT(#3,#15) CALCULATE NEXT AVAILABLE VSS LOC.
         STCM  #3,7,1(#15)         STORE BIGNUM LENGTH IN HEADER
         ST    #14,##VECDAT(,#15)  STORE LS WORD with no (pos) sign
         ST    #1,ZLCVSNXT         UPDATE AVAILABILITY POINTER
         B     RETURN
*
BMB      ICM   #1,15,##VECDAT(#7)  GET LS WORD OF ARG2
         BM    BMBM                BOTH BIGNUMS NEGATIVE, DIFF LENGTHS
BMBP     N     #0,=X'7FFFFFFF'     mask out the sign
         SR    #0,#1               subtract lowest words
         SRDA  #0,31               leave only subtract carry in #0
         SRL   #1,1                right justify the ls result word
         LA    #4,##VECDAT+4       set index for first iteration
         LR    #14,#1              save for fixnum or end of bignum
BMBPL1   A     #0,##VECDAT-4(#4,#6) add carry to next word in big1
         S     #0,##VECDAT-4(#4,#7) subtract the word in big2
         SRDA  #0,31               leave only subtract carry in #0
         SRL   #1,1                right justify the ls result word
         ST    #1,##VECDAT-4(#4,#15) store the result word
         BXLE  #4,#2,BMBPL1        any more words in big2?
         LR    #3,#5               LENGTH1 INTO LIMIT REGISTER
BMBPL2   A     #0,##VECDAT-4(#4,#6) add carry to next word in big1
         SRDA  #0,31               no big2 left, keep carry in #0
         SRL   #1,1                right justify difference in #1
         ST    #1,##VECDAT-4(#4,#15) store the result word
         BXLE  #4,#2,BMBPL2        any more words in big1?
         LR    #5,#2               GENERATE 4 FOR BXH LIMIT
         LCR   #4,#2               GENERATE -4 FOR BXH DECREMENT
BMBPSUBM L     #0,##VECDAT-4(#3,#15) ONLY SOME LEADING ZEROS
         LTR   #0,#0               IS IT ZERO?
         BNZ   BMBPSUBZ            FOUND NONZERO WORD, STOP LOOP
         BXH   #3,#4,BMBPSUBM      GO AND TEST NEXT LESS SIGNIF WORD
         LCR   #2,#14              LS WORD OF BIGNUM NEEDS TO BE FIXNUM
         LA    #0,20(,#11)         RESTORE TOP-OF-STACK POINTER
         #MKAT FIXED               FORGET BIGNUM, IT'S FIXED
         B     RETURN
*
BMBPSUBZ LA    #1,##VECDAT(#3,#15) CALCULATE NEXT AVAILABLE VSS LOC.
         O     #14,=X'80000000'    INSERT NEGATIVE SIGN
         STCM  #3,7,1(#15)         STORE BIGNUM LENGTH IN HEADER
         ST    #14,##VECDAT(,#15)  STORE LS WORD WITH NEGATIVE SIGN
         CLC   0(12,#15),MTWO31X   COMPARE NUMERIC PART AGAINST -2**31
         BE    MTWO31
         ST    #1,ZLCVSNXT         UPDATE AVAILABILITY POINTER
         B     RETURN
*
MTWO31   LA    #15,#MTWO31         RETURN MOST NEG FIXNUM AS ANSWER
         B     RETURN
*
FX1NFX2  CLI   ##TYPE(#7),##BIGNUM
         BNE   FX1NBF2             ARG1 IS FIXED, ARG2 NOT BIG NOR FIX
*---------------------------------------------------------------------*
*                      FIXNUM TO BIGNUM ADD                           *
*---------------------------------------------------------------------*
FIXBIG   ST    #7,0(,#11)          EXCHANGE POINTERS IN #6 AND #7
         ST    #6,4(,#11)          -AND ALSO IN THE STACK
BIGFIX   L     #6,0(,#11)          GET POINTER TO ARG1, MAY BE SWITCHED
         XR    #3,#3               CLEAR FOR ICM OF LENGTH
         ICM   #3,7,1(#6)          GET BIGNUM LENGTH
         L     #15,ZLCBIG          GET ADDRESS OF ZILBIG
         LA    #2,##VECDAT+4(,#3)  GET SIZE TO PASS TO ZILBIG
         #BASR #14,#15             CALL ZILBIG
         LM    #6,#7,0(#11)        GC MAY HAVE MOVED POINTERS
         ICM   #0,15,##VECDAT(#6)  GET LS WORD OF BIGNUM
         BM    BIGMFIX             NEGATIVE BIGNUM + FIXNUM
         A     #0,##CDR(,#7)       ONLY POSITIVE OVERFLOW IS POSSIBLE
         BM    BPFMINUS            LS RESULT IS NEG - FIX UP
         SRDL  #0,31               SHIFT TO #1 ALL BUT CARRY BIT
         SRL   #1,1                NORMALIZE SUM IN #1
         ST    #1,##VECDAT(,#15)   STORE FIRST SUM RESULT
         LA    #2,4                INIT. WORD SIZE FOR BXLE
         LA    #4,8                INITIALIZE OFFSET FOR BXLE
BFLOOP   AL    #0,0(#4,#6)         ADD NEXT WORD TO PREVIOUS CARRY
         SRDL  #0,31               SHIFT RIGHT ALL BUT CARRY BIT
         SRL   #1,1                RESTORE SHIFTED WORD, HIGH BIT NOW 0
         ST    #1,0(#4,#15)        STORE INTO RESULT BIGNUM
         BXLE  #4,#2,BFLOOP        NOT DONE WITH SHORTER BIGNUM
         LTR   #0,#0               CARRY BIT LEFT OVER?
         BNZ   BPFXC               YES, THERE IS AN EXTRA CARRY
         STCM  #3,7,1(#15)         STORE LENGTH INTO RESULT HEADER
         AR    #4,#15              CHANGE WHEN ##VECDAT CHANGES
         ST    #4,ZLCVSNXT         UPDATE AVAILABILITY POINTER
         B     RETURN
*
BPFXC    STCM  #4,7,1(#15)         STORE LENGTH INTO RESULT HEADER
         ST    #0,0(#4,#15)        STORE CARRY (WHICH MUST BE 1)
         LA    #4,##VECDAT(#4,#15) CALCULATE POINTER TO END
         ST    #4,ZLCVSNXT         UPDATE AVAILABILITY POINTER
         B     RETURN
*
BPFMINUS SRDA  #0,31               SHIFT TO #1 ALL BUT BORROW BIT
         SRL   #1,1                NORMALIZE SUM IN #1
         ST    #1,##VECDAT(,#15)   STORE FIRST SUM RESULT
         LA    #2,4                INIT. WORD SIZE FOR BXLE
         LA    #4,8                INITIALIZE OFFSET FOR BXLE
BPFMLOOP AL    #0,0(#4,#6)         ADD NEXT WORD TO PREVIOUS BORROW
         SRDA  #0,31               SHIFT RIGHT ALL BUT BORROW BIT
         SRL   #1,1                RESTORE SHIFTED WORD, HIGH BIT NOW 0
         ST    #1,0(#4,#15)        STORE INTO RESULT BIGNUM
         BXLE  #4,#2,BPFMLOOP      NOT DONE WITH BIGNUM
         LTR   #0,#0               BORROW BIT LEFT OVER?
         BZ    BPFMIN0             HIGH WORD ZERO - MUST BACKTRACK
         BM    BUG1                HIGH WORD SHOULD NEVER BE NEGATIVE
         STCM  #3,7,1(#15)         STORE LENGTH AND RESULT INTO HEADER
         AR    #4,#15              POINT TO END OF RESULT
         ST    #4,ZLCVSNXT         UPDATE AVAILABILITY POINTER
         B     RETURN
*
BPFMIN0  LCR   #0,#2               -4 INCREMENT FOR BXH
         LR    #1,#2               4 LIMIT FOR BXH
BPFMIN0L L     #2,##VECDAT-4(#3,#15) EXAMINE FOR ZERO
         LTR   #2,#2               TEST WORD
         BNZ   BPFMIN1             STOP - FOUND NONZERO WORD
         BXH   #3,#0,BPFMIN0L      LOOP TO NEXT LOWER WORD
         L     #2,##VECDAT(,#15)   LOAD LS WORD - THIS IS THE FIXNUM
         #MKAT FIXED               MAKE A FIXNUM
         B     RETURN
*
BPFMIN1  STCM  #3,7,1(#15)         STORE LENGTH INTO RESULT HEADER
         AR    #4,#15              POINT TO END, (CHANGE WITH ##VECDAT)
         ST    #4,ZLCVSNXT         UPDATE AVAILABILITY POINTER
         B     RETURN
*
BIGMFIX  N     #0,=X'7FFFFFFF'     MASK OUT MINUS BIT OF BIGNUM LSWRD
         S     #0,##CDR(,#7)       ONLY POSITIVE OVERFLOW IS POSSIBLE
         BM    BMFMINUS            LS RESULT IS NEG - FIX UP
         SRDL  #0,31               SHIFT TO #1 ALL BUT CARRY BIT
         SRL   #1,1                NORMALIZE SUM IN #1
         O     #1,=X'80000000'     SET MINUS BIT FOR BIGNUM
         ST    #1,##VECDAT(,#15)   STORE FIRST SUM RESULT
         LA    #2,4                INIT. WORD SIZE FOR BXLE
         LA    #4,8                INITIALIZE OFFSET FOR BXLE
BMFLOOP  AL    #0,0(#4,#6)         ADD NEXT WORD TO PREVIOUS CARRY
         SRDL  #0,31               SHIFT RIGHT ALL BUT CARRY BIT
         SRL   #1,1                RESTORE SHIFTED WORD, HIGH BIT NOW 0
         ST    #1,0(#4,#15)        STORE INTO RESULT BIGNUM
         BXLE  #4,#2,BMFLOOP       NOT DONE WITH SHORTER BIGNUM
         LTR   #0,#0               CARRY BIT LEFT OVER?
         BNZ   BMPFXC              YES, THERE IS AN EXTRA CARRY
         STCM  #3,7,1(#15)         STORE LENGTH INTO RESULT HEADER
         CLC   0(12,#15),MTWO31X   COMPARE NUMERIC PART AGAINST -2**31
         BNE   BMFNOT31            NO, IT CAN'T BE -2**31
         LA    #15,#MTWO31         RETURN MOST NEG FIXNUM AS ANSWER
         B     RETURN
*
BMFNOT31 AR    #4,#15              CHANGE WHEN ##VECDAT CHANGES
         ST    #4,ZLCVSNXT         UPDATE AVAILABILITY POINTER
         B     RETURN
*
BMPFXC   STCM  #4,7,1(#15)         STORE LENGTH INTO RESULT HEADER
         ST    #0,0(#4,#15)        STORE CARRY (WHICH MUST BE 1)
         LA    #4,##VECDAT(#4,#15) CALCULATE POINTER TO END
         ST    #4,ZLCVSNXT         UPDATE AVAILABILITY POINTER
         B     RETURN
*
BMFMINUS SRDA  #0,31               SHIFT TO #1 ALL BUT BORROW BIT
         SRL   #1,1                NORMALIZE SUM IN #1
         O     #1,=X'80000000'     SET BIGNUM MINUS BIT
         ST    #1,##VECDAT(,#15)   STORE FIRST SUM RESULT
         LA    #2,4                INIT. WORD SIZE FOR BXLE
         LA    #4,8                INITIALIZE OFFSET FOR BXLE
BMFMLOOP AL    #0,0(#4,#6)         ADD NEXT WORD TO PREVIOUS BORROW
         SRDA  #0,31               SHIFT RIGHT ALL BUT BORROW BIT
         SRL   #1,1                RESTORE SHIFTED WORD, HIGH BIT NOW 0
         ST    #1,0(#4,#15)        STORE INTO RESULT BIGNUM
         BXLE  #4,#2,BMFMLOOP      NOT DONE WITH BIGNUM
         LTR   #0,#0               BORROW BIT LEFT OVER?
         BZ    BMFMIN0             HIGH WORD ZERO - MUST BACKTRACK
         BM    BUG1                HIGH WORD SHOULD NEVER BE NEGATIVE
         STCM  #3,7,1(#15)         STORE LENGTH AND RESULT INTO HEADER
         AR    #4,#15              POINT TO END OF RESULT
         ST    #4,ZLCVSNXT         UPDATE AVAILABILITY POINTER
         B     RETURN
*
BMFMIN0  LCR   #0,#2               -4 INCREMENT FOR BXH
         LR    #1,#2               4 LIMIT FOR BXH
BMFMIN0L L     #2,##VECDAT-4(#3,#15) EXAMINE FOR ZERO
         LTR   #2,#2               TEST WORD
         BNZ   BMFMIN1             STOP - FOUND NONZERO WORD
         BXH   #3,#0,BMFMIN0L      LOOP TO NEXT LOWER WORD
         L     #2,##VECDAT(,#15)   LOAD LS WORD - THIS IS THE FIXNUM
         N     #2,=X'7FFFFFFF'     MASK OUT SIGN BIT
         LCR   #2,#2               SINCE IT'S SUPPOSED TO BE NEG.
         #MKAT FIXED               MAKE A FIXNUM
         B     RETURN
*
*
BMFMIN1  STCM  #3,7,1(#15)         STORE LENGTH INTO RESULT HEADER
         AR    #4,#15              POINT TO END, (CHANGE WITH ##VECDAT)
         ST    #4,ZLCVSNXT         UPDATE AVAILABILITY POINTER
         B     RETURN
*
NFXBG1   DS    0H                  ARG 1 IS NOT INTEGER
         CLI   ##TYPE(#6),##SFLOAT
         BE    ARG1SFLO            ARG 1 IS SINGLE FLOAT
         CLI   ##TYPE(#6),##DFLOAT
         BE    ARG1DFLO            ARG 1 IS DOUBLE FLOAT
         B     ERROR1
         SPACE
FX1NBF2  DS    0H                  ARG 1 IS FIXED BUT ARG2 IS NOT
         SPACE
*                                                                     *
*---------------------------------------------------------------------*
*                      CHECK TYPE OF ARG 2                            *
*---------------------------------------------------------------------*
         CLI   ##TYPE(#7),##SFLOAT
         BE    FIXSFLO             FIXED + SFLOAT = SFLOAT
         CLI   ##TYPE(#7),##DFLOAT
         BE    FIXDFLO             FIXED + DFLOAT = DFLOAT
         B     ERROR2              FIXED + NONUM = ERROR
FIXSFLO  L     #0,##CDR(,#6)       GET FIXED VALUE 1
         #BAS  #14,FIX2FLO         CONVERT FIXED TO FLOAT
         LRER  #F2,#F0             GET SINGLE FLOAT VALUE 1
         B     ADDSFLO1
FIXDFLO  L     #0,##CDR(,#6)       GET FIXED VALUE 1
         #BAS  #14,FIX2FLO         CONVERT FIXED TO FLOAT
         LDR   #F2,#F0             GET DOUBLE FLOAT VALUE 1
         B     ADDDFLO1
         SPACE
ARG1SFLO DS    0H                  ARG 1 IS SINGLE FLOAT
         SPACE
*---------------------------------------------------------------------*
*                      CHECK TYPE OF ARG 2                            *
*---------------------------------------------------------------------*
         CLI   ##TYPE(#7),##SFLOAT
         BE    SADDSFLO            SFLOAT + SFLOAT = SFLOAT
         CLI   ##TYPE(#7),##DFLOAT
         BE    SADDDFLO            SFLOAT + DFLOAT = DFLOAT
         CLI   ##TYPE(#7),##FIXNUM
         BE    SFLOPFIX            SFLOAT + FIXED = SFLOAT
         CLI   ##TYPE(#7),##BIGNUM
         BNE   ERROR2              SFLOAT + NONUM = ERROR
         LE    #F2,##CDR(,#6)      Get single float value 1
         L     #15,ZLCCVBF         Get address of ZILCVBF
         LR    #5,#7               Arg1 is float, arg2 is bignum
         #BASR #14,#15             Convert bignum to float
         LER   #F4,#F0             Get float value for arg2
         B     ADDSFLO2            Go to add float arg1 to arg2
         SPACE 1
*---------------------------------------------------------------------*
*                      FIXNUM TO SINGLE FLOAT                         *
*---------------------------------------------------------------------*
SFLOPFIX LE    #F2,##CDR(,#6)      Get single float value 1
         L     #0,##CDR(,#7)       GET FIXED VALUE 2
         #BAS  #14,FIX2FLO         CONVERT FIXED TO FLOAT
         LRER  #F4,#F0             GET FLOAT VALUE 2
         B     ADDSFLO2            FLOAT + FIXED = FLOAT
         SPACE
ARG1DFLO DS    0H                  ARG 1 IS DOUBLE FLOAT
         SPACE
         LD    #F2,8(,#6)          GET FLOAT VALUE 1
*---------------------------------------------------------------------*
*                      CHECK TYPE OF ARG 2                            *
*---------------------------------------------------------------------*
         CLI   ##TYPE(#7),##DFLOAT
         BE    ADDDFLO1            DFLOAT + DFLOAT = DFLOAT
         CLI   ##TYPE(#7),##SFLOAT
         BE    DADDSFLO            DFLOAT + SFLOAT = DFLOAT
         CLI   ##TYPE(#7),##FIXNUM
         BE    DFLOPFIX            DFLOAT + FIXED = DFLOAT
         CLI   ##TYPE(#7),##BIGNUM
         BNE   ERROR2              DFLOAT + NONUM = ERROR
         L     #15,ZLCCVBF         Get address of ZILCVBF
         LNR   #5,#7               Arg1 is float, arg2 is bignum
         #BASR #14,#15             Convert bignum to float
         LDR   #F4,#F0             Get float value for arg2
         B     ADDDFLO2            Go to add float arg1 to arg2
         SPACE 1
*---------------------------------------------------------------------*
*                      FIXNUM TO DOUBLE FLOAT                         *
*---------------------------------------------------------------------*
DFLOPFIX L     #0,##CDR(,#7)       GET FIXED VALUE 2
         #BAS  #14,FIX2FLO         CONVERT FIXED TO FLOAT
         LDR   #F4,#F0             GET FLOAT VALUE 2
         B     ADDDFLO2            FLOAT + FIXED = FLOAT
         SPACE
*---------------------------------------------------------------------*
*                       SINGLE FLOAT ADD                              *
*---------------------------------------------------------------------*
SADDSFLO DS    0H
         LE    #F2,##CDR(,#6)      Get single float value 1
ADDSFLO1 DS    0H
         LE    #F4,##CDR(,#7)      Get single float value 2
ADDSFLO2 DS    0H
         AER   #F2,#F4             ADD THEM
         STE   #F2,ZLCWORK         PUT RESULT IN REG FOR ATOM-MAKING
         L     #2,ZLCWORK
         LA    #0,20(,#11)         SET STACK LOCATION FOR CONS
         #MKAT FLOAT               MAKE A FLONUM
         B     RETURN              AND RETURN WITH IT
         SPACE 1
*---------------------------------------------------------------------*
*                       DOUBLE FLOAT ADD                              *
*---------------------------------------------------------------------*
DADDSFLO DS    0H
         SDR   #F4,#F4
         LE    #F4,##CDR(,#7)      Get double float value 2
         B     ADDDFLO2
SADDDFLO DS    0H
         SDR   #F2,#F2
         LE    #F2,##CDR(,#6)      Get double float value 1
ADDDFLO1 DS    0H
         LD    #F4,8(,#7)          Get double float value 2
ADDDFLO2 DS    0H
         ADR   #F2,#F4             ADD THEM
         LDR   #F0,#F2
         L     #15,ZLCMDF          Get address of ZILMDF
         #BASR #14,#15             Call ZILMDF to make a double-float
         B     RETURN              AND RETURN WITH IT
         SPACE 1
         COPY  FIX2FLO             FIXED TO FLOAT CONVERSION ROUTINE
         SPACE 1
         DS    0A                  ALIGN BIGNUM TO FULLWORD
#TWO31   DC    YL1(##BIGNUM),AL3(8),F'0,1'    2**31 SMALLEST BIGNUM
#MTWO31  DC    YL1(##FIXNUM),AL3(0),F'-2147483648'  MOST NEG FIXNUM
#MTWO32  DC    YL1(##BIGNUM),AL3(8),X'80000000',F'2'   -2**32
MTWO31X  DC    YL1(##BIGNUM),AL3(8),X'80000000',F'1' -2**31=BAD BIGNUM
         SPACE 1
ERROR1   #ERR  'Argument 1 to add not a number - ',0(#11)
ERROR2   #ERR  'Argument 2 to add not a number - ',4(#11)
BUG1     #ERR  'Internal bug in ZILADD - MS word of bignum negative addX
               ing ',0(#11),' to ',4(#11)
         SPACE 1
         LTORG
         END
