         TITLE 'XLATE - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* This is STRING-TRANSLATE.  This function is analogous to the PL/1   *
* TRANSLATE built-in function.  Syntax:                               *
*                                                                     *
*  (string-translate "any-string" "to-chars-bag" "from-chars-bag")    *
*                                                                     *
*  where the second and third arguments must be the same in length.   *
*                                                                     *
***********************************************************************
XLATE    #ZBEG MINARGS=3,MAXARGS=3,NAME='STRING-TRANSLATE'
         #ZPDS 3*4+12+0 = 24       DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
         SPACE
         LM    #5,#7,0(#11)        LOAD ARGS
         CLI   ##TYPE(#5),##STRING IF ARGUMENT IS A STRING
         BE    ARG1OK              THEN OK
         CLI   ##TYPE(#5),##SYMBOL IF ARGUMENT IS A SYMBOL
         BNE   ERROR1              THEN
         L     #5,##PNAME(,#5)      TAKE THE PRINT NAME, ELSE ERROR
ARG1OK   DS    0H                  CHECK ARG 2
         CLI   ##TYPE(#6),##STRING IF ARGUMENT IS A STRING
         BE    ARG2OK              THEN OK
         CLI   ##TYPE(#6),##SYMBOL IF ARGUMENT IS A SYMBOL
         BNE   ERROR2              THEN
         L     #6,##PNAME(,#6)      TAKE THE PRINT NAME, ELSE ERROR
ARG2OK   DS    0H
         CLI   ##TYPE(#7),##STRING IF ARGUMENT IS A STRING
         BE    ARG3OK              THEN OK
         CLI   ##TYPE(#7),##SYMBOL IF ARGUMENT IS A SYMBOL
         BNE   ERROR3              THEN
         L     #7,##PNAME(,#7)      TAKE THE PRINT NAME, ELSE ERROR
ARG3OK   DS    0H
         ST    #5,0(,#11)          Store string ptr back on stack
         XR    #2,#2
         XR    #3,#3
         XR    #4,#4
         ICM   #2,7,1(#5)          #2 = LENGTH OF STRING ARG 1
         BZ    RETSELF             If zero-length string, return self
         ICM   #3,7,1(#6)          #3 = LENGTH OF STRING ARG 2
         ICM   #4,7,1(#7)          #4 = LENGTH OF STRING ARG 3
         CR    #3,#4               If lengths of to-bag and from-bag
         BNE   ERROR4               don't match, then error
         SPACE 1
***********************************************************************
*                                                                     *
* BUILD TRANSLATE TABLE FROM STRINGS ARG2 and ARG3                    *
*                                                                     *
***********************************************************************
         SPACE 1
         LTR   #14,#3              Get length of character bags
         BNP   RETSELF             If zero, return untranslated string
         MVC   TRTBL(256),TRINIT   Initialize translate table to ident.
         XC    TRTTBL(256),TRTTBL  Initialize scanning table
         LA    #1,##VECDAT(,#6)    Point to text of "to" char bag arg2
         LA    #4,##VECDAT(,#7)    Point to text of "from"    bag arg3
         XR    #15,#15             Clear insert register
TBLDLOOP DS    0H
         IC    #0,0(,#1)           Get "to" character from arg2
         IC    #15,0(,#4)          Get "from" character from arg3
         STC   #0,TRTBL(#15)       Set translate table character
         STC   #14,TRTTBL(#15)     Set scanning table character nonzero
         LA    #1,1(,#1)           Increment "to" character pointer
         LA    #4,1(,#4)           Increment "from" character pointer
         BCT   #14,TBLDLOOP        Continue until bags exhausted
TBLDEND  DS    0H                  Now the table is built
         SPACE 1
         LA    #14,##VECDAT(,#5)   Point to text of string arg1
         LR    #7,#2               Get arg1 string length into good reg
         LR    #15,#2              Get length of string arg1
         LA    #0,256              Set up constant 256
TRTLOOP  DS    0H                  Loop to scan string
         CR    #15,#0
         BNH   SHORTTRT
         TRT   0(256,#14),TRTTBL   Scan for translatable characters
         BNZ   COPYIT              If we found one, we have to copy
         AR    #14,#0              Else bump up pointer to string text
         SR    #15,#0              Bump down string length
         B     TRTLOOP             And continue scanning.
SHORTTRT DS    0H
         BCTR  #15,0               Reduce length for execute
         EX    #15,EXTRT           Scan for translatable characters
         BZ    RETSELF             If no such chars, return self
COPYIT   DS    0H                  Translatable chars, have to copy
         LR    #2,#7               GET LENGTH INTO REG FOR ZILVSS
         XR    #1,#1               ENTRY CODE 0 = ALLOCATE NEW SPACE
         L     #15,ZLCVSS          GET ADDRESS OF ZILVSS
         LA    #0,24(,#11)         SET CURRENT STACK POINTER FOR GC
         #BASR #14,#15             CALL ZILVSS TO CREATE A STRING
         LTR   #4,#15              IF STRING BUILD FAILED
         BZ    ERROR2              THEN ERROR
         L     #1,0(,#11)          GET POINTER TO ORIGINAL STRING
         LA    #0,##VECDAT(,#1)    POINT TO STRING TEXT
         LA    #14,##VECDAT(,#4)   POINT TO WHERE TO MOVE STRING TEXT
         LR    #1,#7               GET LENGTH OF STRING TEXT TO MOVE
         LR    #15,#7
         MVCL  #14,#0              MOVE TEXT FROM OLD STRING TO NEW
         LA    #14,##VECDAT(,#4)   POINT TO TEXT OF STRING
         LR    #15,#7              GET LENGTH
         LA    #0,256              SET UP CONSTANT 256
TRLOOP   DS    0H                  LOOP TO TRANSLATE STRING
         CR    #15,#0
         BL    SHORTTR
         TR    0(256,#14),TRTBL    TRANSLATE
         AR    #14,#0              BUMP UP POINTER TO TEXT
         SR    #15,#0              BUMP DOWN LENGTH
         BZ    DONE
         B     TRLOOP              AND CONTINUE TRANSLATING.
SHORTTR  DS    0H
         BCTR  #15,0               REDUCE LENGTH FOR EXECUTE
         EX    #15,EXTR            TRANSLATE
DONE     DS    0H                  ALL FINISHED
         LR    #15,#4              POINT TO NEWLY BUILT STRING
         B     RETURN              RETURN THE ATOM IN #15
         SPACE 1
RETSELF  DS    0H                  Null string, or no chars to xlate
         LR    #15,#5              Return string 1 passed
RETURN   DS    0H
         SPACE 1
         #ZRET ,                   RESTORE REGISTERS AND RETURN
         SPACE 1
EXTRT    TRT   0(*-*,#14),TRTTBL   EXECUTED: Scan for xlatable chars
EXTR     TR    0(*-*,#14),TRTBL    EXECUTED: Translate the string
         SPACE 1
TRINIT   DC    256YL1(*-TRINIT)    Used to initialize translate table
         SPACE 1
TRTBL    DS    XL256               AREA TO BUILD TRANSLATE TABLE
TRTTBL   DS    XL256               AREA TO BUILD SCANNING TABLE
         SPACE 1
ERROR1   #ERR  'Argument 1 to STRING-TRANSLATE not a string - ',0(#11)
ERROR2   #ERR  'Argument 2 to STRING-TRANSLATE not a string - ',4(#11)
ERROR3   #ERR  'Argument 3 to STRING-TRANSLATE not a string - ',8(#11)
ERROR4   #ERR  'Lengths of args 2 and 3 to STRING-TRANSLATE unequal - 'X
               ,4(#11),' and ',8(#11)
ERRORGC  #ERR  PREFIX=NO,          Not enough room even after GC       X
               'ZIL4010 STRING-TRANSLATE: Not enough vector/string spacX
               e to build string.'
         SPACE 1
         LTORG
         END
