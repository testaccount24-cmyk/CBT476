         TITLE 'INVOKE - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
*  THIS FUNCTION CALLS A PROGRAM FOUND IN A SYSTEM LIBRARY.  UNLIKE   *
*  THE TSO FUNCTION, IT DOES NOT REQUIRE A TSO ENVIRONMENT AND CAN    *
*  THEREFORE BE SUCCESSFULLY EXECUTED FROM BATCH MODE.  SYNTAX IS:    *
*  (INVOKE "PROGRAM" "PARAMETERS")                                    *
*  WHERE "PROGRAM" IS A REQUIRED STRING (OR SYMBOL) AND               *
*        "PARAMETERS" IS A REQUIRED STRING (OR NIL).                  *
*  NOTE: THE OPTIONAL PARAMETER ARG MUST BE A STRING; OTHERWISE       *
*        NIL WOULD BE PASSED AS A PARAMETER OF NIL.                   *
*                                                                     *
***********************************************************************
         SPACE 1
INVOKE   #ZBEG MINARGS=1,MAXARGS=2,NAME='INVOKE'
         #ZPDS 20
         #ZSAV ,
         SPACE 1
         LM    #6,#7,0(#11)        GET ARGS
         CLI   ##TYPE(#6),##STRING ARG1 MUST BE A STRING
         BE    ARG1OK               OR
         CLI   ##TYPE(#6),##SYMBOL   A SYMBOL
         BNE   ERROR1                 ELSE ERROR
         L     #6,##PNAME(,#6)         (IF A SYMBOL, TAKE PRINT NAME)
ARG1OK   DS    0H
         CR    #7,#10              ARG2 MUST BE NIL
         BE    SETNULL              OR
         CR    #7,#13                NOT SUPPLIED
         BE    SETNULL                OR
         CLI   ##TYPE(#7),##STRING     A STRING
         BNE   ERROR2
         B     ARG2OK
SETNULL  DS    0H                  IF ARG2 IS NIL
         LA    #7,NULLSTR           THEN USE NULL STRING
ARG2OK   DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* GET THE NAME OF THE PROGRAM AND VALIDATE IT                         *
*                                                                     *
***********************************************************************
         SPACE 1
         MVI   PROGRAM,C' '        CLEAR PROGRAM NAME TO BLANKS
         MVC   PROGRAM+1(7),PROGRAM
         XR    #15,#15
         ICM   #15,7,1(#6)         GET LENGTH OF ARG1 STRING TEXT
         BNP   ERROR3
         CH    #15,=H'8'           LENGTH MUST BE BETWEEN 1 AND 8
         BH    ERROR3
         BCTR  #15,0               MOVE STRING TO PROGRAM NAME,
         EX    #15,MVCPGM          TRANSLATING IT TO UPPER CASE
         SPACE 1
***********************************************************************
*                                                                     *
* GET THE PARAMETER STRING AND VALIDATE IT                            *
*                                                                     *
***********************************************************************
         SPACE 1
         MVI   PARM,C' '           CLEAR PARAMETER STRING TO BLANKS
         MVC   PARM+1(L'PARM-1),PARM
         XR    #15,#15
         ICM   #15,7,1(#7)         GET LENGTH OF ARG2 STRING TEXT
         STH   #15,PARMLEN         STORE PARAMETER STRING LENGTH
         BZ    NOPARM
         CH    #15,=H'100'         LENGTH MUST BE BETWEEN 0 AND 100
         BH    ERROR4
         BCTR  #15,0               MOVE STRING TO PARAMETER FIELD,
         EX    #15,MVCPARM         TRANSLATING IT TO UPPER CASE
NOPARM   DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* CHECK TO MAKE SURE THAT THE PROGRAM REALLY EXISTS                   *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
* FIRST, SCAN THE LPA DIRECTORY TO SEE IF IT IS AN LPA MODULE.        *
*                                                                     *
***********************************************************************
         SPACE 1
         ST    #9,ZLCISV09         SAVE ZIL REGS
         STM   #3,#9,32(#13)       SAVE REGS USED BY LPA SEARCH
         LM    #0,#1,PROGRAM       GET PROGRAM NAME INTO REGS
         L     #3,16               #3 -> CVT
         L     #15,X'160'(,#3)     #15 -> LPA DIRECTORY SEARCH ROUTINE
         OI    ZLCIFLGS,ZLCISYS    INDICATE NON-ZIL-CODE RUNNING
         #BASR #14,#15             CALL LPA DIRECTORY SEARCH
*
* IF THE PROGRAM NAME IS FOUND IN THE LPA DIRECTORY, CONTROL RETURNS
* TO THE NEXT SEQUENTIAL INSTRUCTION AND #14 IS SET TO ZERO.
* IF THE PROGRAM NAME HAS NOT BEEN FOUND, CONTROL RETURNS TO THE
* INSTRUCTION AT +4 PAST HERE AND #14 IS NONZERO.
*
         LA    #14,0               IF SUCCESSFUL, SET #14 = 0
         LM    #3,#9,32(#13)       RESTORE REGS USED BY LPA SEARCH
         TM    ZLCIFLGS,ZLCIATTN    IF ATTENTION INTERRUPT OCCURRED
         BOR   #13                  THEN GO TO HANDLE IT
         NI    ZLCIFLGS,255-ZLCISYS INDICATE ZIL CODE RUNNING AGAIN
         LTR   #14,#14             IF PROGRAM NAME WAS FOUND,
         BZ    DOIT                THEN GO AHEAD AND INVOKE IT
         SPACE 1
***********************************************************************
*                                                                     *
* IF IT IS NOT IN THE LPA, CHECK THE LINKLIST TO SEE IF IT IS THERE.  *
*                                                                     *
***********************************************************************
         SPACE 1
         MVC   ERRMSG5P(8),PROGRAM
         BLDL  0,BLDLLIST          SEE IF MEMBER IS IN LINK LIST
         LTR   #15,#15             IF NOT,
         BNZ   ERROR5               ERROR
         SPACE 1
***********************************************************************
*                                                                     *
* NOW INVOKE THE PROGRAM                                              *
*                                                                     *
***********************************************************************
         SPACE 1
DOIT     DS    0H
         SPACE 1
         MVC   ERRMSG7P(8),PROGRAM
         MVC   ERRMSG8P(8),PROGRAM
         XC    ABCODE,ABCODE       CLEAR ABEND CODE
         XC    REASCODE,REASCODE   CLEAR REASON CODE
         XC    ZLCECB,ZLCECB       CLEAR ATTACH ECB
         LA    #1,PARMADDR
         LA    #3,ZLCECB
         ATTACH EPLOC=PROGRAM,ECB=(#3),SZERO=NO,SHSPV=78,              X
               ESTAI=(STAIEXIT,STAIPARM)
         LTR   #15,#15
         BNZ   ERROR7
         ST    #1,ATCHTCB          SAVE TCB ADDRESS
         LR    #3,#1               SAVE TCB ADDRESS
         WAIT  ECB=ZLCECB          WAIT FOR PROGRAM TO COMPLETE
         XR    #2,#2
         ICM   #2,7,17(#3)         GET PROGRAM RETURN CODE FROM TCB
         LA    #1,ATCHTCB
         DETACH (1),STAE=YES
         CH    #15,=H'4'
         BH    ERROR8
         SPACE 1
***********************************************************************
*                                                                     *
* SEE IF PROGRAM ABENDED AND ISSUE A MESSAGE IF SO.                   *
*                                                                     *
***********************************************************************
         SPACE 1
         ICM   #3,15,ABCODE
         BZ    NOABEND
         MVC   ABPGM,PROGRAM
         ST    #3,ZLCDBL
         UNPK  ABHEX(9),ZLCDBL(5)
         TR    ABHEX(8),HEXTBL
         MVI   ABPERIOD,C'.'
         #TPUT ABMSG
         LR    #15,#10             RETURN NIL IF PROGRAM ABENDED
         B     RETURN
NOABEND  DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* NOW SET THE RETURN VALUE TO A FIXNUM CONTAINING THE RETURN CODE     *
* WHICH IS ALREADY IN #2                                              *
*                                                                     *
***********************************************************************
         SPACE 1
         LA    #0,20(,#11)         PASS CURRENT STACK LOCATION TO CONS
         #MKAT FIXED               MAKE A FIXNUM OUT OF THE RETURN CODE
RETURN   DS    0H
         #ZRET ,
         EJECT
MVCPGM   OC    PROGRAM(*-*),##VECDAT(#6) EXECUTED: MOVE PROGRAM NAME
MVCPARM  OC    PARM(*-*),##VECDAT(#7)    EXECUTED: MOVE PARM STRING
         SPACE 1
ATCHTCB  DS    A                   TCB FOR ATTACHED PROGRAM
         SPACE 1
NULLSTR  DS    0A                  ALIGN STRING TO FULLWORD
         DC    YL1(##STRING),AL3(0),X'00'  NULL STRING
         SPACE 1
         DS    0A                  ALIGN BLDL STUFF
BLDLLIST DC    H'1',H'58'          BLDL LIST FOR PROGRAM NAME
PROGRAM  DS    CL8                 THE PROGRAM NAME
TTR      DS    CL3
K        DS    CL1
Z        DS    CL1
C        DS    CL1
         DS    CL44
PARMADDR DC    A(X'80000000'+PARMLEN)
PARMLEN  DS    H
PARM     DS    CL100
         SPACE 1
ERROR1   #ERR  'Argument 1 to INVOKE not a string or symbol - ',0(#11)
ERROR2   #ERR  'Argument 2 to INVOKE not a string or NIL - ',4(#11)
ERROR3   #ERR  'Argument 1 to INVOKE not a valid program name - ',     X
               0(#11)
ERROR4   #ERR  'Argument 2 to INVOKE longer than 100 characters, the maX
               ximum permitted by MVS - ',4(#11)
ERROR5   #TPUT 2,ERRMSG5
         #ERR  'System program named ',0(#11),' does not exist.'
ERROR7   #TPUT ERRMSG7
         B     FAILURE7
ERROR8   #TPUT ERRMSG8
         B     FAILURE8
FAILURE7 DS    0H
FAILURE8 DS    0H
FAILURE  #ERR  'INVOKE failed, system error processing program ',0(#11)
         SPACE 1
ERRMSG5X DC    C'ZIL1501 PROGRAM '
ERRMSG5P DC    CL8'        '
         DC    C' NOT FOUND IN SYSTEM LIBRARY.'
ERRMSG5  EQU   ERRMSG5X,*-ERRMSG5X,C'C'
ERRMSG7X DC    C'ZIL1502 ATTACH OF PROGRAM '
ERRMSG7P DC    CL8'        '
         DC    C' FAILED.'
ERRMSG7  EQU   ERRMSG7X,*-ERRMSG7X,C'C'
ERRMSG8X DC    C'ZIL1503 DETACH OF PROGRAM '
ERRMSG8P DC    CL8'        '
         DC    C' FAILED.'
ERRMSG8  EQU   ERRMSG8X,*-ERRMSG8X,C'C'
         SPACE 1
ABMSGX   DC    C'ZIL1500 '
ABPGM    DC    CL8' '
         DC    C' ABENDED, COMPLETION CODE '
ABHEX    DC    CL8' '
ABPERIOD DC    C' '
ABMSG    EQU   ABMSGX,*-ABMSGX,C'C'
         SPACE 1
         DC    C'0123456789ABCDEF'
HEXTBL   EQU   *-256
         SPACE 1
         LTORG
         SPACE 1
STAIPARM DS    0H
         SPACE 1
ABCODE   DS    A
REASCODE DS    A
         SPACE 1
         DROP  #12
         EJECT
***********************************************************************
*                                                                     *
* STAI EXIT THAT GETS CONTROL IF THE ATTACHED PROGRAM ABENDS          *
*                                                                     *
* THE PARAMETER ON ENTRY SHOULD BE THE ADDRESS OF THE ZIL COMMON AREA *
*                                                                     *
***********************************************************************
         SPACE 1
STAIEXIT DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* ESTAI EXIT THAT GETS CONTROL IF AN ABEND OCCURS IN ATTACHED PROGRAM *
*                                                                     *
*  ON ENTRY TO THIS ROUTINE:                                          *
*                                                                     *
*  REGISTER 0 = 12 - NO SWDA AVAILABLE                                *
*               OTHER - SDWA AVAILABLE                                *
*                                                                     *
*  IF REGISTER 0 = 12:                                                *
*                                                                     *
*     REGISTER 1  = ABEND COMPLETION CODE                             *
*     REGISTER 2  = ADDRESS OF THE ESTAE PARAMETER LIST (PARAM)       *
*     REGISTER 14 = RETURN ADDRESS TO RTM                             *
*     REGISTER 15 = ENTRY POINT ADDRESS OF THIS ESTAE EXIT ROUTINE    *
*                                                                     *
*  OTHERWISE:                                                         *
*                                                                     *
*     REGISTER 1  = ADDRESS OF THE SDWA                               *
*     REGISTER 13 = ADDRESS OF A 72-BYTE SAVE AREA                    *
*     REGISTER 14 = RETURN ADDRESS TO RTM                             *
*     REGISTER 15 = ENTRY POINT ADDRESS OF THIS ESTAE EXIT ROUTINE    *
*                                                                     *
***********************************************************************
         SPACE 1
         PUSH  USING
         LR    #7,#15              SAVE ENTRY ADDRESS REGISTER
         USING STAIEXIT,#7
         LA    #3,12               CHECK IF REGISTER 0 = 12
         CR    #0,#3               IF AN SDWA IS AVAILABLE
         BE    NOSDWAI             THEN...
         USING SDWA,#1
         L     #4,SDWAPARM          #4 -> WORKAREA
         XR    #5,#5
         ICM   #5,7,SDWACMPC        #5 = COMPLETION CODE
         ST    #5,ABCODE-STAIPARM(,#4)   SAVE ABEND CODE
         L     #6,SDWAGR15          #6 = REASON CODE FROM ABEND MACRO
         ST    #6,REASCODE-STAIPARM(,#4) STORE REASON CODE
         SETRP RC=16               LET ABEND CONTINUE WITHOUT ESTAI
         BR    #14                 RETURN TO ABNORMAL TERMINATION
         SPACE 1
NOSDWAI  DS    0H                  NO SDWA AVAILABLE...
         LR    #4,#2                #4 -> WORKAREA
         LR    #5,#1                #5 = COMPLETION CODE
         ST    #5,ABCODE-STAIPARM(,#4)   SAVE ABEND CODE
         XR    #6,#6                #6 = REASON CODE ZERO (UNKNOWN)
         ST    #6,REASCODE-STAIPARM(,#4) STORE REASON CODE
         LA    #15,16              LET ABEND CONTINUE WITHOUT ESTAI
         BR    #14                 RETURN TO ABNORMAL TERMINATION
         POP   USING
         EJECT
         IHASDWA
         EJECT
         END
