         TITLE 'ZILREM - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                 SIGNED INTEGER REMAINDER                            *
*                                                                     *
*  (ZILREM  INTEGER1  INTEGER2)  ==>  RERMAINDER(INTEGER1/INTEGER2)   *
*                                                                     *
*  THE SIGN OF THE REMAINDER IS ALWAYS THE SAME AS THE SIGN OF THE    *
*  FIRST ARGUMENT.  ARGUMENTS OTHER THAN INTEGERS SIGNAL AN ERROR.    *
*  IF THE SECOND ARGUMENT IS 0 AN ERROR IS SIGNALED.                  *
*                                                                     *
*  ===ZILREM NOT YET IMPLEMENTED FOR ALL COMBINATIONS OF BIGNUMS===   *
*                                                                     *
***********************************************************************
*                                                                     *
* This routine currently calls ZILDIV, ZILMUL and ZILSUB to compute   *
* bignum-by-bignum remainder.                                         *
*                                                                     *
***********************************************************************
ZILREM   #ZBEG MINARGS=2,MAXARGS=2,NAME='ZILREM',SUBRS=ZILSUBR
         #ZPDS 32                  DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
*---------------------------------------------------------------------*
*         BOTH ARGUMENTS ARE FIXNUMS - WE WANT SPEED HERE             *
*---------------------------------------------------------------------*
         LM    #6,#7,0(#11)        LOAD ARGUMENTS
         CLI   ##TYPE(#6),##FIXNUM CHECK TYPE OF ARG1
         BNE   NFX1
         CLI   ##TYPE(#7),##FIXNUM CHECK TYPE OF ARG2
         BNE   F1NF2
         L     #2,##CDR(,#6)       GET FIXED VALUE 1
         ICM   #1,15,##CDR(#7)     GET FIXED VALUE 2
         BZ    DIVBY0              IF ZERO, ERROR
         SRDA  #2,32               SHIFT INTO REGS FOR DIVIDE
         DR    #2,#1               REMAINDER IN #2, QUOTIENT IN #3
MKAT     #MKAT FIXED               MAKE A FIXNUM
*
RETURN   #ZRET ,                   RESTORE REGISTERS AND RETURN
*---------------------------------------------------------------------*
*      ARGUMENT 1 IS NOT A FIXNUM                                     *
*---------------------------------------------------------------------*
NFX1     CLI   ##TYPE(#6),##BIGNUM
         BNE   ERROR1
         CLI   ##TYPE(#7),##FIXNUM
         BNE   B1NF2
         XR    #1,#1               CLEAR FOR LOADING BIGNUM LENGTH
         LA    #5,4                GENERAL PURPOSE 4
         ICM   #1,7,1(#6)          GET BIGNUM LENGTH
         LCR   #5,#5               GENERATE GENERAL PURPOSE -4
         L     #3,##VECDAT-4(#1,#6) LOAD MS WORD OF DIVIDEND
         XR    #2,#2               CLEAR UPPER WORD FOR DIVIDE
         L     #7,##CDR(,#7)       LOAD DIVISOR AND TEST
         LTR   #7,#7               0?, DON'T CARE ABOUT SIGN OF DIVISOR
         BZ    DIVBY0              ERROR, CAN'T DIVIDE BY 0
         DR    #2,#7               FIRST DIVIDE
         AR    #1,#5               REDUCE INDEX BY ONE WORD
         AR    #1,#5               REDUCE INDEX BY ANOTHER WORD
*
BFLOOP   L     #3,##VECDAT(#1,#6)  LOAD NEXT LOWER BIGNUM WORD
         SLL   #3,1                SHIFT OUT JUNK BIT, DELETES LSW SIGN
         SRDL  #2,1                RIGHT JUSTIFY 64-BIT DIVIDEND
         DR    #2,#7               DIVIDE AGAIN
         BXH   #1,#5,BFLOOP        ANOTHER WORD?
*
         TM    ##VECDAT(#6),X'80'  TEST SIGN OF BIGNUM
         BNO   MKAT
         LCR   #2,#2               TAKE NEGATIVE BEFORE STORING
         #MKAT FIXED               ARG1 WAS NEG, SO RETURN MUST BE NEG
         B     RETURN
*---------------------------------------------------------------------*
*      ARGUMENT 1 IS A FIXNUM, ARGUMENT 2 IS NOT A FIXNUM             *
*---------------------------------------------------------------------*
F1NF2    CLI   ##TYPE(#7),##BIGNUM FIX/BIG - PROBABLY JUST RETURN ARG1
         BNE   ERROR2              ARGUMENT 2 ISN'T A BIGNUM EITHER
         L     #4,##CDR(,#6)       GET ARG1 FIXNUM
         LR    #15,#6              GET ARG1 POINTER,#15 IN CASE OF RET
         LCR   #4,#4               TEST FOR -2147483648 = -2**31
         BNO   RETURN              NO OVERFLOW, RETURN WITH ARG1
         CLC   TWO31(12),0(#7)     COMPARE BIGNUM TO 2**31
         BNE   RETURN              BIG MAGNITUDE ARG2, RETURN WITH ARG1
         LA    #15,#SFT0           (ZILREM -2147483648 2147483648) = 0
         B     RETURN              RETURN WITH INLINE 0
*---------------------------------------------------------------------*
*      ARGUMENT 1 IS A BIGNUM, ARGUMENT 2 IS NOT A FIXNUM             *
*---------------------------------------------------------------------*
B1NF2    CLI   ##TYPE(#7),##BIGNUM
         BNE   ERROR2              ARG2 IS NOT AN INTEGER
*---------------------------------------------------------------------*
*      BOTH ARGUMENTS ARE BIGNUMS                                     *
*---------------------------------------------------------------------*
         CLC   1(3,#6),1(#7)       COMPARE LENGTHS IN BIGNUM HEADERS
         BH    XXXXXX              BIGNUM/BIGNUM DIVIDE NEEDED
         LR    #15,#6              IN CASE ARG2 MAGNITUDE IS GREATER
         BL    RETURN              LENGTH OF ARG1 IS SMALLER, RETURN IT
         XR    #5,#5               CLEAR FOR INSERTION OF 3-BYTE LENGTH
         ICM   #5,7,1(#6)          GET BIGNUM LENGTHS - BOTH SAME NOW
         L     #4,##VECDAT-4(#5,#6) LOAD MS WORD OF ARG 1 BIGNUM
         CL    #4,##VECDAT-4(#5,#7) COMPARE WITH MS WORD OF ARG 2 BIGN
         BL    RETURN              ARG 1 IS SMALLER, RETURN WITH IT
******** B     XXXXXX              QUOTIENT WOULD BE 0 OR 1
**SHOULD SPECIAL CASE ABOVE - DO COMPARE AND: SUBTRACT OR RETURN***
         SPACE 1
XXXXXX   DS    0H                  Big/by/big remainder
         SPACE 1
***********************************************************************
*                                                                     *
* Fakeout code for bignum remainder cases that aren't handled here.   *
*                                                                     *
* Translation of LISP code (- arg1 (* (/ arg1 arg2) arg2))            *
*                                                                     *
***********************************************************************
         SPACE 1
         L     #0,0(,#11)           Get function argument arg1
         ST    #0,20(,#11)          Store into argument 1
******** L     #0,0(,#11)           Get function argument arg1
         ST    #0,24(,#11)          Store into argument 1
         L     #0,4(,#11)           Get function argument arg2
         ST    #0,28(,#11)          Store into argument 2
         L     #15,@ZILDIV          Get address of ZILDIV
         LA    #1,24(,#11)          Set pointer to arguments in stack.
         #BASR #14,#15              Call ZILDIV
         ST    #15,24(,#11)         Store into argument 1
         L     #0,4(,#11)           Get function argument arg2
         ST    #0,28(,#11)          Store into argument 2
         L     #15,@ZILMUL          Get address of ZILMUL
         LA    #1,24(,#11)          Set pointer to arguments in stack.
         #BASR #14,#15              Call ZILMUL
         ST    #15,24(,#11)         Store into argument 2
         L     #15,@ZILSUB          Get address of ZILSUB
         LA    #1,20(,#11)          Set pointer to arguments in stack.
         #BASR #14,#15              Call ZILSUB
         B     RETURN               Return with value
         SPACE 1
ZILSUBRS DS    0A                   Subroutine pointers.
@ZILDIV  DC    V(ZILDIV)            Entry point for ZILDIV
         DC    CL8'ZILDIV'
@ZILMUL  DC    V(ZILMUL)            Entry point for ZILMUL
         DC    CL8'ZILMUL'
@ZILSUB  DC    V(ZILSUB)            Entry point for ZILSUB
         DC    CL8'ZILSUB'
ZILSUBRE EQU   *                    End of subroutines.
         SPACE 1
*---------------------------------------------------------------------*
*      INLINE CONSTANTS                                               *
*---------------------------------------------------------------------*
         DS    0F                  WORD ALIGN
TWO31    DC    YL1(##BIGNUM),AL3(8),F'0,1'    2**31 SMALLEST BIGNUM
*
*---------------------------------------------------------------------*
*      MESSAGES                                                       *
*---------------------------------------------------------------------*
DIVBY0   #ERR  'Divide by zero attempted taking remainder of ',0(#11)
ERROR1   #ERR  'Argument 1 to remainder not an integer - ',0(#11)
ERROR2   #ERR  'Argument 2 to remainder not an integer - ',4(#11)
***XXX   #ERR  'Bignum/bignum remainder not implemented by ZILREM for 'X
               ,0(#11),' and ',4(#11)
         SPACE 1
         LTORG
         END
