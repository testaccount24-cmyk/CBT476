         TITLE 'ZMSREMQ - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* ZMSREMQ: SAME AS REMQ BUT WORKS ON FIXNUMS AS WELL.  FOR MACSYMA.   *
*                                                                     *
***********************************************************************
         SPACE 1
ZMSREMQ  #ZBEG MINARGS=2,MAXARGS=3,NAME='ZMSREMQ'
         #ZPDS 3*4+12+4  =     28
         #ZSAV ARGS=3
         SPACE 1
         LM    #5,#7,0(#11)        #5 = ARG1, #6 = ARG2, #7 = ARG3
         MVI   COMPVAL,X'FF'       Set impossible-to-be-EQL type
         CLI   ##TYPE(#5),##FIXNUM But if arg1 is a fixnum
         BNE   ARG1NFIX            then
         MVC   COMPVAL(8),0(#5)     set compare value to fixnum body
ARG1NFIX DS    0H
* #5 to be reused.
* Arg 1 is kept on stack, since CONS might relocate it anyhow.
         SPACE 1
         CR    #7,#13              IF ARG 3 NOT SUPPLIED
         BE    ARG3NULL             then process as if NIL
         CR    #7,#10              IF ARG3 (COUNT) IS NIL
         BE    ARG3NULL            THEN IT'S OK
         CLI   ##TYPE(#7),##FIXNUM ELSE ARG3 MUST BE A FIXNUM
         BNE   ARG3ERR             OTHERWISE ERROR
         ICM   #7,#15,##CDR(#7)    GET FIXNUM VALUE OF ARG3 = COUNT
         BP    ARG3OK              If not positive, then
         LR    #15,#6               return arg 2
         B     RETURN
ARG3NULL DS    0H                  Arg 3 is NIL (or unsupplied)
         XR    #7,#7               SET ARG 3 fixnum value = 0
*                                  This is NOT the same as specifying
*                                  0 as arg3.  This value will be able
*                                  to be decremented without ever going
*                                  to zero.
ARG3OK   DS    0H                  #7 now contains fixnum value of arg3
         ST    #10,24(,#11)        Init eventual result to NIL
         LA    #5,24-##CDR(,#11)   Set pseudolocative for bashing list
         CR    #6,#10              If arg 2 is NIL
         BE    RETURNZ             then return NIL.
LOOP     DS    0H                  Else start looping.
         ICM   #1,15,##CAR(#6)     Get CAR of sublist
         BM    RETURNA             If sublist wasn't a CONS, return
         C     #1,0(,#11)          If arg1 is EQ to CAR of (sub)list
         BE    EQ                   or
         CLC   COMPVAL(8),0(#1)    arg1 is EQL to CAR (if fixnum)
         BNE   NOTEQ                then
EQ       DS    0H
         BCT   #7,NEXTCDR           decrement count.
*                                   If count still nonzero, just
*                                   continue by skipping this element.
*                                   If count goes to zero, then...
         L     #0,##CDR(,#6)         get CDR of remaining (sub)list
         ST    #0,##CDR(,#5)         bash new list being built
         B     RETURNZ               return new list
         SPACE 1
NOTEQ    DS    0H                  ELSE THIS CAR DOESN'T MATCH
*                                  Include CAR in new list, already #1
******** L     #1,##CAR(,#6)       Arg 1 to CONS = CAR of sublist
         L     #15,ZLCCONS         Get address of ZILCONS
         LR    #2,#10              Arg 2 to CONS = NIL
         #BASR #14,#15             Call CONS to get new list element
*
* Note: We assume that #5 is not relocated by GC, being a CONS pointer.
*       We assume that #6 is not relocated by GC, being a CONS pointer.
*
         ST    #15,##CDR(,#5)      Bash list being built with new cell
         LR    #5,#15              Set new bashee pointer
         SPACE 1
NEXTCDR  DS    0H
         L     #6,##CDR(,#6)       Bump down arg2 list.
         CR    #6,#10              Until arg 2 goes to NIL
         BNE   LOOP                 continue.
         SPACE 1
RETURNZ  DS    0H
         L     #15,24(,#11)        Load return value
         SPACE 1
RETURN   DS    0H                  Return value is in #15
         #ZRET ,
         SPACE 1
RETURNA  DS    0H                  Here only if sublist ends in atom
*                                  (and no count argument)
         ST    #6,##CDR(,#5)       Bash list with atomic end of list
         B     RETURNZ             and return the return value
         SPACE 1
COMPVAL  DS    D                   Area to compare fixnum value
         SPACE 1
ARG3ERR  #ERR  'Invalid REMQ count argument - ',(#7)
         SPACE 1
         LTORG
         END
