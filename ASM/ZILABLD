         TITLE 'ZILABLD - ZIL 1.3 ATOM CONSTRUCTOR MODULE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* THIS MODULE IS INVOKED VIA BALR FROM ASSEMBLER LANGUAGE FUNCTIONS   *
* WHICH DESIRE TO CREATE ATOM FROM IN-STORAGE CHARACTER AREAS.        *
*                                                                     *
* ONLY SYMBOLS, FIXNUMS AND FLONUMS ARE BUILT BY THIS ROUTINE, WHICH  *
* IS USED BY READ (FOR EXAMPLE) WHEN IT SEES AN UNDELIMITED STRING.   *
*                                                                     *
* THIS MODULE USES NO STACK SPACE,  SINCE IT'S NOT RECURSIVE.         *
*                                                                     *
* INPUTS ARE AS FOLLOWS:                                              *
*                                                                     *
* REGISTER 1 CONTAINS THE ADDRESS OF THE AREA CONTAINING THE TEXT OF  *
*  THE ATOM.                                                          *
* REGISTER 0 CONTAINS THE LENGTH OF THE AREA ADDRESSED BY REGISTER 1. *
*                                                                     *
* REGISTER 2 CONTAINS NIL, IF THE ATOM IS NOT TO BE INTERNED,         *
* OR ANY OTHER VALUE (TYPICALLY T) IF THE ATOM IS TO BE INTERNED      *
* (I.E. PLACED ON THE OBLIST).                                        *
*                                                                     *
* REGISTER 3 CONTAINS NIL, IF THE ATOM IS TO BE A SYMBOL,             *
* OR ANY OTHER VALUE (TYPICALLY T) IF THE ATOM IS TO BE FORMATTED     *
* AS NUMERIC WHERE POSSIBLE.                                          *
*                                                                     *
* REGISTER 4 CONTAINS THE CURRENT STACK POINTER TO BE PASSED TO CONS. *
*                                                                     *
* ON RETURN REGISTER 15 CONTAINS THE ADDRESS OF THE RETURNED ATOM.    *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
* WARNING: DO NOT PASS DATA TO THIS MODULE THAT RESIDES IN            *
*          VECTOR/STRING SPACE!!!                                     *
*                                                                     *
***********************************************************************
         EJECT
         SPACE 1
ZILABLD  #ZBEG NAME='ZILABLD'
         SPACE ,
         STM   #12,#14,ABLDSAVE    SAVE REGISTERS
         ST    #7,SAVE7            SAVE FILE POINTER REGISTER IF USED
         LR    #12,#15             SET UP BASE REGISTER
         DROP  #15
         USING ZILABLD,#12         ESTABLISH ADDRESSABILITY
         EJECT
*                                  REG 3 = FORMAT OR NIL
         LR    #7,#4               REG 7 = CURRENT STACK POINTER
         LR    #4,#1               REG 4 --> CHARACTER TEXT AREA
         LR    #5,#0               REG 5 = LENGTH OF CHARACTER AREA
         MVI   BITS,0              CLEAR LOCAL OPTION FLAGS
         CR    #2,#10              IF INTERN PARAMETER IS NOT NIL
         BE    DONTINT              OR
         CR    #2,#13                INTERN PARAMETER IS "NOT SUPPLIED"
         BE    DONTINT                THEN...
         OI    BITS,DOINTERN           SET INTERN FLAG TRUE
DONTINT  DS    0H
*
* WE MAY NEED ONE MORE STACK SLOT.
*
         LA    #0,4(,#7)           POINT TO CURRENT STACK LOC + 4
         #ZPDS (0)                 CHECK THAT WE HAVE ROOM
*
* BEGIN PROCESSING
*
         OI    ZLCGCFLG,ZLCGCBLD   TURN ON SPECIAL CONSING FLAG
         STM   #4,#5,ATOMREGS      SAVE THE ADDRESS AND LENGTH
         MVI   SIGN,C'+'           INITIALIZE SIGN IF REQUIRED
*
* CHECK FORMAT PARAMETER TO SEE IF WE NEED TO FORMAT THE ATOM.
*
         CR    #3,#10              IF FORMAT PARM = NIL
         BE    NOTNUM               OR
         CR    #3,#13                FORMAT PARM = "NOT SUPPLIED"
         BE    NOTNUM                 THEN ASSUME ALPHA, DON'T SCAN IT
         SPACE
*
* SCAN THE ATOM TO DETERMINE WHAT TYPE IT IS.
* IF IT TURNS OUT TO BE ALPHA, SEARCH THE OBJECT LIST IF INTERN = TRUE.
* IF IT IS NUMERIC, DON'T INTERN IT - JUST MAKE A NUMERIC ATOM.
*
         LA    #14,0(#4,#5)        GET ADDRESS OF END OF ATOM AREA
         CLI   0(#4),C'+'          IF ATOM STARTS WITH A PLUS SIGN
         BE    ASIGN               THEN KEEP SIGN AS IS
         CLI   0(#4),C'-'          IF ATOM STARTS WITH A MINUS SIGN
         BNE   NOSIGN              THEN
         MVI   SIGN,C'-'            SET MINUS SIGN
ASIGN    DS    0H                  SINCE WE HAVE A SIGN...
         LA    #4,1(,#4)           BUMP POINTER PAST SIGN
         BCTR  #5,0                DECREMENT LENGTH ACCORDINGLY
NOSIGN   DS    0H
         LTR   #15,#5              IF ZERO LENGTH (SOLITARY + OR -)
         BNP   NOTNUM              THEN CANNOT BE NUMERIC
         LA    #6,256
SCANLOOP DS    0H
         CR    #15,#6              IF LENGTH IS 256 OR LESS
         BNH   DOTRT               THEN WE CAN SCAN EASILY
         LR    #1,#14              PRIME TRT END-POINTER
         LR    #2,#4               PRIME SCANNING POINTER
         TRT   0(256,#2),NUMTBL    SCAN 256 CHARS FOR NON-NUMERIC CHAR
         BNZ   AFTTRT              IF WE GOT SOMETHING, GO CHECK IT
         AR    #2,#6               BUMP UP SCANNING POINTER
         SR    #15,#6              BUMP DOWN SCANNING LENGTH
         BNP   AFTTRT              WHEN ZERO, GO CHECK RESULT OF TRT
         B     SCANLOOP            IF STILL POSITIVE, CONTINUE SCANNING
DOTRT    DS    0H
         BCTR  #15,0               REDUCE LENGTH FOR EXECUTE
         LR    #1,#14              PRIME TRT END-POINTER
         LR    #2,#4               PRIME SCANNING POINTER
         EX    #15,TRTNUM          SCAN NUMERIC PORTION OF ATOM
AFTTRT   DS    0H
         LR    #2,#1               GET ADDRESS OF FIRST NON-NUMERIC
         SR    #2,#4               GET LENGTH OF NUMERIC PORTION
         BP    ISANUM              IF NONE,
         CLI   0(#1),C'.'           THEN IF IT BEGINS W/DECIMAL POINT
         BE    DECPT                     THEN IT IS A FRACTIONAL NUMBER
         B     NOTNUM                    ELSE IT MUST BE ALPHA
ISANUM   DS    0H
         CR    #1,#14              IF ATOM IS TOTALLY NUMERIC
         BE    MAKEFIX             THEN MAKE A FIXNUM ATOM
         CLI   0(#1),C'.'          IF A DECIMAL POINT
         BE    DECPT               THEN PROCESS SOME MORE
         CLI   0(#1),C'E'          IF E
         BE    MAKEFLTE            THEN MAKE A FLONUM ATOM
         CLI   0(#1),C'D'          IF D
         BE    MAKEFLTD            THEN MAKE A FLONUM ATOM
         CLI   0(#1),C'F'          IF S
         BE    MAKEFLTF            THEN MAKE A FLONUM ATOM
         CLI   0(#1),C'S'          IF S
         BE    MAKEFLTS            THEN MAKE A FLONUM ATOM
         CLI   0(#1),C'e'          IF e
         BE    MAKEFLTE            THEN MAKE A FLONUM ATOM
         CLI   0(#1),C'd'          IF d
         BE    MAKEFLTD            THEN MAKE A FLONUM ATOM
         CLI   0(#1),C'f'          IF s
         BE    MAKEFLTF            THEN MAKE A FLONUM ATOM
         CLI   0(#1),C's'          IF s
         BE    MAKEFLTS            THEN MAKE A FLONUM ATOM
***********************************************************************
***      CLI   0(#1),C'B'          ELSE CHECK TYPE QUALIFIER. IF B
***      BE    MAKEBIN             THEN MAKE A FIXNUM ATOM (BINARY)
***      CLI   0(#1),C'Q'          IF Q
***      BE    MAKEOCT             THEN MAKE A FIXNUM ATOM (OCTAL)
***********************************************************************
         B     NOTNUM              ANYTHING ELSE IS INVALID, IS ALPHA
         EJECT
MAKEFIX  DS    0H
*
* AT THIS POINT #2 CONTAINS THE LENGTH OF THE STRING OF DIGITS
* (EXCEPT FOR ANY LEADING SIGN), AND #4 POINTS TO THE FIRST DIGIT
* (AGAIN, PAST ANY LEADING SIGN).  NOW WE SCAN OFF LEADING ZEROES.
*
LZLOOP   CLI   0(#4),C'0'          IF 1ST CHAR SO FAR IS ZERO
         BNE   FIRSTNZ             THEN...
         LA    #4,1(,#4)            SKIP TO NEXT CHAR
         BCT   #2,LZLOOP            DECREMENT LENGTH UNTIL OTHER OR...
         LA    #15,#SFT0            IT'S ONLY ZEROES, RETURN FIXNUM 0
         B     RETURN               AND RETURN. ELSE...
FIRSTNZ  DS    0H                  GOT FIRST NONZERO DIGIT
*
* NOW #2 CONTAINS LENGTH OF DIGITS OTHER THAN LEADING ZEROES,
* AND #4 POINTS TO THE FIRST NONZERO DIGIT.  NOW CHECK FOR BIGNESS.
*
         CH    #2,=H'10'           MAX NUM LENGTH IS 10
         BH    MUSTBBIG            ANY HIGHER, MUST BE BIGNUM
         BL    MFIXLNOK            LOWER, IS OK
         CLC   0(10,#4),=C'2147483648'  CHECK AGAINST MAX VALUE
         BH    MUSTBBIG            HIGHER, MUST BE BIGNUM
         BL    MFIXLNOK            LOWER, FIXNUM
         CLI   SIGN,C'-'           EQUAL, FIXNUM ONLY IF NEGATIVE
         BNE   MUSTBBIG            IF NEGATIVE, THEN...
         LA    #15,FIXMNEG         POINT TO FIXNUM -2147483648
         B     RETURN              AND RETURN WITH IT.  ELSE...
MFIXLNOK DS    0H                  OK - #2 CONTAINS LENGTH OF NUMERICS
         BCTR  #2,0                REDUCE FOR EXECUTE
         EX    #2,PACKNUM          PACK INTO DOUBLE WORD
         CVB   #2,ZLCDBL           GET BINARY VALUE INTO REGISTER
         CLI   SIGN,C'-'           IF A MINUS SIGN WAS SPECIFIED
         BNE   MFIXCHK             THEN
         LCR   #2,#2                MAKE VALUE NEGATIVE
         B     MFIXCONS             AND GO TO DEFINITELY CONS IT UP
MFIXCHK  DS    0H                  ELSE POSITIVE, SEE IF IT'S IN TABLE
         CL    #2,ZLCSFTHI         IF FIXNUM IS IN TABLE
         BH    MFIXCONS            THEN
         SLA   #2,3                 CONVERT FIXNUM TO TABLE INDEX
         LA    #15,#SFT(#2)         GET ADDRESS OF FIXNUM IN TABLE
         B     RETURN               AND RETURN WITH IT
MFIXCONS DS    0H                  ELSE CONS UP THE FIXNUM
         LR    #0,#7               PASS CURRENT STACK LOCATION TO CONS
         #MKAT FIXED               MAKE FIXED ATOM USING #2, RET'G #15
         B     RETURN              RETURN TO CALLER WITH ATOM
*
* NUMERIC ATOMS ARE NOT INTERNED ON THE OBJECT LIST.
*
* ON ENTRY TO EACH ONE OF THESE LITTLE ROUTINES...
* #4 --> THE ATOM WITHOUT THE SIGN, IF THERE WAS ONE
* #5 = LENGTH OF THE ATOM (WITHOUT THE SIGN)
* #1 --> THE DELIMITING CHARACTER THAT WE SAW
* #2 = THE LENGTH OF THE NUMERIC UP TO THE DELIMITER <- #1 (W/O SIGN)
* #14 --> THE END OF THE ATOM (JUST PAST THE LAST CHARACTER THEREIN)
* #15 = LENGTH OF THE ATOM (WITHOUT THE SIGN) MINUS 1 FOR EXECUTE
*
         EJECT
***********************************************************************
*MAKEBIN DS    0H                  SAW A 'B'
*        SPACE 1
*        STM   #14,#1,SAVEREGS     Save volatile register
*        #TPUT 1,ERR2015           Tell user about old-style constant
*        LM    #14,#1,SAVEREGS     Restore volatile register
*        SPACE 1
*        CH    #2,=H'32'           MAX LENGTH FOR BINARY CONSTANT IS 32
*        BH    NUM2LONG
*        #BAS  #15,GETEXP          GET EXPONENT, IF ANY, INTO #0
*        LA    #1,1                SET UP MASK TO INSERT BINARY BITS
*        XR    #15,#15             CLEAR REG TO HOLD RESULT
*BLOOP   DS    0H                  LOOP TO GET BINARY DIGITS
*        SLL   #15,1               SHIFT OVER TO MAKE ROOM
*        CLI   0(#4),C'0'          IF A 0
*        BE    B0                  THEN PROCESS BINARY 0
*        CLI   0(#4),C'1'          IF A 1
*        BE    B1                  THEN PROCESS BINARY 1
*        #TPUT 1,ERR2011           INVALID BINARY DIGIT
*        B     NOTNUM              ASSUME SYMBOL
*B1      DS    0H
*        OR    #15,#1              INSERT A 1-BIT
*B0      DS    0H                  INSERT A 0-BIT (I.E. DO NOTHING)
*        LA    #4,1(,#4)
*        BCT   #2,BLOOP            UNTIL END OF NUMERICS
*        CLI   SIGN,C'-'           IF A MINUS SIGN WAS ENTERED
*        BNE   BNOTMIN             THEN
*        LCR   #15,#15              MAKE IT NEGATIVE
*BNOTMIN DS    0H
*        LTR   #5,#0               CHECK EXPONENT
*        BZ    BNOSHIFT            SKIP IF NONE
*        BM    BRSHIFT             IF POSITIVE, THEN
*        SLA   #15,0(#5)            SHIFT LEFT BY (EXPONENT) BITS
*        B     BNOSHIFT            IF NEGATIVE, THEN
*BRSHIFT LPR   #5,#5                MAKE EXPONENT POSITIVE AND
*        SRA   #15,0(#5)            SHIFT RIGHT BY (EXPONENT) BITS
*BNOSHIFTDS    0H
*        LR    #2,#15              GET NUMERIC VALUE
*        LR    #0,#7               PASS CURRENT STACK LOCATION TO CONS
*        #MKAT FIXED               MAKE A FIXNUM OUT OF IT
*        B     RETURN              RETURN WITH IT
*        SPACE
*MAKEOCT DS    0H                  SAW AN 'O'
*        SPACE 1
*        STM   #14,#1,SAVEREGS     Save volatile register
*        #TPUT 1,ERR2016           Tell user about old-style constant
*        LM    #14,#1,SAVEREGS     Restore volatile register
*        SPACE 1
*        CH    #2,=H'11'           MAX LENGTH FOR OCTAL CONSTANT IS 11
*        BH    NUM2LONG
*        BL    OOK
*        CLI   0(#4),C'3'          IF 11 POSITIONS, FIRST MUST BE 0XX
*        BH    NUM2LONG
*OOK     DS    0H
*        #BAS  #15,GETEXP          GET EXPONENT, IF ANY, INTO #0
*        XR    #15,#15             CLEAR REG TO HOLD RESULT
*OLOOP   DS    0H                  LOOP TO GET BINARY DIGITS
*        SLL   #15,3               SHIFT OVER TO MAKE ROOM
*        CLI   0(#4),C'0'          IF BETWEEN 0 AND 7
*        BL    OERR                THEN
*        CLI   0(#4),C'7'           PROCESS OCTAL DIGIT
*        BNH   OD                  ELSE
*OERR    #TPUT 1,ERR2012            INVALID OCTAL DIGIT
*        B     NOTNUM               ASSUME SYMBOL
*OD      DS    0H
*        IC    #1,0(,#4)           PICK UP OCTAL DIGIT
*        SLL   #1,28               CLEAR OUT JUNK
*        SRL   #1,28
*        OR    #15,#1              INSERT OCTAL BITS
*        LA    #4,1(,#4)           BUMP CHARACTER POINTER
*        BCT   #2,OLOOP            UNTIL END OF NUMERICS
*        CLI   SIGN,C'-'           IF A MINUS SIGN WAS ENTERED
*        BNE   ONOTMIN             THEN
*        LCR   #15,#15              MAKE IT NEGATIVE
*ONOTMIN DS    0H
*        LTR   #5,#0               CHECK EXPONENT
*        BZ    ONOSHIFT            SKIP IF NONE
*        BM    ORSHIFT             IF POSITIVE, THEN
*        MH    #5,=H'3'            CONVERT EXPONENT TO SHIFT AMOUNT
*        SLA   #15,0(#5)            SHIFT LEFT BY (EXPONENT*3) BITS
*        B     ONOSHIFT            IF NEGATIVE, THEN
*ORSHIFT LPR   #5,#5                MAKE EXPONENT POSITIVE AND
*        MH    #5,=H'3'            CONVERT EXPONENT TO SHIFT AMOUNT
*        SRA   #15,0(#5)            SHIFT RIGHT BY (EXPONENT*3) BITS
*ONOSHIFTDS    0H
*        LR    #2,#15              GET NUMERIC VALUE
*        LR    #0,#7               PASS CURRENT STACK LOCATION TO CONS
*        #MKAT FIXED               MAKE A FIXNUM OUT OF IT
*        B     RETURN              RETURN WITH IT
***********************************************************************
         EJECT
MAKEFLTD DS    0H                  SAW A 'D'
MAKEFLTE DS    0H                  SAW AN 'E'
         OI    BITS,DEXP           Indicate building double float
         B     MAKEFLT             Go start building it
         SPACE 1
MAKEFLTF DS    0H                  SAW AN 'F'
MAKEFLTS DS    0H                  SAW AN 'S'
         NI    BITS,255-DEXP       Indicate building single float
******** B     MAKEFLT             Go start building it
         SPACE 1
MAKEFLT  DS    0H                  MAKE A SINGLE-PRECISION FLONUM
         SPACE 1
         #BAS  #15,GETEXP          GET EXPONENT, IF ANY, INTO #0
         LD    #F0,=D'0'           INITIALIZE REG TO HOLD RESULT
         XC    ZLCDBL(8),ZLCDBL    CLEAR TEMP FLOAT IN STORAGE
         CLI   SIGN,C'-'           DEPENDING ON SIGN OF INPUT...
         BE    NEGFLOAT
         MVI   ZLCDBL,X'42'        X'420_0000 00000000'
         B     AFTNEGFL
NEGFLOAT MVI   ZLCDBL,X'C2'        X'C20_0000 00000000'
AFTNEGFL DS    0H
FLOOP    DS    0H
         MVN   ZLCDBL+1(1),0(#4)   MOVE IN NUMERIC PART OF DIGIT
         MD    #F0,=D'10'          MULTIPLY WHAT WE HAVE SO FAR BY 10
         AD    #F0,ZLCDBL          ADD FP VERSION OF DIGIT
         LA    #4,1(,#4)           BUMP DIGIT POINTER
         BCT   #2,FLOOP            CONTINUE UNTIL ALL DIGITS USED UP
         LTR   #0,#0               NOW GET EXPONENT
         BZ    FNOEXP              IF ZERO, DO NO MORE
         BM    FMINEXP             IF NEGATIVE, DIVIDE BY POWER OF 10
FEXPLOOP MD    #F0,=D'10'          IF POSITIVE, MULTIPLY BY POWER OF 10
         BCT   #0,FEXPLOOP         BY REPEATEDLY MULTIPLYING BY 10
         B     FNOEXP              UNTIL EXPONENT IS EXHAUSTED
FMINEXP  LPR   #0,#0               IF NEGATIVE, MAKE EXPONENT POSITIVE
FMINLOOP DD    #F0,=D'10'          AND REPEATEDLY DIVIDE BY 10
         BCT   #0,FMINLOOP         UNTIL EXPONENT IS EXHAUSTED.
FNOEXP   DS    0H
         B     DPNOEXP             Go build single or double float
         EJECT
DECPT    DS    0H                  SAW A '.'
         OI    BITS,DEXP           Default is double float if no exp.
         LA    #15,1(,#1)          POINT TO CHARACTER FOLLOWING '.'
         CR    #15,#14             IF AT END (I.E. LAST CHAR IS '.')
         BL    MAKEFLO              THEN...
         LTR   #2,#2                 IF IT HAS A NUMERIC (INTEGER) PART
         BNZ   MAKEFIX                THEN TREAT IT AS A FIXNUM
         BZ    NOTNUM                 ELSE NOT NUMERIC
MAKEFLO  DS    0H                  ELSE DECIMAL POINT NOT AT END: FLOAT
         LD    #F0,=D'0'           INITIALIZE REG TO HOLD RESULT
         LTR   #2,#2               IF ZERO-LENGTH NUMERIC (.NNN...)
         BZ    DPNOINT             THEN INTEGER PART IS ZERO
         XC    ZLCDBL(8),ZLCDBL    CLEAR TEMP FLOAT IN STORAGE
         CLI   SIGN,C'-'           DEPENDING ON SIGN OF INPUT...
         BE    NEGDECPT
         MVI   ZLCDBL,X'42'        X'420_0000 00000000'
         B     AFTDECFL
NEGDECPT MVI   ZLCDBL,X'C2'        X'C20_0000 00000000'
AFTDECFL DS    0H
DPLOOP   DS    0H
         MVN   ZLCDBL+1(1),0(#4)   MOVE IN NUMERIC PART OF DIGIT
         MD    #F0,=D'10'          MULTIPLY WHAT WE HAVE SO FAR BY 10
         AD    #F0,ZLCDBL          ADD FP VERSION OF DIGIT
         LA    #4,1(,#4)           BUMP DIGIT POINTER
         BCT   #2,DPLOOP           CONTINUE UNTIL ALL DIGITS USED UP
DPNOINT  DS    0H                  GOT INTEGER, NOW GET FRACTION PART
         XR    #0,#0               INITIALIZE EXPONENT TO ZERO
         LA    #4,1(,#1)           POINT TO CHAR FOLLOWING DEC POINT
         LR    #15,#14             POINT TO END OF ATOM
         SR    #15,#4              COMPUTE LENGTH OF DATA FOLLOWING "."
         BNP   DPNOEXP             IF NONE, THAT'S IT, WE GOT THE VALUE
         LA    #6,256
FLSCANLP DS    0H
         CR    #15,#6              IF LENGTH IS 256 OR LESS
         BNH   FLDOTRT             THEN WE CAN SCAN EASILY
         LR    #1,#14              PRIME TRT END-POINTER
         LR    #2,#4               PRIME SCANNING POINTER
         TRT   0(256,#2),NUMTBL    SCAN 256 CHARS FOR E OR OTHER ¬NUM
         BNZ   FLAFTTRT            IF WE GOT SOMETHING, GO CHECK IT
         AR    #2,#6               BUMP UP SCANNING POINTER
         SR    #15,#6              BUMP DOWN SCANNING LENGTH
         BNP   FLAFTTRT            WHEN ZERO, GO CHECK RESULT OF TRT
         B     FLSCANLP            IF STILL POSITIVE, CONTINUE SCANNING
FLDOTRT  DS    0H
         BCTR  #15,0               REDUCE LENGTH FOR EXECUTE
         LR    #1,#14              PRIME TRT END-POINTER
         LR    #2,#4               PRIME SCANNING POINTER
         EX    #15,TRTNUM          SCAN NUMERIC PORTION OF ATOM
FLAFTTRT DS    0H
         ST    #1,SAVEX            SAVE END-OF-FRACTION POINTER
         BZ    DPFRAC              IF GOT TO THE END, PROCESS FRACTION
         CLI   0(#1),C'E'          IF "E" FOUND
         BE    PENUM               THEN THIS IS STILL A NUMBER
         CLI   0(#1),C'D'          IF "D" FOUND
         BE    PDNUM               THEN THIS IS STILL A NUMBER
         CLI   0(#1),C'F'          IF "F" FOUND
         BE    PFNUM               THEN THIS IS STILL A NUMBER
         CLI   0(#1),C'S'          IF "S" FOUND
         BE    PSNUM               THEN THIS IS STILL A NUMBER
         CLI   0(#1),C'e'          IF "e" FOUND
         BE    PENUM               THEN THIS IS STILL A NUMBER
         CLI   0(#1),C'd'          IF "d" FOUND
         BE    PDNUM               THEN THIS IS STILL A NUMBER
         CLI   0(#1),C'f'          IF "f" FOUND
         BE    PFNUM               THEN THIS IS STILL A NUMBER
         CLI   0(#1),C's'          IF "s" FOUND
         BE    PSNUM               THEN THIS IS STILL A NUMBER
         B     NOTNUM              ELSE THIS CAN'T BE A NUMBER
         SPACE 1
PDNUM    DS    0H                  n.nDn
PENUM    DS    0H                  n.nEn
         OI    BITS,DEXP           Indicate we're building a double flt
         B     PNUM                Go starting building it
         SPACE 1
PSNUM    DS    0H                  n.nSn
PFNUM    DS    0H                  n.nFn
         NI    BITS,255-DEXP       Indicate we're building a single flt
******** B     PNUM                Go starting building it
         SPACE 1
PNUM     DS    0H
         #BAS  #15,GETEXP          GET THE EXPONENT INTO #0
* #4 STILL POINTS TO THE FRACTIONAL PART OF THE NUMBER.
DPFRAC   DS    0H                  PROCESS FRACTIONAL PART
         LD    #F2,=D'0'           INITIALIZE REG TO HOLD RESULT
         LD    #F4,=D'1'           INITIALIZE REG TO HOLD POWER OF 10
         L     #2,SAVEX            GET ADDRESS OF END OF FRACTION
         SR    #2,#4               COMPUTE ITS LENGTH.  IF ZERO (N.EN)
         BZ    DFNOINT             THEN INTEGER PART IS ZERO. ELSE
         MVC   ZLCDBL(8),=X'4200000000000000'
DFLOOP   DS    0H
         MVN   ZLCDBL+1(1),0(#4)   MOVE IN NUMERIC PART OF DIGIT
         MD    #F2,=D'10'          MULTIPLY WHAT WE HAVE SO FAR BY 10
         MD    #F4,=D'10'          MULTIPLY WHAT WE HAVE SO FAR BY 10
         AD    #F2,ZLCDBL          ADD FP VERSION OF DIGIT
         LA    #4,1(,#4)           BUMP DIGIT POINTER
         BCT   #2,DFLOOP           CONTINUE UNTIL ALL DIGITS USED UP
DFNOINT  DS    0H
         DDR   #F2,#F4             DIVIDE BY 10**(#PLACES) FOR FRACTION
         CLI   SIGN,C'-'           IF NUMBER IS NOT NEGATIVE
         BE    DFSUB               THEN
         ADR   #F0,#F2              ADD FRACTION TO INTEGER PART
         B     DFAFT               ELSE
DFSUB    SDR   #F0,#F2              SUBTRACT FRACTION FROM INTEGER PART
DFAFT    DS    0H
         LTR   #0,#0               NOW GET EXPONENT
         BZ    DPNOEXP             IF ZERO, DO NO MORE
         BM    DPMINEXP            IF NEGATIVE, DIVIDE BY POWER OF 10
DPEXLOOP MD    #F0,=D'10'          IF POSITIVE, MULTIPLY BY POWER OF 10
         BCT   #0,DPEXLOOP         BY REPEATEDLY MULTIPLYING BY 10
         B     DPNOEXP             UNTIL EXPONENT IS EXHAUSTED
DPMINEXP LPR   #0,#0               IF NEGATIVE, MAKE EXPONENT POSITIVE
DPMILOOP DD    #F0,=D'10'          AND REPEATEDLY DIVIDE BY 10
         BCT   #0,DPMILOOP         UNTIL EXPONENT IS EXHAUSTED.
DPNOEXP  DS    0H                  Build single or double float
         TM    BITS,DEXP           If this is a double float,
         BO    BUILDDBL            then go to build double float.
         LRER  #F0,#F0             Else round double to single
         STE   #F0,ZLCDBL          STORE FINAL RESULT
         L     #2,ZLCDBL           LOAD INTO GPR
         LR    #0,#7               PASS CURRENT STACK LOCATION TO CONS
         #MKAT FLOAT               MAKE A FLOATING POINT ATOM
         B     RETURN              RETURN WITH IT
         SPACE 1
BUILDDBL DS    0H                  Build a double float
         LR    #0,#7               Pass current stack location to CONS
         L     #15,ZLCMDF          Get address of ZILMDF
         #BASR #14,#15             Call ZILMDF to cons up a flonum
         B     RETURN              Return with the flonum
         EJECT
MUSTBBIG DS    0H                  LONG NUMERIC - MUST BE A BIGNUM
         SPACE 1
***********************************************************************
* INTEGER LARGER THAN MAXIMUM FIXNUM - MAKE A BIGNUM OUT OF IT.       *
* #2 CONTAINS THE LENGTH OF THE DIGITS (SIGN AND LEADING 0'S EXCLUDED)*
* #4 POINTS TO THE STRING OF DIGITS (SIGN AND LEADING ZEROES EXCLUDED)*
* THE FIELD "SIGN" CONTAINS "+" OR "-", DEPENDING ON THE SIGN         *
* THIS ROUTINE SHOULD MAKE A BIGNUM, PUT ITS ADDRESS IN #15, AND      *
* BRANCH TO "RETURN".                                                 *
* THROUGHOUT THIS BIGNUM CONVERSION CODE THE REGISTERS ARE USED FOR   *
* THE FOLLOWING PURPOSES.                                             *
* R0 = CONS POINTER; MOST SIGNIFICANT WORD OF MACHINE MULTIPLY        *
* R1 = MULITPLICAND; LEAST SIGNIFICANT WORD OF MULTIPLY RESULT        *
* R2 = 9 (DIGIT CHARACTER CHUNK SIZE); 1,000,000,000 LARGEST POWER OF *
*      10 REPRESENTABLE IN 2**31 RADIX                                *
* R3 = POINTER TO THE END OF THE DIGIT CHARACTERS TO BE CONVERTED;    *
*      LATER MOVED BACK BY 9 FOR PROPER BXLE TERMINATION CONDITION.   *
* R4 = POINTER TO THE BEGINNING OF THE DIGIT CHARACTER STRING;        *
* R5 = INCREMENTED TO ALWAYS POINT TO THE NEXT 9 DIGIT-CHARACTER CHUNK*
* R6 = 4 - USEFUL GENERALLY, ALSO FOR BIGNUM POINTER BXLE INCREMENT   *
* R7 = POINTER TO THE END OF THE BIGNUM (THIS GROWS AS MORE CHUNKS ARE*
*      CONVERTED, ITS FINAL VALUE IS THE SIZE OF THE BIGNUM)          *
* R14= MULTIPLY CARRY REGISTER, DOVETAILS BEAUTIFULLY WITH THE ADD    *
*      REQUIRED TO THE BIGNUM AFTER EVERY CONVERSION - SIMPLY PRETEND *
*      IT'S A CARRY INTO THE FIRST MULTIPLY                           *
* R15= POINTER TO RESULTING BIGNUM                                    *
***********************************************************************
         SPACE 1
         LR    #0,#7               PASS CURRENT STACK LOCATION TO CONS
         LA    #3,0(#2,#4)         CALCULATE POINTER TO END OF STRING
         S     #3,=F'9'            POINT TO LAST 9-DIGIT CHUNK
         LR    #7,#2               SAVE STRING LENGTH
         XR    #6,#6               CLEAR FOR DIVIDE
         D     #6,=F'9'            DIVIDE BY CHUNK SIZE
         LR    #5,#4               SAVE POINTER TO BEGINNING OF STRING
         SLL   #7,2                # OF 9-DIGITS CHUNKS * 4
         LA    #2,##VECDAT+4(,#7)  ADD CONSTANT FOR REMAINDER ( <9 )
         L     #15,ZLCBIG          GET ADDRESS OF BIGNUM MAKER
         #BASR #14,#15             CALL BIGNUM MAKER
*
         LR    #4,#5               GET POINTER TO BEGINNING OF STRING
         LTR   #6,#6               IS REMAINDER = 0
         BZ    GET9I               YES, THEN WE HAVE EXACT 9-MULTIPLE
         BCTR  #6,0
         EX    #6,EXPACK           PACK #6 AMOUNT OF BYTES
         LA    #4,1(#6,#4)
*
FIRSTCVB CVB   #1,ZLCDBL           CONVERT INTO ONE BINARY WORD
         ST    #1,##VECDAT(,#15)   STORE INTO BIGNUM - PRIME THE MULT
*
         LA    #6,4                GENERATE 4 FOR GENERAL USE
         LR    #7,#6               PRIME THE BIGNUM LENGTH
NXTCVB   LR    #5,#6               RESET OFFSET IN BIGNUM TO 4
         PACK  ZLCDBL(8),0(9,#4)   PACK ANOTHER 9 EBCDIC DIGITS
         CVB   #14,ZLCDBL          CONVERT - WILL BE LESS THAN BILLION
         L     #2,=F'1000000000'   PREP FOR DIVIDING BY A BILLION
BFLOOP   L     #1,##VECDAT-4(#5,#15) LOAD NEXT BIGNUM WORD
         MR    #0,#2               MULTIPLY BY A BILLION
         ALR   #1,#14              ADD THE CARRY WORD FROM LAST LOOP
         BC    12,BFLOOPNC         CAN WE SKIP THE CARRY BIT TO NEXT?
         A     #0,=F'1'            ADD IN CARRY BIT *OPTIMIZE*
BFLOOPNC SLDL  #0,1                CONVERT TO 31-BIT RADIX
         SRL   #1,1                RESTORE LOWER WORD
         ST    #1,##VECDAT-4(#5,#15) RESULT BIGNUM OVERLAYS OLD
         LR    #14,#0              SAVE MS WORD AS A CARRY
         BXLE  #5,#6,BFLOOP        CONTINUE TO END OF OLD BIGNUM
*
         LTR   #0,#0               TEST HIGHEST WORD OF BIGNUM RESULT
         BZ    HWORD0              IF 0 THEN SKIP THIS EXTRA STORE
         ST    #0,##VECDAT-4(#5,#15) STORE NEW HIGHEST WORD
         LR    #7,#5               STORE NEW LENGTH IN LIMIT REGISTER
HWORD0   LA    #2,9                NEED 9 TEMPORARILY AS INC FOR BXLE
         BXLE  #4,#2,NXTCVB        WE HAVE ANOHTER 9-CHARACTER CHUNK?
*
         STCM  #7,7,1(#15)         SET BIGNUM LENGTH FIELD
         LA    #1,##VECDAT(#7,#15) POINT TO END OF BIGNUM
         ST    #1,ZLCVSNXT         STORE POINTER TO AVAILABLE VSS
         CLI   SIGN,C'-'           TEST SIGN OF BIGNUM
         BNE   RETURN              BIGNUM IS NOT MINUS
         OI    ##VECDAT(#15),X'80' SET BIGNUM SIGN TO NEGATIVE
         B     RETURN
*
GET9I    PACK  ZLCDBL(8),0(9,#4)
         LA    #4,9(,#4)           BUMP CHAR POINTER TO NEXT CHUNK
         B     FIRSTCVB
*
EXPACK   PACK  ZLCDBL(8),0(0,#4)   USED BY EXECUTE FOR VARIABLE LEN
*--------------------------------------------------------------------
         EJECT
NOTNUM   DS    0H                  ATOM MUST BE ALPHA
         SPACE 1
         LM    #4,#5,ATOMREGS      PICK UP TEXT ADDRESS AND LENGTH
         TM    BITS,DOINTERN       IF INTERN PARM = NIL
         BZ    NOINTERN            THEN DON'T INTERN ATOM
*
* SEARCH FOR ATOM ON OBJECT LIST.  IF IT IS THERE, RETURN POINTER TO
* EXISTING ATOM.  IF IT IS NOT THERE, BUILD A NEW ONE AND CONS IT TO
* THE OBJECT LIST.
*
* CHECK IF THE LENGTH IS SUCH THAT THE SYMBOL COULD BE T OR NIL.
*
         CH    #5,=H'1'            IF LENGTH = 1
         BNE   OBNOTT               AND
         CLI   0(#4),C'T'           AND TEXT = "T"
         BNE   OBSEARCH              THEN...
         LR    #15,#8                 POINT TO T
         B     RETURN                  AND RETURN
OBNOTT   DS    0H                  ELSE LENGTH NOT 1
         CH    #5,=H'3'            IF LENGTH = 3
         BNE   OBSEARCH             AND
         CLC   0(3,#4),=C'NIL'       TEXT = "NIL"
         BNE   OBSEARCH               THEN...
         LR    #15,#10                 POINT TO NIL
         B     RETURN                   AND RETURN
OBSEARCH DS    0H                  OTHERWISE SEARCH THE OBLIST FOR IT
         LA    #0,0(,#7)           SET STACK POINTER FOR CONSING
         L     #15,ZLCINTN         GET ADDRESS OF ZILINTN
         XR    #7,#7               INDICATE THAT WE NEED A NEW CELL
         #BASR #14,#15             CALL ZILINTN TO INTERN SYMBOL
         B     RETURN              RETURN WITH INTERNED SYMBOL
         SPACE 1
NOINTERN DS    0H                  NOT TO BE INTERNED, BUILD SYMBOL
         LA    #2,##SYMLEN+3(,#5)  GET LENGTH OF STRING + OF SYMBOL
         LR    #3,#4               GET PNAME TEXT PTR INTO SAFE REG
         N     #2,=X'FFFFFFFC'     ROUND LEN UP TO FULLWORD BOUNDARY
         L     #15,ZLCVSS          GET ADDRESS OF ZILVSS
         XR    #1,#1               SET ENTRY CODE 0 FOR ZILVSS
         #BASR #14,#15             CALL ZILVSS TO ALLOCATE SPACE
         LTR   #4,#4               IF NOT ENOUGH SPACE
         BZ    NOROOM              THEN ERROR
*                                  Else R4 -> where to build the text
*                                  and R15 -> the string object
         LA    #2,##SYMLEN(,#15)   GET ADDRESS OF PNAME STRING
         ST    #5,0(,#2)           STORE STRING LENGTH
         MVI   0(#2),##STRING      SET STRING TYPE
         MVC   0(##SYMLEN,#15),ZLCNSYM INITIALIZE SYMBOL FROM TEMPLATE
         ST    #2,##PNAME(,#15)    STORE PRINT NAME CELL OF SYMBOL
* Package cell remains "uninterned"
         LA    #4,##VECDAT(,#2)    #4 = POINTER TO STRING TEXT DEST
*                                  #5 = LENGTH OF PNAME TEXT
         LR    #0,#3               GET POINTER TO OUR PNAME TEXT
         LR    #1,#5               GET LENGTH FOR MVCL
         MVCL  #4,#0               MOVE PNAME TEXT INTO THE STRING
         SPACE
RETURN   DS    0H                  RETURN WITH NEW OBJECT IN #15
         NI    ZLCGCFLG,255-ZLCGCBLD TURN OFF SPECIAL CONSING FLAG
         L     #7,SAVE7            RESTORE REGISTERS
         LM    #12,#14,ABLDSAVE    RESTORE REGISTERS
         BR    #14                 RETURN TO CALLER
         EJECT
NOROOM   DS    0H                  NO V/S SPACE TO BUILD SYMBOL
         #ERR  'ZIL2100 ZILABLD: No vector/string space available, symbX
               ol not built.',PREFIX=NO
         EJECT
GETEXP   DS    0H
*
* THIS SUBROUTINE EXTRACTS AN EXPONENT FROM A FLOAT, BINARY OR OCTAL.
* #0 CONTAINS THE EXPONENT VALUE (ZERO IF NONE).
* #1 POINTS TO THE DELIMITING CHARACTER B/O/E AND IS DESTROYED.
* #2 IS DESTROYED BY TRT.
* #14 POINTS TO THE END OF THE ATOM AND IS DESTROYED.
* #15 IS THE RETURN ADDRESS.
* NOTE THAT IF THE EXPONENT IS INVALID, THEN THE ENTIRE NUMBER IS
* CONSIDERED NON-NUMERIC AND CONTROL DOES NOT RETURN BUT GOES TO
* ALPHA PROCESSING.
*
         XR    #0,#0               CLEAR EXPONENT TO ZERO
         LA    #6,1(,#1)           POINT TO EXPONENT IF ANY
         LR    #3,#6               SAVE ADDRESS OF EXPONENT
         SR    #14,#6              GET LENGTH OF EXPONENT IF ANY
         BNPR  #15                 IF ZERO, NO EXPONENT
         CLI   0(#6),C'+'          SEE IF EXPONENT HAS A SIGN
         BE    EXPSIGN
         CLI   0(#6),C'-'
         BNE   EXPNOSGN
EXPSIGN  LA    #6,1(,#6)           IF IT DOES, ADJUST REGS FOR IT
         BCTR  #14,0
EXPNOSGN LTR   #14,#14             IF NO NUMERIC PART, THEN
         BNP   NOTNUM              THIS IS NOT A NUMBER AT ALL
         CH    #14,=H'256'         IF NUMERIC PART LONGER THAN 256
         BH    NOTNUM              THEN DEFINITELY NOT A VALID EXPONENT
         BCTR  #14,0               REDUCE LENGTH FOR EXECUTE
         EX    #14,TRTEXP          SCAN EXPONENT FOR NUMERICS
         BNZ   NOTNUM              IF NON-NUMERIC, NOT A NUMBER AT ALL
         CH    #14,=H'3'           IF NUMERIC PART LONGER THAN 4 DIGITS
         BH    BADEXP              THEN NOT A VALID EXPONENT
         EX    #14,PACKEXP         ELSE PACK EXPONENT INTO WORKAREA
         CVB   #0,ZLCDBL           GET EXPONENT INTO REGISTER 0
         CLI   0(#3),C'-'          IF MINUS
         BNER  #15                 THEN
         LCR   #0,#0                SET EXPONENT NEGATIVE
         BR    #15                 RETURN TO CALLER
         SPACE 1
BADEXP   EQU   NOTNUM              TREAT VALUE AS ALPHA
*******  #TPUT 1,ERR2013           TELL USER EXPONENT IS NO GOOD
*******  B     NOTNUM              TREAT VALUE AS ALPHA
         SPACE 1
***********************************************************************
*NUM2LONGDS    0H                  NUMERIC OUT OF PERMISSIBLE RANGE
*        #TPUT 1,ERR2010           TELL USER NUMBER IS TOO LONG
*        B     NOTNUM              TREAT VALUE AS ALPHA
***********************************************************************
         EJECT
TRTNUM   TRT   0(0,#2),NUMTBL      SCAN NUMERIC PORTION OF ATOM
PACKNUM  PACK  ZLCDBL(8),0(0,#4)   PACK ATOM INTO DOUBLE WORD
TRTEXP   TRT   0(0,#6),NUMTBL      SCAN NUMERIC PORTION OF ATOM
PACKEXP  PACK  ZLCDBL(8),0(0,#6)   PACK ATOM INTO DOUBLE WORD
         SPACE 2
ABLDSAVE DS    3A                  SAVE AREA FOR REGISTERS
SAVE7    DS    A                   SAVE
SAVEX    DS    A                   SAVE
SAVEREGS DS    5A                  MORE SAVE
         SPACE
ATOMREGS DS    2A                  THE ADDRESS AND LENGTH OF ATOM TEXT
         SPACE
SIGN     DS    X                   + OR -
BITS     DS    X                   FLAGS
DOINTERN EQU   X'80'               1 = INTERN THE SYMBOL
DEXP     EQU   X'40'               1 = DOUBLE FLOAT
         SPACE
FIXMNEG  #IATM -2147483648         MOST NEGATIVE FIXNUM (X'80000000')
         SPACE
***2013  DC    C'ZIL2013 INVALID EXPONENT, ASSUMING SYMBOL.'
***2010  DC    C'ZIL2010 NUMERIC TOO LARGE, ASSUMING SYMBOL.'
***2011  DC    C'ZIL2011 INVALID BINARY CONSTANT, ASSUMING SYMBOL.'
***2012  DC    C'ZIL2012 INVALID OCTAL CONSTANT, ASSUMING SYMBOL.'
***2015  DC    C'ZIL2015 OLD STYLE LISP BINARY CONSTANT ASSUMED.'
***2016  DC    C'ZIL2016 OLD STYLE LISP OCTAL CONSTANT ASSUMED.'
         SPACE
NUMTBL   DC    256YL1(1)           TABLE TO SCAN FOR NUMERICS
         ORG   NUMTBL+C'0'
         DC    10YL1(0)            ONLY VALID CHARACTERS
         ORG   ,                   END OF TABLE
         SPACE
         LTORG
         END
