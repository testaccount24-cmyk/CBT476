         TITLE 'HAIPART - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
* THIS IS THE MACLISP "HAIPART" FUNCTION.  IT TAKES AN INTEGER ARG    *
* AND RETURNS THE FIRST N BITS IN THE ABSOLUTE VALUE THEREOF,         *
* NOT INCLUDING LEADING ZERO BITS.                                    *
*                                                                     *
* ARG 1 = THE NUMBER FROM WHICH THE "HIGH PART" IS TO BE TAKEN        *
* ARG 2 = THE NUMBER OF BITS TO TAKE STARTING WITH THE FIRST 1-BIT.   *
*                                                                     *
* IF ABS(ARG 2) IS GREATER THAN 31, ABS (ARG 1) IS RETURNED.          *
*                                                                     *
* THIS IS COMPUTED AS FOLLOWS:                                        *
*                                                                     *
* IF ARG 1 IS ZERO, THE RESULT IS ALWAYS ZERO.                        *
* IF ARG 2 IS NEGATIVE, ARG 1 IS LEFT SHIFTED AND RIGHT SHIFTED TO    *
* RETURN THE LOW-ORDER (ABS ARG2) BITS OF ARG 1.                      *
* OTHERWISE, ARG 1 IS LEFT SHIFTED UNTIL A 1-BIT APPEARS IN THE       *
* LEFTMOST POSITION, AND THE VALUE IS RIGHT SHIFTED (32-ARG2) BITS.   *
*                                                                     *
* BIGNUMS ARE ALSO SUPPORTED AS ARG1.                                 *
*                                                                     *
***********************************************************************
         SPACE 1
HAIPART  #ZBEG MINARGS=2,MAXARGS=2,NAME='HAIPART'
         #ZPDS 2*4+12+8
         #ZSAV ,
         SPACE 1
         L     #15,0(,#11)         GET ARG1
         CLI   ##TYPE(#15),##FIXNUM ARG1 MUST BE A FIXNUM OR A BIGNUM
         BNE   NFIX1
         L     #4,4(,#11)          GET ARG2
         CLI   ##TYPE(#4),##FIXNUM ARG2 MUST BE A FIXNUM
         BNE   ERROR2
         L     #2,##CDR(,#15)      GET ARG 1 VALUE
         XR    #3,#3               Clear second half of reg pair
         LPR   #2,#2               GET ITS ABSOLUTE VALUE
         BO    MAXNEG              If overflow, must be -2147483648
         BZ    RETZERO             IF ZERO, ANSWER = ZERO,
         ICM   #4,15,##CDR(#4)     GET ARG 2 VALUE
         BM    ARG2NEG             IF NEGATIVE, PROCESS NEGATIVE
         CH    #4,=H'31'           IF GREATER THAN 31
         BH    RETABS1             THEN RETURN (ABS ARG1)
         SPACE 1
PROCESS  DS    0H                  OK, NOW PROCESS THE NUMERIC VALUE
*
* NOTE THAT #2 MUST BE POSITIVE, SINCE WE TOOK ABSOLUTE VALUE.
*
*                                  #2 CONTAINS THE ABSOLUTE VALUE
*                                  #3 CONTAINS ADD'L LOW-ORDER BITS
*                                  #4 CONTAINS BIT COUNT TO EXTRACT
*
         SPACE 1
LOOP     DS    0H                  LOOP UNTIL WE GET 1-BIT IN LEFTMOST
         SLDL  #2,1                SHIFT OUT LEFTMOST BIT
         LTR   #2,#2               IF DIDN'T GO NEGATIVE YET
         BNM   LOOP                THEN KEEP LOOPING
         LA    #1,32               GET SHIFT AMOUNT = 32 MINUS ARG2
         SR    #1,#4
         SRL   #2,0(#1)            SHIFT RIGHT BY THAT AMOUNT
         #MKAT FIXED               MAKE INTO A FIXNUM
         B     RETURN              AND RETURN WITH IT
         SPACE 1
ARG2NEG  DS    0H                  ARG 2 IS NEGATIVE
         SPACE 1
         LPR   #4,#4               GET ABSOLUTE VALUE OF ARG2
         CH    #4,=H'31'           IF GREATER THAN 31
         BH    RETABS1             THEN RETURN (ABS ARG1)
LOWORDER DS    0H
         LA    #1,32               GET SHIFT AMOUNT = 32 MINUS ARG2
         SR    #1,#4
         SLDL  #2,0(#1)            SHIFT LEFT BY THAT AMOUNT
         SRL   #2,0(#1)            SHIFT RIGHT BY THAT AMOUNT
RETABS1  DS    0H                  HERE IF WE KNOW ANSWER IS (ABS ARG1)
         #MKAT FIXED               MAKE INTO A FIXNUM
         B     RETURN              AND RETURN WITH IT
         SPACE 1
RETZERO  DS    0H                  HERE IF WE KNOW ANSWER MUST BE ZERO
         LA    #15,#SFT0           POINT TO FIXNUM 0
         B     RETURN              AND RETURN WITH IT
         SPACE 1
MAXNEG   DS    0H                  Arg 1 is -2147483648
         SPACE 1
         LA    #15,TWOTO31         Load bignum 2147483648
         B     ARG1BIG
         SPACE 1
NFIX1    DS    0H                  Arg 1 is not a fixnum
         SPACE 1
         CLI   ##TYPE(#15),##BIGNUM
         BNE   ERROR1              If not an integer, error
         SPACE 1
ARG1BIG  DS    0H                  Arg 1 is a bignum
         SPACE 1
         L     #4,4(,#11)          GET ARG2
         CLI   ##TYPE(#4),##FIXNUM ARG2 MUST BE A FIXNUM
         BNE   ERROR2
         SPACE 1
***********************************************************************
*                                                                     *
* Test arg2 - see if it is zero, negative, positive - also if > 31    *
*                                                                     *
***********************************************************************
         SPACE 1
         ICM   #4,15,##CDR(#4)     Get arg 2 value
         BZ    RETZERO             If zero, return zero
         BM    ARG2NEGB            If negative, process negative
         CH    #4,=H'31'           If arg2 value greater than 31
         BH    PRETBIG             then need to return bignum
*                                  else positive arg2 in fixnum range
         SPACE 1
***********************************************************************
*                                                                     *
* Get the 2 most significant words of (abs bignum-arg1) and shift     *
* left until we get a 32-bit number such that the leftmost bit is 1.  *
*                                                                     *
* Note that if there was any sign bit, it will get shifted out anyhow *
*                                                                     *
***********************************************************************
         SPACE 1
******** L     #15,0(,#11)         Get pointer to arg1
         XR    #1,#1
         ICM   #1,7,1(#15)         Get bignum length
         LA    #14,##VECDAT-4(#1,#15) Point to most significant word
         SH    #14,=H'4'           Bump back to 2nd most significant wd
         L     #3,0(,#14)          Load second most significant word
         N     #3,=X'7FFFFFFF'     Zero possible sign bit to make ABS
         L     #2,4(,#14)          Load most significant word
         SLL   #3,1                Bring halves together
         SRDL  #2,1                Shift 62-bit number into reg pair
         B     PROCESS             Go to to compute fixnum value
         SPACE 1
ARG2NEGB DS    0H                  Bignum arg 1, negative arg 2
         SPACE 1
         LPR   #4,#4               Get absolute value of arg2
         CH    #4,=H'31'           If greater than 31
         BH    NRETBIG             then need to return bignum
         SPACE 1
***********************************************************************
*                                                                     *
* Get the least significant word of bignum arg1 and proceed as if     *
* for fixnum arg1.                                                    *
*                                                                     *
***********************************************************************
         SPACE 1
         L     #2,##VECDAT(,#15)   Get LSW of bignum
         N     #2,=X'7FFFFFFF'     Zero out possible sign bit
         XR    #3,#3               Clear second half of reg pair
         B     ARG2NEG             Go process
         SPACE 1
PRETBIG  DS    0H                  HAIPART of bignum by N:N>31
         SPACE 1
         LA    #6,1                Set arg2 sign flag positive
         B     RETBIG              Go to process bignum HAIPART
         SPACE 1
NRETBIG  DS    0H                  HAIPART of bignum by N:N>31
         SPACE 1
         XR    #6,#6               Set arg2 sign flag negative
         BCTR  #6,0
         B     RETBIG              Go to process bignum HAIPART
         SPACE 1
RETBIG   DS    0H                  HAIPART of bignum by N:N>31
         SPACE 1
***********************************************************************
*                                                                     *
* Logic for computing HAIPART where arg1 is a bignum and arg2 is a    *
* positive integer greater than 31.                                   *
*                                                                     *
* arg2 is the number of bits in the resulting bignum.  Thus, we can   *
* reserve space for it, knowing that the number of words in it will   *
* be (arg2-1)/31+1.                                                   *
*                                                                     *
* Compute the number of SIGNIFICANT bits in arg1 (this is the same    *
* as (HAULONG arg1).  If arg2 is greater than this value, then        *
* return (ABS arg1), by definition per the Maclisp manual.            *
*                                                                     *
* Otherwise, processing diverges depending on whether arg2 is         *
* positive or negative.                                               *
*                                                                     *
* If arg2 is negative, we must take the low-order arg2 bits of        *
* bignum arg1 and return it as a bignum. So go to RETBIGN.            *
*                                                                     *
* Otherwise, get the most significant word of arg1 and left shift it  *
* until the high-order bit is 1.  This tells us the number of bit     *
* positions to shift the entire arg1 to get rid of all the leading    *
* zero bits (note that we actually shifted 1 more than the actual     *
* number).  So the number of positions to shift is the number we had  *
* to shift the MSW minus 1.  Shift the MSW back by 1 to the right     *
* to make it correct.                                                 *
*                                                                     *
* We then take only the number of words of arg1 necessary to build    *
* the result.  This is at most 1 more than the number of words in     *
* the result.  Left shift that number of bigits over by the amount    *
* determined above (except for the MSW, which is already correctly    *
* shifted), rippling the shifted-out bits of each word into its       *
* more significant neighbor.  This gives a new bignum, which is       *
* the original arg1 raised to some power of 2 (which is irrelevant,   *
* since HAIPART will give us the same result anyhow).                 *
*                                                                     *
* Divide arg2 (the number of bits in the result) by 31; the remainder *
* lets us figure out how many bit positions to right-shift the result *
* after we compute it by taking the first N words of the result of    *
* the previous operation, where N is the number of words of arg1      *
* necessary to build the result minus 1 (which equals the number of   *
* words in the result, remember?).  The number of bit positions to    *
* right-shift is equal to 31 minus that remainder.  Thus we end up    *
* with the proper number of leading zero bits in the MSW of the       *
* result.                                                             *
*                                                                     *
* Right-shift all the words in the result by that amount, letting     *
* the shifted-out bits of each word end up in its less significant    *
* neighbor.  Return the resulting bignum as the value of HAIPART.     *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
* Reserve space for the resulting bignum, arg2 being the # of bits.   *
*                                                                     *
* The length is                                                       *
*    (arg2-1)/31+1.                                                   *
*                                                                     *
*    #15 -     pointer to arg1                                        *
*    #4  -     value of arg2 (number of bits in result)               *
*    #5  -     pointer to result bignum                               *
*                                                                     *
***********************************************************************
         SPACE 1
         LR    #1,#4               Get arg2 value
         BCTR  #1,0                Subtract 1
         XR    #0,#0               Clear left half of dividend
         D     #0,=F'31'           Divide by 31
         LR    #2,#1               Get quotient
         LA    #2,1(,#2)           Add 1 to get # of words for bignum
         SLA   #2,2                Multiply by 4 to get length of text
         LR    #3,#2               Save this length
         L     #15,ZLCBIG          Get address of ZILBIG
         LA    #2,4(,#2)           Add 4 more for length of header
         #BASR #14,#15             Call ZILBIG to reserve bignum space
         LR    #5,#15              #5 = address of new bignum
         STCM  #3,7,1(#5)          Store length of bignum
         L     #15,0(,#11)         #15 =  pointer to arg1
         SPACE 1
***********************************************************************
*                                                                     *
* Compute the number of SIGNIFICANT bits in arg1 (this is the same    *
* as (HAULONG arg1).  If this value is greater than arg2, then        *
* return (ABS arg1), by definition per the Maclisp manual.            *
*                                                                     *
***********************************************************************
         SPACE 1
         XR    #14,#14             Clear insert register
         ICM   #14,7,1(#15)        Get length of arg1 bignum text
         SH    #14,=H'4'           Bump down by 1 word
         L     #3,##VECDAT(#14,#15) Get most significant word of arg1
         SRA   #14,2               Divide length by 4 to get # of bytes
         LR    #2,#14              then to # of 31-words less M.S.W.
         SLA   #2,5                Multiply by 31 (32X - X = 31X)
         SR    #2,#14              to get number of bits in these words
         LA    #2,31(,#2)          Set presumed bit count so far
         XR    #7,#7               Clear shift count to zero
*                                  #3 contains MSW of arg1
*                                  #7 will tell us how many to shift
HAULOOP  DS    0H                  Loop until we determine # of bits
         SLL   #3,1                Shift out leftmost bit
         LTR   #3,#3               Test sign to see if we hit a 1-bit
*        BZ    ...                 (can never be zero, from a bignum)
         BM    GOTIT               If 1-bit leftmost, we got it
         LA    #7,1(,#7)           Else increment shift count
         BCT   #2,HAULOOP          Else reduce bit count and continue
GOTIT    DS    0H                  Now #2 contains (HAULONG arg1)
         SPACE 1
***********************************************************************
*                                                                     *
* If (ABS arg2) is greater than (HAULONG arg1), return (ABS arg1).    *
*                                                                     *
***********************************************************************
         SPACE 1
         L     #4,4(,#11)          Reload arg2
         L     #4,##CDR(,#4)       Get value of arg2
         LPR   #4,#4               Take (abs arg2)
         CR    #4,#2               If arg2 > (haulong arg1)
         BH    RETABSB             then return (abs arg1)
         SPACE 1
***********************************************************************
*                                                                     *
* Process based on whether arg2 is positive or negative.              *
*                                                                     *
***********************************************************************
         SPACE 1
         LTR   #6,#6
******** BP    RETBIGP
         BM    RETBIGN
         SPACE 1
RETBIGP  DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* Positive:  get the most significant word of arg1 and left shift it  *
* until the high-order bit is 1.  This tells us the number of bit     *
* positions to shift the entire arg1 to get rid of all the leading    *
* zero bits (note that we actually shifted 1 more than the actual     *
* number).  So the number of positions to shift is the number we had  *
* to shift the MSW minus 1.  Shift the MSW back by 1 to the right     *
* to make it correct.                                                 *
*                                                                     *
***********************************************************************
         SPACE 1
         SRL   #3,1                Shift MSW into "normal" position
*                                  #7 already contains correct # pos.
         SPACE 1
***********************************************************************
*                                                                     *
* We then take only the number of words of arg1 necessary to build    *
* the result.  This is at most 1 more than the number of words in     *
* the result.  Left shift that number of bigits over by the amount    *
* determined above (except for the MSW, which is already correctly    *
* shifted), rippling the shifted-out bits of each word into its       *
* more significant neighbor.  This gives a new bignum, which is       *
* the original arg1 raised to some power of 2 (which is irrelevant,   *
* since HAIPART will give us the same result anyhow).                 *
*                                                                     *
***********************************************************************
         SPACE 1
*    #14 -     pointer to words in result
*    #15 -     pointer to words in arg1
*    #0  -     register pair for shifting
*    #1  -     register pair for shifting
*    #2  -     (haulong arg1)
*    #3  -     already-shifted MSW of arg1; holder of each shifted word
*    #4  -     value of arg2 (number of bits in result)
*    #5  -     pointer to result bignum
*    #6  -
*    #7  -     number of bit positions to left shift arg1 words
         SPACE 1
*                                  Set 4(#14) = MSW of result
         XR    #0,#0               Clear insert register
         ICM   #0,7,1(#5)          Get length of result bignum
         LA    #14,##VECDAT(,#5)
         AR    #14,#0              Point to end of result bignum
         SH    #14,=H'8'           Point to MSW of result bignum
*                                  Set 0(#15) = next-to-MSW of arg1
******** L     #15,0(,#11)
         XR    #0,#0               Clear insert register
         ICM   #0,7,1(#15)         Get length of arg1 bignum
         LA    #15,##VECDAT(,#15)
         AR    #15,#0              Point to end of arg1 bignum
         SH    #15,=H'8'           Point to word preceding MSW of arg1
         SPACE 1
***********************************************************************
*                                                                     *
* Loop decrementing #14 and #15 until #14 = #5, storing shifted       *
* words from 0(#15) into 4(#14).  Note that #3 already contains       *
* part of the first (most significant) word to be stored.             *
*                                                                     *
***********************************************************************
         SPACE 1
LSLOOP   DS    0H
         CR    #14,#5              Until we hit the end of the result
         BL    LSEND
         XR    #0,#0               Clear left half of reg pair
         L     #1,0(,#15)          Get next-MSW of arg1
         SLL   #1,1                Shift out sign bit
         SLDL  #0,0(#7)            Left shift (#7) bits into left reg
         OR    #3,#0               Combine previous bits with shifted
         ST    #3,4(,#14)          Store into word of result bignum
         LR    #3,#1               Set up for next word
         SRL   #3,1                Shift back in a zero sign bit
         SH    #15,=H'4'           Decrement arg1 pointer
         SH    #14,=H'4'           Decrement result pointer
         B     LSLOOP              Loop
LSEND    DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* Now we have a complete result bignum.  But we're not done yet.      *
* If the number of bits in the result is not a multiple of 31, we     *
* have to right shift all the words to get leading zeroes instead     *
* of trailing zeroes.                                                 *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
* Divide arg2 (the number of bits in the result) by 31; the remainder *
* lets us figure out how many bit positions to right-shift the result *
* after we compute it by taking the first N words of the result of    *
* the previous operation, where N is the number of words of arg1      *
* necessary to build the result minus 1 (which equals the number of   *
* words in the result, remember?).  The number of bit positions to    *
* right-shift is equal to 31 minus that remainder.  Thus we end up    *
* with the proper number of leading zero bits in the MSW of the       *
* result.                                                             *
*                                                                     *
***********************************************************************
*                                                                     *
*    #0  -     register pair for shifting                             *
*    #1  -     register pair for shifting                             *
*    #4  -     value of arg2 (number of bits in result)               *
*    #5  -     pointer to result bignum                               *
*                                                                     *
***********************************************************************
         SPACE 1
         XR    #14,#14             Clear left half of reg pair
         LR    #15,#4              Load value of arg2 (# of bits)
         D     #14,=F'31'          Divide by 31
*                                  #15 = quotient, #14 = remainder
         LTR   #14,#14             If no remainder
         BZ    READY               then we're done, return result
*                                  Compute amount to shift = 31-#14
         LA    #7,31
         SR    #7,#14              Amount to right-shift result
         SPACE 1
***********************************************************************
*                                                                     *
* Right-shift all the words in the result by that amount, letting     *
* the shifted-out bits of each word end up in its less significant    *
* neighbor.  Return the resulting bignum as the value of HAIPART.     *
*                                                                     *
***********************************************************************
         SPACE 1
*                                  Set 4(#14) = each word of result
         XR    #0,#0               Clear insert register
         ICM   #0,7,1(#5)          Get length of result bignum
         LA    #14,##VECDAT(,#5)
         AR    #14,#0              Point to end of result bignum
         SH    #14,=H'8'           Point to MSW of result bignum
         SPACE 1
***********************************************************************
*                                                                     *
* Loop decrementing #14 until #14 = #5, storing shifted words from    *
* result back into themselves.                                        *
*                                                                     *
* Note that there will be no negative sign bit; the result was built  *
* to be positive.                                                     *
*                                                                     *
***********************************************************************
         SPACE 1
         XR    #3,#3               Clear reg for building shifted wds
         SPACE 1
RSLOOP   DS    0H
         CR    #14,#5              Until we hit the end of the result
         BL    RSEND
         L     #0,4(,#14)          Load a word of the result bignum
         XR    #1,#1               Clear right half of register pair
         SRDL  #0,0(#7)            Shift right (#7) bits
         OR    #3,#0               Combine with last shifted bits
         ST    #3,4(,#14)          Store back into result bignum
         LR    #3,#1               Set up for next word
         SRL   #3,1                Shift back the sign bit
         SH    #14,=H'4'           Decrement pointer
         B     RSLOOP              Loop
RSEND    DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* Return the result bignum, updating VSS pointer in the process.      *
*                                                                     *
***********************************************************************
         SPACE 1
READY    DS    0H
         LR    #15,#5              Point to result bignum
         XR    #1,#1               Clear insert register
         ICM   #1,7,1(#15)         Get length of result bignum
         LA    #0,##VECDAT(#1,#15) Point to end of bignum
         ST    #0,ZLCVSNXT         Set next-available-VSS pointer
         B     RETURN              Return
         SPACE 1
RETBIGN  DS    0H                  HAIPART of bignum by N:N<(-31)
         SPACE 1
***********************************************************************
*                                                                     *
* Logic for (HAIPART arg1 arg2) where arg1 is a bignum and arg2 is    *
* a negative integer less than -31:                                   *
*                                                                     *
* The low-order (abs arg2) bits of arg1 are returned.  To do this,    *
* we figure out how many bignum words are required to hold the        *
* result.   (Henceforth, let absarg2 = (abs arg2).)  The number of    *
* result words (N) = (absarg2-1)/31+1.  Allocate a bignum of          *
* that size, and copy the least significant N words from arg1 to      *
* the result (this will be ##VECDAT off arg1 for a length of N*4,     *
* making an easy move).  Zero the sign bit in the result to force     *
* taking of (abs arg1).                                               *
* Now, if absarg2 is not a multiple of 31, we will need to mask out   *
* the extra leading bits.  We generate a bit mask based on the        *
* remainder of absarg2/31, so that only that many bits are left in    *
* the most significant word of the result bignum.                     *
*                                                                     *
* As a final step, remove leading zero bigits from the result.        *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
* The bignum allocation was done already.                             *
*                                                                     *
* Move correct # of words of bignum arg1 to result bignum             *
*                                                                     *
***********************************************************************
         SPACE 1
         L     #15,0(,#11)         Load arg1
         XR    #3,#3
         ICM   #3,7,1(#5)          Load length of result bignum
         LA    #14,##VECDAT(,#15)  Source address
         LR    #15,#3              Source length
         LA    #0,##VECDAT(,#5)    Destination address
         LR    #1,#3               Destination length
         MVCL  #0,#14              Move from arg1 to result
         NI    ##VECDAT(#5),X'7F'  Force sign bit positive
         SPACE 1
***********************************************************************
*                                                                     *
* If absarg2 is not a multiple of 31, we will need to mask out        *
* the extra leading bits.  We generate a bit mask based on the        *
* remainder of absarg2/31, so that only that many bits are left in    *
* the most significant word of the result bignum.                     *
*                                                                     *
***********************************************************************
         SPACE 1
         LR    #1,#4               Set up regs for divide
         XR    #0,#0
         D     #0,=F'31'           Quotient in #1, remainder in #0
         LTR   #0,#0               If remainder is zero
         BZ    NREADY              then result is already OK, return
         SPACE 1
***********************************************************************
*                                                                     *
* Nonzero remainder: generate a bit mask with which to AND the MSW    *
* of the result bignum.                                               *
*                                                                     *
***********************************************************************
         SPACE 1
         LA    #2,31               # of bits to zero out = ...
         SR    #2,#0                31 minus remainder
         L     #3,=X'7FFFFFFF'     Initialize mask to 31 1-bits
MASKLOOP DS    0H                  Loop to turn #3 into a bit mask
         SRL   #3,1                Shift in a zero-bit
         BCT   #2,MASKLOOP         Do it 31-(mod absarg2 31) times
********                           Register cleared (by BCT) for insert
         ICM   #2,7,1(#5)          Get result bignum length
         LA    #1,##VECDAT-4(#2,#5) Point to MSW of result bignum
         N     #3,0(,#1)           And it with our bit mask
         ST    #3,0(,#1)           Store back the anded MSW
         SPACE 1
NREADY   DS    0H                  Almost ready to return result
         SPACE 1
***********************************************************************
*                                                                     *
* Remove all leading zero bigits from the result.  It is possible for *
* this to culminate in the return of a fixnum.                        *
*                                                                     *
***********************************************************************
         SPACE 1
         XR    #3,#3
         ICM   #3,7,1(#5)          Get result bignum length
         LA    #1,##VECDAT-4(#3,#5) Point to MSW of result bignum
         XR    #0,#0               Make a zero
         LA    #7,4                Make a four
NRLOOP   DS    0H
         CR    #3,#7               If length of bignum text down to 4
         BNH   RNFIXNUM            then change to a fixnum
         C     #0,0(,#1)           Else if MSW so far is zeroes
         BNE   NREND               then...
         SR    #3,#7                decrement bignum text length by 4
         SR    #1,#7                decrement pointer too
         B     NRLOOP               and continue looping.
NREND    DS    0H
         STCM  #3,7,1(#5)          Store corrected bignum length
         LR    #15,#5              Get pointer to result bignum
         LA    #1,##VECDAT(#3,#5)  Point to end of bignum
         ST    #1,ZLCVSNXT         Update VSS pointer
         B     RETURN              Return with result
         SPACE 1
RNFIXNUM DS    0H                  Result turns into a fixnum!
         SPACE 1
         L     #2,##VECDAT(,#5)    Get the only bigit
         #MKAT FIXED               Make a fixnum out of it
         B     RETURN              Return with it
         SPACE 1
RETABSB  DS    0H                  Return (ABS arg1), arg1 bignum
         SPACE 1
         TM    ##VECDAT(#15),X'80' If arg1 is already positive
         BZ    RETURN              then just return it
         XR    #2,#2               CLEAR INSERT REGISTER
         ICM   #2,7,1(#15)         GET BIGNUM LENGTH
         LA    #2,4(,#2)           PLUS LENGTH OF HEADER
         LR    #3,#2               SAVE THIS LENGTH
         L     #15,ZLCBIG          GET ADDRESS OF BIGNUM MAKER
         #BASR #14,#15             CALL ZILBIG
         LR    #4,#15              SAVE ADDRESS OF NEW BIGNUM
         LR    #0,#4               DESTINATION ADDRESS
         L     #14,0(,#11)         SOURCE ADDRESS = arg1
         LR    #1,#3               DESTINATION LENGTH
         LR    #15,#3              SOURCE LENGTH
         MVCL  #0,#14              MOVE OLD BIGNUM TO NEW BIGNUM
         ST    #0,ZLCVSNXT         UPDATE V/S-SPACE POINTER
         LR    #15,#4              GET ADDRESS OF BIGNUM AGAIN
         NI    ##VECDAT(#15),X'7F' TURN OFF SIGN BIT TO MAKE IT PLUS
******** B     RETURN              Return with (abs bignum)
         SPACE 1
RETURN   DS    0H                  VALUE IS IN #15 HERE
         SPACE 1
         #ZRET ,
         SPACE 1
ERROR1   #ERR  'Argument 1 to HAIPART not an integer - ',0(#11)
ERROR2   #ERR  'Argument 2 to HAIPART not a fixnum - ',4(#11)
*RROR3   #ERR  'Cannot compute HAIPART of ',0(#11),' and ',4(#11)
         SPACE 1
TWOTO31  DC    YL1(##BIGNUM),AL3(8),F'0,1'  Bignum 2147483648
         SPACE 1
         LTORG
         SPACE 1
         END
