         TITLE 'ZILVSS - ZIL 1.3 VECTOR/STRING SPACE SERVICES'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* THIS SUBROUTINE HANDLES REQUESTS FROM ASSEMBLER LANGUAGE PROGRAMS   *
* FOR VECTOR SPACE OR STRING SPACE.  4 ENTRY CODES ARE DEFINED (THE   *
* ENTRY CODE IS SET IN REGISTER 1):                                   *
*                                                                     *
* REGISTER 1 = 0 ... ALLOCATE AN ENTIRE OBJECT IN V/S SPACE AND       *
*                    MINIMALLY FORMAT IT.                             *
* REGISTER 1 = 4 ... BEGIN BUILDING A STRING.                         *
* REGISTER 1 = 8 ... END A STRING AND MAKE IT A TRUE OBJECT.          *
* REGISTER 1 = 12 ... ADD DATA TO A STRING BEING BUILT.               *
* REGISTER 1 = 16 ... CONCATENATE ANOTHER STRING'S DATA TO THIS ONE.  *
*                                                                     *
* ENTRY CODES 4, 8 AND 12/16 MUST BE USED IN A LOGICAL SEQUENCE BY    *
* THE SAME CALLER, AND NO OTHER VECTOR/STRING BUILDING OR CREATION    *
* MUST BE DONE WHILE THIS IS GOING ON.  FOR EXAMPLE, TO BUILD A       *
* STRING, A CALLER MAY CALL THIS SUBROUTINE WITH ENTRY CODE 4 TO      *
* START, THEN DO SEVERAL CALLS WITH ENTRY CODE 12 OR 16 TO ADD DATA   *
* TO THE STRING, THEN CALL WITH ENTRY CODE 8 TO COMPLETE THE STRING.  *
* THE STRING IS NOT CONSIDERED TO EXIST UNTIL ENTRY CODE 8 IS CALLED; *
* IN THAT WAY THE STRING MAY BE "THROWN AWAY" AT ANY TIME SIMPLY BY   *
* FAILING TO CALL ENTRY CODE 8.                                       *
*                                                                     *
* NOTE THAT ENTRY CODE 0 MAY BE USED TO CREATE ANY TYPE OF OBJECT     *
* THAT IS VALID IN VECTOR/STRING SPACE, BUT THE OTHER ENTRY CODES     *
* ARE FOR STRINGS ONLY.                                               *
*                                                                     *
* DETAILS ON WHAT IS EXPECTED ON ENTRY AND WHAT IS RETURNED ARE       *
* GIVEN IN THE COMMENTS ON EACH INDIVIDUAL ENTRY CODE.  BUT YOU       *
* SHOULD KNOW THAT REGISTER 0 MUST CONTAIN THE CURRENT STACK          *
* POINTER FOR ALL ENTRY CODES (POSSIBLY EXCEPT 8) SO THAT THE         *
* GARBAGE COLLECTOR, IF NECESSARY, CAN BE INVOKED.                    *
*                                                                     *
* REGISTERS 14 AND 15 HAVE THEIR STEREOTYPICAL VALUES ON ENTRY.       *
*                                                                     *
***********************************************************************
*                                                                     *
* ZIL 1.2 - 12/24/85 - A NEW ENTRY CODE (16) ALLOWS THE CONCATENATION *
* OF STRINGS.  THE DIFFERENCE BETWEEN THIS AND THE ENTRY CODE THAT    *
* STICKS NEW DATA ON A STRING IS THAT IF ZILVSS HAS TO DO A GC, THE   *
* STRINGS WILL GET RELOCATED, SO ZILVSS HAS TO KNOW HOW TO FIND THEM. *
*                                                                     *
***********************************************************************
         SPACE 1
ZILVSS   CSECT
         SPACE 1
         USING ZILVSS,#15          NOTE CHEAPO BASE REGISTER!!!
         USING ZLCOMMON,#13
         SPACE 1
         B     VSSGO(#1)           DISPATCH ON ENTRY CODE
VSSGO    B     VSSALLOC            ENTRY CODE 0 - ALLOCATE SPACE
         B     VSSSTART            ENTRY CODE 4 - START A STRING
         B     VSSEND              ENTRY CODE 8 - END A STRING
         B     VSSMORE             ENTRY CODE 12 - ADD DATA TO STRING
         B     VSSCONC             ENTRY CODE 16 - CONCATENATE STRING
         EJECT
VSSALLOC DS    0H                  ENTRY CODE 0 - ALLOCATE SPACE
         SPACE 1
***********************************************************************
*                                                                     *
* THIS ENTRY CODE ALLOCATES SPACE FOR A NEW OBJECT IN VECTOR/STRING   *
* SPACE AND MINIMALLY FORMATS IT: I.E. SETS THE "ATOM" AND "V/S"      *
* BITS IN THE TYPE CODE (IF IT'S A STRING, NO OTHER TYPE BITS NEED    *
* BE SET) AND STICKS THE LENGTH IN THE APPROPRIATE FIELD.  THE DATA   *
* IS NOT INITIALIZED IN ANY WAY; IT IS THE CALLER'S RESPONSIBILITY    *
* TO FILL THIS IN.                                                    *
*                                                                     *
* ENTRY: R0 = CURRENT STACK POINTER (IN CASE GC REQUIRED)             *
*        R1 = 0 (ENTRY CODE)                                          *
*        R2 = SIZE OF OBJECT TO BE GOTTEN (NOT INCLUDING 4-BYTE HDR)  *
*                                                                     *
* EXIT:  R1 -> THE OBJECT CREATED                                     *
*        R4 -> THE DATA PORTION OF THE OBJECT                         *
*        R15 SAME AS R1, IN CASE IT'S TO BE RETURNED AS A VALUE       *
*                                                                     *
*        IF R4 IS ZERO ON RETURN, THERE WAS NO ROOM AVAILABLE.        *
*        THE CALLER MUST SIGNAL AN ERROR IN THIS CASE.                *
*                                                                     *
* NOTE:  REGISTERS 0 AND 2 ARE CLOBBERED.  DO NOT DEPEND ON THEM!     *
*                                                                     *
***********************************************************************
         SPACE 1
         L     #4,ZLCVSADR         GET ADDRESS OF V/S SPACE
         L     #1,ZLCVSNXT         GET ADDRESS OF AVAILABLE SLOT
         A     #4,ZLCVSLEN         ADD LENGTH TO POINT TO END OF SPACE
         SR    #4,#1               GET LENGTH OF SPACE NOW AVAILABLE
         SH    #4,=H'8'            SUBTRACT HEADER LENGTH FOR COMPARE
         BNP   VSSAGC              AND 4 EXTRA "SLUSH FUND" BYTES
         CLR   #2,#4               IF SPACE REQUESTED IS LARGER
         BH    VSSAGC              THEN GO TO GC AND RETRY. ELSE
*
* IF #2 IS NEGATIVE, OR IF IT IS 16M OR GREATER, IT WILL ALWAYS TAKE
* THE ABOVE BRANCH.  THIS TAKES CARE OF INVALID LENGTH REQUESTS.
* IT ALSO INSURES THAT THE HIGH-ORDER BYTE OF #2 IS X'00'.
*
         ST    #2,0(,#1)           STORE LENGTH INTO OBJECT HEADER
         MVI   0(#1),##ATOM+##VSS  SET BITS: ATOMIC AND IN V/S SPACE
         LTR   #2,#2               IF REQUESTED LENGTH IS ZERO
         BNZ   *+8                  THEN
         LA    #2,1                  INSURE NONZERO LENGTH
         LA    #2,##VECDAT+3(#1,#2) OBJECT+HEADER+LENGTH -> OBJECT END,
         N     #2,=X'FFFFFFFC'        ROUNDED UP TO NEXT FULLWORD
         ST    #2,ZLCVSNXT         UPDATE AVAILABLE-SLOT POINTER
         LA    #4,##VECDAT(,#1)    SET POINTER TO DATA PORTION
         LR    #15,#1              SET RETURN VALUE TO POINT TO OBJECT
         BR    #14                 RETURN TO CALLER
         SPACE 1
VSSAGC   DS    0H                  HERE IF NO ROOM FOR OBJECT
         LTR   #2,#2               IF REQUESTED LENGTH WAS NEGATIVE
         BM    LENERROR            THEN ERROR
         LA    #1,VSSALLOC         ELSE SET ADDRESS OF RETRY LOCATION
         B     VSSGC               GO TO DO GARBAGE COLLECTION
         EJECT
VSSSTART DS    0H                  ENTRY CODE 4 - START A STRING
         SPACE 1
***********************************************************************
*                                                                     *
* THIS ENTRY CODE STARTS BUILDING A STRING IN THE AVAILABLE SPACE.    *
* NOTHING IS SPECIFIED EXCEPT THE DESIRE TO BEGIN MAKING A STRING.    *
*                                                                     *
* ENTRY: R0 = CURRENT STACK POINTER (IN CASE GC REQUIRED)             *
*        R1 = 4 (ENTRY CODE)                                          *
*        R2 = NOT APPLICABLE                                          *
*                                                                     *
* EXIT:  R1 -> THE STRING BEING BUILT                                 *
*        R4 -> THE DATA PORTION OF THE STRING BEING BUILT             *
*        R5 = ZERO, THE INITIAL LENGTH OF THE STRING                  *
*                                                                     *
*        IF R4 IS ZERO ON RETURN, THERE WAS NO ROOM AVAILABLE.        *
*        THE CALLER MUST SIGNAL AN ERROR IN THIS CASE.                *
*                                                                     *
***********************************************************************
         SPACE 1
         L     #4,ZLCVSADR         GET ADDRESS OF V/S SPACE
         L     #1,ZLCVSNXT         GET POINTER TO NEXT AVAILABLE SLOT
         A     #4,ZLCVSLEN         ADD LENGTH TO POINT TO END OF SPACE
         SR    #4,#1               GET LENGTH OF SPACE NOW AVAILABLE
         CH    #4,=H'8'            WE NEED AT LEAST 8 BYTES TO START
         BL    VSSSGC              IF NOT, GO TO GC AND RETRY. ELSE
*                                  #1 WILL BE POINTER TO NEW STRING
         LA    #5,##STRING         SET BITS INDICATING STRING TYPE
         SLDL  #4,56               SHIFT TO LEFT BYTE OF #4, CLEAR #5
         STM   #4,#5,0(#1)         INITIALIZE HEADER AND DATA AREA
         LA    #4,##VECDAT(,#1)    POINT TO DATA AREA OF STRING
******** XR    #5,#5               #5 (LENGTH) ALREADY ZERO FROM ABOVE
         BR    #14                 RETURN TO CALLER
         SPACE 1
VSSSGC   DS    0H                  NO ROOM
         LA    #1,VSSSTART         SET ADDRESS OF RETRY LOCATION
         B     VSSGC               GO TO DO GARBAGE COLLECTION
         EJECT
VSSEND   DS    0H                  ENTRY CODE 8 - END A STRING
         SPACE 1
***********************************************************************
*                                                                     *
* THIS ENTRY CODE FINISHES BUILDING A STRING STARTED BY THE OTHER     *
* ENTRY CODES (4 AND 12).  THIS ACTUALLY MAKES THE STRING "EXIST"     *
* BY UPDATING THE AVAILABLE-SLOT POINTER.                             *
*                                                                     *
* ENTRY: R0 = NOT APPLICABLE (NO GC REQUIRED FOR THIS)                *
*        R1 = 8 (ENTRY CODE)                                          *
*        R2 = NOT APPLICABLE                                          *
*        R4 -> END OF STRING (POSITION FOLLOWING LAST USED BYTE)      *
*        R5 = FINAL LENGTH OF STRING                                  *
*                                                                     *
* EXIT:  R1 -> THE STRING BEING BUILT                                 *
*        R15 SAME, IN CASE IT'S TO BE RETURNED AS A VALUE             *
*                                                                     *
***********************************************************************
         SPACE 1
         LTR   #4,#4               IF #4=ZERO (STRING BUILDING FAILED)
         BZR   #14                 THEN RETURN DOING NOTHING. ELSE
         L     #1,ZLCVSNXT         GET ADDRESS OF STRING BEING BUILT
*                                  (WHICH HASN'T BEEN UPDATED TILL NOW)
         STCM  #5,7,1(#1)          STORE LENGTH OF THE STRING
         LTR   #5,#5               IF REQUESTED LENGTH IS ZERO
         BNZ   *+8                  THEN
         LA    #5,1                  INSURE NONZERO LENGTH
         LA    #0,4+3(#5,#1)       POINT TO END OF STRING...
         N     #0,=X'FFFFFFFC'      ROUNDED UP TO NEXT FULLWORD
         ST    #0,ZLCVSNXT         UPDATE AVAILABLE SLOT POINTER
*                                  (THIS MAKES THE STRING ALIVE)
         LR    #15,#1              RETURN STRING ADDRESS IN CASE NEEDED
         BR    #14                 RETURN TO CALLER
         EJECT
VSSMORE  DS    0H                  ENTRY CODE 12 - ADD DATA TO STRING
         SPACE 1
***********************************************************************
*                                                                     *
* THIS ENTRY CODE ADDS DATA TO A STRING CURRENTLY BEING BUILT VIA     *
* ENTRY CODE 4.                                                       *
*                                                                     *
* ENTRY: R0 = CURRENT STACK POINTER (IN CASE GC REQUIRED)             *
*        R1 = 12 (ENTRY CODE)                                         *
*        R2 = LENGTH OF DATA TO BE ADDED TO STRING                    *
*        R4 -> THE CURRENT END OF STRING, WHERE DATA IS TO BE ADDED   *
*        R5 = THE CURRENT LENGTH OF THE STRING                        *
*        R6 -> THE DATA TO BE ADDED TO STRING                         *
*                                                                     *
* EXIT:                                                               *
*        R1 -> THE BEGINNING OF THE ENTIRE STRING TEXT                *
*        R4 -> THE NEW END OF THE STRING, AFTER DATA ADDED            *
*        R5 = THE NEW LENGTH OF THE STRING, AFTER DATA ADDED          *
*                                                                     *
*        IF R4 IS ZERO ON RETURN, THERE WAS NO ROOM AVAILABLE.        *
*        THE CALLER MUST SIGNAL AN ERROR IN THIS CASE, ALTHOUGH       *
*        THE ERROR MAY BE DEFERRED.                                   *
*                                                                     *
***********************************************************************
         SPACE 1
         LTR   #4,#4               IF #4=ZERO (STRING BUILDING FAILED)
         BZR   #14                 THEN RETURN DOING NOTHING. ELSE
         L     #1,ZLCVSADR         GET ADDRESS OF V/S SPACE
         A     #1,ZLCVSLEN         ADD LENGTH TO POINT TO END OF SPACE
         SR    #1,#2               SUBTRACT LENGTH OF STUFF TO ADD
         CR    #1,#4               IF NEW STUFF WON'T FIT IN SPACE
         BL    VSSMGC              THEN GO TO GC AND RETRY
         AR    #5,#2               INCREMENT STRING LENGTH BY NEW AMT
         C     #5,=X'00FFFFFF'     IF THIS EXCEEDS MAX STRING LENGTH
         BH    VSSFAIL             THEN SIGNAL ERROR
         STM   #2,#3,ZLCDBL        TEMPORARILY SAVE REGS
         LR    #0,#4               GET PTR TO WHERE TO PUT NEW DATA
         LR    #1,#2               GET LENGTH OF DATA TO ADD
         LR    #2,#6               GET PTR TO NEW DATA
         LR    #3,#1               GET LENGTH OF NEW DATA
         MVCL  #0,#2               MOVE NEW DATA TO STRING AREA
         LR    #4,#0               POINT TO NEW END-OF-STRING LOC
         L     #1,ZLCVSNXT         GET ADDRESS OF STRING BEING BUILT
         LA    #1,##VECDAT(,#1)    POINT TO BEGINNING OF STRING TEXT
         LM    #2,#3,ZLCDBL        RESTORE REGS
         BR    #14                 RETURN TO CALLER
         SPACE 1
VSSMGC   DS    0H                  NO ROOM
         L     #1,ZLCVSNXT         SAVE ADDRESS OF AVAILABLE SLOT
         ST    #1,OLDSTR           'CAUSE GC WILL MOVE IT
********                           RETRY LOCATION FOLLOWS...
         #BAS  #1,VSSGC            GO TO DO GARBAGE COLLECTION
*
* AFTER GC, MOVE STRING FROM OLD V/S SPACE TO NEW V/S SPACE
*
         STM   #0,#3,VSSSAVE2      SAVE VOLATILE REGS
         L     #0,ZLCVSNXT         POINT TO AVAILABLE SLOT IN NEW VSS
         L     #2,OLDSTR           POINT TO OLD-SPACE STRING DATA
         LA    #3,4(,#5)           STRING LENGTH + HEADER LENGTH
         LR    #1,#3               IS LENGTH OF STUFF TO MOVE
         MVCL  #0,#2               MOVE STRING FROM OLD SPACE TO NEW
         LR    #4,#0               SET NEW END-OF-STRING POINTER
         LM    #0,#3,VSSSAVE2      RESTORE REGS
         B     VSSMORE             NOW RETRY
         EJECT
VSSCONC  DS    0H                  ENTRY CODE 16 - CONCATENATE STRING
         SPACE 1
***********************************************************************
*                                                                     *
* THIS ENTRY CODE CONCATENATES THE DATA FROM ANOTHER STRING WITH THE  *
* STRING CURRENTLY BEING BUILT VIA ENTRY CODE 4.                      *
*                                                                     *
* ENTRY: R0 = CURRENT STACK POINTER (IN CASE GC REQUIRED)             *
*        R1 = 16 (ENTRY CODE)                                         *
*        R2   NOT USED                                                *
*        R4 -> THE CURRENT END OF STRING, WHERE DATA IS TO BE ADDED   *
*        R5 = THE CURRENT LENGTH OF THE STRING                        *
*        R6 -> THE OTHER STRING WHOSE DATA IS TO BE ADDED TO THIS ONE *
*                                                                     *
* EXIT:                                                               *
*        R1 -> THE BEGINNING OF THE ENTIRE STRING TEXT                *
*        R4 -> THE NEW END OF THE STRING, AFTER DATA ADDED            *
*        R5 = THE NEW LENGTH OF THE STRING, AFTER DATA ADDED          *
*                                                                     *
*        IF R4 IS ZERO ON RETURN, THERE WAS NO ROOM AVAILABLE.        *
*        THE CALLER MUST SIGNAL AN ERROR IN THIS CASE, ALTHOUGH       *
*        THE ERROR MAY BE DEFERRED.                                   *
*                                                                     *
***********************************************************************
         SPACE 1
         LTR   #4,#4               IF #4=ZERO (STRING BUILDING FAILED)
         BZR   #14                 THEN RETURN DOING NOTHING. ELSE
         CLI   0(#6),##STRING      IF "OTHER" OBJECT IS NOT A STRING
         BNE   CERROR              THEN ERROR
         L     #1,ZLCVSADR         GET ADDRESS OF V/S SPACE
         A     #1,ZLCVSLEN         ADD LENGTH TO POINT TO END OF SPACE
         XR    #2,#2
         ICM   #2,7,1(#6)          GET LENGTH OF TEXT OF OTHER STRING
         SR    #1,#2               SUBTRACT LENGTH OF STUFF TO ADD
         CR    #1,#4               IF NEW STUFF WON'T FIT IN SPACE
         BL    VSSCGC              THEN GO TO GC AND RETRY
         AR    #5,#2               INCREMENT STRING LENGTH BY NEW AMT
         C     #5,=X'00FFFFFF'     IF THIS EXCEEDS MAX STRING LENGTH
         BH    VSSFAIL             THEN SIGNAL ERROR
         STM   #2,#3,ZLCDBL        TEMPORARILY SAVE REGS
         LR    #0,#4               GET PTR TO WHERE TO PUT NEW DATA
         LR    #1,#2               GET LENGTH OF DATA TO ADD
         LA    #2,##VECDAT(,#6)    GET PTR TO NEW DATA
         LR    #3,#1               GET LENGTH OF NEW DATA
         MVCL  #0,#2               MOVE NEW DATA TO STRING AREA
         LR    #4,#0               POINT TO NEW END-OF-STRING LOC
         L     #1,ZLCVSNXT         GET ADDRESS OF STRING BEING BUILT
         LA    #1,4(,#1)           POINT TO BEGINNING OF STRING TEXT
         LM    #2,#3,ZLCDBL        RESTORE REGS
         BR    #14                 RETURN TO CALLER
         SPACE 1
VSSCGC   DS    0H                  NO ROOM
*
* WE MUST PUSH THE "OTHER" STRING ON THE STACK SO THAT IT CAN BE GC'D
* AND, IF IT HAS BEEN RELOCATED, WE CAN FIND IT AGAIN.
*
         L     #1,ZLCVSNXT         SAVE ADDRESS OF AVAILABLE SLOT
         ST    #1,OLDSTR           'CAUSE GC WILL MOVE IT
         LTR   #1,#0               POINT TO CURRENT STACK TOP
         BZ    VSSFAIL             IF ZEROED BY PREV GC ATTEMPT, FAIL
         LA    #0,4(,#1)           BUMP STACK POINTER UP BY 4
         #ZPDS (0)                 CHECK FOR STACK OVERFLOW
         ST    #6,0(,#1)           PUSH OTHER-STRING PTR FOR GC'ING
         ST    #1,OLDSTACK         SAVE ITS LOCATION
********                           RETRY LOCATION FOLLOWS...
*
* SINCE WE CHANGED REGISTER 0 TO ACCOMMODATE THE EXTRA STACK LOCATION,
* BUT REGISTER 12 POINTS TO OUR CALLER'S CODE, THIS WILL THROW THE GC
* OFF UNLESS WE SET ON THAT SPECIAL BIT.  BUT WE DON'T WANT TO UPSET
* ANYBODY IN CASE THE BIT IS ALREADY ON, SO...
*
         TM    ZLCGCFLG,ZLCGCBLD   IF TRUST-#0 FLAG IS OFF
         BO    VSSCGC1             THEN...
         OI    ZLCGCFLG,ZLCGCBLD    TURN IT ON
         #BAS  #1,VSSGC             GO TO DO GARBAGE COLLECTION
         NI    ZLCGCFLG,255-ZLCGCBLD TURN IT OFF AGAIN
         B     VSSCGC2
VSSCGC1  DS    0H                  ELSE...
         #BAS  #1,VSSGC            GO TO DO GARBAGE COLLECTION
VSSCGC2  DS    0H
*
* AFTER GC, MOVE STRING FROM OLD V/S SPACE TO NEW V/S SPACE
*
         STM   #0,#3,VSSSAVE2      SAVE VOLATILE REGS
         L     #0,ZLCVSNXT         POINT TO AVAILABLE SLOT IN NEW VSS
         L     #2,OLDSTR           POINT TO OLD-SPACE STRING DATA
         LA    #3,4(,#5)           STRING LENGTH + HEADER LENGTH
         LR    #1,#3               IS LENGTH OF STUFF TO MOVE
         MVCL  #0,#2               MOVE STRING FROM OLD SPACE TO NEW
         LR    #4,#0               SET NEW END-OF-STRING POINTER
         LM    #0,#3,VSSSAVE2      RESTORE REGS
         L     #6,OLDSTACK         RELOAD ORIGINAL TOP-OF-STACK PTR
         L     #6,0(,#6)           RELOAD STRING PTR (MAY BE RELCATED)
         B     VSSCONC             NOW RETRY
         EJECT
VSSGC    DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* THIS ROUTINE IS BRANCHED TO WHEN THERE ISN'T ENOUGH ROOM TO         *
* PERFORM THE REQUESTED OPERATION AND A GARBAGE COLLECTION IS TO      *
* BE ATTEMPTED SO THAT ENOUGH ROOM WILL BE AVAILABLE.                 *
*                                                                     *
* ON ENTRY #1 -> THE PLACE TO BRANCH TO TO RETRY THE OPERATION.       *
*                                                                     *
* NOTE THAT WHEN THIS ROUTINE IS FIRST ENTERED, #0 POINTS TO THE      *
* CURRENT STACK LOCATION (REQUIRED BY GC).  WHEN THIS ROUTINE IS      *
* EXECUTED ONCE, #0 IS SET TO ZERO SO THAT THE SECOND TIME THRU,      *
* IT'LL KNOW THAT A GC WAS ATTEMPTED ALREADY AND THERE JUST WON'T     *
* BE ENOUGH ROOM, SO A FAILURE IS DETECTED.                           *
*                                                                     *
* NO ERROR IS SIGNALLED IN THIS ROUTINE.  IT IS THE CALLER'S          *
* RESPONSIBILITY TO SIGNAL ERRORS WHEN THERE IS NO ROOM TO BUILD      *
* THE STRING.  IN THIS WAY, FOR EXAMPLE, A ROUTINE CAN CONTINUE TO    *
* RETRIEVE CHARACTERS TO BUILD A STRING AND NOT CONFUSE AN INPUT      *
* STREAM UNTIL THE EXPECTED END IS REACHED - THEN SIGNAL THE ERROR.   *
*                                                                     *
***********************************************************************
         SPACE 1
         LTR   #0,#0               IF WE TRIED A GC ALREADY
         BZ    VSSFAIL             THEN FAILURE - NO ROOM AT ALL
         #BASR #4,0
         DROP  #15
         USING *,4
         L     #9,ZLCGCEND         FORCE END OF FREE LIST
         STM   #14,#2,VSSSAVE2     SAVE VOLATILE REGS
         LR    #1,#10              SET DUMMY ARG 1 FOR CONS = NIL
         LR    #2,#10              SET DUMMY ARG 2 FOR CONS = NIL
*                                  #0 ALREADY POINTS TO STACK LOC
         L     #15,ZLCCONS         GET ADDRESS OF ZILCONS
         #BASR #14,#15             CALL CONS TO DO GARBAGE COLLECTION
         LM    #14,#2,VSSSAVE2     RESTORE VOLATILE REGS
         DROP  #4
         XR    #0,#0               INDICATE WE TRIED GC ALREADY
         BR    #1                  GO TO RETRY ROUTINE LOCATION
         SPACE 1
VSSFAIL  DS    0H
         XR    #4,#4               SHOW FAILURE BY CLEARING DATA PTR
         XR    #15,#15             AND CLEAR RETURN POINTER TOO
         BR    #14                 RETURN TO CALLER IN FAILURE
         EJECT
OLDSTR   DS    A                   PLACEHOLDER FOR STRING SLOT
OLDSTACK DS    A                   SAVED TOP-OF-STACK ADDRESS
VSSSAVE2 DS    5A                  SAVE AREA WHILE CALLING GC
         SPACE 1
LENERROR DS    0H
         LR    #3,#15
         USING ZILVSS,#3
         XR    #14,#14
         B     BLOWUP
         SPACE 1
CERROR   DS    0H
         LR    #3,#15
         USING ZILVSS,#3
         LA    #14,4
         B     BLOWUP
         SPACE 1
BLOWUP   DS    0H
         SPACE 1
*
* Extract function name for insertion into message
*
         SPACE 1
         XR    #1,#1               Clear insert register
         STCM  #1,7,FUNLEN         Initialize fake string length to 0
         IC    #1,4(,#12)          Get length of module identifier
         SH    #1,=H'16'           Subtract length of date/time info
         BNP   SKIPNAME            If no name, skip move
         CH    #1,=Y(L'FUNTEXT)    If longer than our maximum
         BNH   *+8                 then
         LA    #1,L'FUNTEXT         use our maximum length
         STCM  #1,7,FUNLEN         Store length into fake string
         BCTR  #1,0                Reduce for execute
         EX    #1,MVCNAME          Move function name to fake string
SKIPNAME DS    0H
         SPACE 1
         B     BOOM(#14)
BOOM     B     ERROR1
         B     ERROR2
         SPACE 1
ERROR1   DS    0H
         #ERR  PREFIX=NO,'ZIL2050 ',FUNSTR,': Invalid ZILVSS request foX
               r ',#2,' bytes of vector/string space.'
         SPACE 1
ERROR2   DS    0H
         #ERR  PREFIX=NO,'ZIL2051 ',FUNSTR,': Object to be concatenatedX
                by ZILVSS is not a string.'
         SPACE 1
MVCNAME  MVC   FUNTEXT(*-*),5(#12) Executed: Move function name to str
         SPACE 1
         DS    0H,XL1              Align fake string to non-halfword
FUNSTR   DC    YL1(##STRING)
FUNLEN   DS    AL3
FUNTEXT  DS    CL64
         LTORG
         EJECT
         #ZEQU
         EJECT
         #ZCOM
         EJECT
         END
