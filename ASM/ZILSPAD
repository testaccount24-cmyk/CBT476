         TITLE 'ZILSPAD - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* (ZILSPAD string1 length2 padchar3 truncatep4 wherepad5)             *
*                                                                     *
*  string1    - a string                                              *
*  length2    - the length to pad to                                  *
*  padchar3   - the padding character                                 *
*  truncatep4 - whether to truncate of string1 longer than length2    *
*  wherepad5  -  1 = pad on right                                     *
*               -1 = pad on left                                      *
*                0 = pad on both sides (center)                       *
*                                                                     *
* This function is called by the following user-visible functions:    *
*                                                                     *
* (defun string-right-pad                                             *
*        (string length &optional (padchar " ") (truncatep nil))      *
*  (zilspad string length padchar truncatep 1))                       *
*                                                                     *
* (defun string-left-pad                                              *
*        (string length &optional (padchar " ") (truncatep nil))      *
*  (zilspad string length padchar truncatep -1))                      *
*                                                                     *
* (defun string-center                                                *
*        (string length &optional (padchar " ") (truncatep nil))      *
*  (zilspad string length padchar truncatep 0))                       *
*                                                                     *
* Common Lisp:                                                        *
*                                                                     *
* (defun make-string (size &key (initial-element " "))                *
*  (zilspad "" size initial-element nil 1))                           *
*                                                                     *
***********************************************************************
ZILSPAD  #ZBEG MINARGS=5,MAXARGS=5,NAME='ZILSPAD'
         #ZPDS 5*4+12+0 = 32       DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
*
* Check arg 1 - must be string (or symbol).
*
         LM    #5,#7,0(#11)        Get args 1, 2, and 3
         CLI   ##TYPE(#5),##STRING IF ARGUMENT IS A STRING
         BE    ARG1OK              THEN OK
         CLI   ##TYPE(#5),##SYMBOL IF ARGUMENT IS A SYMBOL
         BNE   ERROR1              THEN
         L     #5,##PNAME(,#5)      TAKE THE PRINT NAME, ELSE ERROR
ARG1OK   DS    0H
         LR    #15,#5              Get into possible return register
         ST    #5,0(,#11)          Store string back on stack
*
* Check arg 2 - must be fixnum.
*
         CLI   ##TYPE(#6),##FIXNUM Arg 2 (length) must be a fixnum
         BNE   ERROR2              else error
         L     #6,##CDR(,#6)       Get numeric length value
*
* Check arg 3 - must be one-character string or character.
*
         CLI   ##TYPE(#7),##FIXNUM If arg 3 (padchar) is a fixnum
         BE    ARG3FIX             then extract character from fixnum
         CLC   ##TYPE(4,#7),STRLEN1 Else arg 3 must be a string of
         BNE   ERROR3                length 1, else error
         MVC   PADCHAR(1),##VECDAT(#7) Extract pad char from string
         B     ARG3OK
ARG3FIX  DS    0H
         L     #7,##CDR(,#7)       Get numeric value
         CL    #7,#SFW255          If not within character range
         BH    ERROR3              then error
         STC   #7,PADCHAR          Store pad character
ARG3OK   DS    0H
         XR    #5,#5
         ICM   #5,7,1(#15)         Get length of arg 1 string
*
* If new-length (arg 2) is equal to old-length (length of arg 1),
* then just return the original string.
*                                  #5 = old-length
*                                  #6 = new-length
         CR    #5,#6               If lengths are already equal
         BE    RETURN              then just return the string
         BL    USENEWLN            If old-length LT new-length, OK
*
* If old-length is greater than new-length, then we need to check arg4
* (the truncatep parameter).
* If arg4 is NIL, then length of new string is old-length, so we can
* just return it.  Otherwise length of new string is always arg 2.
*
         C     #10,12(,#11)        If arg 4 is NIL (don't truncate)
         BE    RETURN              then just return the string
USENEWLN DS    0H                  else use new-length (already in #6)
*
* Check length of string to be created.  If negative, error.
* If zero, just return the null string.
*
         LTR   #6,#6               Check new-length
         BM    ERROR2              If negative, error
         BZ    RETNULL             If zero, return null string
*
* Allocate space for string, using new-length.
*
         LR    #2,#6               Length for ZILVSS = new-length
         XR    #1,#1               ENTRY CODE 0 = ALLOCATE NEW SPACE
         L     #15,ZLCVSS          GET ADDRESS OF ZILVSS
         LA    #0,32(,#11)         SET CURRENT STACK POINTER FOR GC
         #BASR #14,#15             CALL ZILVSS TO CREATE A STRING
         LTR   #4,#15              IF STRING BUILD FAILED
         BZ    ERROR4              THEN ERROR
*
* Preset offset to move old data to new string.
*
         XR    #3,#3               Set offset of moved data to 0
*
* If new-length is less than old-length, then set offset of the
* string data in the new string to 0 and bypass padding.
*
         CR    #5,#6               If old-length exceeds new-length
         BH    TRUNCATE            then process with truncation
*
* Depending on sign of assumed-fixnum arg 5, set offset of
* string data in the new string as follows:
*   negative - new-length minus old-length
*   zero     - (new-length minus old-length) divided by 2
*   positive - 0
*
         L     #2,16(,#11)         Get arg 5 (assume fixnum)
         L     #2,##CDR(,#2)       Get numeric value
         LTR   #2,#2               Test sign
         BP    PADRIGHT            Positive = padding on right
         BZ    CENTER              Zero = padding on center
******** BM    PADLEFT             Negative = padding on left
PADLEFT  DS    0H                  Padding on left, set offset
         LR    #3,#6               Offset = new-length - old-length
         SR    #3,#5
         B     MOVEPAD
CENTER   DS    0H                  Padding on left, set offset
         LR    #3,#6               Offset = (new-length - old-length)/2
         SR    #3,#5
         SRL   #3,1
         B     MOVEPAD
MOVEPAD  DS    0H
*
* Pad new string with the pad character up to offset location.
* Note that this is skipped if the offset is zero (when padding
* on right or truncating).
*
         XR    #0,#0               Source address = 0
         LA    #14,##VECDAT(,#4)   Destination address = new-string
         XR    #1,#1               Source length = 0
         ICM   #1,B'1000',PADCHAR  Fill character = pad character
         LR    #15,#3              Destination length = offset
         MVCL  #14,#0              Pad new string with pad character
PADRIGHT DS    0H                  Padding on right, leave offset 0
TRUNCATE DS    0H                  Truncating, leave offset 0
MOVEIT   DS    0H
*
* Move string data to new string using above offset.
*
         L     #1,0(,#11)          Get pointer to old-string
         LA    #0,##VECDAT(,#1)    Source address =  old-string text
         LA    #14,##VECDAT(#3,#4) Dest. address = new-string w/offset
         LR    #1,#5               Source length = old-length
         ICM   #1,B'1000',PADCHAR  Fill character = pad character
         LR    #15,#6              Destination length = new-length
         MVCL  #14,#0              Move from old-string to new-string
         LR    #15,#4              Point to new-string
         B     RETURN              Return new-string
         SPACE 1
RETNULL  DS    0H                  Requested length is zero
         LA    #15,NULLSTR         Return null string
         SPACE 1
RETURN   DS    0H
         SPACE 1
         #ZRET ,                   RESTORE REGISTERS AND RETURN
         SPACE 1
NULLSTR  DS    0A                  Align null string to fullword
         DC    YL1(##STRING),AL3(0),XL4'00'  String ""
         SPACE 1
STRLEN1  DC    YL1(##STRING),AL3(1) Header for a string of length 1
PADCHAR  DS    XL1                 Pad character
         SPACE 1
ERROR1   #ERR  'Argument 1 to ZILSPAD not a string - ',0(#11)
ERROR2   #ERR  'Argument 2 to ZILSPAD not a non-negative fixnum - ',   X
               4(#11)
ERROR3   #ERR  'Argument 3 to ZILSPAD not a valid pad character - ',   X
               8(#11)
ERROR4   #ERR  'ZIL4010 ZILSPAD: Not enough vector/string space to builX
               d string.',PREFIX=NO
         SPACE 1
         LTORG
         END
