         TITLE 'ZILTPUT - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
*  THIS FUNCTION IS CALLED BY ZIL ASSEMBLER LANGUAGE PROGRAMS WHICH   *
*  WISH TO WRITE SOMETHING TO THE TERMINAL.                           *
*                                                                     *
*  REGISTER 1 CONTAINS THE ADDRESS OF THE DATA TO BE WRITTEN.         *
*  REGISTER 0 CONTAINS THE LENGTH OF THE DATA TO BE WRITTEN.          *
*                                                                     *
*  IT IS ASSUMED THAT THE LENGTH IS 256 BYTES OR LESS.                *
*                                                                     *
*  IF REGISTER 0 IS NEGATIVE, THEN THE DATA IS TO BE SENT VIA         *
*  TPUT ASIS; OTHERWISE TPUT EDIT IS TO BE USED.                      *
*                                                                     *
* THIS ROUTINE IS NOT RECURSIVE AND USES NO STACK SPACE.              *
*                                                                     *
***********************************************************************
         GBLB  &ZILXA
         #ZSYS
         SPACE 1
ZILTPUT  #ZBEG NAME='ZILTPUT'
         SPACE 1
         STM   #14,#12,TPUTSAVE    SAVE ALL REGISTERS
         LR    #12,#15             ESTABLISH BASE REGISTER
         DROP  #15
         USING ZILTPUT,#12
         SPACE 1
         LTR   #0,#0               TEST LENGTH VALUE
         BZ    RETURN              IF ZERO, DO NOTHING
         BP    DOTPUT              IF POSITIVE, DO TPUT EDIT
         LPR   #3,#0               IF NEGATIVE, MAKE IT POSITIVE
         LR    #4,#1               SAVE ADDRESS
         TPUT  (#4),(#3),ASIS      DO TPUT ASIS (WITHOUT NEWLINE)
         B     DRIBBLE             GO TO DO DRIBBLE IF REQUIRED
         SPACE 1
DOTPUT   DS    0H
         LR    #3,#0               SAVE LENGTH
         LR    #4,#1               SAVE ADDRESS
         TPUT  (1),(0),R           ISSUE TPUT SVC
         B     DRIBBLE             GO TO DO DRIBBLE IF REQUIRED
         EJECT
DRIBBLE  DS    0H
         SPACE 1
         ICM   #2,15,ZLCDRIBL      GET ADDRESS OF DRIBBLE DCB
         BZ    RETURN              IF NO DRIBBLE DCB IS OPEN, SKIP IT
         LH    #6,82(,#2)          GET DCB LRECL
*                                  CHECK FOR NEWLINE AT END OF TEXT
*                                  AND REMOVE IT IF THERE IS ONE
         LTR   #3,#3               (SKIP IF LENGTH IS ZERO)
         BZ    PUTIT
         LA    #15,0(#4,#3)        POINT TO LAST CHARACTER OF LINE
         BCTR  #15,0
         CLI   0(#15),X'15'        IF LAST CHARACTER IS A NEWLINE
         BNE   PUTIT               THEN
         BCTR  #3,0                 DROP IT FROM DRIBBLE FILE
PUTIT    DS    0H
         AIF   (NOT &ZILXA).SKIP1
*---------------------------------SWITCH FROM CURRENT AMODE TO AMODE 24
         LA    #1,CODE24           ADDRESS OF THIS CODE
         LA    #2,CODE24E          RETURN ADDRESS
         BSM   #2,#1
CODE24   DS    0H
*---------------------------------THE AMODE IS NOW 24
.SKIP1   ANOP
         ST    #9,ZLCISV09         SAVE ZIL REGS
         OI    ZLCIFLGS,ZLCISYS    SET NON-ZIL CODE RUNNING IND ON
         L     #1,ZLCDRIBL         GET DRIBBLE DCB ADDRESS
         PUT   (1)                 DO PUT LOCATE
         NI    ZLCIFLGS,255-ZLCISYS
         AIF   (NOT &ZILXA).SKIP2
*---------------------------------SWITCH FROM AMODE 24 TO CURRENT AMODE
         BSM   0,#2
CODE24E  DS    0H
*---------------------------------THE AMODE IS NOW SAME AS ON ENTRY
.SKIP2   ANOP
         TM    ZLCIFLGS,ZLCIATTN    IF ATTENTION INTERRUPT OCCURRED
         BOR   #13                  THEN GO TO HANDLE IT
         LR    #2,#1               SAVE ADDRESS OF NEXT OUTPUT RECORD
         LA    #15,X'40'           SOURCE LENGTH = 0
         SLL   #15,24              FILL = BLANK
         OR    #15,#3              SOURCE LENGTH = FILL | OUTPUT LEN
         LR    #14,#4              SOURCE ADDRESS = ERROR MESSAGE
         LR    #0,#2               TARGET ADDRESS = OUTPUT AREA
         LR    #1,#6               TARGET LENGTH = DRIBBLE LRECL
         MVCL  #0,#14              MOVE THE MESSAGE TO DRIBBLE LINE
         LTR   #1,#3               GET LENGTH OF LINE JUST MOVED
         BNP   NOTRANS             IF ZERO, SKIP TRANSLATE
         BCTR  #1,0                ELSE REDUCE FOR EXECUTE
         EX    #1,TRDRIB           TRANSLATE TO REASONABLE CHARACTERS
NOTRANS  DS    0H
         AR    #4,#6               BUMP SOURCE POINTER
         SR    #3,#6               REDUCE LENGTH
         BP    PUTIT               CONTINUE WHILE STUFF TO MOVE
RETURN   DS    0H
         LM    #14,#12,TPUTSAVE    RELOAD REGISTERS
         BR    #14                 RETURN
         SPACE 1
TRDRIB   TR    0(*-*,#2),TRDRIBTB  TRANSLATE DRIBBLED OUTPUT
         SPACE 1
TPUTSAVE DS    9D                  SAVE AREA
         SPACE 1
TRDRIBTB DC    256YL1(*-TRDRIBTB)  TRANSLATE TABLE FOR DRIBBLED OUTPUT
         ORG   TRDRIBTB+X'00'      CHANGE NULLS BACK TO BLANKS
         DC    X'40'
         ORG   TRDRIBTB+X'41'      RESTORE LEFT BRACKETS
         DC    X'AD'
         ORG   TRDRIBTB+X'42'      RESTORE RIGHT BRACKETS
         DC    X'BD'
         ORG   TRDRIBTB+X'BA'      RESTORE LEFT BRACKETS
         DC    X'AD'
         ORG   TRDRIBTB+X'BB'      RESTORE RIGHT BRACKETS
         DC    X'BD'
         ORG   ,
         SPACE 1
         LTORG
         SPACE 1
         END
