         TITLE 'TOSTRING - ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* THIS SUBROUTINE MAKES A STRING FROM ANY (VALID) LISP OBJECT.        *
*                                                                     *
* IT TAKES ONE REQUIRED ARGUMENT AND ONE OPTIONAL ARGUMENT.           *
*                                                                     *
* ARG1: THE OBJECT TO MAKE A STRING OUT OF (NOT A LIST OR VECTOR).    *
* ARG2: NIL = DON'T SLASHIFY, T = SLASHIFY.                           *
*                                                                     *
* NOTE: IF THE ARGUMENT IS ALREADY A STRING IT JUST RETURNS THE       *
*       SAME STRING.  THIS IS MAKE-STRING, NOT COPY-STRING.           *
*       IF THE ARGUMENT IS A SYMBOL, THE PRINT NAME IS RETURNED.      *
*                                                                     *
***********************************************************************
*                                                                     *
* Note: This used to be called MKSTRING (and even MAKE-STRING),       *
*        but the name was changed to avoid conflict with the          *
*       Common Lisp function MAKE-STRING.                             *
*       Common Lisp MAKE-STRING has the following syntax:             *
*                                                                     *
*       (make-string <size> &key :initial-element)                    *
*                                                                     *
* Thus, TOSTRING cannot be used to implement MAKE-STRING.             *
*                                                                     *
***********************************************************************
         SPACE 1
TOSTRING #ZBEG MINARGS=1,MAXARGS=2,NAME='TOSTRING'
         SPACE 1
         #ZPDS 2*4+12+0
         #ZSAV ,
         SPACE 1
         LM    #15,#0,0(#11)       LOAD ARG1 AND ARG2
         SPACE 1
         CR    #0,#13              IF ARG2 NOT SUPPLIED
         BE    QUICKCK              OR
         CR    #0,#10                ARG2 = NIL (NO SLASHIFICATION)
         BNE   DUMPST               THEN...
QUICKCK  CLI   ##TYPE(#15),##STRING  IF ARG1 IS ALREADY A STRING
         BE    RETURN                THEN JUST RETURN IT. ELSE...
         CLI   ##TYPE(#15),##SYMBOL  IF ARG1 IS A SYMBOL
         BNE   SETARG2               THEN...
         L     #15,##PNAME(,#15)      GET THE PRINT NAME
         B     RETURN                 AND RETURN THAT
         SPACE 1
SETARG2  DS    0H
         LR    #0,#10              SET ARG 2 TO NIL
         SPACE 1
DUMPST   DS    0H
*
* MAKE SURE THE OBJECT IS A TYPE THAT ZILADMP CAN HANDLE.
* WE DON'T WANT TO GET AN ERROR MESSAGE FROM ZILADMP, DO WE?
*
         TM    ##TYPE(#15),##ATOM  IF THIS IS A LIST,
         BZ    MAYBJUNK            THEN CHECK FOR ZILUNBND, ETC.
         TM    ##TYPE(#15),##VEC   IF THIS IS A VECTOR-TYPE OBJECT
         BO    ERROR1              (VECTOR, FUNARG OR STRUCTURE), ERROR
*
* INVOKE ZILADMP TO GET THE "FLAT" REPRESENTATION OF THE ARGUMENT.
*
         LR    #1,#0               SET #1 FOR ZILADMP FROM ARG2
         LR    #2,#15              GET THE ATOM TO BE DUMPED
         L     #15,ZLCADMP         GET ADDRESS OF ATOM DUMPING ROUTINE
         OI    ZLCDFLGS,ZLCDCOPY   SET ALWAYS-COPY BIT ON
         #BASR #14,#15             CALL ZILADMP
         LR    #5,#0               GET LENGTH OF DUMPED DATA
         LR    #6,#1               GET ADDRESS OF DUMPED DATA
         LR    #2,#5               SET LENGTH OF OBJECT TO CREATE
         XR    #1,#1               ENTRY CODE 0 = ALLOCATE NEW SPACE
         L     #15,ZLCVSS          GET ADDRESS OF STRING SPACE SERVICE
         LA    #0,20(,#11)         SET CURRENT STACK LOCATION
         #BASR #14,#15             CALL ZILVSS TO BUILD THE OBJECT
         LTR   #4,#4               IF STRING BUILD FAILED
         BZ    ERROR2              THEN ERROR
         LR    #7,#5               LENGTH OF DUMPED DATA
         MVCL  #4,#6               MOVE DUMPED DATA INTO STRING DATA
         SPACE 1
RETURN   DS    0H                  #15 POINTS TO STRING BUILT
         SPACE 1
         #ZRET ,
         SPACE 1
MAYBJUNK DS    0H
         SPACE 1
         CR    #15,#13             If equal to #13
         BE    ISUOA               then it's unsupplied optional arg
         C     #15,ZLCUNBND        If equal to the unbound object
         BE    ISUNB               then it's the unbound object
         C     #15,ZLCRMNIL        If equal to RMNIL
         BE    ISRMN               then it's RMNIL
         B     ERROR1              Else error
         SPACE 1
ISUOA    DS    0H                  Unsupplied optional argument
         LA    #15,$UOA
         B     RETURN
ISUNB    DS    0H                  The unbound object
         LA    #15,$UNBOUND
         B     RETURN
ISRMN    DS    0H                  RMNIL
         LA    #15,$RMNIL
         B     RETURN
         SPACE 1
ERROR1   LR    #2,#15
         #ERR  PREFIX=NO,                                              X
               'ZIL2122 TOSTRING: Cannot convert argument to string - 'X
               ,                                                       X
               (#2),                                                   X
               X'0D',              carriage return                     X
               '(it''s a list, vector, funarg, or structure).'
         SPACE 1
ERROR2   #ERR  'ZIL4010 TOSTRING: Not enough vector/string space to buiX
               ld string.',PREFIX=NO
         SPACE 1
         DS    0A
$UOA     #SATM '#<UNSUPPLIED OPTIONAL ARGUMENT>'
         DS    0A
$UNBOUND #SATM '#<UNBOUND>'
         DS    0A
$RMNIL   #SATM '#<RMNIL>'
         SPACE 1
         LTORG
         SPACE 1
         END
