         TITLE 'ZIFATAN - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* ATAN TAKES TWO ARGUMENTS.                                           *
*                                                                     *
***********************************************************************
ZIFATAN  #ZBEG MINARGS=2,MAXARGS=2,NAME='ZIFATAN'
         #ZPDS 20                  DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
         SPACE
         LM    #6,#7,0(#11)        LOAD ARGUMENTS
*
* CHECK TYPE OF ARG 1
*
         CLI   ##TYPE(#6),##SFLOAT
         BE    SFLOAT1
         CLI   ##TYPE(#6),##DFLOAT
         BE    DFLOAT1
         CLI   ##TYPE(#6),##FIXNUM IF FIXED,
         BNE   TRYBIG1             THEN...
         ICM   #1,15,##CDR(#6)      GET FIXNUM VALUE
         LA    #0,X'4E'             PREPARE CHARACTERISTIC
         BNM   FX2FLNN1             IF VALUE IS NEGATIVE, THEN...
         LPR   #1,#1                USE ABSOLUTE VALUE
         LA    #0,X'CE'             SET SIGN IN CHARACTERISTIC
FX2FLNN1 DS    0H
         SLL   #0,24                GET CHARACTERISTIC INTO POSITION
         SDR   #F0,#F0              MAKE A NORMALIZED ZERO
         STM   #0,#1,ZLCDBL+0       STORE CHARACTERISTIC AND MANTISSA
         AD    #F0,ZLCDBL           ADD UNNORMALIZED FLOAT, NORMALIZING
         CLI   ##TYPE(#7),##SFLOAT  IF OTHER ARG IS SINGLE
         BNE   CHKARG2              THEN
         LRER  #F0,#F0               CONVERT FROM DOUBLE TO SINGLE
         B     CHKARG2
         SPACE 1
TRYBIG1  CLI   ##TYPE(#6),##BIGNUM IF BIG,
         BE    ERRORB1             THEN (CAN'T DO IT YET)
         B     ERROR1              ELSE ERROR
         SPACE 1
SFLOAT1  DS    0H                  ARG 1 IS SINGLE
         SDR   #F0,#F0
         LE    #F0,##CDR(,#6)
         B     CHKARG2
         SPACE 1
DFLOAT1  DS    0H
         LD    #F0,8(,#6)
         B     CHKARG2
         SPACE 1
CHKARG2  DS    0H
*
* CHECK TYPE OF ARG 2
*
         CLI   ##TYPE(#7),##SFLOAT
         BE    SFLOAT2
         CLI   ##TYPE(#7),##DFLOAT
         BE    DFLOAT2
         CLI   ##TYPE(#7),##FIXNUM IF FIXED,
         BNE   TRYBIG2             THEN...
         ICM   #1,15,##CDR(#7)      GET FIXNUM VALUE
         LA    #0,X'4E'             PREPARE CHARACTERISTIC
         BNM   FX2FLNN2             IF VALUE IS NEGATIVE, THEN...
         LPR   #1,#1                USE ABSOLUTE VALUE
         LA    #0,X'CE'             SET SIGN IN CHARACTERISTIC
FX2FLNN2 DS    0H
         SLL   #0,24                GET CHARACTERISTIC INTO POSITION
         SDR   #F2,#F2              MAKE A NORMALIZED ZERO
         STM   #0,#1,ZLCDBL+0       STORE CHARACTERISTIC AND MANTISSA
         AD    #F2,ZLCDBL           ADD UNNORMALIZED FLOAT, NORMALIZING
         CLI   ##TYPE(#6),##SFLOAT  IF OTHER ARG IS SINGLE
         BNE   DOITD                THEN
         LRER  #F2,#F2              CONVERT FROM DOUBLE TO SINGLE
         B     DOIT                ELSE...
         SPACE 1
TRYBIG2  CLI   ##TYPE(#7),##BIGNUM IF BIG,
         BE    ERRORB2             THEN (CAN'T DO IT YET)
         B     ERROR2              ELSE ERROR
         SPACE 1
SFLOAT2  DS    0H
         SDR   #F2,#F2
         LE    #F2,##CDR(,#7)
         CLI   ##TYPE(#6),##DFLOAT IF OTHER ARG IS DOUBLE
         BE    DOITD               THEN DO DOUBLE
         B     DOIT                ELSE DO SINGLE
         SPACE 1
DFLOAT2  DS    0H
         LD    #F2,8(,#7)
         B     DOITD
         SPACE 1
DOIT     DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* ARG CHECK TO PREVENT ABEND IN FORTRAN CODE - HARD TO DO FOR ATAN    *
*                                                                     *
***********************************************************************
         SPACE 1
         LTER  #F0,#F0             IF ARG 1 IS ZERO
         BNZ   ARGSOK               AND
         LTER  #F2,#F2               ARG 2 IS ZERO
         BZ    ERROR3                 THEN ERROR
ARGSOK   DS    0H
         SPACE 1
         STE   #F0,ARGVAL1         STORE FLO ARG INTO PARAMETER AREA
         STE   #F2,ARGVAL2         STORE FLO ARG INTO PARAMETER AREA
*
* AT THIS POINT FP REG 0 CONTAINS THE ARGUMENT
*
*
* FORTRAN INTERFACE INITIALIZATION
*
         #ZIFL ATAN                ADDRESS OF SUBROUTINE ATAN IN #15
         SPACE 1
         LA    #1,ARGLIST          POINT TO FORTRAN ARG LIST
         SPACE 1
         ST    #9,ZLCISV09         SAVE ZIL REGS
         OI    ZLCIFLGS,ZLCISYS    INDICATE NON-ZIL CODE RUNNING
         L     #13,ZLCFTCBA        GET ADDRESS OF FTCB = SAVE AREA
*
         #BASR #14,#15             CALL THE FORTRAN SUBROUTINE
*
         L     #13,4(,#13)         RESTORE OUR COMMON AREA POINTER
         NI    ZLCIFLGS,255-ZLCISYS RESET NON-ZIL-CODE FLAG
         TM    ZLCIFLGS,ZLCIATTN   IF ATTENTION INTERRUPT DETECTED
         BOR   #13                 THEN GO HANDLE IT
*
* VALUE RETURNED FROM FORTRAN CODE IN FP REG 0
*
         STE   #F0,ZLCWORK         GET ANSWER FROM FORTRAN ROUTINE
         L     #2,ZLCWORK          GET INTO REG FOR CONSING FLONUM
         LA    #0,20(,#11)         SET STACK LOCATION FOR CONS
         #MKAT FLOAT               MAKE A FLONUM AND RETURN WITH IT
         SPACE 1
RETURN   #ZRET ,                   RESTORE REGISTERS AND RETURN
         SPACE 1
DOITD    DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* ARG CHECK TO PREVENT ABEND IN FORTRAN CODE - HARD TO DO FOR ATAN    *
*                                                                     *
***********************************************************************
         SPACE 1
         LTDR  #F0,#F0             IF ARG 1 IS ZERO
         BNZ   ARGSOKD              AND
         LTDR  #F2,#F2               ARG 2 IS ZERO
         BZ    ERROR3                 THEN ERROR
ARGSOKD  DS    0H
         SPACE 1
         STD   #F0,ARGVAL1         STORE FLO ARG INTO PARAMETER AREA
         STD   #F2,ARGVAL2         STORE FLO ARG INTO PARAMETER AREA
*
* FORTRAN INTERFACE INITIALIZATION
*
         #ZIFL DATAN               ADDRESS OF SUBROUTINE DATAN2 IN #15
         SPACE 1
         LA    #1,ARGLIST          POINT TO FORTRAN ARG LIST
         SPACE 1
         ST    #9,ZLCISV09         SAVE ZIL REGS
         OI    ZLCIFLGS,ZLCISYS    INDICATE NON-ZIL CODE RUNNING
         L     #13,ZLCFTCBA        GET ADDRESS OF FTCB = SAVE AREA
*
         #BASR #14,#15             CALL THE FORTRAN SUBROUTINE
*
         L     #13,4(,#13)         RESTORE OUR COMMON AREA POINTER
         NI    ZLCIFLGS,255-ZLCISYS RESET NON-ZIL-CODE FLAG
         TM    ZLCIFLGS,ZLCIATTN   IF ATTENTION INTERRUPT DETECTED
         BOR   #13                 THEN GO HANDLE IT
*
* VALUE RETURNED FROM FORTRAN CODE IN FP REG 0
*
         L     #15,ZLCMDF          GET ADDRESS OF ZILMDF
         LA    #0,20(,#11)         SET STACK LOCATION FOR CONS
         #BASR #14,#15             CALL ZILMDF TO MAKE DOUBLE FLOAT
         B     RETURN              RETURN WITH IT
         SPACE 1
ARGLIST  DS    0A                  ARG LIST FOR FORTRAN SUBROUTINE
         DC    A(ARGVAL1)
         DC    A(ARGVAL2+X'80000000')
ARGVAL1  DS    D                   STORE THE FLONUM ARG HERE
ARGVAL2  DS    D                   STORE THE FLONUM ARG HERE
         SPACE 1
ERROR1   #ERR  'Argument 1 to ATAN not numeric - ',0(#11)
ERROR2   #ERR  'Argument 2 to ATAN not numeric - ',4(#11)
ERROR3   #ERR  'Arguments to ATAN cannot both be zero.'
ERRORB1  LR    #2,#6
         B     ERRORB
ERRORB2  LR    #2,#7
*******  B     ERRORB
ERRORB   #ERR  'ZIL4100 ATAN: Conversion of bignum ',                  X
               (#2),' to float not supported',PREFIX=NO
         SPACE 1
         LTORG
         SPACE 1
         #ZIF
         SPACE 1
         END
