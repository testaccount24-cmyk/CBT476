         TITLE 'ZILFIX - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* ZILFIX TAKES TWO ARGUMENTS:  (1) a number, (2) a fixnum.            *
*                                                                     *
* Arg 2 determines which kind of conversion-to-integer to perform,    *
* as follows:                                                         *
*                                                                     *
*             0   ==>  TRUNCATE                                       *
*             4   ==>  FLOOR                                          *
*             8   ==>  CEILING                                        *
*            12   ==>  ROUND                                          *
*                                                                     *
***********************************************************************
*                                                                     *
* CONVERSION RULES ARE AS FOLLOWS:                                    *
*                                                                     *
* 1. ARG FIXED               - RETURN FIXNUM ITSELF.                  *
* 2. ARG BIG                 - RETURN BIGNUM ITSELF.                  *
* 3. ARG FLOAT               - CONVERT TO FIXED AND RETURN.           *
*                                                                     *
* ANY OTHER TYPES CAUSE AN ERROR.                                     *
*                                                                     *
***********************************************************************
         SPACE 1
ZILFIX   #ZBEG MINARGS=2,MAXARGS=2,NAME='ZILFIX'
         #ZPDS 20                  DEFINE STACK SIZE
         #ZSAV ,                   SAVE REGISTERS
         SPACE
         L     #15,0(,#11)         Load argument 1
         TM    ##TYPE(#15),##INT   IF FIXNUM OR BIGNUM, RETURN SELF
         BO    RETURN
         CLI   ##TYPE(#15),##SFLOAT IF SINGLE FLOAT, CONVERT IT
         BE    SCONVERT
         CLI   ##TYPE(#15),##DFLOAT IF DOUBLE FLOAT, CONVERT IT
         BE    DCONVERT
         B     ERROR1              ALL OTHER TYPES: ERROR
         SPACE 1
SCONVERT DS    0H                  FLOAT TO BE CONVERTED TO FIX
         SPACE 1
         SDR   #F0,#F0
         LE    #F0,##CDR(,#15)     GET FLONUM VALUE
         B     CONVERT
DCONVERT DS    0H                  FLOAT TO BE CONVERTED TO FIX
         SPACE 1
         LD    #F0,8(,#15)         GET FLONUM VALUE
CONVERT  DS    0H                  FLOAT TO BE CONVERTED TO FIX
         L     #14,4(,#11)         Load argument 2
         L     #14,##CDR(,#14)     Get value of arg2
         LPDR  #F2,#F0             Get absolute value of flonum
         B     PROCESS1(#14)       Branch based on request
PROCESS1 B     TRUNC1               0 = TRUNCATE
         B     FLOOR1               4 = FLOOR
         B     CEIL1                8 = CEILING
         B     ROUND1              12 = ROUND
         SPACE 1
TRUNC1   DS    0H                  Adjust for TRUNCATE...
         SPACE 1
         AW    #F2,W0              UNNORMALIZE TO GET INTEGER PART
         BZ    RET0                IF INTEGER PART ZERO, RETURN ZERO
         B     NOADJUST            otherwise don't adjust
         SPACE 1
ROUND1   DS    0H                  Adjust for ROUND
         SPACE 1
         AD    #F2,DHALF           Add 0.5 to it
         LDR   #F4,#F2             Save this value
         AW    #F2,W0              Unnormalize to get integer part
         BZ    RET0                If integer part zero, return zero
         STD   #F2,ZLCWORK         Store into workarea
         CLC   ZLCWORK(4),W0       IF DOESN'T START WITH 4E000000
         BNE   FLT2BIG             THEN DO FLOAT-TO-BIGNUM CONVERSION
         LDR   #F6,#F2             Get normalized version of un...
         CDR   #F4,#F6             If adding 0.5 made this an integer
         BNE   NOADJUSR             and
         TM    ZLCWORK+7,X'01'       this is an odd integer
         BZ    NOADJUSR               then
         SW    #F2,W1                  subtract an unnormalized 1
         BZ    RET0                If integer part zero, return zero
         B     NOADJUST            Else process adjusted number
         SPACE 1
CEIL1    DS    0H                  Adjust for CEILING
         SPACE 1
         AW    #F2,W0              UNNORMALIZE TO GET INTEGER PART
         BZ    CEIL2               IF INTEGER PART ZERO, RETURN ZERO
         LTDR  #F0,#F0             If number is positive
         BNP   NOADJUST             and
         CDR   #F0,#F2               integer part not equal to orig $
         BE    NOADJUST               then (neg with fractional part)
         AW    #F2,W1                  adjust for CEILING by +1
         B     NOADJUST
         SPACE 1
FLOOR1   DS    0H                  Adjust for FLOOR
         SPACE 1
         AW    #F2,W0              UNNORMALIZE TO GET INTEGER PART
         BZ    FLOOR2              IF INTEGER PART ZERO, RETURN ZERO
         LTDR  #F0,#F0             If number is negative
         BNM   NOADJUST             and
         LPDR  #F4,#F0               the absolute value's
         CDR   #F4,#F2               integer part not equal to orig $
         BE    NOADJUST               then (neg with fractional part)
         AW    #F2,W1                  adjust for FLOOR by -1
******** B     NOADJUST
         SPACE 1
NOADJUST DS    0H
         STD   #F2,ZLCWORK         STORE INTO WORKAREA
         CLC   ZLCWORK(4),W0       IF DOESN'T START WITH 4E000000
         BNE   FLT2BIG             THEN DO FLOAT-TO-BIGNUM CONVERSION
NOADJUSR DS    0H
         ICM   #2,15,ZLCWORK+4     ELSE GET INTEGER PART INTO REGISTER
         BM    FLT2BIG             IF GT 7FFFFFFF, MUST BE BIGNUM
         LTDR  #F0,#F0             IF ORIGINAL NUMBER WAS NEGATIVE
         BNM   CVFIX               THEN
         LCR   #2,#2                MAKE THIS ONE NEGATIVE
         SPACE 1
CVFIX    DS    0H                  MAKE A FIXNUM FROM FLOAT
         LA    #0,20(,#11)         SET STACK LOCATION FOR CONS
         #MKAT FIXED               MAKE A FIXED ATOM
         B     RETURN              RETURN IT
         SPACE 1
CEIL2    DS    0H                  Process zero for CEILING
         LTDR  #F0,#F0             If original flonum was not positive
         BNP   RET0                then return fixnum zero
         LA    #15,#SFT1           Else get fixnum 1
         B     RETURN              and return it
         SPACE 1
FLOOR2   DS    0H                  Process zero for FLOOR
         LTDR  #F0,#F0             If original flonum was not negative
         BNM   RET0                then return fixnum zero
         LA    #15,#SFTM1          Else get fixnum -1
         B     RETURN              and return it
         SPACE 1
RET0     DS    0H                  Process zero for TRUNCATE and ROUND
         LA    #15,#SFT0           Get fixnum zero
         B     RETURN              and return it
         SPACE 1
FLT2BIG  DS    0H                  Float-to-bignum conversion
         SPACE 1
         LTDR  #F0,#F0             If original float negative
         BNM   NOTMNFIX            and
         CLC   ZLCWORK(8),=X'4E00000080000000' abs(val) = 2147483648
         BNE   NOTMNFIX            then
         LA    #15,MTWO31           get fixnum -2147483648
         B     RETURN               and return with it.
NOTMNFIX DS    0H                  Else a real bignum
         SPACE 1
         CLI   ##TYPE(#15),##DFLOAT
         BE    DFLT2BIG            If double, go convert double to big
         SPACE 1
***********************************************************************
*                                                                     *
* Single-float-to-bignum conversion logic:  Since we are dealing with *
* single-precision flonums, a flonum that is larger than the          *
* maximum fixnum has only the high-order 24 bits of precision in it.  *
* Therefore, we view the equivalent (bignum) integer as a number of N *
* bits where N is 4*(characteristic-64), of which the leftmost 24     *
* bits are the mantissa and the remainder can only be assumed zero.   *
*                                                                     *
* Logically, we add 0-bits on the left until the number of bits is a  *
* multiple of 31.  In reality, we accomplish this by loading the      *
* 24-bit mantissa into a register pair, left justified, and right     *
* shifting it by the difference between N and the next higher         *
* multiple of 31.                                                     *
*                                                                     *
* Call the new number of bits B.  We allocate a bignum of B/31 words  *
* and make the register pair the 2 most significant words thereof.    *
*                                                                     *
* Then check the sign of the original flonum, and pass it on to       *
* the bignum.                                                         *
*                                                                     *
***********************************************************************
         SPACE 1
*
*                                  #15 -> arg 1
*                                  #F0 = single float value
*
         LPER  #F2,#F0             #F2 = abs (single float value)
         STE   #F2,ZLCWORK         Store flonum value
         XR    #0,#0               Clear register pair
         XR    #1,#1
         XR    #6,#6               Clear register pair
         XR    #7,#7
         ICM   #6,B'1110',ZLCWORK+1 Load mantissa into register pair
         SRL   #6,2                Pretend it's a 62-bit register pair
         IC    #1,ZLCWORK          Get characteristic
         SH    #1,=H'64'           Convert from excess-64 notation
         SLA   #1,2                Multiply by 4 to get # of bits
         D     #0,=F'31'           #0 = remainder, #1 = quotient
*                                  (#1 will be number of bignum words)
         LTR   #0,#0               If remainder is zero,
         BZ    NOREM                then bypass shift
         LA    #1,1(,#1)           Else increment quotient by 1
         LA    #14,31              Compute shift amount
         SR    #14,#0               = 31 minus remainder
         SRDL  #6,0(#14)           Shift mantissa right by this amount
NOREM    DS    0H
         SLDL  #6,1                Convert 62-bit register pair to
         SRL   #7,1                 a pair of bigits
         LTR   #6,#6               If leftmost bigit is zero,
         BNZ   NBZERO              then...
         SLDL  #6,32                set #6 = #7, #7 = zeroes
         BCTR  #1,0                 and reduce bignum word count by 1
NBZERO   DS    0H
         LTR   #1,#1               Check bignum word count
         BNP   DISASTER            Must be at least 1, else bug
         CH    #1,=H'1'            If count = 1
         BNE   BNOT1               then...
         LTR   #7,#7                we must have at least 1 clear reg
         BNZ   DISASTER             else disaster
         LR    #2,#6                load value
         #MKAT FIXED                make a fixnum out of it
         B     RETURN               and return
BNOT1    DS    0H
         LR    #2,#1               Get number of words for bignum
         SLA   #2,2                Multiply by 4 to get # of bytes
         LR    #3,#2               Save this length
         LA    #2,##VECDAT(,#2)    Add header length
         L     #15,ZLCBIG          Get address of ZILBIG
         #BASR #14,#15             Call ZILBIG to allocate a bignum
         STCM  #3,7,1(#15)         Store length
*
* We can use an EX here because, at least for single-precision
* flonums, the bignum length won't ever get anywhere near 256 bytes.
*
         LR    #14,#3              Get bignum text length
         BCTR  #14,0               Reduce for execute
         EX    #14,CLEARBIG        Clear bignum text to zeroes
         LA    #1,##VECDAT(#3,#15) Point to end of bignum
         SH    #1,=H'8'            Bump back to two MSW's
         ST    #6,4(,#1)           Store left half of reg into MSW
         ST    #7,0(,#1)           Store right half of reg into (M-1)SW
         SPACE 1
         LTER  #F0,#F0             If original bignum was negative
         BNM   BRETURN             then...
         CLC   0(12,#15),TWO31      if bignum so far is 2**31
         BNE   BNEG                 then...
MNFIX    DS    0H
         LA    #15,MTWO31            return -2147483648
         B     RETURN
BNEG     DS    0H                  else
         OI    ##VECDAT(#15),X'80'  turn on negative sign bit
BRETURN  DS    0H
         LA    #1,##VECDAT(#3,#15) Get address of end of bignum
         ST    #1,ZLCVSNXT         Update VSS pointer
         B     RETURN              Return with it
         EJECT
DFLT2BIG DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* Double-float-to-bignum conversion logic:  This is similar to        *
* the single-float-to-bignum conversion above, but is different       *
* in that, first of all, since there are up to 56 bits of precision   *
* in a double-float, it is possible for there to be a fractional part *
* with an integer part that is more than 31 bits.  Therefore, we must *
* work with the unnormalized-zero-added value.  We can break this     *
* into two cases, then.                                               *
*                                                                     *
* In case 1, the value after adding unnormalized zero has an X'4E'    *
* characteristic, meaning that the entire contents of the floating    *
* point register is the integer part as is.  If so, we can just build *
* a two-word bignum and dump the mantissa into it.                    *
*                                                                     *
* In case 2, the characteristic is greater than X'4E', meaning that   *
* there are implied low-order zero bits in the integer part.  We must *
* compute the shift value to get the number of bits to be a multiple  *
* of 31, as above, but in this case we have to process 3 words of     *
* integer instead of 2.  For a single-precision flonum, the maximum   *
* number of "visible" bits is 24+30 = 54, which fits into 2 words;    *
* for a double-precision flonum, the maximum number of "visible" bits *
* is 56+30 = 86, which fits into 3 words.  Therefore, we have to      *
* simulate a triple shift.                                            *
*                                                                     *
* Note that a characteristic less than X'4E' is not possible, due to  *
* the unnormalized zero add.                                          *
*                                                                     *
* As above, we view the equivalent (bignum) integer as a number of N  *
* bits where N is 4*(characteristic-64), of which the leftmost 56     *
* bits are the mantissa and the rest can only be assumed zero.        *
*                                                                     *
* Logically, we add 0-bits on the left until the number of bits is a  *
* multiple of 31.  In reality, we accomplish this by loading the      *
* 56-bit mantissa into a register triple, left justified, and right   *
* shifting it by the difference between N and the next higher         *
* multiple of 31.  We can implement the triple shift by using two     *
* register pairs, with the middle word providing the overlap.         *
*                                                                     *
* Call the new number of bits B.  We allocate a bignum of B/31 words  *
* and make the register triple the 3 most significant words thereof.  *
*                                                                     *
* If the high-order word of the bignum ends up zero, reduce the       *
* length of the bignum by 1 word.                                     *
*                                                                     *
* Then check the sign of the original flonum, and pass it on to       *
* the bignum.                                                         *
*                                                                     *
***********************************************************************
         SPACE 1
*
*                                  #F0 = single float value
*                                  #F2 = abs. unnormalized integer part
*                                  ZLCWORK = contents of #F2
         SPACE 1
         CLI   ZLCWORK,X'4E'
         BE    CASE1               If 4E, simple 56-bit bignum
         BH    CASE2               If higher, time to shift
         BL    DISASTER            Can't be lower - can it???
         SPACE 1
CASE1    DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* In case 1, the value after adding unnormalized zero has an X'4E'    *
* characteristic, meaning that the entire contents of the floating    *
* point register is the integer part as is.  If so, we can just build *
* a two-word bignum and dump the mantissa into it.                    *
*                                                                     *
***********************************************************************
         SPACE 1
* Note that the case of -2**31 was handled above.
* (Not to mention fixnums.)
         SPACE 1
         LM    #6,#7,ZLCWORK       Load mantissa parts
         SLDL  #6,8                Shift out characteristic
         SRDL  #6,7                Shift back, but not sign bit of #7
         SRL   #7,1                Shift right register correctly
C1BIGNUM DS    0H
         LA    #2,##VECDAT+8       Set size for a 2-word bignum
         L     #15,ZLCBIG          Get address of ZILBIG
         #BASR #14,#15             Call ZILBIG to allocate a bignum
         MVC   1(3,#15),=AL3(8)    Set bignum length
         ST    #7,##VECDAT+0(#15)  Store low-order word
         ST    #6,##VECDAT+4(#15)  Store high-order word
         LTDR  #F0,#F0             If original bignum was negative
         BNM   C1RETURN            then...
         OI    ##VECDAT(#15),X'80'  turn on negative sign bit
C1RETURN DS    0H
         LA    #1,##VECDAT+8(,#15) Get address of end of bignum
         ST    #1,ZLCVSNXT         Update VSS pointer
         B     RETURN              Return with new bignum
         SPACE 1
CASE2    DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* In case 2, the characteristic is greater than X'4E', meaning that   *
* there are implied low-order zero bits in the integer part.          *
*                                                                     *
***********************************************************************
         SPACE 1
*
* If the flonum has 62 bits or less in it already, make a 2-word bignum
*
         CD    #F2,=X'503FFFFFFFFFFFFF'
         BH    C2WORD3
         LM    #6,#7,ZLCWORK       Load mantissa into register pair
         SLDL  #6,8                Shift out characteristic
*
* We know that the characteristic is greater than X'4E', so it can be
* only X'4F' or X'50'.  If it is X'50', we already shifted left 8 bits
* to get rid of the characteristic.  If it is X'4F', we counteract
* that by shifting right 4, because we want a shifted-left-by-4 value.
*
         CLI   ZLCWORK,X'4F'
         BNE   C22SHIFT
         SRDL  #6,4
C22SHIFT DS    0H
         SLDL  #6,1                Convert to bigits
         SRL   #7,1
         B     C1BIGNUM            Go make a 2-word bignum
         SPACE 1
C2WORD3  DS    0H                  Will be at least a 3-word bignum...
         SPACE 1
         XR    #0,#0               Clear register pair
         XR    #1,#1
*
* First we construct a 93-bit number, since that will transform into
* a 3-bigit bignum.  Thus we left-justify the mantissa in 93 bits.
*
         LM    #6,#7,ZLCWORK       Load mantissa into register pair
         SLDL  #6,8                Shift out characteristic
         SRDL  #6,3                Leave 3 high-order zero bits
         IC    #1,ZLCWORK          Get characteristic
         SH    #1,=H'64'           Convert from excess-64 notation
         SLA   #1,2                Multiply by 4 to get # of bits
         D     #0,=F'31'           #0 = remainder, #1 = quotient
*                                  (#1 will be number of bignum words)
         LTR   #0,#0               If remainder is zero,
         BZ    C2NOREM              then bypass shift
         LA    #1,1(,#1)           Else increment quotient by 1
         LA    #14,31              Compute shift amount
         SR    #14,#0               = 31 minus remainder
*
* Shift mantissa right by the amount indicated.  Simulate a
* "register triple" shift, where the triple is contained in
* registers #6+#7+#5.
*
         LR    #4,#7               Load into second register pair
         XR    #5,#5               Clear other half of register pair
         SRDL  #6,0(#14)           Shift right by amount
         SRDL  #4,0(#14)           Shift right by amount
C2NOREM  DS    0H
*
* Convert 93-bit register triple to 3 "bigits".
*
         SLDL  #6,2
         SRL   #7,2
         LR    #4,#7
         SLDL  #4,1
         SRL   #5,1
         LR    #3,#6
*
* The bigits are contained in the register triple #3+#4+#5.
*
         LTR   #3,#3               If leftmost bigit is zero,
         BNZ   C2NZERO             then...
         LR    #3,#4                set #3 = #4
         SLDL  #4,32                set #4 = #5, #5 = zeroes
         BCTR  #1,0                 reduce bignum length by 1
C2NZERO  DS    0H
         CH    #1,=H'3'            If bignum length is not at least 3
         BL    DISASTER            then something is wrong.
         STM   #3,#5,C2SAVE        Store contents
         LR    #2,#1               Get number of words for bignum
         SLA   #2,2                Multiply by 4 to get # of bytes
         LR    #3,#2               Save this length
         LA    #2,##VECDAT(,#2)    Add header length
         L     #15,ZLCBIG          Get address of ZILBIG
         #BASR #14,#15             Call ZILBIG to allocate a bignum
         STCM  #3,7,1(#15)         Store length
*
* We can use an EX here because, at least for double-precision
* flonums, the bignum length won't ever get anywhere near 256 bytes.
*
         LR    #14,#3              Get bignum text length
         BCTR  #14,0               Reduce for execute
         EX    #14,CLEARBIG        Clear bignum text to zeroes
         LA    #1,##VECDAT(#3,#15) Point to end of bignum
         LM    #5,#7,C2SAVE        Get bignum contents
         SH    #1,=H'12'            Bump back to three MSW's
         ST    #5,8(,#1)            Store MSW
         ST    #6,4(,#1)           Store (M-1)SW
         ST    #7,0(,#1)           Store (M-2)SW
C2CKSIGN DS    0H
         LTDR  #F0,#F0             If original bignum was negative
         BNM   C2RETURN            then...
         OI    ##VECDAT(#15),X'80'  turn on negative sign bit
C2RETURN DS    0H
         LA    #1,##VECDAT(#3,#15) Get address of end of bignum
         ST    #1,ZLCVSNXT         Update VSS pointer
******** B     RETURN              Return with it
         SPACE 1
RETURN   DS    0H
         SPACE 1
         #ZRET ,                   RESTORE REGISTERS AND RETURN
         SPACE 1
C2SAVE   DS    3A
         SPACE 1
CLEARBIG XC    ##VECDAT(*-*,#15),##VECDAT(#15) Executed: clear bignum
         SPACE 1
         DS    0D
W0       DC    X'4E00000000000000' Unnormalized double float zero
W1       DC    X'4E00000000000001' Unnormalized double float one
DHALF    DC    D'0.5'              1/2 to add for rounding
         SPACE 1
MTWO31   #IATM -2147483648         Most negative fixnum
         SPACE 1
TWO31    DC    YL1(##BIGNUM),AL3(8),F'0,1'  Bignum 2**31
         SPACE 1
ERROR1   DS    0H                  NOT A NUMERIC ATOM
         L     #14,4(,#11)
         L     #14,##CDR(,#14)
         L     #2,FUNNAME(#14)
         #ERR  'Argument 1 to ',0(#2),' not a number - ',0(#11)
         SPACE 1
DISASTER DS    0H
         #ERR  'Internal error in ZILFIX computing bignum value for ', X
               0(#11)
         SPACE 1
FUNNAME  DC    A(MSGTRUNC,MSGFLOOR,MSGCEIL,MSGROUND)
         SPACE 1
         DS    0H,XL1              Align string to non-halfword
MSGTRUNC #SATM 'TRUNCATE'
         DS    0H,XL1              Align string to non-halfword
MSGFLOOR #SATM 'FLOOR'
         DS    0H,XL1              Align string to non-halfword
MSGCEIL  #SATM 'CEILING'
         DS    0H,XL1              Align string to non-halfword
MSGROUND #SATM 'ROUND'
         SPACE 1
         LTORG
         END
