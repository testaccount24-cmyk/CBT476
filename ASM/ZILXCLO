         TITLE 'ZILXCLO - ZIL 1.3 CLOSURE BUILDER FOR FUNCTION ARGS'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
*  THIS MODULE IS INVOKED FROM COMPILED CODE TO IMPLEMENT THE         *
*  "FUNCTION" SPECIAL FORM - #' - ON UNKNOWN QUANTITIES.              *
*  THIS IS A NORMAL-LOOKING FUNCTION THAT TAKES 2 ARGUMENTS:          *
*  (1) THE OBJECT OUT OF WHICH A FUNCTIONAL ARGUMENT IS TO BE BUILT   *
*  (2) T OR NIL, DEPENDING ON WHETHER A LEXICAL CLOSURE OR JUST A     *
*  PLAIN OLD DYNAMIC-BINDING "SUBR"-TYPE FUNARG IS TO BE BUILT.       *
*                                                                     *
*  LOGIC:                                                             *
*                                                                     *
*  THIS ROUTINE ATTEMPTS TO RESOLVE THE FIRST ARG AS A COMPILED CODE  *
*  FUNCTION (A SYMBOL WITH A VALID SUBR PROPERTY).  IF SO, A COMPILED *
*  LEXICAL CLOSURE IS BUILT, AS INLINE CODE FOR "FUNCTION" WOULD      *
*  DO FOR A KNOWN FUNCTION.  OTHERWISE, AN INTERPRETED LEXICAL        *
*  CLOSURE OBJECT (FUNARG) IS BUILT, USING MAKE-FUNARG OR SOMETHING   *
*  EQUIVALENT, AS "FUNCTION" DOES UNDER THE INTERPRETER.              *
*                                                                     *
***********************************************************************
*                                                                     *
* 10/87 - Since (FUNCTION FOO) and (SUBR FOO) are equivalent in       *
*         lexically scoped Common Lisp - i.e. there is no lexical     *
*         environment to capture for a symbol FOO - there is no       *
*         difference in processing when arg 1 to this subroutine      *
*         is a symbol, whether arg 2 is T or NIL.  We found that      *
*         when the SUBR property of the symbol names a lexical        *
*         closure, the original lexical environment of that           *
*         closure was being ignored in favor of the (useless)         *
*         current lexical environment, causing errors when a          *
*         function was being traced.  Therefore, when arg 1 is        *
*         a symbol we ignore arg 2, but we check to see if the        *
*         SUBR property of the symbol names a lexical closure.        *
*                                                                     *
* Actually, all we do is to see that the SUBR property is CODEP and,  *
* if it is, return that value itself.  We don't use new environment.  *
*                                                                     *
***********************************************************************
*                                                                     *
* HOPEFULLY SOME DAY SUBRS WILL BE STORED IN THE FUNCTION CELL OF THE *
* SYMBOL INSTEAD OF (OR IN ADDITION TO) THE PROPERTY LIST.  IF THIS   *
* IS SO, WE CAN KILL THE CALL TO GET AND THE NECESSITY OF INTERNING   *
* THE SYMBOL "SUBR" IN THIS MODULE.                                   *
*                                                                     *
***********************************************************************
         SPACE 1
ZILXCLO  #ZBEG MINARGS=2,MAXARGS=2,NAME='ZILXCLO',SUBRS=ZILSUBR,       X
               PTRS=ZLBPTRS,ATOMS=ZILATOM,LISTS=ZILLIST
         SPACE 1
         #ZPDS 2*4+12+12 = 32
         #ZSAV ,
         SPACE 1
*
* REQUIRED FIRST-TIME-ONLY CODE TO INTERN ATOMS USED BY THIS MODULE.
*
ZAPGO    NOP   AROUND              EXECUTE ONCE, THEN BRANCH.
         LA    #1,ZLBPTRS          ADDRESS THE LIST OF POINTERS
         L     #15,ZLCSINT         GET ADDRESS OF ZILSINT
         LA    #0,20(,#11)         SET TOP-OF-STACK POINTER
         #BASR #14,#15             CALL ZILSINT
         OI    ZAPGO+1,X'F0'       CHANGE NOP TO BRANCH NEXT TIME
AROUND   DS    0H
         SPACE 1
         L     #1,0(,#11)          PICK UP FUNCTIONAL ARG
         SPACE 1
CHKTYPE  DS    0H                  SEE WHAT WE GOT
         SPACE 1
         CLI   ##TYPE(#1),##SYMBOL
******** BE    ZSYMBOL             IF SYMBOL, PROCESS SYMBOL
         BNE   MAKEFUN             ELSE MAKE INTERPRETED CLOSURE
         SPACE 1
ZSYMBOL  DS    0H                  IF IT IS A SYMBOL...
         SPACE 1
*                                  ARG 1 TO GET = OUR ARG 1
         L     #2,ASUBR            ARG 2 TO GET = 'SUBR
         LR    #3,#10              ARG 3 TO GET = NIL
         STM   #1,3,20(#11)        STORE ARGS
         L     #15,@GET
         LA    #1,20(,#11)
         #BASR #14,#15             CALL GET TO (GET SYMBOL 'SUBR)
         TM    ##TYPE(#15),##CODE  SUBR PROPERTY MUST BE CODEP
         BO    RETURN              IF SUBR OK, then return it!
         SPACE 1
MAKEFUN  DS    0H                  ELSE MUST BE INTERPRETIVE
         SPACE 1
         C     #10,4(,#11)         IF ARG 2 TO ZILXCLO = NIL
         BNE   MAKEFUNT            THEN...
         L     #15,0(,#11)          JUST RETURN ARG 1 ITSELF
         B     RETURN              ELSE...
MAKEFUNT DS    0H                  MAKE AN INTERPRETIVE LEXICAL CLOSURE
         SPACE 1
***********************************************************************
*                                                                     *
* NOTE: THE SECOND ARG TO MAKE-FUNARG IS THE ENVIRONMENT, WHICH WE    *
* BUILD BY CALLING MKNEWENV (MAKE-NEW-ENVIRONMENT).  WE SPECIFY THE   *
* CURRENT LEXICAL ALIST FOR THIS.                                     *
*                                                                     *
***********************************************************************
         SPACE 1
         L     #1,ZLCFALST         GET CURRENT LEXICAL ALIST
         ST    #1,20(,#11)         STORE ARG 1 TO MKNEWENV
         L     #15,@MKNEWEN        GET ADDRESS OF MKNEWENV
         LA    #1,20(,#11)         SET POINTER TO ARGS ON STACK
         #BASR #14,#15             CALL MKNEWENV 2 MAKE NEW ENVIRONMENT
         ST    #15,24(,#11)        STORE ARG 2 TO MAKE-FUNARG
         L     #14,0(,#11)         GET ARG 1 TO THIS FUNCTION
         ST    #14,20(,#11)        STORE ARG 1 TO MAKE-FUNARG
         L     #15,@MKFUNAR        GET ADDRESS OF MKFUNARG
         LA    #1,20(,#11)         SET POINTER TO ARGS ON STACK
         #BASR #14,#15             CALL MAKE-FUNARG TO BUILD A FUNARG
******** B     RETURN              AND RETURN WITH IT
         SPACE 1
RETURN   DS    0H                  RETURN
         SPACE 1
         #ZRET ,
         SPACE 2
ZILSUBRS DS    0A
@GET     DC    V(GET)              ADDRESS OF SUBROUTINE
         DC    CL8'GET'
@MKNEWEN DC    V(MKNEWENV)         ADDRESS OF SUBROUTINE
         DC    CL8'MKNEWENV'
@MKFUNAR DC    V(MKFUNARG)         ADDRESS OF SUBROUTINE
         DC    CL8'MKFUNARG'
ZILSUBRE EQU   *
         SPACE 2
ZILATOMS DS    0A
ASUBR    DC    A(SUBR-ZILXCLO)     ADDRESS OF ATOM SUBR
ZILATOME EQU   *
ZILLISTS EQU   *
ZILLISTE EQU   *
         SPACE 2
SUBR     #AATM 'SUBR'
         SPACE 2
         LTORG
         END
