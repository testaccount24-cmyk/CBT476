         TITLE 'SETABEND - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* SETABEND TAKES ONE REQUIRED ARGUMENT - NIL OR NON-NIL.              *
*                                                                     *
* IF THE ARG IS NIL, ESTAE PROCESSING IS CANCELLED;                   *
* OTHERWISE, ESTAE PROCESSING IS ENABLED.                             *
*                                                                     *
* THIS FUNCTION TURNS ABEND CATCHING ON AND OFF.                      *
*                                                                     *
***********************************************************************
*                                                                     *
* SUMMARY OF REGISTER USAGE FOR THIS MODULE                           *
*                                                                     *
*        USING SETABEND,#12                                           *
*        USING STARETRY,#6                                            *
*        USING STAEEXIT,#7                                            *
*        USING SDWA,#5                                                *
*                                                                     *
***********************************************************************
         SPACE 1
SETABEND #ZBEG MINARGS=1,MAXARGS=1,NAME='SETABEND'
         #ZPDS 16
         #ZSAV
         SPACE 1
         L     #15,0(,#11)         PICK UP ARG 1
         CR    #15,#10             IF ARG IS NIL
         BNE   ABENDON             THEN...
         TM    ZLCEFLGS,ZLCESTAE    IF ESTAE ENVIRONMENT IS ACTIVE
         BZ    RETURN               THEN
         ESTAE 0                    CANCEL ESTAE
         LTR   #15,#15              IF FAILED
         BNZ   ERROR1               THEN ERROR
         NI    ZLCEFLGS,255-ZLCESTAE INDICATE ESTAE NOT ACTIVE
         B     RETURN                AND RETURN OK
         SPACE 1
ABENDON  DS    0H                  ELSE...
         TM    ZLCEFLGS,ZLCESTAE   IF ESTAE ENVIRONMENT IS ACTIVE
         BO    RETURN              THEN DO NOTHING
         LA    #0,STARETRY         SET ADDRESS OF RETRY ROUTINE
         ST    #0,STAERTRY         IN ESTAE PARAMETER LIST
         XC    STAECOMP,STAECOMP   CLEAR COMPLETION CODE
         ST    #13,STAEZCOM        SET ADDRESS OF ZIL COMMON AREA
         ESTAE STAEEXIT,PARAM=STAEPARM ESTABLISH ESTAE ENVIRONMENT
         LTR   #15,#15              IF FAILED
         BNZ   ERROR1               THEN ERROR
         OI    ZLCEFLGS,ZLCESTAE    INDICATE ESTAE ACTIVE
         B     RETURN                AND RETURN OK
         SPACE 1
RETURN   DS    0H
         L     #15,0(,#11)         RETURN WITH ARG AS VALUE
         #ZRET ,
         SPACE 1
ERROR1   DS    0H
         #ERR  'ZIL0040 SETABEND failed, bad return code from ESTAE.', X
               PREFIX=NO
         SPACE 1
STAEPARM DS    0A                  ESTAE PARAM AREA
STAEZCOM DS    A                   ADDRESS OF ZIL COMMON AREA
STAECOMP DS    A                   COMPLETION CODE
STAEREAS DS    A                   REASON CODE
STAERTRY DS    A                   ADDRESS OF RETRY ROUTINE
         SPACE 1
         DROP  #12
         SPACE 1
         EJECT
STARETRY DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* RETRY ROUTINE TO RECEIVE CONTROL WHEN ESTAE EXIT DETECTED AN ABEND  *
* DURING ZIL PROCESSING.  THIS ROUTINE WILL ATTEMPT TO RETURN TO THE  *
* MAINLINE CODE VIA THROW PROCESSING.                                 *
*                                                                     *
*  ON ENTRY TO THIS ROUTINE:                                          *
*                                                                     *
*  IF AN SDWA WAS AVAILABLE (REGISTER 0 = OTHER THAN 12 IN STAEEXIT)  *
*  THEN (ASSUMING DEFAULTS OF RETREGS=NO AND FRESDWA=NO):             *
*                                                                     *
*    REGISTER  0 = 0                                                  *
*    REGISTER  1 = ADDRESS OF THE SDWA                                *
*    REGISTER 14 = ADDRESS OF AN SVC 3 INSTRUCTION (EXIT)             *
*    REGISTER 15 = ENTRY POINT ADDRESS OF THIS RETRY ROUTINE          *
*                                                                     *
*  OTHERWISE (REGISTER 0 = 12 IN STAEEXIT):                           *
*                                                                     *
*    REGISTER  0 = 12                                                 *
*    REGISTER  1 = ADDRESS OF THE ESTAE PARAMETER LIST (PARAM)        *
*    REGISTER  2 = ADDRESS OF THE PURGE I/O LIST OR 0                 *
*    REGISTER 14 = ADDRESS OF AN SVC 3 INSTRUCTION (EXIT)             *
*    REGISTER 15 = ENTRY POINT ADDRESS OF THIS RETRY ROUTINE          *
*                                                                     *
*  OTHER REGISTER CONTENTS ARE UNPREDICTABLE (UNLESS RETREGS=YES      *
*  WAS SPECIFIED IN THE ESTAE EXIT).                                  *
*                                                                     *
***********************************************************************
         SPACE 1
         LR    #6,#15
         USING STARETRY,#6
         LA    #3,12               CHECK IF REGISTER 0 = 12
         CR    #0,#3               IF AN SDWA IS AVAILABLE
         BE    NOSDWAR             THEN...
         LR    #5,#1
         USING SDWA,#5
         L     #4,SDWAPARM          #4 -> WORKAREA
         L     #13,STAEZCOM-STAEPARM(,#4) GET ZIL COMMON FROM PARAM
         L     #3,SDWASR12          LOAD ABENDER'S POSSIBLE CODEREG
         B     AFTSDWAR
NOSDWAR  DS    0H                  ELSE...
         LR    #4,#1                #4 -> WORKAREA
         XR    #5,#5                SHOW NO SDWA
         XR    #3,#3                CLEAR ABENDER'S CODEREG
**** NOT USING SDWA,#5
         LA    #1,NOWAMSG
         LA    #0,L'NOWAMSG
         TPUT  (1),(0),R           LET ME KNOW THERE'S NO SDWA...
         L     #13,STAEZCOM-STAEPARM(,#4) GET ZIL COMMON FROM PARAM
         B     REGSNG              TRY TO RECONSTRUCT REGS
AFTSDWAR DS    0H
         TM    ZLCIFLGS,ZLCISVD    IF CODE IN PROGRESS ZAPPED REGS 8-11
         BZ    REGSOK              THEN
         LM    #8,#10,ZLCISAVE      RESTORE THEM FROM WHERE THEY SAVED
         NI    ZLCIFLGS,255-ZLCISVD
         B     AFTROK              ELSE
REGSOK   DS    0H
         TM    ZLCIFLGS,ZLCISYS    IF REGS CANNOT BE TRUSTED
         BO    RESTREGS            THEN RESTORE CORRECTLY
         C     #13,SDWASR13        IF #13 WAS NOT POINTING TO #ZCOM
         BNE   REGSNG              OR
         L     #10,ZLCNIL
         C     #10,SDWASR10        IF #10 WAS NOT POINTING TO NIL
         BNE   REGSNG              THEN REGS ARE NOT VALID
         LM    #8,#10,SDWASR08     ELSE RESTORE ZIL REGS FROM SDWA
         B     AFTROK
RESTREGS DS    0H                  HERE IF ZLCISYS WAS ON
         XR    #3,#3               SHOW CODEREG CANNOT BE TRUSTED
         L     #8,ZLCT             RELOAD T
         L     #9,ZLCISV09         RESTORE CONS POINTER AS SAVED
         L     #10,ZLCNIL          RELOAD NIL
         NI    ZLCIFLGS,255-ZLCISYS RESET FLAG
         B     AFTROK
REGSNG   DS    0H                  HERE IF REGS ARE NO GOOD
         XR    #3,#3               SHOW CODEREG CANNOT BE TRUSTED
         L     #8,ZLCT             RELOAD T
         L     #9,ZLCGCEND         SET A VALUE FOR CONS POINTER
         L     #10,ZLCNIL          RELOAD NIL
******** B     AFTROK
AFTROK   DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* AT THIS POINT, DO NOT REFERENCE THE SDWA!  IT MAY NOT BE AVAILABLE. *
*                                                                     *
***********************************************************************
         SPACE 1
         LTR   #5,#5                     IF THERE IS NO SDWA AVAILABLE,
         BNZ   GETLOC                    THEN
         MVC   ABENDL(9),=CL9'(UNKNWN),' WE CAN'T TELL WHERE WE ABENDED
         B     AFTGLOC                   (AT LEAST I DON'T KNOW HOW)
GETLOC   DS    0H                        ELSE
         LTR   #3,#3                     IF WE HAVE A POSSIBLE CODEREG
         BZ    NOCODREG                  THEN...
         CLC   0(3,#3),=X'47F0F0'         CHECK IF IT POINTS TO CODE
         BNE   NOCODREG
         L     #1,SDWANXT1               GET ABENDING ADDRESS
         N     #1,=X'7FFFFFFF'           CLEAR AMODE BIT
         N     #3,=X'7FFFFFFF'           CLEAR AMODE BIT
         SR    #1,#3                     CONVERT TO OFFSET FROM CODE
         BM    FIXUPM                    IF NEGATIVE, NOT IN THERE
         MVI   WHEREA,C'+'
         B     AFTFIXUP
FIXUPM   DS    0H
         MVI   WHEREA,C'-'
         LCR   #1,#1
         B     AFTFIXUP
AFTFIXUP DS    0H
         ST    #1,ZLCDBL
         UNPK  WHEREA+1(9),ZLCDBL(5)
         TR    WHEREA+1(8),HEXTBL
         MVI   WHEREA+1+8,C' '
         XR    #15,#15
         IC    #15,4(,#3)                GET LENGTH OF MODULE HEADER
         SH    #15,=H'16'                REDUCE BY LENGTH OF DATE/TIME
         BNP   NOCODREG
         LA    #0,L'WHEREN
         CR    #15,#0
         BNH   *+6
         LR    #15,#0
         BCTR  #15,0
         EX    #15,MOVENAME        MOVE FUNCTION NAME TO MESSAGE
         LA    #1,WHEREN+1(#15)
         MVI   0(#1),C'.'
         LA    #0,1(,#1)
         LA    #1,WHEREM
         SR    #0,#1
         #TPUT 2,(1),(0)           DISPLAY ABENDED MESSAGE
         B     NOCODREG
         SPACE 1
MOVENAME MVC   WHEREN(*-*),5(#3)   EXECUTED: MOVE FUNCTION NAME TO MSG
         SPACE 1
NOCODREG DS    0H
         UNPK  ABENDL(9),SDWANXT1(5)     GET LOCATION FROM PSW
         TR    ABENDL(8),HEXTBL          PUT INTO MESSAGE
         MVI   ABENDL+8,C','
AFTGLOC  DS    0H
         L     #0,STAECOMP-STAEPARM(,#4) GET COMPLETION CODE
         SLL   #0,8                SHIFT OUT HIGH ORDER BYTE
         CL    #0,=X'000FFFFF'     IF THIS IS A USER ABEND CODE
         BNH   ABUSER              THEN GO TO PROCESS IT. ELSE
         MVC   ABENDT(12),=C'system code '
         SRL   #0,4                SHIFT RIGHT 1 NIBBLE FOR EASY CONV
         ST    #0,ZLCDBL
*
         CLC   ZLCDBL(2),=X'00CC'  If program check 0CC abend
         BNE   NOT0CC              then...
         #TPUT S0CCMSG              inform user of cause of pgm check
NOT0CC   DS    0H
*
         UNPK  ABENDC(4),ZLCDBL(3)
         TR    ABENDC(4),HEXTBL
         MVI   ABENDC+3,C','
         L     #0,STAEREAS-STAEPARM(,#4) GET REASON CODE
         SLL   #0,16               ONLY CARE ABOUT LAST 3 NIBBLES
         ST    #0,ZLCDBL
         UNPK  ABENDR(4),ZLCDBL(3)
         TR    ABENDR(4),HEXTBL
         MVI   ABENDR+3,C'.'
         LA    #0,L'ABENDMSG
         B     THROWIT
ABUSER   DS    0H
         MVC   ABENDT(10),=C'user code '
         SRL   #0,8                SHIFT BACK USER ABEND CODE
         CVD   #0,ZLCDBL
         UNPK  ABENDT+10(4),ZLCDBL
         OI    ABENDT+10+3,X'F0'
         MVI   ABENDT+10+4,C'.'
         LA    #0,ABENDT+10+5-ABENDM
THROWIT  DS    0H                  DISPLAY ERROR MESSAGE AND THROW
         STCM  #0,B'0111',ABSTRING+1
         #ERR  ABSTRING,PREFIX=NO
         SPACE 1
WHEREM   DC    C'ZIL0041 ZIL ABEND AT '
WHEREA   DC    C'          '
         DC    C'IN FUNCTION '
WHEREN   DC    CL65' '
         SPACE 1
         DS    0H,XL1              Align string to non-halfword
ABSTRING DC    YL1(##STRING),AL3(ABSTREND-ABENDM)
ABENDM   DC    C'ZIL0042 ABEND in ZIL at '
ABENDL   DC    C'        '
         DC    C', '
ABENDT   DC    CL12' '
ABENDC   DC    C'   ,'
         DC    C' reason code '
ABENDR   DC    C'   .'
ABSTREND EQU   *
ABENDMSG EQU   ABENDM,*-ABENDM,C'C'
         SPACE 1
S0CCMSG  DC    C'ZIL0043 FLOATING-POINT OVERFLOW EXCEPTION OCCURRED.'
         SPACE 1
NOWAMSG  DC    C'ZIL: NO SDWA AVAILABLE TO ESTAE EXIT FOR THIS ABEND.'
         SPACE 1
HEXTBL   DC    240X'00',C'0123456789ABCDEF'
         SPACE 1
         DROP  #6
         EJECT
STAEEXIT DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* ESTAE EXIT THAT GETS CONTROL IF AN ABEND OCCURS INSIDE ZIL.         *
*                                                                     *
*  ON ENTRY TO THIS ROUTINE:                                          *
*                                                                     *
*  REGISTER 0 = 12 - NO SWDA AVAILABLE                                *
*               OTHER - SDWA AVAILABLE                                *
*                                                                     *
*  IF REGISTER 0 = 12:                                                *
*                                                                     *
*     REGISTER 1  = ABEND COMPLETION CODE                             *
*     REGISTER 2  = ADDRESS OF THE ESTAE PARAMETER LIST (PARAM)       *
*     REGISTER 14 = RETURN ADDRESS TO RTM                             *
*     REGISTER 15 = ENTRY POINT ADDRESS OF THIS ESTAE EXIT ROUTINE    *
*                                                                     *
*  OTHERWISE:                                                         *
*                                                                     *
*     REGISTER 1  = ADDRESS OF THE SDWA                               *
*     REGISTER 13 = ADDRESS OF A 72-BYTE SAVE AREA                    *
*     REGISTER 14 = RETURN ADDRESS TO RTM                             *
*     REGISTER 15 = ENTRY POINT ADDRESS OF THIS ESTAE EXIT ROUTINE    *
*                                                                     *
***********************************************************************
         SPACE 1
         LR    #7,#15              SAVE ENTRY ADDRESS REGISTER
         USING STAEEXIT,#7
         LA    #3,12               CHECK IF REGISTER 0 = 12
         CR    #0,#3               IF AN SDWA IS AVAILABLE
         BE    NOSDWAE             THEN...
         LR    #5,#1
         USING SDWA,#5
         L     #4,SDWAPARM          #4 -> WORKAREA
         XR    #2,#2
         ICM   #2,7,SDWACMPC        ABEND COMPLETION CODE
         ST    #2,STAECOMP-STAEPARM(,#4) SAVE COMPLETION CODE
         L     #2,SDWAGR15          REASON CODE FROM ABEND MACRO
         ST    #2,STAEREAS-STAEPARM(,#4) SAVE REASON CODE
         L     #2,STAEZCOM-STAEPARM(,#4) LOOK AT ZIL COMMON AREA
         TM    ZLCEFLGS-ZLCOMMON(#2),ZLCETERM IF ZILTERM IN PROGRESS
         BO    DUMPIT               THEN CANNOT RETRY, JUST ABEND
         TM    ZLCIFLGS-ZLCOMMON(#2),ZLCISMC IF PROCESS UNINTERRUPTIBLE
         BO    DUMPIT               THEN CANNOT RETRY, JUST ABEND
         L     #2,STAERTRY-STAEPARM(,#4) ADDRESS OF RETRY ROUTINE
*
* RETURN SPECIFYING RETRY WITH NO DUMP
*
         SETRP WKAREA=(#5),RETADDR=(#2),DUMP=NO,RC=4
         BR    #14                 AND RETURN
         SPACE 1
DUMPIT   DS    0H
*
* RETURN SPECIFYING CONTINUE WITH TERMINATION AND DUMP IF POSSIBLE
*
         SETRP WKAREA=(#5),DUMP=YES,RC=0
         BR    #14                 AND RETURN
         SPACE 1
NOSDWAE  DS    0H                  NO SDWA AVAILABLE...
         LR    #4,#2               #4 -> WORKAREA
         ST    #1,STAECOMP-STAEPARM(,#4) SAVE ABEND COMPLETION CODE
         XR    #0,#0               REASON CODE ZERO (UNKNOWN)
         ST    #0,STAEREAS-STAEPARM(,#4) SAVE REASON CODE
         L     #15,STAEZCOM-STAEPARM(,#4) LOOK AT ZIL COMMON AREA
         TM    ZLCEFLGS-ZLCOMMON(#15),ZLCETERM IF ZILTERM IN PROGRESS
         BO    NSDUMPIT            THEN CANNOT RETRY, JUST ABEND
         TM    ZLCIFLGS-ZLCOMMON(#15),ZLCISMC IF UNINTERRUPTIBLE
         BO    NSDUMPIT             THEN CANNOT RETRY, JUST ABEND
         L     #0,STAERTRY-STAEPARM(,#4) ADDRESS OF RETRY ROUTINE
         LA    #15,4               INDICATE RETRY TO BE ATTEMPTED
         BR    #14                 AND RETURN
         SPACE 1
NSDUMPIT DS    0H
         XR    #15,#15             INDICATE CONTINUE WITH TERMINATION
         BR    #14                 AND RETURN
         EJECT
         LTORG
         EJECT
         IHASDWA
         END
