         TITLE 'ZILXFUN - ZIL 1.3 FUNCTION EXECUTOR FOR FUNCALL'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
*  THIS MODULE IS INVOKED FROM COMPILED CODE TO IMPLEMENT FUNCALL.    *
*  ON ENTRY, REGISTER 1 POINTS TO THE CURRENT PART OF THE STACK,      *
*  WHICH IS SET UP AS FOLLOWS:                                        *
*                                                                     *
*  +0 - LEFT UNUSED SO THIS MODULE CAN SAVE #11 HERE                  *
*  +4 - LEFT UNUSED SO THIS MODULE CAN SAVE #12 HERE                  *
*  +8 - LEFT UNUSED SO THIS MODULE CAN SAVE ALIST HERE                *
*  +C - LEFT UNUSED SO THIS MODULE CAN SAVE #14 HERE                  *
*  +10 - THE FIRST ARG TO FUNCALL, I.E. THE FUNCTION OBJECT           *
*  +14 ON - THE OTHER ARGS                                            *
*                                                                     *
*  REGISTER 2 CONTAINS THE NUMBER OF ARGS TIMES 4.  NOTE THAT         *
*  (REG2)+20 = THE SIZE OF THE STACK IN USE AT THE TIME OF ENTRY.     *
*                                                                     *
*  LOGIC:                                                             *
*                                                                     *
*  THIS ROUTINE ATTEMPTS TO RESOLVE THE FIRST ARG AS A COMPILED CODE  *
*  FUNCTION (THROUGH BEING A SUBR, A CLOSURE, A SYMBOL WITH A SUBR    *
*  PROPERTY, OR A FUNARG WHOSE FUNCTION COMPONENT IS ONE OF THE       *
*  ABOVE).  IF SO, CONTROL IS PASSED DIRECTLY TO THAT CODE, SETTING   *
*  THE ALIST IF NECESSARY, USING THE ARGS ALREADY ON THE STACK.       *
*  (IF &OPTIONAL OR &REST ARGS ARE DEFINED, THE ADDITIONAL ARGS       *
*  NEEDED ARE PLACED ON THE STACK, AFTER MAKING SURE WE HAVE ROOM     *
*  FOR THEM.)  IF NO SUCH DEFINITION EXISTS, THE ARGS ARE MADE INTO   *
*  A LIST AND CONTROL IS PASSED TO THE ZILAPPLY FUNCTION.             *
*                                                                     *
*  THE RETURN VALUE FROM THIS FUNCTION, OF COURSE, IS THE VALUE       *
*  OF THE FUNCTION CALL.                                              *
*                                                                     *
***********************************************************************
*                                                                     *
* HOPEFULLY SOME DAY SUBRS WILL BE STORED IN THE FUNCTION CELL OF THE *
* SYMBOL INSTEAD OF (OR IN ADDITION TO) THE PROPERTY LIST.  IF THIS   *
* IS SO, WE CAN KILL THE CALL TO ZGET AND THE NECESSITY OF INTERNING  *
* THE SYMBOL "SUBR" IN THIS MODULE.                                   *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
* Change activity:                                                    *
*                                                                     *
* 06/14/88 - Support for multiple values.                             *
*                                                                     *
***********************************************************************
*
         SPACE 1
ZILXFUN  #ZBEG NAME='ZILXFUN',SUBRS=ZILSUBR,                           X
               PTRS=ZLBPTRS,ATOMS=ZILATOM,LISTS=ZILLIST
         SPACE 1
         STM   #11,#14,0(#1)       SAVE REGS ON BOTTOM OF STACK FRAME
         LR    #12,#15             SET UP CURRENT BASE REGISTER
         DROP  #15
         USING ZILXFUN,#12
         LR    #11,#1              SET UP CURRENT STACK POINTER
         SPACE 1
*
* REQUIRED FIRST-TIME-ONLY CODE TO INTERN ATOMS USED BY THIS MODULE.
*
ZAPGO    NOP   AROUND              EXECUTE ONCE, THEN BRANCH.
         ST    #2,SAVE2            SAVE REGISTER 2
         LA    #1,ZLBPTRS          ADDRESS THE LIST OF POINTERS
         L     #15,ZLCSINT         GET ADDRESS OF ZILSINT
         LA    #0,20(#2,#11)       SET POINTER TO TOP OF STACK USED
         #BASR #14,#15             CALL ZILSINT
         L     #2,SAVE2            RESTORE REGISTER 2
         OI    ZAPGO+1,X'F0'       CHANGE NOP TO BRANCH NEXT TIME
AROUND   DS    0H
         SPACE 1
         L     #1,16(,#11)         PICK UP FUNCTIONAL ARG
         XR    #4,#4               SET ALIST POINTER = ZERO
         SPACE 1
CHKTYPE  DS    0H                  SEE WHAT WE GOT
         SPACE 1
         CLI   ##TYPE(#1),##SYMBOL
         BE    ZSYMBOL             IF SYMBOL, PROCESS SYMBOL
         CLI   ##TYPE(#1),##SUBR
         BE    ZSUBR               IF SUBR, PROCESS SUBR
         CLI   ##TYPE(#1),##CLOSUR
         BE    ZCLOSURE            IF CLOSURE, PROCESS CLOSURE
         CLI   ##TYPE(#1),##FUNARG
         BE    ZFUNARG             IF FUNARG, PROCESS FUNARG
         B     TRYAPPLY            ELSE JUST APPLY IT
         EJECT
ZSUBR    DS    0H                  IT IS A SUBR
         XR    #3,#3
         ICM   #3,7,##CAR+1(#1)    GET POINTER TO COMPILED CODE
         B     CALLIT
         EJECT
ZCLOSURE DS    0H                  IT IS A COMPILED CLOSURE
         XR    #3,#3
         ICM   #3,7,##CAR+1(#1)    GET POINTER TO COMPILED CODE
         L     #4,##CDR(,#1)       GET ALIST POINTER
         B     CALLIT
         EJECT
ZFUNARG  DS    0H                  IT IS AN INTERPRETED CLOSURE
         LM    #3,4,##VECDAT(#1)   GET POINTERS TO FUNCTION AND ENV
         L     #4,##CAR(,#4)       GET ALIST POINTER FROM ENVIRONMENT
         LR    #1,#3               CHECK THE FUNCTION OBJECT
         B     CHKTYPE             SEE WHAT WE GOT
         EJECT
ZSYMBOL  DS    0H                  IT IS A SYMBOL
         SPACE 1
         LA    #5,20(#2,#11)       SET POINTER TO TOP OF STACK USED
*                                  #1 = symbol
         L     #1,##PLIST(,#1)     Get property list pointer
         L     #0,ASUBR            #2 = symbol 'SUBR
         B     ZGETGO              Start looping
ZGETLOOP DS    0H
         LM    #14,#15,##CAR(#1)   Get CAR+CDR of property (sub)list
         CR    #0,#14              If (CAR subplist) is "EQ" to arg 2
         BE    ZGETWIN             then win. Else...
         LTR   #14,#14             If invalid property list (atomic)
         BM    TRYAPPLY            then no SUBR property
         L     #1,##CDR(,#15)       get CDR of property (sub)list
ZGETGO   DS    0H
         CR    #1,#10              Until end of property list (null)
         BNE   ZGETLOOP             continue processing
         B     TRYAPPLY            At end, no SUBR property found
ZGETWIN  DS    0H
         L     #1,##CAR(,#15)      Get CAR of sublist = value of prop.
         TM    ##TYPE(#1),##CODE   SUBR PROPERTY MUST BE CODEP
         BNO   TRYAPPLY            ELSE CANNOT BE CALLED, TRY APPLY
         XR    #4,#4               CLEAR ALIST POINTER
         B     CHKTYPE             AND SEE WHAT WE GOT
         EJECT
CALLIT   DS    0H                  PREPARE TO INVOKE COMPILED CODE
         SPACE 1
         OI    ZLCGCFLG,ZLCGCBLD   TELL CONS WE'RE SETTING #0
         SPACE 1
*
* #3 --> THE COMPILED CODE ITSELF
* #4 --> THE ALIST (ZERO IF NOT A CLOSURE)
*
* EXTRACT MINIMUM AND MAXIMUM NUMBER OF ARGS FOR THIS FUNCTION
*
         XR    #6,#6               CLEAR INSERT REGISTER
         XR    #7,#7               CLEAR INSERT REGISTER
         LA    #5,20(#2,#11)       SET POINTER TO TOP OF STACK USED
         IC    #6,4(,#3)           GET LENGTH OF MODULE IDENTIFIER
         LA    #15,5+3(#6,#3)      POINT PAST MODULE IDENTIFIER
         N     #15,=X'FFFFFFFC'    ROUNDING UP TO NEXT FULLWORD
         USING ZINT,#15            ADDRESS THE "ZINT" AREA IN MODULE
         TM    ZINFLAG2,ZINGLEXP   IF THIS IS A COMPILED LEXPR
         BO    LEXPR               THEN GO TO PROCESS IT AS A LEXPR
         IC    #6,ZINMINAR         GET MINIMUM NUMBER OF ARGUMENTS
         IC    #7,ZINMAXAR         GET MAXIMUM NUMBER OF ARGUMENTS
         CR    #6,#7               IF MINIMUM > MAXIMUM
         BH    BADFUNC             THEN ERROR - BAD FUNCTION
         SLA   #6,2                CONVERT MINARGS TO STACK FRAME SIZE
         CR    #2,#6               IF ARGS PASSED ARE FEWER THAN MIN
         BL    TOOFEW              THEN ERROR - TOO FEW ARGUMENTS
         SLA   #7,2                CONVERT MAXARGS TO STACK FRAME SIZE
         TM    ZINFLAG2,ZINGREST   IF THERE'S A &REST ARG
         BO    MANYOK               THEN IT'S OK TO HAVE MORE ARGS
         CR    #2,#7               OTHERWISE IF ARGS PASSED ARE MORE
         BH    TOOMANY             THEN THAT'S AN ERROR
MANYOK   DS    0H
*
* SET ACTUAL TOP-OF-STACK POINTER BASED ON MAXARGS
*
         LA    #6,20(#7,#11)       POINT TO END OF MAX ARGS
         TM    ZINFLAG2,ZINGREST   IF THERE'S A &REST ARG
         BZ    MAXNREST            THEN INCLUDE AN EXTRA STACK SLOT
         LA    #0,4(,#6)            SET TOP-OF-STACK POINTER FOR ARGS
         B     AFTNREST            ELSE INCLUDE FOR MAXARGS ONLY
MAXNREST LA    #0,0(,#6)            SET TOP-OF-STACK POINTER FOR ARGS
AFTNREST DS    0H
         #ZPDS (0)                 ERROR IF NO ROOM ON STACK
*
* IF MAXARGS > MINARGS, FILL IN OPTIONAL ARG SLOTS WITH "NOT SUPPLIED"
*
* #5  -->  WHERE ADDITIONAL ARGS WOULD HAVE TO BE STACKED
* #6  -->  WHERE TO STOP STACKING &OPTIONAL ARGS
*
OPTLOOP  DS    0H
         CR    #5,#6
         BNL   OPTEND
         ST    #13,0(,#5)          FILL WITH "UNSUPPLIED" INDICATOR
         LA    #5,4(,#5)
         B     OPTLOOP
OPTEND   DS    0H
*
* IF THERE IS A &REST ARG, CONS UP THE REMAINING ARGS AND DEPOSIT THE
* POINTER TO THE LIST ON THE STACK.
*
* #5  -->  ANY REST ARGS ON THE STACK, PAST END OF OPTIONALS
* #6  -->  WHERE TO STACK THE &REST ARGLIST
*
         TM    ZINFLAGS,ZINGREST
         BZ    NOREST
         LA    #0,4(,#5)           SET OUR OWN STACK POINTER FOR CONS
         #ZPDS (0)                 ERROR IF NO ROOM ON STACK
         LR    #15,#10             INITIALIZE &REST LIST TO NIL
RESTLOOP DS    0H
         ST    #15,0(,#5)          STORE WHAT WE HAVE SO FAR
         SH    #5,=H'4'            BUMP DOWN ONE STACK SLOT
         CR    #5,#6
         BL    RESTEND             UNTIL BOTTOM OF REST ARGS
         L     #1,0(,#5)           ARG 1 TO CONS = ARG FROM STACK
         LR    #2,#15              ARG 2 TO CONS = LIST SO FAR
         L     #15,ZLCCONS         GET ADDRESS OF CONS
         #BASR #14,#15             CALL CONS TO BUILD UP &REST LIST
         B     RESTLOOP            CONTINUE
RESTEND  DS    0H                  AT THIS POINT 0(#6) IS THE RESTLIST
         SPACE 1
NOREST   DS    0H
         SPACE 1
         NI    ZLCGCFLG,255-ZLCGCBLD RESET FLAG FOR CONS
         SPACE 1
         L     #14,ZLCFALST        GET CURRENT LEXICAL ALIST
         ST    #14,8(,#11)         SAVE IT ON STACK
         LTR   #4,#4               IF AN ALIST IS TO BE RESET,
         BZ    NOALIST             THEN...
         ST    #4,ZLCFALST          STORE ALIST FOR THIS EXECUTION
NOALIST  DS    0H
*                                  #2 IS NOT SET, SORRY
         LR    #15,#3              LOAD UP SUBROUTINE ENTRY POINT
         LA    #1,20(,#11)         POINT TO ARGUMENTS ON STACK
         #BASR #14,#15             CALL THE SUBROUTINE
         L     #14,8(,#11)         PICK UP SAVED ALIST FROM STACK
         ST    #14,ZLCFALST        RESTORE SAVED LEXICAL ALIST
*                                  RETURN VALUE IS IN REGISTER 15
ZRETURN  DS    0H                  RELOAD STACKED REGS AND RETURN
         SPACE 1
         LR    #1,#11
         LM    #11,#12,0(#1)
         L     #14,12(,#1)
         BR    #14
         EJECT
LEXPR    DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
* IF THIS IS A COMPILED LEXPR, THEN WHAT WE DO IS THIS:               *
*                                                                     *
*  SHIFT ALL THE ARGS ON THE STACK UP BY 1 STACK SLOT (4 BYTES)       *
*  AND STICK THE FIXNUM OBJECT REPRESENTING THE NUMBER OF ARGS        *
*  INTO THE FIRST SLOT, WHICH WILL BE THE ARG TO THE LEXPR.           *
*  THEN GO TO PASS CONTROL TO IT.                                     *
*                                                                     *
***********************************************************************
         SPACE 1
         LA    #6,20(,#11)         POINT TO FIRST ARG ON STACK
         LA    #0,4(,#5)           POINT PAST LAST ARG ON STACK PLUS 4
         #ZPDS (0)                 CHECK IF SPACE AVAILABLE, ERR IF NOT
         XR    #2,#2               INITIALIZE ARG COUNT TO ZERO
LARGLOOP DS    0H
         SH    #5,=H'4'            BUMP DOWN ONE STACK SLOT
         CR    #5,#6               UNTIL WE HIT BOTTOM
         BL    ENDLARGS            AT WHICH POINT WE'RE READY TO GO
         MVC   4(4,#5),0(#5)       BUMP ARG UP ONE STACK SLOT
         BCT   #2,LARGLOOP         BUMP ARG COUNT, LOOP 4 ARGS ON STACK
ENDLARGS DS    0H                  (NOTE #0 ALREADY POINTS TO T.O.S.)
         LCR   #2,#2               MAKE ARG COUNT POSITIVE
         CH    #2,ZLCSFTHI         If within small fixnum range
         BH    CONSFIX             then
         LA    #15,#SFT(#2)         point to small fixnum in table
         ST    #15,0(,#6)           STORE FIXNUM ON STACK AS FIRST ARG
         B     NOREST               GO TO INVOKE FUNCTION
CONSFIX  DS    0H                  Else have to cons up a new fixnum
         #MKAT FIXED               MAKE A FIXNUM FROM ARG COUNT
         ST    #15,0(,#6)          STORE FIXNUM ON STACK AS FIRST ARG
         B     NOREST              GO TO INVOKE FUNCTION
         EJECT
TRYAPPLY DS    0H
         SPACE 1
         OI    ZLCGCFLG,ZLCGCBLD   TELL CONS WE'RE SETTING #0
         SPACE 1
***********************************************************************
*                                                                     *
* INVOKE ZILAPPLY TO EXECUTE FUNCTION INTERPRETIVELY.                 *
*                                                                     *
* (ZILAPPLY FUNC ARGS) WHERE FUNC IS AT 20(,#11) AND ARGS IS THE REST *
* OF THE STACK ARGS LISTIFIED.                                        *
*                                                                     *
***********************************************************************
         SPACE 1
         LA    #5,20(#2,#11)       SET POINTER TO TOP OF STACK USED
         LA    #6,20(,#11)         POINT TO BOTTOM OF ARGS
         LA    #0,12(,#5)          RESERVE JUST ENOUGH STACK SIZE
         #ZPDS (0)                 ERROR IF NO ROOM ON STACK
         LR    #15,#10             INITIALIZE &REST LIST TO NIL
ARGSLOOP DS    0H
         ST    #15,0(,#5)          STORE WHAT WE HAVE SO FAR
         SH    #5,=H'4'            BUMP DOWN ONE STACK SLOT
         CR    #5,#6
         BL    ARGSEND             UNTIL BOTTOM OF REST ARGS
         L     #1,0(,#5)           ARG 1 TO CONS = ARG FROM STACK
         LR    #2,#15              ARG 2 TO CONS = LIST SO FAR
         L     #15,ZLCCONS         GET ADDRESS OF CONS
         #BASR #14,#15             CALL CONS TO BUILD UP &REST LIST
         B     ARGSLOOP            CONTINUE
ARGSEND  DS    0H                  AT THIS POINT 0(#6) IS APPLY ARG 2
         SPACE 1
         NI    ZLCGCFLG,255-ZLCGCBLD RESET FLAG FOR CONS
         SPACE 1
         ST    #13,24(,#11)        SET ARG 3 TO ZILAPPLY = (UNSUPPLIED)
         ST    #13,28(,#11)        SET ARG 4 TO ZILAPPLY = (UNSUPPLIED)
         L     #15,@ZILAPPL        GET ADDRESS OF ZILAPPLY
         LA    #1,16(,#11)         POINT TO ARGS ON STACK
         #BASR #14,#15             CALL ZILAPPLY
*
* Note: The branch to ZRETURN that used to be here has been removed
*       because it was a backward branch, which ZILVALS would interpret
*       as an indication that multiple values were to be discarded.
*
         LR    #1,#11              RELOAD STACKED REGS AND RETURN
         LM    #11,#12,0(#1)
         L     #14,12(,#1)
         BR    #14
         EJECT
BADFUNC  DS    0H                  ERROR - BAD FUNCTION
         LA    #1,BADFSTR
         LA    #2,BADFNAME
         B     ERROR
TOOFEW   DS    0H
         LA    #1,FEWSTR
         LA    #2,FEWNAME
         B     ERROR
TOOMANY  DS    0H
         LA    #1,MANYSTR
         LA    #2,MANYNAME
******** B     ERROR
         SPACE 1
ERROR    DS    0H
         NI    ZLCGCFLG,255-ZLCGCBLD RESET FLAG FOR CONS
         MVI   0(#2),C' '          CLEAR FUNCTION NAME TO BLANKS
         MVC   1(NAMELEN-1,#2),0(#2)
         XR    #15,#15             CLEAR INSERT REGISTER
         IC    #15,4(,#3)          GET LENGTH OF MODULE IDENTIFIER
         SH    #15,=H'16'          REDUCE BY LENGTH OF DATE/TIME INFO
         BNP   NONAME              IF NO NAME, SKIP
         CH    #15,=Y(NAMELEN)     NOT BLOODY LIKELY, BUT JUST IN CASE
         BNH   *+8                  LIMIT TO (NAMELEN) CHARACTERS
         LA    #15,NAMELEN
         BCTR  #15,0               REDUCE FOR EXECUTE
         EX    #15,MVCNAME         MOVE FUNCTION NAME TO MESSAGE
         LA    #2,1(#15,#2)        POINT PAST FUNCTION NAME
NONAME   DS    0H
         MVI   0(#2),C'.'          MOVE IN A PERIOD
         LA    #0,1(,#2)
         SR    #0,#1               GET LENGTH OF MESSAGE
         SH    #0,=H'4'            (END - START - PREFIX LENGTH)
         STCM  #0,7,1(#1)          STORE LENGTH IN FAKE STRING
         LR    #3,#1
         #ERR  0(#3),PREFIX=NO     SIGNAL ERROR
         SPACE 1
MVCNAME  MVC   0(*-*,#2),5(#3)     EXECUTED: MOVE FUNCTION NAME TO MSG
         SPACE 1
SAVE2    DS    A                   REGISTER SAVE
         SPACE 1
NAMELEN  EQU   64                  MAX LENGTH OF FUNCTION NAME SHOWN
         SPACE 2
         DS    0H,XL1
FEWSTR   DC    YL1(##STRING),AL3(FEWLEN)
FEWMSG   DC    C'ZIL1401 Too few arguments passed by FUNCALL to '
FEWNAME  DS    CL(NAMELEN+1)
FEWLEN   EQU   *-FEWMSG
         SPACE 1
         DS    0H,XL1
MANYSTR  DC    YL1(##STRING),AL3(MANYLEN)
MANYMSG  DC    C'ZIL1402 Too many arguments passed by FUNCALL to '
MANYNAME DS    CL(NAMELEN+1)
MANYLEN  EQU   *-MANYMSG
         SPACE 1
         DS    0H,XL1
BADFSTR  DC    YL1(##STRING),AL3(BADFLEN)
BADFMSG  DC    C'ZIL1403 Attempt to FUNCALL invalid ZIL function '
BADFNAME DS    CL(NAMELEN+1)
BADFLEN  EQU   *-BADFMSG
         SPACE 2
ZILSUBRS DS    0A
@ZILAPPL DC    V(ZILAPPLY)         ADDRESS OF SUBROUTINE
         DC    CL8'ZILAPPLY'
ZILSUBRE EQU   *
         SPACE 2
ZILATOMS DS    0A
ASUBR    DC    A(SUBR-ZILXFUN)     ADDRESS OF ATOM SUBR
ZILATOME EQU   *
ZILLISTS EQU   *
ZILLISTE EQU   *
         SPACE 2
SUBR     #AATM 'SUBR'
         SPACE 2
         LTORG
         SPACE 2
         #ZINT ,
         END
