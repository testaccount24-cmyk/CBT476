         TITLE 'LOGTEST - BUILT-IN ZIL 1.3 SUBROUTINE'
***********************************************************************
*                                                                     *
* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   *
*                     All rights reserved.                            *
*                                                                     *
***********************************************************************
*                                                                     *
* LOGTEST takes two integer arguments.                                *
*                                                                     *
* Common Lisp complete.                                               *
*                                                                     *
* It doesn't really pay to vectorize LOGTEST because it needs to      *
* return only T or NIL.  If the answer is T, you don't have to look   *
* any further.  Vector instructions always run to completion, and     *
* may therefore take longer to determine that something is T than     *
* a scalar version.                                                   *
*                                                                     *
***********************************************************************
LOGTEST  #ZBEG MINARGS=2,MAXARGS=2,NAME='LOGTEST'
*
         LM    #6,#7,0(#1)         LOAD ARGUMENTS
         CLI   ##TYPE(#6),##FIXNUM Is first arg a fixnum?
         BNE   NF1                 Branch to Not Fix 1
         CLI   ##TYPE(#7),##FIXNUM Is second arg a fixnum?
         BNE   F1NF2               Branch to Fix 1 Not Fix 2
F1F2     L     #2,##CDR(,#6)       GET VALUE 1
         N     #2,##CDR(,#7)       DO LOGICAL AND WITH VALUE 2
         LR    #15,#8              IF ANY ARE ONES, RETURN TRUE
         BNZR  #14                 IF ALL REQUESTED BITS ZERO, FALSE
FALSE    LR    #15,#10             It's FALSE, load it
         BR    #14                 Return to caller with FALSE
*
TRUE     LR    #15,#8              Load TRUE
         BR    #14                 Return to caller
*
F1NF2    CLI   ##TYPE(#7),##BIGNUM Is arg 2 a bignum?
         BNE   ERROR2              Arg 2 is invalid type
F1B2     TM    ##CDR(#6),X'80'     Is arg 2 fixnum negative?
         BO    TRUE                Always TRUE if arg 2 negative?
FP1B2    L     #5,##VECDAT(,#7)    Lowest word of bignum
         LPR   #5,#5               2's complement if negative
         N     #5,##CDR(,#6)       Check for matches with fixnum
         LR    #15,#8              Load TRUE in case we need it
         BNZR  #14                 Match found, return with TRUE
         LR    #15,#10             No match found, load FALSE
         BR    #14                 Return to caller with FALSE
*
B1NB2    CLI   ##TYPE(#7),##FIXNUM Is arg 2 a fixnum?
         BNE   ERROR2              Arg 2 is not a fixnum?
B1F2     TM    ##CDR(#7),X'80'     Is arg 2 fixnum negative?
         BO    TRUE                Always TRUE if arg 2 negative?
B1FP2    L     #5,##VECDAT(,#6)    Lowest word of bignum
         LPR   #5,#5               2's complement if negative
         N     #5,##CDR(,#7)       Check for matches with fixnum
         LR    #15,#8              Load TRUE in case we need it
         BNZR  #14                 Match found, return with TRUE
         LR    #15,#10             No match found, load FALSE
         BR    #14                 Return to caller with FALSE
*
NF1      CLI   ##TYPE(#6),##BIGNUM Is first arg a bignum?
         BNE   ERROR1              Arg 1 is invalid type
         CLI   ##TYPE(#7),##BIGNUM Is second arg a bignum?
         BNE   B1NB2               Go to Big 1 No Big 2
B1B2     TM    ##VECDAT(#6),X'80'  Test sign of bignum 1
         BO    BM1B2               Go to Big Minus 1 Big 2
         TM    ##VECDAT(#7),X'80'  Test sign of bignum 2
         BO    BP1BM2              Go to Big Positive 1 Big Minus 2
BP1BP2   LM    #4,#5,##VECDAT(#6)  Let's examine two lowest words first
         N     #4,##VECDAT(#7)     Any common bits in LS words?
         BNZ   TRUE                If so, return with TRUE
         N     #5,##VECDAT+4(#7)   Any common bits in second word?
         BNZ   TRUE                If so, return with TRUE
         L     #5,0(,#6)           Load type and length of arg 1
         CL    #5,0(,#7)           Compare bignum lengths (types same)
         BNH   OKLEN1              We want shorter length of two args
         L     #5,0(,#7)           Load length of bignum 2
OKLEN1   N     #5,=X'00FFFFFF'     Mask out bignum type-byte
         CH    #5,=H'8'            Is shorter bignum only 2 words?
         BE    FALSE               If so, we previously found no match
         LA    #3,12               Offset of first word to check
         LA    #4,4                Word increment amount for BXLE
LOOP1    L     #2,##VECDAT-4(#3,#6) Load word of bignum 1
         N     #2,##VECDAT-4(#3,#7) Check for match bits in bignum 2
         BNZ   TRUE                Found bit match, return with TRUE
         BXLE  #3,#4,LOOP1         More words to check?
         LR    #15,#10             No matches found, load FALSE
         BR    #14                 Return to caller
*
BP1BM2   LR    #5,#7               Switch pointers in regs
         LR    #7,#6                so same code for pos - neg
         LR    #6,#5                bignum combination can be used
         B     BM1BP2              Continue with code for other case
*
BM1B2    TM    ##VECDAT(#7),X'80'  Test sign of bignum 2
         BO    TRUE                Two negative integers always match
BM1BP2   L     #3,0(,#7)           Load type and length of arg 2
         CL    #3,0(,#6)           Compare bignum lengths (types same)
         BH    TRUE                Leading 1 in big1 will always match
         LA    #2,##VECDAT(,#6)    Start of data on negative bignum
         N     #3,=X'00FFFFFF'     Mask out the type-byte
         LA    #4,=X'80'           Compare field for neg sign and 1st b
         LA    #5,1                Length of 1-byte compare field
         CLCL  #2,#4               Find rightmost 1 in neg bignum
         BNH   FALSE               No 1's in big1 within length of big2
         N     #2,=X'FFFFFFFC'     Point to word containing rightmost 1
         L     #3,0(,#2)           Load first nonzero word
         N     #3,=X'7FFFFFFF'     Remove sign bit if LS word of bignum
         LCR   #3,#3               Complement word with rightmost 1
         SLR   #2,#6               Absolute address to bignum offset
         N     #3,##VECDAT-4(#2,#7) Common bits in wrd w/rigthmst 1?
         BNZ   TRUE                Yes, return with TRUE
         XR    #5,#5               Clear for loading shorter bignum len
         LA    #4,4                Word increment for loop
         ICM   #5,B'0111',1(#7)    Load length of arg 2 bignum
         BXH   #2,#4,FALSE         No match at end of short, FALSE
LOOP2    L     #3,##VECDAT-4(#2,#6) Load next word
         X     #3,=X'FFFFFFFF'     Flip the bits (2's-complement)
         N     #3,##VECDAT-4(#2,#7) Match the bits
         BNZ   TRUE                Match?  Then return with TRUE
         BXLE  #2,#4,LOOP2         More words to check for match?
*
         LR    #15,#10             No matches found, load FALSE
         BR    #14                 Return with FALSE
*
         DROP  #15
         USING LOGTEST,#3
         SPACE 1
ERROR1   LR    #3,#15
         #ERR  'Argument 1 to LOGTEST not an integer - ',(#6)
ERROR2   LR    #3,#15
         #ERR  'Argument 2 to LOGTEST not an integer - ',(#7)
         SPACE 1
         LTORG
         END
