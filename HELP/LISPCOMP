)F Function -

   The LISPCOMP CLIST invokes the ZIL LISP compiler. Unlike other
   compiler CLISTs you may be familiar with, LISPCOMP creates a LOAD
   module, suitable for loading into an interactive ZIL LISP session or
   linkediting into a ZIL LISP program.

   Three kinds of source code entities can be compiled:  FUNCTIONs,
   MODULEs, and PROGRAMs.  You must specify which type of entity you
   are compiling; the default is MODULE.  For more information about
   ZIL compilation, see member $COMPILE of the ZIL documentation
   library 'PROGLIB.ZIL.TEXT'.

   LISPCOMP calls the ZIL compiler to create assembler source code,
   calls the assembler to assemble the code into an object module,
   and then calls the linkage editor to create a load module (NCAL
   unless PROGRAM was specified).  The data sets created to hold
   intermediate output from these processors, as well as listing output
   from these processors, are given "temporary" names by default.

)X Syntax -

   LISPCOMP 'dataset-name'  (of type ".LISP")
            FUNCTION / PROGRAM / MODULE
            NAME('name')
            LOAD(--.LOAD) / NOLOAD
            PRINT(--.ZILLIST/*) / NOPRINT/ NOPRINT
            ASM(--.ASM) / NOASM
            MACROS('macro file list')
            SUBRLIB('load library list')
            ACSIZE('size')
            CSSIZE('size')
            PDSIZE('size')
            VSSIZE('size')
            DEBUG / NODEBUG
            TRANSDEBUG / NOTRANSDEBUG
            NEW
            OLD

   Required:  dataset-name.
   Defaults:  (assuming dataset-name is "defaultds.LISP")
              LOAD(defaultds.LOAD)
              MODULE
              NAME     defaults to member name of "dataset-name"
                       or member name of LOAD
              PRINT(*)
              ASM(ZIL.$ZILTEMP.ASM)
              MACROS   defaults to null
              SUBRLIB  defaults to null
              ACSIZE   defaults to null
              CSSIZE   defaults to null
              PDSIZE   defaults to null
              VSSIZE   defaults to null
              NODEBUG
              NOTRANSDEBUG

   Examples:  LISPCOMP ZIL(FACT) FUNCTION
              compiles your ZIL.LISP(FACT) as a FUNCTION into your
              ZIL.LOAD(FACT).

              LISPCOMP 'ABC1234.THEIR.LISP(STUFF)' +
                       LOAD(MY(ZSTUFF))
              compiles 'ABC1234.THEIR.LISP(STUFF)' as a MODULE into
              your_userid.MY.LOAD(ZSTUFF).

   Alias:     none.

   Notes: If NOASM is specified, NOLOAD is assumed.

          If neither dataset-name nor LOAD has a member name
          specified, NAME is required.

          The assembler listing goes to prefix.ZIL.$ZILTEMP.ASMLIST,
          and the object module goes to prefix.ZIL.$ZILTEMP.OBJ.

   Note:  The defaults for ACSIZE, CSSIZE, PDSIZE and VSSIZE are the
          ZIL system defaults for these parameters, which may be found
          in member $PARM of 'PROGLIB.ZIL.TEXT'.

)O Operands -

)P dataset-name

  The source dataset name must have the final qualifier of ".LISP".
  When omitted, this qualifier is assumed.  Specify either a fully
  qualified name in single quotes or just the "midsection" of the name
  without quotes; your TSO prefix will then be assumed.  Both the
  ".LISP" and ".LOAD" datasets must currently exist on disk.

  When the input is from a partitioned dataset, the dataset name
  provided must contain the name (in parentheses, within any quoting)
  of the member to be processed.

))FUNCTION

  Specifies that the LISP source program is to be compiled as a
  "function".

  When you compile a FUNCTION, you create a load module representing a
  single LISP function, which may be brought into a ZIL session via the
  autoload process automatically, or linkedited with a ZIL program.
  The input source must contain a definition for a function with the
  specified name.

))MODULE

  Specifies that the LISP source program is to be compiled as a
  "module".  This is the default when neither FUNCTION, MODULE, nor
  PROGRAM is specified.

  When you compile a MODULE, you create a load module which, when
  executed (by specifying its name as a function of no arguments),
  causes all the code to be loaded into the ZIL system in compiled
  format, including function definitions.  The input source must not
  contain any definition for a function with the same name as the
  module specified.

))PROGRAM

  Specifies that the LISP source program is to be compiled as a
  "program".  When this is specified, external references are
  resolved in the linkedit from the system ZIL library, as well
  as any SUBRLIB libraries that may have been specified.

  When you compile a PROGRAM, you create a load module which can be
  executed as a program at the operating system level (e.g. in JCL on
  the // EXEC statement, or under TSO via CALL or a similar command),
  provided that the ZIL system library, 'PROGLIB.ZIL.LOAD',
  is present as a STEPLIB or equivalent.  The ZIL interpreter and
  compiler are examples of ZIL PROGRAMs.  The input source must not
  contain any function definition with the same name as the program
  specified in the input source.

  Note:  It is NOT recommended that you create ZIL PROGRAMs, since
         you will not benefit from any maintenance to ZIL system
         functions, and you may even end up with incompatible code.

))NAME('name')

  Specifies the name of the function, module or program that is
  being compiled, as far as the compiler is concerned.  This
  name should be identical to the name of the load module being
  created, but need not match the source member name (if any).

  If NAME is omitted, it defaults as follows:

  (1) If a member name was specified on the LOAD parameter,
      that name is used.

  (2) If a member name was specified on the positional dataset-name,
      that name is used.

  (3) If neither of the above is the case (which means that the
      input dataset is sequential), LISPCOMP issues an error message
      and terminates.  You are required to specify the NAME operand
      in that case.

))PRINT()

  By default, output from the ZIL LISP compiler is directed to the
  terminal.  If you wish, you may specify a dataset name as the value
  of the PRINT operand.  If the name is not fully qualified, a default
  qualifier of ".ZILLIST" will be appended to it; if you wish to
  specify a fully-qualified name, you must enclose it in TRIPLE
  apostrophes.

  NOPRINT overrides PRINT.

  PRINT does not affect output from the assembler or linkage editor.
  The assembler listing always goes to prefix.ZIL.$ZILTEMP.ASMLIST,
  and the object module always goes to prefix.ZIL.$ZILTEMP.OBJ.

))NOPRINT

  NOPRINT may be specified (without a value) to suppress all
  listing output from the ZIL compiler.

  NOPRINT does not affect output from the assembler or linkage editor.

))LOAD()

  The load module produced will be stored in the dataset named by
  this parameter, unless NOLOAD has been specified.  If LOAD is not
  specified, the default name will be that of the input dataset with
  ".LISP" replaced by ".LOAD".

  The LOAD dataset must be an EXISTING load module PDS.  If no member
  name is specified, then either the value of the NAME operand (if
  specified) or the member name specified on the positional
  'dataset-name' operand will be used.  If none of these is present, an
  error message is issued and processing is terminated.

))NOLOAD

  NOLOAD may be specified (without a value) to suppress the assembly
  and linkedit of the output of the ZIL compiler, so that no load
  module is produced.  The assembler source code output of the compiler
  is still generated, however, unless NOASM is specified.

))ASM()

  The ZIL LISP compiler produces as output a file of assembler language
  source code, which is then fed to the assembler.  By default, this
  dataset is named 'prefix.ZIL.$ZILTEMP.ASM'.  You may override this
  name via the ASM parameter.

  If the name is not fully qualified, a default qualifier of ".ASM"
  will be appended to it; if you wish to specify a fully-qualified
  name, you must enclose it in TRIPLE apostrophes.  The dataset may be
  sequential or partitioned; if it is partitioned, you must specify a
  member name.

  NOASM overrides ASM.

))NOASM

  You may specify NOASM (without a value) to suppress the generation
  of the assembler source file by the ZIL compiler.  In this case,
  assembly and linkedit are bypassed (as for NOLOAD).

))MACROS('macro file list')

  A list of datasets containing LISP source code (e.g. macro
  definitions) to be loaded into the ZIL compiler.  These are
  sequential datasets or PDS members, and must all have the same DCB
  attributes (the preferred format is RECFM=VB, LRECL=255).  This
  operand defaults to null, but must be specified with triple quotes if
  used.  Examples:

    MACROS('''ABC1234.A.LISP(FOO)''')
    MACROS('''ABC1234.A.LISP(FOO)'' ''DEF5678.Z.LISP(BAR)''')
    MACROS('FOO1.LISP FOO2.LISP')                  ... userid prefixed

))SUBRLIB('load library list')

  A list of load module libraries to use when compiling (and also to
  resolve external references at linkedit time when compiling a
  PROGRAM).  The libraries are assumed to contain compiled ZIL code.
  This operand defaults to null, but must be specified with triple
  quotes if used.  Examples:

    SUBRLIB('''ABC1234.A.LOAD''')                   ... one library
    SUBRLIB('''ABC1234.A.LOAD'' ''DEF5678.Z.LOAD'') ... two libraries
    SUBRLIB('MY.LOAD MY.OTHER.LOAD')                ... userid prefixed

))DEBUG

    Specifies that the ZIL compiler run in "debug mode".  The assembler
    code produced by the compiler will be the same, but a great deal of
    internal information will be dumped to the compilation listing.
    It is recommended that PRINT(datasetname) be specified when using
    this option.  The default is NODEBUG.

))NODEBUG

    Specifies that the ZIL compiler run in its normal mode, without
    "debug mode" specified.  This is the default.

))TRANSDEBUG

    Specifies that you wish to see the output of the source
    transformation phase of the ZIL compiler.  This output is always
    directed to the terminal.

    The default is NOTRANSDEBUG.  Note that the ZIL compiler always
    invokes source transformations, regardless of whether you specify
    TRANSDEBUG or NOTRANSDEBUG.

))NOTRANSDEBUG

    Specifies that you do not care to see the output of the ZIL
    compiler's source transformation phase.  This is the default.
    Note that the ZIL compiler always invokes source transformations,
    regardless of whether you specify TRANSDEBUG or NOTRANSDEBUG.

 ======================================================================

)I LISPOPTS

