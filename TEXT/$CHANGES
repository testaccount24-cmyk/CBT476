************************************************************************
*                                                                      *
*                      ZIL 1.3 - CHANGES FROM 1.2                      *
*                                                                      *
************************************************************************

========================================================================

 The most significant changes in this edition of ZIL are:

 * Full Lexical Scoping

 * Double Precision Floating-Point Arithmetic

 * Dropping of Support for LISP 1.5 Syntax

 * Across-the-board Performance Improvement of More than 10%

========================================================================

I.  NEW FEATURES OF ZIL 1.3

 LEXICAL SCOPING

 By far the most important change in ZIL 1.3 is FULL support of
 Common-LISP-style LEXICAL SCOPING.  This includes comprehensive
 handling of SPECIAL declarations in BOTH interpreted and compiled code.

 All ZIL code should be checked for variables that are not locally
 bound, and the appropriate declarations should be added.

 In particular, SPECIAL variables are NOT captured by lexical closures.
 This means that the behavior of some code will change if you do not
 declare your variables correctly!

 Furthermore...

    ZIL 1.3 code is INCOMPATIBLE with ZIL 1.2 code because:

    (a) Many miscellaneous changes have been made to the structure
        of LISP objects and load modules.

    (b) Many common functions have different definitions - this has
        been done in cases where the ZIL 1.2 definition did not agree
        with Maclisp or Common LISP.

    (c) Some ZIL 1.2 functions have disappeared, been renamed, or
        been replaced by new functions.

    (d) All support for LISP 1.5 syntactic constructs has been DROPPED.

    Your ZIL 1.2 LISP source code should run just as well interpretively
    under ZIL 1.3 as long as it does not use the old LISP 1.5-style
    syntax or have dependencies on the function definitions that work
    differently now; most code will not run into a problem unless you
    have been depending on features peculiar to ZIL.

    However, ALL compiled code must be recompiled to run under the
    new ZIL.

    Some LISP objects may print out slightly differently.

    If you need to run code under both versions of ZIL, you can use the
    "read conditionalization" facility in your source.  Any form
    preceded by #+ZIL13 (or #-ZIL12) will be read under ZIL 1.3 only;
    any form preceded by #-ZIL13 (or #+ZIL12) will be read under ZIL 1.2
    only.  Note, however, that this will NOT enable LISP 1.5 syntactic
    constructs to be read; the ZIL 1.3 reader will not handle the $$
    construct correctly EVEN if it is inside a #+ZIL12 or #-ZIL13.

========================================================================

 DOUBLE PRECISION

    ZIL 1.3 now has two kinds of floating-point numbers ("flonums"):
    "single-float" and "double-float".  These correspond to the
    single-precision and double-precision formats of the IBM/370
    architecture.

    Floating-point numbers read into ZIL 1.3 are DOUBLE-PRECISION
    by default.  This means numbers with a decimal point and a
    fractional part with no exponent marker, or numbers with an
    exponent marker of "E" or "D".

    Numbers with an exponent marker of "S" or "F" are read in as
    single-precision flonums.

    The ZIL 1.3 printer will print double-precision flonums without
    exponent markers, or with a "D" exponent marker if the number
    needs to be printed using scientific notation.  Single-precision
    flonums will be printed with an "F" exponent marker.

    Extended precision is not supported.

    All transcendental functions now return double-precision results
    when they are passed either integer or double-float arguments;
    they will return single-precision values only when their arguments
    are single-floats.

    In arithmetic functions, conversion rules are as follows:

     integer op single-float  -->  single-float
     integer op double-float  -->  double-float
     single-float op double-float  --> double-float

    The FLOAT function takes an optional second argument, which is
    a flonum of the type desired for the result.  If this argument
    is omitted, FLOAT obeys the rules pertaining to transcendental
    functions described above.

    Single precision is less expensive than double precision, both
    in CPU time and in memory usage.  However, double precision
    tends to be more useful for many applications.  Note that some
    improvements in accuracy may be observed in ZIL 1.3 single
    precision operations as well.

========================================================================

 READER CONTINUATION PROCESSING

    The ZIL 1.3 reader and printer support a continuation character
    feature:  an object which occupies more than one line will be
    printed in pieces, with the ZIL continuation character (the cent
    sign) in the final position of each line.  The reader, when it sees
    the cent sign in the final position of a line, will process the
    characters on the following line as part of the object currently
    being read in, without any newlines.  (This does not apply to data
    read in from the terminal, although the continuation characters may
    appear when an object is printed out on the terminal.)

    With this feature, it is possible to print long strings, bignums,
    etc. out to a file and read them back in.

    For fixed-length records, the cent sign will be treated as a
    continuation character if it occupies the last data column.  For
    example, a RECFM=FB LRECL=80 data set will recognize the cent sign
    as a continuation character if it is in column 80 for unnumbered
    data sets, or column 72 for numbered data sets.

    For variable-length records, the cent sign will be treated as a
    continuation character if it occupies the last column of any record,
    even if it is not the maximum length.

    The cent sign will NOT be treated as a continuation if it is
    preceded by a backslash, or if it is part of a comment field or
    otherwise not part of a Lisp object being read in.

========================================================================

II.  NO LONGER AVAILABLE IN ZIL 1.3

    A. OBSOLETE FUNCTIONS DELETED

       (Any of the below may or may not be available in the system.
       Finding one of them still working is NOT to be interpreted
       as an indication that you can get away with using it in
       ZIL 1.3, as it can be removed AT ANY TIME.  Furthermore,
       you will not get any sort of a warning that it is not
       available; the ZIL system will treat the feature as any
       other undefined function name would be treated.)

       ALIST, CSET, and CSETQ are no longer defined in ZIL 1.3.
       ALIST has been replaced by the new function SPECIAL-ALIST,
       reflecting ZIL 1.3's support for Common LISP compatible
       lexical scoping rules.

       The "%" compile-time directive is obsolete.
       Use (EVAL-WHEN (COMPILE) ...) instead.

       The special significance of (DEFUN NIL ...) to the compiler
       has been removed.  It is now an error to attempt to define
       a function with a name of NIL.

       TRACEALL:
       The capability of being able to trace ALL ZIL function calls
       has been removed, due to a completely new implementation of
       the TRACE facility.  Since no other LISP implementations
       (except the LISP 1.5 interpreter) have it, and it usually
       is good for nothing except reams of unusable output,
       the facility has been deleted.  In the future there should
       be Common LISP compatible debugging facilities like EVALHOOK,
       hopefully.

    B. The following syntactic features have been REMOVED from
       ZIL 1.3, and will cause incorrect output in the reader:

       Support for the nnnB and nnnO syntaxes for binary and octal
        integer constants (use #Bnnn and #Onnn)
       Support for the "$$" delimited symbol (use |...| or backslash)

    C. The following functions and facilities are still available
       under ZIL 1.3, but are officially obsolete,
       and will some day be removed:

       DEFINE and DEFLIST (the LISP 1.5 functions)
       ZCDR (retained for now, identical to CDR - both CDR and ZCDR
        compile into 1-instruction sequences, so ZCDR is no longer
        required, although ZCAR still is).

    D. Symbols whose print names begin with a leading colon (known
       as "keywords" in ZIL, although they are not "keywords" in the
       Common Lisp sense) always evaluate to themselves.  As such,
       they cannot be used in LAMBDA lists or be assigned values
       via SETQ.

III. FUNCTIONS REDEFINED OR RENAMED

    A. PRINT, PRINTC

       Now equivalent to TERPRI followed by PRIN1/PRINC and a space,
       not PRIN1/PRINC followed by TERPRI.

       For better control over output, use of FORMAT is recommended.

    B. LOAD

       Now takes keyword arguments as documented in the Common Lisp
       guide.  The old NOPRINT operand is not supported (although
       it is still supported by READ-EVAL-PRINT).

    C. TOSTRING

       Formerly called MKSTRING or MAKE-STRING.  The latter names are
       now undefined, due to conflicts with the Common Lisp
       MAKE-STRING function.  When this name becomes reused, it will
       be the Common Lisp definition that is used for it.

    D. APPLY, OPEN, CLOSE, READCH more like maclisp
       PEEKCH, TYI, TYIPEEK...


IV. NEW FUNCTIONS and FORMS

    SPECIAL-ALIST - replaces ALIST
    TIME - allows you to measure the elapsed time of a given form
    LOCALLY - allows you to associate declarations with a form

    Many more will be added as time goes on.


V.  UPWARD COMPATIBLE CHANGES TO OLD FUNCTIONS

    See the individual descriptions for details.

VI.  IMPROVED USABILITY FEATURES

    B. The ED function, when specified with no arguments, puts you
       into ISPF EDIT on the temporary dataset used to store
       function definitions when you type (ED 'functionname).
       Also, if ISPF services are not available, ED will tell you
       gently but firmly why you can't use it.


VII. RESTRICTIONS REMOVED

    A. The ZIL 1.3 compiler never generates output that fails to
       assemble due to addressability errors.  You no longer need to
       include (DECLARE (BASEREG ...)) declarations when compiling long
       modules (in fact, the compiler no longer processes this
       declaration).  The compiler now determines the addressability
       requirements of the code it is compiling and generates the
       additional base registers itself.  No programmer action is
       needed.

       Note, however, that a function whose generated object code is
       longer than 16K bytes still cannot be compiled (unless it is
       segmented - see (DECLARE (SEGMENT ...))).

    B. TSO commands that invoke ZIL programs can be invoked from
       within other ZIL programs (via the TSO function).  ZIL
       programs can also be invoked under other ZIL programs via
       the INVOKE function.  This means running the compiler under
       the interpreter, OPS5 under the compiler, etc.  The programs
       remain completely separate and do not interact with each other,
       as if they weren't even LISP programs.

    C. New output files now get created with BLKSIZE=6160 rather
       than 3120, owing to the virtual storage constraint relief
       of having VSS above the line.  This will improve I/O
       performance.


VIII.  INTERNAL ENHANCEMENTS

    A. The garbage collector can now collect objects defined in
       compiled modules as inline objects.  This means that
       in-line compiled lists will no longer cause lossage
       (at least in theory) when a GC takes place.  This is still
       NOT a recommendation to use such things!!!

    B. Vector/string space is now allocated above the 16MB line.
       As a result of this improvement, the default size of
       vector/string space has been increased to 1 megabyte.

    C. A "small fixnum table", containing the integers -1 through 255,
       is built at initialization time.  Most references to fixnums
       in this range, and many functions which return values in this
       range, will now use pointers into this table rather than
       consing up fresh fixnums.  This will reduce the frequency of
       garbage collections and speed up some applications, particularly
       those which process character objects.

    D. The internal format of symbols has changed; symbol headers are
       constructed in vector/string space rather than CONS space,
       and contain cells which will be used for further enhancements
       to ZIL.  Loading of compiled code has been optimized by
       storing the symbol hash code in the load module to reduce the
       instruction path length for internment of compiled symbols.

    E. Many miscellaneous enhancements have been made to the compiler
       to generate better code sequences for commonly used functions.
       In general, performance is faster by 10% or more.  However,
       individual garbage collections and function loads may take
       slightly longer in some cases than before.  Yet for most
       applications, the total time will be less, even including
       loading and GC times.


IX. MISCELLANEOUS CHANGES

    A. ...

     And lots more - just print off this help library and read it.

