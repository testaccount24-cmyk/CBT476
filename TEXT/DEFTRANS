
Macro: DEFTRANS

Syntax:   (DEFTRANS fun1 fun2)

 fun1     (required, not evaluated) - a symbol that names a function.
 fun2     (required, not evaluated) - a symbol that names a function.

    or:   (DEFTRANS fun1 arglist2 &rest forms)

 fun1     (required, not evaluated) - a symbol that names a function.
 arglist2 (required, not evaluated) - a list of either 1 or 3 symbols.
 form     (optional, not evaluated) - any LISP objects.

Returns:

 A compiler transform function for fun1.

Processing:

 DEFTRANS defines a compiler transform function.  The proper way to
 use this is in compiler input inside an (EVAL-WHEN (COMPILE) ... )
 form, since it assigns the symbol specified by fun1 the compiler
 transform function as the value of the COMPILER-TRANSFORM property.

 In the case of the (DEFTRANS fun1 fun2) syntax, the function named
 by fun2 becomes the compiler transform for fun1.

 In the case of the (DEFTRANS fun1 arglist2 &rest forms) syntax,
 a compiler transform function is constructed from arglist and forms
 as follows:

  If arglist2 has 3 elements, the function is
    (LAMBDA arglist2 . forms).

  If arglist2 has 1 element, the function is
    (LAMBDA (arg1 arg2 arg3) . forms), where arg1 is the single
  element of arglist2, and arg2 and arg3 are generated symbols.

 A compiler transform is a function of 3 arguments which is invoked
 by the compiler during the phase in which it transforms function calls
 for the purpose of optimization.  The function ZILCOTRN may be used
 to try out the transformation.

 Transforming a form consists of the following steps:

 (1) Fully macroexpand the form (using MACROEXPAND).
 (2) If the result is an atom, do the appropriate processing
     on the atom (if any).
     If the result is a function call, transform each argument
     to the function call via ZILCOTRN.
     If the result is a special form, transform the arguments
     (where appropriate) via ZILCOTRN.
 (3) If the CAR of the form is a LAMBDA expression,
     transform the contents of the LAMBDA expression and
     apply transformations associated with LAMBDA to the form.
     If the CAR of the form is a symbol, and it has an
     associated compiler transform function, apply that
     function to the result of (2).
     If the CAR of the form does not have an associated
     compiler transform function, we are finished.
 (4) If the result of (3) is EQUAL to the result of (2),
     we are finished.  Otherwise, repeat the process
     from (1).

 A compiler transform function receives 3 arguments:

 (1) the complete form being transformed (the CAR being the
     function name)
 (2) the "environment", in whatever form that may take
 (3) a list of keywords describing the context in which the
     form is being evaluated.  If this list is null, the
     form is being evaluated for effect only.  Possible
     keywords that may be present include:

       :value        will be used as a return value (or values)
       :argument     will be used as an argument to a function
       :setq         will be used to set a variable
       :predicate    will be used in a test for NIL

     ...and others...

     More than one of the above keywords may be present.

 Note: As a special hack for callers of ZILCOTRN that wish to
       pass a LAMBDA expression, ZILCOTRN (but not its lower-
       level functions) will transform a LAMBDA-expression
       as well as an evaluable form.

 The ZILCOTRN function takes 1 required argument - the form to
 be transformed - and 1 optional argument, which (if non-NIL)
 activates "debug mode" so that you can see each step of the
 transformation.  To get all the compiler's transformations
 into your interpretive session, execute (ZILCOINT) before
 using this function.

 The ZILCOCON function can be used in compiler transformations
 to see if a LISP object identifies a "constant" (i.e. is
 self-evaluating).  It returns NIL if not, and a CONS whose CAR
 is the value of the constant if it is (the CDR is reserved for
 future enhancements).

Errors signaled:

 None.  Errors signalled during compiler transform function execution
 do not abort ZILCOTRN, but cause transformation to be nullified.
 In other words, the form will remain untransformed.

Notes:

 Remember, you MUST enclose DEFTRANS inside (EVAL-WHEN (COMPILE) ...)
 for it to work in a compiled source code file.

