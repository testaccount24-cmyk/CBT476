
FLAVORS is an object-oriented programming paradigm familiar to users of
Lisp Machine LISP and NIL.  The ZIL implementation is nearly identical
to the one described in the Lisp Machine manual, plus one or two
NIL-compatible features.  (See "References" at the bottom of this item.)

As of 11/23/88, all of the features in the MIT AI lab paper on
FLAVORS are implemented except for:

The function LEXPR-FUNCALL-SELF
The function RECOMPILE-FLAVOR
The macro COMPILE-FLAVOR-METHODS
The variable *FLAVOR-COMPILATIONS*
The DEFFLAVOR options :ORDERED-INSTANCE-VARIABLES,
                      :SELECT-METHOD-ORDER,
                  and :DOCUMENTATION.
(DEFFLAVOR will issue a warning if any of these are specified, then
will ignore them and proceed to define the flavor without errors.)


These may be available in the near future as the system is enhanced.

In addition, the following should be noted:

(1) Since ZIL does not currently have a package system, functions and
    variables residing in the SI package occur without the package
    prefix, e.g. SI:DESCRIBE-FLAVOR is implemented as DESCRIBE-FLAVOR.

(2) "Keywords" in ZIL are any symbols the first character of whose
    print name is a colon (since there is no "keyword package" in ZIL).
    If a symbol is a "keyword", both the interpreter and the compiler
    recognize it as self-evaluating UNLESS there is a currently
    active LAMBDA-binding for the symbol.  The compiler may issue a
    warning message when it sees an unbound keyword symbol; this
    warning message may be ignored if you use keywords in the
    traditional LISP manner.

To use FLAVORS in ZIL under the interpreter, type the following
(or add it to your INIT file):

 (FLAVORS)

This defines all the FLAVORS functions and macros, and defines
VANILLA-FLAVOR and all of its methods.  The :SEND-IF-HANDLES,
:OPERATION-HANDLED-P, :SXHASH and :EVAL methods, available in the NIL
implementation of FLAVORS, are also defined here for VANILLA-FLAVOR.

Note:  It is actually not necessary to include this in an interpreted
       code file, since any use of a FLAVOR function will cause
       FLAVORS to be brought in automatically via autoloading.

To use FLAVORS in compiled code, include the following in your
source file:

 (EVAL-WHEN (COMPILE LOAD EVAL)
  (FLAVORS)
 )

You don't have to specify all 3 EVAL-WHEN times.  COMPILE lets the
compiler recognize the FLAVORS macros (DEFFLAVOR, DEFMETHOD, etc.)
when it encounters them, so that it can compile them correctly.  LOAD
specifies that the FLAVORS functions and macros are to be available when
the code is brought in under the interpreter, so that the user can use
FLAVORS functions there as well; if the code is designed to use FLAVORS
internally only, LOAD need not be specified (as long as the autoloading
system is capable of bringing in FLAVORS dynamically).  EVAL is
necessary only when you run the source code directly under the
interpreter instead of the compiled version (perhaps for debugging).

Note that in ZIL, the SEND and DESCRIBE functions are part of
the FLAVORS system, and cannot be used unless you bring in FLAVORS
in one of the above ways.

Additional ZIL-only features:

 *FLAVOR-MSGLEVEL*  (variable)

This variable controls the display of messages issued by FLAVORS
as it is defining, instantiating, and initializing components of
the FLAVOR system.  Many of these messages would be displayed the
first time a flavor is instantiated (e.g. via the first
MAKE-INSTANCE).
Has one of the following values:

  0  -  allow all messages to appear.
  1  -  suppress informational messages.
  2  -  suppress informational and warning messages.
  3  -  suppress informational, warning and error messages.

The default for this variable is 1.

Note:

Since COMPILE-FLAVOR-METHODS is not implemented yet, a module that uses
FLAVORS compiled will have its combined method functions constructed
interpretively at flavor instantiation time.  However, the individual
(non-combined) methods built by DEFMETHOD will be compiled; in fact, the
GET-HANDLER-FOR function may return a compiled code object rather than a
symbol as a method name.

An advantage of this implementation is that wrappers take effect at
definition time; execution of the DEFWRAPPER form causes automatic
regeneration of methods for the associated wrapper.

There are some gray areas in the FLAVORS documentation about the
interaction of component flavors and included flavors, and about
the contents of the default-init-plist.  ZIL's implementation may
or may not differ in certain subtle respects where these are not
clearly laid out in the Lisp Machine documentation.


References:


"Flavors: Message Passing in the Lisp Machine"
A.I. Memo No. 602
D. Weinreb, D. Moon - MIT Artificial Intelligence Laboratory, Nov. 1980

NIL Reference Manual
MIT/LCS/TR-311
G. Burke, G. Carrette, C. Eliot
MIT Laboratory for Computer Science, January 1984

