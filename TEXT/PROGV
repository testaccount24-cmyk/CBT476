
Macro: PROGV

Syntax:   (PROGV varlist1 vallist2 &rest forms)

 varlist1 (required, evaluated) - a list of symbols.
 vallist2 (required, evaluated) - a list of LISP objects.
 form     (evaluated) - any LISP form.

Returns:

 The last form in forms, in a SPECIAL variable binding environment
 specified by varlist1 and vallist2.

Processing:

 The first argument is a list of symbols defining variable
 names local to the PROGV.  The variables are initially bound to
 the corresponding values in the second argument, and revert to
 their previous status when the PROGV is terminated.

 If the list of variables is longer than the list of values,
 the excess variables are made unbound (more accurately,
 dynamic bindings are created but are assigned no values).

 If the list of values is longer than the list of variables,
 the excess values are ignored.

 The rest of the forms in the PROGV constitute the body of the
 PROGV, and are evaluated in succession, with the variables
 specified in varlist1 bound to the values in vallist2.  The
 last of these evaluated forms is returned as the value.

 It is important to remember that the bindings generated this
 way are dynamically scoped ("SPECIAL").  In particular, they
 cannot be captured by lexical closures.

Errors signaled:

 None.

Notes:

 PROGV exists to provide a way of specifying a binding environment
 at run time rather than lexically, in that the variable specs are
 actually evaluated.  This is primarily useful for building
 embedded interpreters.

 At the present time, PROGV is implemented as a macro which expands
 by turning the forms into a lexical closure.  This should be kept
 in mind when compiling PROGV constructs.

Examples:

 (PROGV '(A B C) '(1 2 3) (EVAL '(LIST A B C))) ==> (1 2 3)

