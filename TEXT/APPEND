
Function: APPEND

Syntax:   (APPEND &rest lists)

 list (optional, evaluated) - a proper list
                              (although the last argument need not be).

Returns:

 A list consisting of the elements (CAR's) of all the arguments
 combined into one list.

Processing:

 All arguments except the last are copied (via repeated CONS), each
 argument being RPLACD'd onto the last CAR of the copy of the
 preceding argument.

 (APPEND), with no arguments, returns NIL.

 (APPEND list) returns a  new copy of "list", with each CAR of
 "list" re-CONS'ed.

 Compare NCONC, which destructively alters its arguments.

Errors signaled:

 An argument other than the last one is not a proper list.

Notes:

 As a special case, (APPEND atom), where atom is not a list, returns
 the selfsame atom.

 (APPEND list) is a commonly used idiom for making a copy of a list.

Examples:

 (APPEND)                    ==> NIL
 (SETQ X '(A B C))           ==> (A B C)
 (SETQ Y (APPEND X))         ==> (A B C) ; this is a COPY of X.
 (EQ X Y)                    ==> NIL
 (EQUAL X Y)                 ==> T

;The following shows how the last argument to APPEND is NOT copied.

 (SETQ X '(A))               ==> (A)
 (SETQ Y '(B C))             ==> (B C)
 (SETQ Z '(D E F))           ==> (D E F)
 (SETQ W (APPEND X Y Z))     ==> (A B C D E F)
 (EQ X W)                    ==> NIL
 (EQ Y (CDR W))              ==> NIL
 (EQ Z (CDDDR W))            ==> T

