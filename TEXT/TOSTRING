
Function: TOSTRING

Syntax:   (TOSTRING arg1 &optional arg2)

 arg1 (required, evaluated) - an atom.
 arg2 (optional, evaluated) - any LISP object, but generally T or NIL.

Returns:

 A string that looks like the printed representation of arg1
 (via PRINC if arg2 is NIL, via PRIN1 otherwise).

Processing:

 arg2 specifies whether slashification is to occur.

 If arg2 is omitted or NIL, then:

 If arg1 is a string, it is returned as is.
 If arg1 is a symbol, its print name is returned.
 If arg1 is any other object acceptable to TOSTRING, a string is
 built containing the characters that arg1 would use when it is printed
 by PRINC.

 If arg2 is non-NIL, then:

 If arg1 is a string, a new string is built that contains enclosing
 double quote marks as well as backslashes preceding any double quotes
 or backslashes contained in the string.

 If arg1 is a symbol, a string is built that contains the print name
 of the symbol, plus vertical bars and backslashes where necessary to
 make it look the way it would be read in.

 If arg1 is any other object acceptable to TOSTRING, a string is
 built containing the characters that arg1 would use when it is printed
 by PRIN1.

Errors signaled:

 arg1 is a list, vector or structure; these objects cannot be converted
 to strings by this function.
 Not enough string space to build the string, even after GC.

Notes:

 TOSTRING used to be called MKSTRING and have an alias of MAKE-STRING,
 but this has been eliminated since it would conflict with the Common
 Lisp definition of MAKE-STRING.

Examples:

 (TOSTRING "hi there"  )    ==>  "hi there"
 (TOSTRING 'foo        )    ==>  "FOO"
 (TOSTRING 01          )    ==>  "1"
 (TOSTRING "hi there" T)    ==>     "\"hi there\""
 (TOSTRING 'foo       T)    ==>  "FOO"
 (TOSTRING '|foo|     T)    ==>  "|foo|"
 (TOSTRING 01         T)    ==>  "1"

