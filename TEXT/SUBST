
Function: SUBST

Syntax:   (SUBST arg1 arg2 arg3)

 arg1 (required, evaluated) - any LISP object.
 arg2 (required, evaluated) - any LISP object, but should be a symbol.
 arg3 (required, evaluated) - a proper list.

Returns:

 A list consisting of the elements of arg3, with all occurrences
 of arg2 (at any level) replaced by arg1.

Processing:

 If arg3 is an atom, it is returned as is.
 Otherwise...

 A new list is built (through repeated CONS'ing) from the elements of
 the list specified by arg3.  For each atom found within the list
 structure, if it is EQL to arg2 then arg1 is substituted for it in the
 new list.  Note that the CAR's of the list are recursively substituted.

 Compare SUBSTQ, which uses an EQ test.

Errors signaled:

 None.

Notes:

 The Maclisp idiom (SUBST NIL NIL form), used to do a full copy of a
 list structure, WILL NOT WORK in ZIL.  Use COPYTREE for this purpose.

 SUBST is, by default, implemented with an EQL test for Common LISP
 compatibility, using the ZIL function SUBSTQL. If Maclisp or Franz LISP
 compatibility is desired, SUBST may be equated with ZIL function
 SUBSTQUA via the DEFLOAD special form.  See SUBSTQ, SUBSTQL and
 SUBSTQUA for more info.

 Under Macsyma, SUBST performs an EQUAL test.

 No checking is done as to the validity of the arguments.  Unpredictable
 results will occur if the third argument is not an atom or a proper
 list.

Examples:

 (SUBST 'A 'THE '(THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG))
                          ==> (A QUICK BROWN FOX JUMPS OVER A LAZY DOG)

 (SUBST '(FOO BAR) 'FOO '(FOO (FOO BAR) (FOO) FOO BAR))
            ==> ((FOO BAR) ((FOO BAR) BAR) ((FOO BAR)) (FOO BAR) BAR)

 (SUBST '(NEW WINE) '(OLD BOTTLES) '(PUT (OLD BOTTLES) IN OLD BOTTLES))
            ==> (PUT (OLD BOTTLES) IN OLD BOTTLES)

 (SUBST 2.0 1.0 '(1.0 2.0 3.0))    ==> (2.0 2.0 3.0)

