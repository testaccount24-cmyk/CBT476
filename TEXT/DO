
Macro: DO, DO*

Syntax:   (DO arg1 arg2 arg3 ... argn)
  Also:   (DO* arg1 arg2 arg3 ... argn)

 The first argument (a list of local variables with initialization
 and increment specifications) is required.

 The second argument (the termination clause) is required.

 At least one subsequent argument is required, but any number of
 arguments greater than two may be specified.

 arg1 (partially evaluated) - a list of local variable clauses, i.e.
 lists of three elements each, where the first element (not evaluated)
 is a symbol, the second (evaluated) is the value to which the symbol
 is to be initially bound, and the third (not evaluated) is a form
 which specifies how the local variable is to be incremented.

 arg2 (optionally evaluated) - a termination clause, i.e.
 a list of two or more elements similar to a COND clause, in which
 the first element is evaluated and the rest are evaluated only
 if the first returns a non-NIL value.

 argn (conditionally evaluated) - any LISP object.

Returns:

 The last of the elements of the clause specified by the second
 argument.

Processing:

 The general format of DO is:

   (DO ((var1 value1 incr1) (var2 value2 incr2) ... (varn valuen incrn))
       (test1 consequent1 ... consequentn)
       form1
       form2
       ...
       formn
   )

 in which the "varn"'s must be symbols and are not evaluated, the
 "valuen"'s are any LISP objects and are evaluated when the
 corresponding variables are bound, the "incr1"s are forms which are
 evaluated to increment the varn's, and the "test1", "consequentn"s, and
 "formn"'s are any LISP objects and are evaluated in sequence in the
 binding environment set up by the variable/value pairs.

 Although the clauses in the first argument are supposed to contain 3
 elements, the second and/or third may be omitted.  Furthermore, for
 each element of arg1, a symbol may be specified; this is equivalent
 to a list of one element.  In other words:

 (DO (I J K) ...     is equivalent to   (DO ((I) (J) (K)) ...
  which in turn is the same as (DO ((I NIL) (J NIL) (K NIL)) ...

 DO* is the same as DO, except that the variables are bound
 in parallel rather than sequentially.

 In summary:

 DO binds each variable in the environment present outside of the DO.
 The variables are incremented in parallel.

 DO* binds each variable in the environment present immediately before
 the variable-value list, so that each binding can refer to previous
 (but not subsequent) DO variables.  The variables are incremented
 sequentially.

Errors signaled:

 Invalid syntax (missing or invalid arguments).

Notes:

 For a complete discussion of DO, refer to a MACLisp or Common LISP
 reference manual.

Examples:

 (DO ((I 10 (SUB1 I))
      (J NIL (CONS 'FOO J))
     )
     ((ZEROP I) J)
     NIL
 )                      ==>  (FOO FOO FOO FOO FOO FOO FOO FOO FOO FOO)


