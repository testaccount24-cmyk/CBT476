
Function: STRING-VERIFY

Syntax: (STRING-VERIFY string1 string2 &optional index3)
    or:        (VERIFY string1 string2 &optional index3)

 string1 (required, evaluated) - a string.
 string2 (required, evaluated) - a string.
 index3 (optional, evaluated) - a positive fixnum.

Returns:

 The one-based index of the first character within string1 that
 does not match any of the characters in string2, with the search
 starting from location index3, or from the beginning of string1 if
 index3 is omitted); NIL if all the characters of string1 are found
 in string2.

Processing:

 One-based indexing is used.

 String1 is searched from either the beginning (if index3 is omitted,
 i.e. defaults to 1) or the offset specified by index3; when a
 character is found in string1 that is not a member of the set of
 characters contained in string2 (in a case-sensitive character
 comparison), the one-based offset of that character within string1
 is returned.  If string1 does not contain any characters that are
 absent from string2, NIL is returned.

 If string1 is the null string, NIL is always returned, as there are,
 trivially, no non-matching characters in string1.

 If string2 is the null string, 1 is always returned, as, trivially,
 none of the characters of string1 are found in string2.

 The offset is always relative to the beginning of the entire string1,
 even when index3 is specified.

 As with most string-handling functions, symbols are acceptable for
 either of the first 2 arguments.

Errors signaled:

 Invalid first argument (not a string).
 Invalid second argument (not a string).
 Invalid third argument (not a positive fixnum).

Notes:

 This function is analogous to the PL/1 VERIFY function; the optional
 third argument, while not present in PL/1, is analogous to a similar
 argument for INDEX (q.v.).

 The second arg may be thought of as a specification of a table of
 "valid" characters, and the result as the index of the first "bad"
 character in the string.  Thus, VERIFY is useful in checking that
 a string is all alphabetic, numeric, etc.  Alternatively, it may
 be used to skip over leading whitespace characters, etc. in a
 string to get to the first "significant" character.

 Specifying the third arg is NOT equivalent to specifying a SUBSTR
 as the second arg.  Observe the examples.  This feature may be
 useful in parsing a string into a sequence of tokens.

Examples:

 (VERIFY "" "non-null-string")  ==> NIL
 (VERIFY "" "")                 ==> NIL
 (VERIFY "any-string" "")       ==> 1     ; All characters "bad".
 (VERIFY "foobar" "abfor")      ==> NIL
 (VERIFY "foobar" "abfo")       ==> 6     ; Stopped at "r".
 (VERIFY "foobar" "abor")       ==> 1     ; Stopped at "f".
 (VERIFY " foobar" " ")         ==> 2

; The following examples show that (VERIFY x y z) is NOT the same as
; (VERIFY (SUBSTR x z) y).

 (VERIFY "123X456" "123456789" 3)          ==> 4
 (VERIFY (SUBSTR "123X456" 3) "123456789") ==> 2

 (VERIFY "foobar" "abfr" 1)        ==> 2     ; Search "foobar".
 (VERIFY "foobar" "abfr" 2)        ==> 2     ; Search  "oobar" only.
 (VERIFY "foobar" "abfr" 3)        ==> 3     ; Search   "obar" only.
 (VERIFY "foobar" "abfr" 4)        ==> NIL   ; Search    "bar" only.

