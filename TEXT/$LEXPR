
ZIL supports Maclisp-style LEXPR's.  I.e., an EXPR with a non-NIL
atom in place of an arglist is considered to work like a LEXPR, in
that the atom is bound to a list of the (evaluated) arguments, and
the special form ARG is used to access the arguments.

The formal parameter x in (defun f x ...) is bound to the number of
arguments passed, not the arglist.

The following special forms are used to access LEXPR arguments:

  (ARG)     ... returns the length of the list.
  (ARG NIL) ... same as (ARG).
  (ARG T)   ... returns the list itself (this is unique to ZIL!).
  (ARG 1)   ... returns the first element of the list.
  (ARG 2)   ... (etc.)  (ARG 0) et al. are errors.

  (SETARG n frob) ... sets (ARG n) to frob.  n must be a valid fixnum.

  (LISTIFY &optional n) ... returns the list of LEXPR args, if n is
                            omitted or NIL.
  (LISTIFY n), n positive, returns a list of the first n LEXPR args.
  (LISTIFY n), n negative, returns a list of the last -n LEXPR args.

The scope of a LEXPR is lexical, much like GO and RETURN in PROG's.
Note:  Use of the LEXPR-oriented special forms in funargs is not
guaranteed to work outside of interpreted code.

