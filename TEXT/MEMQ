
Function: MEMQ

Syntax:   (MEMQ arg1 list2)

 arg1  (required, evaluated) - any LISP object, but generally a symbol.
 list2 (required, evaluated) - a proper list.

Returns:

 The first sublist (CDR) of list2 whose CAR is EQ to arg1;
 NIL if no such sublist exists.

Processing:

 The list specified by list2 is searched for an element that is EQ to
 arg1; when one is found, a pointer to the sublist of list2 of which
 arg1 is the CAR is returned as the value.

 This enables the MEMQ caller to use the information, e.g. in an
 ordering test.  In a list L, element A precedes element B if
 (MEMQ B (MEMQ A L)) is non-NIL.

Errors signaled:

 list2 not a list.

Notes:

 Unpredictable results will occur if list2 is not a proper list.

 MEMQ is equivalent to Common LISP (MEMBER ... #TEST #'EQ).
 Compare MEMBER, which is like MEMQ but uses an EQL test by default.

Examples:

 (MEMQ 'A NIL)                            ==> NIL
 (MEMQ 'A '(A B C D E F G))               ==> (A B C D E F G)
 (MEMQ 'D '(A B C D E F G))               ==> (D E F G)
 (MEMQ 'G '(A B C D E F G))               ==> (G)
 (MEMQ 'H '(A B C D E F G))               ==> NIL

 ;Sublists are NOT recursively searched.

 (MEMQ 'A '((A B) (C D) (E F)))              ==> NIL

 ;The comparison test is EQ.

 (MEMQ 3.0 '(1.0 2.0 3.0 4.0 5.0 6.0 7.0))   ==> NIL

