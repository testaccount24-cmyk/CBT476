
Function: REMQL

Syntax:   (REMQL arg1 list2 &optional count3)

 arg1   (required, evaluated) - any LISP object.
 list2  (required, evaluated) - a proper list.
 count3 (optional, evaluated) - an integer.

Returns:

 A list consisting of all the elements of argument 2 except for those
 which are EQL to argument 1.

Processing:

 A new list is built (through repeated CONS'ing) from the elements
 of the list specified by the second argument.  Each atom found
 within the list structure that is EQL to the first argument is
 omitted from the new list.

 If count3 is omitted or NIL, all occurrences of arg1 are removed from
 list2.  Otherwise, only the first count3 occurrences of arg1 are
 removed.  If count3 is less than 1, no elements are removed.

 When count3 is used, some list structure may be shared between list2
 and the return value.

 Note that only top-level elements of the list are considered;
 non-atomic elements are NOT recursively processed by REMQL.

 Compare REMQ, which is like REMQL but uses an EQ test;
 and REMQUAL, which is like REMQL but uses an EQUAL test.

Errors signaled:

 Invalid count argument (not a fixnum or NIL).

Notes:

 No checking is done as to the validity of the arguments.  Unpredictable
 results will occur if the second argument is not an atom or a proper
 list.

 The DELETE/DELQ/DELQL/DELQUAL family is the destructive equivalent
 of the REMOVE/REMQ/REMQL/REMQUAL family.

Examples:

 (REMQL 'THE '(THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG))
                          ==> (QUICK BROWN FOX JUMPS OVER LAZY DOG)

 (REMQL '(FOO BAR) '(FOO (FOO BAR) (FOO) FOO BAR))
            ==> (FOO (FOO BAR) (FOO) FOO BAR) ; Test is EQL, not EQUAL.

 (REMQL '3 '(1 2 3 4 5))
            ==> (1 2 4 5)    ; Test is EQL, not EQ.

 (REMQL 'X '(X Y X Y X) 0) ==> (X Y X Y X)
 (REMQL 'X '(X Y X Y X) 1) ==> (Y X Y X)
 (REMQL 'X '(X Y X Y X) 2) ==> (Y Y X)
 (REMQL 'X '(X Y X Y X) 3) ==> (Y Y)

