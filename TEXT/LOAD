
Function: LOAD

Syntax:   (LOAD dsn1 &key verbose print if-does-not-exist)

 dsn1  (required, evaluated) - a symbol.
 verbose
       (optional, evaluated) - any LISP object (but generally T or NIL).
 print
       (optional, evaluated) - any LISP object (but generally T or NIL).
 if-does-not-exist
       (optional, evaluated) - any LISP object (but generally T or NIL).

Returns:

 If the keyword :if-does-not-exist is given a value of NIL, and the
 data set specified by dsn1 does not exist, NIL.  Otherwise T, after
 executing a READ-EVAL-PRINT loop over the data set specified by dsn1.

Processing:

 dsn1, which should be a string, is interpreted as a data set name in
 standard TSO format (quoted or unquoted, member name present or
 absent).  Translation to all upper case is done automatically.
 This data set is dynamically allocated and opened for input.

 An S-expression is read from the data set; it is evaluated and the
 result is printed to standard output if the keyword :print is given
 a non-NIL value.  This process is repeated
 until end-of-file is reached on the data set or the form (END) is read.

 If the keyword :verbose is given a non-NIL value, a message is
 displayed at the start of the load operation identifying the data set
 being loaded.  If that keyword is given a value of NIL, the message
 is not displayed.  The default behavior is determined by the value
 of the global variable *LOAD-VERBOSE*, which is initially T.

 If the keyword :if-does-not-exist is given a non-NIL value, which is
 the default, LOAD will error out if the data set specified by dsn1
 does not exist.  However, if :if-does-not-exist is given a value of
 NIL, then LOAD will not error out if the data set can't be found.
 Instead, it will just return NIL.

Errors signaled:

 Errors detected by OPEN and READ-EVAL-PRINT.

 Note:  Errors detected by READ, EVAL, and PRINT are trapped.

Notes:

 The form (END), when coded as is, is a termination signal to LOAD.
 Since it is not actually a function, it cannot be embedded within
 another function or generated by a macro, and it can have no operands.

 LOAD is used in the interpretive environment to "load" a sequential
 dataset (or PDS member) of interpretive function definitions, macros,
 or whatever you wish.

 See INTRPRET for more information.

Examples:

 (Watch the quote marks carefully!)

  (LOAD "cmd.lisp(myfunc)")
  (LOAD "'someone.elses.dataset'")
  (LOAD "'PROGLIB.ZIL.SOURCE($CL)'" :PRINT T :VERBOSE NIL)

