
Function: READ

Syntax:   (READ &optional file1 value2)

 file1  (optional, evaluated) - an input file name.
 value2 (optional, evaluated) - any LISP object.

Returns:

 An S-expression (atom or list) read from the input file specified by
 file1, or value2 if end-of-file is encountered while scanning for an
 S-expression.

Processing:

 NIL is the default for both file1 and value2.

 The file file1 is read from the current character position and logical
 record (the ENDREAD and ZPUTFPI functions can change these).
 Input is read according to the formats described in member $FORMS
 of this documentation.

 The returned S-expression (atom, list, or dotted pair) is returned
 as is; it is not evaluated.  () and NIL are equivalent.

 If a syntax error (unmatched right parenthesis or misplaced period) is
 encountered, an error is signalled.  If a syntax error occurs while
 attempting to process a dotted pair, an error is signalled when the
 entire S-expression is processed, no matter how deep the nesting of
 lists at the point where the dotted pair error was found.

 If end-of-file is encountered while scanning for a non-separator
 character, value2 is returned (the EOF function should be used to
 determine if this was the case).  If the file is already in end-of-file
 status when READ is issued, an error is signalled.

 READ never sets the "newline" indication tested by NEWLINEP.
 End-of-line is considered to be an atom delimiter except when an
 escaped (| ... |) atom is being scanned.  If end-of-line occurs while
 a string ("...") is being processed, a newline character is inserted
 in the string and reading continues.  End-of-line is ignored in all
 other cases.

 Both the reader and the printer support a continuation character
 feature:  an object which occupies more than one line will be printed
 in pieces, with the ZIL continuation character (the cent sign) in the
 final position of each line.  The reader, when it sees the cent sign in
 the final position of a line, will process the characters on the
 following line as part of the object currently being read in, without
 any newlines.  (This does not apply to data read in from the terminal,
 although the continuation characters may appear when an object is
 printed out on the terminal.)

 With this feature, it is possible to print long strings, bignums,
 etc. out to a file and read them back in.

 For fixed-length records, the cent sign will be treated as a
 continuation character if it occupies the last data column.  For
 example, a RECFM=FB LRECL=80 data set will recognize the cent sign as a
 continuation character if it is in column 80 for unnumbered data sets,
 or column 72 for numbered data sets.

 For variable-length records, the cent sign will be treated as a
 continuation character if it occupies the last column of any record,
 even if it is not the maximum length.

 The cent sign will NOT be treated as a continuation if it is preceded
 by a backslash, or if it is part of a comment field or otherwise not
 part of a Lisp object being read in.

Errors signaled:

 Invalid input file object (not a symbol 4 characters or less).
 Specified input file is not allocated or could not be opened.
 Read after end of file.
 Misplaced period or right parenthesis.
 Incomplete list or vector (end-of-file encountered before closing right
  parenthesis found).
 No character following escape character (backslash); i.e.,
  end-of-file detected when a character was required.
 Errors signalled by reader macro functions.
 Internal reader macro dispatching error (this falls into the famous
  "this-should-never-happen" class of errors).

Notes:

 See member $FILE for more information on file names.

 See member $FORMS for syntax of forms accepted by READ.

 See member $RMACRO for syntax of reader macro characters.

 The ' abbreviation for QUOTE is implemented as a reader macro.
 This and the # (sharp sign), ` (backquote) and , (comma) are the
 only characters with reader macros implemented by the system by
 default; the user can define other reader macros via the RDRMACRO
 and DEFRDMAC functions.  A read table defining the separator and
 delimiter characters as well as reader macro characters is
 allocated the first time READ is issued.

 The syntax of the / and \ characters can be altered via the RMMAC
 function to provide capability of reading LISP code written in Maclisp
 or for a Maclisp-compatible reader.  The RMINIT function will restore
 the reader to its default mode.  See RMMAC and RMINIT for more
 information.

 Reader macro definitions for the following characters are predefined:

 ' (single quote)
 ` (backquote)
 , (comma)
 # (sharp sign)

 See member $RMACRO in this documentation for details on these.

Examples:

 (READ)
 (READ NIL)   ...are equivalent and return an atom, list, dotted pair,
                 etc. from the standard input file.

 (READ 'FOO)     returns an S-expression from the input file FOO.
                 If end-of-file is reached while reading FOO, then
                 this will return NIL.

 (READ 'FOO "eof")  will return "eof" if end of file is reached on
                    input file FOO, otherwise returns an S-expression
                    as above.

