
Function: PRINT

Syntax:   (PRINT arg1 &optional arg2)

 arg1 (required, evaluated) - any LISP object.
 arg2 (optional, evaluated) - an output file name.

Returns:

 arg1, after it has been printed on the file specified by arg2.

Processing:

 The object is printed at the current character position on the
 current line of the specified output file (the TERPRI and ZPUTFPO
 functions can change these).

 First TERPRI is invoked to write out the current line and reset the
 current character pointer to the beginning of the next line.  Then the
 object is printed, and the current character pointer is incremented by
 1 (i.e. a space is printed after the object).  Compare this to PRIN1,
 which does not force a new line and resets the current character
 position to immediately after the just-printed object (no space
 following).

Errors signaled:

 Invalid output file object (not a symbol 4 characters or less).
 Specified output file is not allocated or could not be opened.

Notes:

 See member $FILE for more information on file names.

 See member $PRINTER for more information on printing functions.

 PRINT does whatever PRIN1 does with respect to the manner in which
 it prints objects.  See PRIN1 for more information.

Examples:

 (PRINT 'A)
 (PRINT 'A NIL)  are equivalent and return A after printing...

                 A

                 on the standard output file.

 Note that the interpreter will print A (the returned value)
 on the standard output file as well; this will print on the next
 line, causing the user to see:

 A
 A

 as the result.

 Thus the value will appear twice to the user.

 (PROGN
  (PRINT 'A              'FOO)
  (PRINT NIL             'FOO)
  (PRINT (CONS 'B 'C)    'FOO)
  (PRINT (LIST 'B 'C)    'FOO)
  (PRINT '|Hi there.|    'FOO)
  (PRINT "a string"      'FOO)
 )
                 returns "a string" after printing...

                 A
                 NIL
                 (B . C)
                 (B C)
                 |Hi there.|
                 "a string"

                 on output file FOO.

