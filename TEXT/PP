
Macro: PP

Syntax:   (PP &rest funs)

 fun (optional, not evaluated) - a symbol or LAMBDA-expression.

Returns:

 No values, after the LISP function specified by each fun, and its
 global value if any, are pretty-printed on the standard output file.

Processing:

 Each fun (not evaluated) is processed in turn.

 If fun is a symbol, its interpretive function definition is printed.
 If fun is a lambda-expression, a fake DEFUN defining the lambda
 expression is printed.  In either case, the output takes the form
 of a DEFUN that creates the function definition.

 The interpretive function definition specified by each fun is printed
 on the standard output file in such a way as to:

  (1) be as readable as possible to the human user.
  (2) be able to be read back in as LISP code.

 This is known as "pretty printing."

 Furthermore, if the fun is a variable with a global value, a SETQ
 that would assign the value is printed.

Errors signaled:

 None (errors signaled by ZILPP are trapped).

Notes:

 PP invokes ZILPP, which is the function equivalent to the old PP of
 ZIL 1.1.  You need to use ZILPP if you wish to pretty-print a
 function definition to a file other than standard output.
 See ZILPP and ED.

Examples:

 (pp foo)
 (pp foo bar)
 (pp (lambda (x) (foo x)))

 (defun foo (a b) (cons b a))
 (pp foo)

  results in the following being printed on the standard output file:

 (DEFUN FOO (A B)
  (CONS B A)
 )

