
Function: TYI

Syntax:   (TYI &optional file1 eofval2 newlineval3)

 file1 (optional, evaluated) - an input file name.
 eofval2 (optional, evaluated) - any LISP object.
 newlineval3 (optional, evaluated( - any LISP object.

Returns:

 A fixnum representing a character read from file1, unless end of file
 is encountered on file1, in which case eofval2 is returned, or end of
 line is encountered on file1, in which case newlineval3 is returned.

Processing:

 The file specified by arg1 is read from the current character position
 and logical record (the ENDREAD and ZPUTFPI functions can change
 these).  The EBCDIC value of one character is returned as a fixnum,
 and the current character pointer is updated to point to the next
 character.

 If the end of a line is encountered while reading the file, then if the
 optional newlineval3 argument was specified, it is returned; if the
 newlineval3 argument has not been specified, an EBCDIC CR (hex 0D) is
 returned (i.e. fixnum 13).  NEWLINEP is also set to true for the file.
 In this case, the next call to TYI will return either the first
 character from the next line, or end-of-file (note that the end-of-file
 condition is always preceded by the end-of-line condition unless the
 file is empty).

 If end of file is encountered while reading the file, eofval2 is
 returned as the value.  If eofval2 was not specified, a fixnum -1 is
 returned.

 If the file is already in end-of-file status when TYI is issued,
 an error is signalled.

Errors signaled:

 Invalid input file object (not a symbol 4 characters or less).
 Specified input file is not allocated or could not be opened.
 Read after end of file.

Notes:

 See member $FILE for more information on file names.

 READCH, READLINE, TYI and ZILRDCH are the only functions that can cause
 the "newline" indication to be set in an input file (see NEWLINEP).

 Currently, if TYI is issued against a file allocated to the terminal
 (including standard input) which has never been accessed by READ,
 READCH or TYI before, it will return an EBCDIC CR.  In other words, the
 first input from a terminal file is a "newline".

 Compare READCH, which returns a symbol.

Examples:

 (when (null (prefix))
       (tso ("profile prefix(" (userid) ")"))
       nil)                          ==> NIL

 (progn
  (with-open-file (file "$$foo.$$test" :out)
   (format file "~&?foobar~%")
  )
  (setq foo (open "$$foo.$$test" :in))
  t
 )                                  ==> T

 (TYI FOO 'EOF 'NEWLINE)     ==> NEWLINE
 (TYI FOO 'EOF 'NEWLINE)     ==> #\?
 (TYI FOO 'EOF 'NEWLINE)     ==> #\f
 (TYI FOO 'EOF 'NEWLINE)     ==> #\o
 (TYI FOO 'EOF 'NEWLINE)     ==> #\o
 (TYI FOO 'EOF 'NEWLINE)     ==> #\b
 (TYI FOO 'EOF 'NEWLINE)     ==> #\a
 (TYI FOO 'EOF 'NEWLINE)     ==> #\r

 (loop while (eql (tyipeek nil foo) #\sp)
       do (tyi foo)
       finally (return t))   ==> T

  ;
  ; Now watch what happens when we get to a newline.
  ;

 (TYI FOO)                   ==> #\CR     ; Default newline.
 (TYI FOO)                   ==> -1       ; Default end-of-file.

