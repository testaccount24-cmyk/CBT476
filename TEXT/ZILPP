
Function: ZILPP

Syntax:   (ZILPP arg1 arg2)

 arg1 (required, evaluated) - a symbol or LAMBDA-expression.
 arg2 (optional, evaluated) - a file name.

Returns:

 No values, after the LISP function specified by arg1, as well as its
 value if any, is pretty-printed on the file specified by arg2.

Processing:

 If arg1 is a symbol, its interpretive function definition is printed.
 If arg1 is a lambda-expression, a fake DEFUN defining the lambda
 expression is printed.  In either case, the output takes the form
 of a DEFUN that creates the function definition.

 In addition, if arg1 is a symbol with a value, a fake SETQ assigning
 that value to it is printed.

 The interpretive function definition specified by arg1 is printed
 on the output file specified by arg2 in such a way as to:

  (1) be as readable as possible to the human user.
  (2) be able to be read back in as LISP code.

 This is known as "pretty printing."

Errors signaled:

 arg1 not a symbol or a lambda-expression.
 No interpretive function definition associated with arg1
 (its function definition may be a compiled code object).
 Function definition not a LAMBDA-expression.

Notes:

 See member $FILE for more information on file names.

 ZILPP is the same as what PP used to be in ZIL 1.1.  PP now takes
 zero or more unquoted functions names and pretty-prints them to
 the standard output file.

 ZILPP may be used to save function definitions in output files, for
 future use, by reading them back in under a later ZIL session.
 See ED.

Examples:

 (zilpp 'foo)
 (zilpp 'foo 'out)
 (zilpp '(lambda (x) (foo x)))

 (defun foo (a b) (cons b a))
 (zilpp 'foo)

  results in the following being printed on the standard output file:

 (DEFUN FOO (A B)
  (CONS B A)
 )

