
Macro: POP

Syntax:   (POP stack1 &optional place2)

 stack1 (required) - a form which evaluates to a list.
 place2 (optional) - a form acceptable as the first argument to SETF.

Returns:

 The object that used to be the CAR of stack1, but has been removed,
 causing stack1 to become its own CDR.

Processing:

 stack1 is typically a variable, but in general is any form acceptable
 as the first argument to SETF.  The result of POP is the CAR of the
 contents of stack1, and as a side effect the CDR of the contents of
 stack1 is stored back into stack1.

 If place2 is specified, it must be a symbol or form known to SETF.
 The object that used to be the CAR of stack1 is assigned to be the
 value of place2 (such that evaluating the form place2 will return
 that value).

 Conceptually, this is a "POP" operation on a push-down stack.
 Compare PUSH.

Errors signaled:

 None.

Notes:

 POP is a macro that expands something like this:

  (POP a)   --> (PROG1 (CAR a) (SETF a (CDR a)))

  (POP a b) expands into something similar to (SETF b (POP a)).

 The optional second argument to POP is present in Nil, and probably in
 other Lisp implementations, but has never been documented anywhere but
 here.  It is required by Macsyma; that's why it's there to begin with.

Examples:

  (SETQ STACK '(A B C))      ==> (A B C)
  STACK                      ==> (A B C)
  (POP STACK)                ==> A
  STACK                      ==> (B C)
  (SETQ Z NIL)               ==> NIL
  (POP STACK Z)              ==> B
  STACK                      ==> (C)
  Z                          ==> B

