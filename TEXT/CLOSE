
Function: CLOSE

Syntax:   (CLOSE file1 &optional arg2)

 file1 (required, evaluated) - a file name.
 arg2  (optional, evaluated) - NIL, or one of the following symbols:
                               INPUT, OUTPUT, IN, OUT, APPEND.

Returns:

 NIL, after closing the file specified by file1.  Whether the file is an
 input file or an output file is determined by arg2.

Processing:

 The file specified by file1, if it exists, is closed and the associated
 file block is freed, as well as storage associated with the file.

 arg2 determines whether the file is an input or output file, since
 these are distinct in ZIL.  Possible values are:

   INPUT   -  the file is open for input.
   OUTPUT  -  the file is open for output.
   APPEND  -  the file is open for output in "append" mode.

 If arg2 is omitted or NIL, INPUT is assumed.

 IN and INPUT are equivalent, as are OUT, OUTPUT and APPEND (these
 variants exist for compatibility with the types specified on OPEN and
 have no effect on what happens to the data set when it is closed).

 Any of these non-NIL values can be specified with a leading colon
 (i.e. as a "keyword").  In other words, OUT and :OUT are equivalent.
 Furthermore, if a list is specified as the second argument, the CAR
 of that list is assumed to be the file type and is analyzed as above.
 Thus, the following are equivalent:

   (CLOSE F)
   (CLOSE F NIL)
   (CLOSE F 'IN)
   (CLOSE F 'INPUT)
   (CLOSE F :IN)
   (CLOSE F :INPUT)
   (CLOSE F '(IN))
   (CLOSE F '(:INPUT FROBNICANT BARFUCIOUS))

 Once a file is closed, a subsequent input or output operation on the
 same file causes it to be reopened.  Thus, if you have read from a file
 and wish to start reading it from the beginning, CLOSE the file and
 then issue a READ.  If you wish to overwrite a file, wiping out
 whatever you have previously printed there, CLOSE it (don't forget to
 specify 'OUTPUT or 'OUT) and write to it again.

 It may be necessary to CLOSE one or more files in order to make
 virtual storage available to other functions (including OPEN of
 other files).

Errors signaled:

 Invalid second argument (not one of those listed above).
 File NIL specified (closing standard input/output is not allowed).
 File does not exist (possibly file type not correctly specified).

Notes:

 See OPEN for more information.

 See member $FILE for more information on file names.

 Under Macsyma, CLOSE does not require the second argument.
 Furthermore, you can CLOSE only files that were opened via the
 OPEN function in Macsyma (in other words, you cannot CLOSE files
 that are opened implicitly by an I/O operation).

Examples:

  (CLOSE 'FOO)            closes input file FOO.
  (CLOSE 'FOO 'INPUT)     closes input file FOO.
  (CLOSE 'FOO 'OUTPUT)    closes output file FOO.
  (CLOSE 'FOO 'APPEND)    closes output file FOO (equivalent to prev).

 A typical sequence could be like this:

 (SETQ A (OPEN "'PROGLIB.ZIL.SOURCE(JUNK)'"))
 (READ A)
  ...
 (CLOSE A)

