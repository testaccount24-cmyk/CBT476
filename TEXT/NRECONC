
Function: NRECONC

Syntax:   (NRECONC arg1 arg2)

 arg1 (required, evaluated) - a proper list.
 arg2 (required, evaluated) - any LISP object, but generally a list.

Returns:

 A list consisting of the elements of arg1 in reverse order followed by
 the elements of arg2.

Processing:

 (NRECONC X Y) is equivalent to (NCONC (NREVERSE X) Y).

 If arg1 is NIL, arg2 is returned.  Otherwise, arg1 is destructively
 altered.

 If arg2 is atomic, a list ending in a dotted pair will result.

 Compare REVAPPEND, which does not destroy its first argument.

Errors signaled:

 Argument 1 not a proper list.

Notes:

 As with all the "destructive" functions, NRECONC should not be used
 on an in-line compiled list, i.e. a list derived from compiling the
 construct (QUOTE (form1 form2 ...)).  This will cause further
 references to the in-line constant list to be incorrect.

 Do not depend upon NRECONC's altering of the first argument if the
 first argument may be NIL.  Use SETQ to insure updating of the
 first argument, as follows:

  (SETQ X (NRECONC X Y))

Examples:

 (NRECONC NIL NIL)           ==> NIL
 (NRECONC NIL '(A B C))      ==> (A B C)
 (NRECONC '(A B C) NIL)      ==> (C B A)
 (NRECONC '(A) '(B))         ==> (A B)
 (NRECONC '(A) 'B)           ==> (A . B)
 (NRECONC '(A B) '(C D))     ==> (B A C D)
 (NRECONC '(A B C) 'D)       ==> (C B A . D)

;The following shows how the list is altered by NRECONC.

 (SETQ X '(A B C))           ==> (A B C)
 X                           ==> (A B C)
 (SETQ Y (NRECONC X '(D E))) ==> (C B A D E)
 X                           ==> (A D E)
 Y                           ==> (C B A D E)

;The following shows how the second argument to NRECONC is not copied.

 (SETQ X '(A))               ==> (A)
 (SETQ Y '(B C))             ==> (B C)
 (SETQ Z (NRECONC X Y))      ==> (A B C)
 (EQ (CDR Z) Y)              ==> T

