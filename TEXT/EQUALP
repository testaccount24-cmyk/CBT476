
Function: EQUALP

Syntax:   (EQUALP arg1 arg2)

 arg1 (required, evaluated) - any LISP object.
 arg2 (required, evaluated) - any LISP object.
 args (optional, evaluated) - any LISP object.

Returns:

 T if the contents of all the args are identical, else NIL.

Processing:

 For EQUALP, which takes exactly two args, the following holds.

  If the arguments are EQ, regardless of type, the result is
  always true (i.e. T is returned).

  If one argument is numeric and the other is not, the result is
  always false (i.e. NIL is returned).

  If both arguments are numbers, a numeric comparison is performed.
  If the types differ, the appropriate conversion is performed (see
  member $ARITH for conversion rules) and the numeric compare is done.

  If both arguments are strings, a character compare is done on the
  contents thereof, after translating them both internally to uppercase.

  If both arguments are lists, they are EQUALP if they have the
  same number of elements, the CAR's are EQUALP, and the CDR's
  are EQUALP.

  If both arguments are vectors, they are EQUALP if they have the
  same number of elements and all the elements are respectively
  EQUALP.

  For all other types, the arguments are EQUALP only if they are EQL.

 For =, which takes any number of args, the result is T if there is
 only one arg, or if all the args are EQUALP to each other (only
 adjacent pairs are compared); otherwise the result is NIL.

Errors signaled:

 None.

Notes:

 See member $EQUAL for more information on equality predicates.

 EQUALP in ZIL 1.3 is (more or less) the Common Lisp EQUALP.
 The function called EQUALP in earlier releases of ZIL is most
 nearly similar to ZILEQUAL, which is new in ZIL 1.3.

 EQUALP is potentially considerably more expensive than any of the
 other equality predicates.  It is provided only because it exists
 in Common Lisp and there has always been a ZIL function by that
 name, even if it behaves somewhat differently.

Examples:

 (EQUALP 'FOO 'FOO)       ==> T
 (EQUALP 'A 'B)           ==> NIL
 (EQUALP (ADD1 1) 2)      ==> T
 (EQUALP 1 1.0)           ==> T
 (EQUALP "A" "A")         ==> T
 (EQUALP "A" "a")         ==> T
 (EQUALP "A" 'A )         ==> NIL

