
Function: READ-EVAL-PRINT

Syntax:   (READ-EVAL-PRINT &optional file1 file2 string3)
    or:   (INTRPRET &optional file1 file2 string3)

 file1 (optional, evaluated) - an input file name.
 file2 (optional, evaluated) - an output file name, or the atom NOPRINT.
 string3 (optional, evaluated) - a string.

Returns:

 A null string, after executing a READ-EVAL-PRINT loop over file1
 while printing to file2.

Processing:

 If string3 is specified, it is displayed on file2 as a prompt.
 An S-expression is read from file1; it is evaluated and the result is
 printed to file2 (unless the value of file2 is NOPRINT, in which case
 only the evaluation is done).  This process is repeated until
 end-of-file is reached on file1, or the form (END) is read.

 Within the loop, the following special variables are available to
 the top-level user:

  *    contains the last value printed by the READ-EVAL-PRINT loop.
  **   contains the previous value of *.
  ***  contains the previous value of **.
  +    contains the last form read by the READ-EVAL-PRINT loop.
  ++   contains the previous value of +.
  +++  contains the previous value of ++.
  -    contains the form the READ-EVAL-PRINT loop is currently
       evaluating.  If you type in - by itself, the value will be -.

 If file1 is omitted or NIL, the standard input file is used.

 If file2 is omitted or NIL, the standard output file is used.

 If string3 is omitted or NIL, no prompt is displayed.

Errors signaled:

 Invalid input file object.
 Invalid output file object.

 Note:  Errors encountered by READ, EVAL, and PRINT are trapped, as
        are attention interrupts (provided attention handling is
        enabled).

Notes:

 The prompt string (string3) is displayed via PRINC, which means that
 the cursor is not moved to the next line.  If you want a prompting
 string that also moves the cursor to the next line, you must specify
 one that ends in a new line (hex 15) or carriage return (hex 0D).
 You can code such a string as follows:

   #.(string-append "foo" (ebcdic #\CR))

 is the same as coding

   "foo:"

 where the : is actually a hex 0D.
 Similarly...

   (setq ps (string-append ps (ebcdic #\NL)))

 will stick a newline character X'15' on the end of the value of PS.

 The QUIT function, when evaluated, will cause an end-of-file condition
 to be forced on its specified input file.  This once provided the only
 means of ending the INTRPRET loop; hence its name.

 The form (END), when typed as is, is a termination signal to
 READ-EVAL-PRINT.  Since it is not actually a function, it cannot be
 embedded within another function or generated by a macro, and it can
 have no operands.

 READ-EVAL-PRINT is used in the interpretive environment to "load" a
 sequential dataset (or PDS member) of interpretive function
 definitions, macros, or whatever you wish.  It is generally assumed
 that the file specified has not been read yet; if it has,
 READ-EVAL-PRINT will start processing at the current input record and
 character position.  If you try to READ-EVAL-PRINT the same file more
 than once, you will get a "read after end of file" error the second
 time.

 Use the LOAD function to insure that an entire data set is loaded
 from beginning to end.

Examples:

 (INTRPRET)
 (INTRPRET NIL)
 (INTRPRET NIL NIL)
 (INTRPRET NIL NIL NIL)  are equivalent and execute a READ-EVAL-PRINT
                         loop from standard input to standard output
                         with no prompting string.

 (INTRPRET 'INIT)    reads, evaluates and prints all S-expressions on
                     input file INIT.

 (INTRPRET 'FOO 'NOPRINT) reads and evaluates, without printing, all
                          S-expressions on input file FOO.

 (INTRPRET 'BAR 'OUT) reads S-expressions from input file BAR,
                      evaluates them, and prints to output file OUT.

 (INTRPRET NIL NIL ">") executes a READ-EVAL-PRINT loop with a prompt
                      of > and no carriage return.

 (INTRPRET NIL NIL #.(string-append "ZIL" (ebcdic #x0D)))

                   executes a READ-EVAL-PRINT loop with a prompt of
                   ZIL and a carriage return.

