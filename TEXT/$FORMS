
Formats of objects that can be typed into the interpreter
   (i.e. supported by the READ function):

1. Atom - any string of characters not including blank, comma, parens,
          dots, or a quote, backquote, comma, or sharp sign.

   Possible formats are:

   Numbers...

    Fixnum (integer):     0, 17, 3., -1, 21

     Note: The nnnBn and nnnQn syntaxes are no longer supported for
           fixnums.  They will generate symbols instead.

    Bignum (integer):     2147483648, 1000000000000
    Double-float:         1.5, -2D3, .78, 3.1415926E-1
    Single-float:         1.5S0, -2F3

   Strings...

    As follows:           "This is a string"
    Escape conventions:   "This one has a double quote \" mark"
                          "This one has one backslash \\ like this"
    Null strings are OK:  ""

   Symbols...

    Normal:               FOO, print-name, NIL, Case-iS+NoT*RElevaNt
    Escaped:              h\i\ \there    (this prints as: |Hi tHERE|)
                          \01  (a symbol whose print name is "01")
    Barred:               h|i ther|e     (this prints as: |Hi therE|)
                          |01| (a symbol whose print name is "01")

    Note: Delimited strings, as in $$/This is a symbol/,
          are NO LONGER SUPPORTED.

    All other formats are treated as symbols.

    Alpha characters in symbols are folded to upper case (except when
      they occur in escaped or barred atoms), and all symbols
      typed in are interned on the object list (OBLIST).
    Fixnum atoms are stored as fullword values, but bignums exist too.
    Flonum atoms are single or double precision; the default is double.
    Strings are stored as is.


2. List - (form form form)  ... where form is an atom, list or pair.

3. Dotted pair - (form1 . form2) ... produces a cons whose CAR is form1
                                     and whose CDR is form2.
   Note that (A . (B . (C . NIL))) is the same as (A B C).

4. Vectors - #(form form form) ... see $RMACRO for more information
                                   about this and other syntaxes
                                   provided by reader macros.

Notes:

 * A quote mark ' can precede a form; e.g. 'A is same as (QUOTE A).
                      '(A B '(C)) = (QUOTE (A B (QUOTE (C))))

   Other special characters have unique syntaxes implemented by the
   reader macro facility.  For details, see member $RMACRO of this
   documentation.

   For example, #'A is the same as (FUNCTION A), and the backquote `
   and comma , are used to implement the backquoting facility, which
   is documented in any LISP manual.

   These are implemented via the reader macro facility; other reader
   macros for other characters may be defined by the user using
   RDRMACRO or DEFRDMAC.

 * NIL is equivalent to ().

 * (END), when typed at top level, terminates the interpreter.

 * Semicolons ; terminate the current line and may be used to add
   comments.

 * All alpha characters are folded to upper case EXCEPT in strings and
   delimited, escaped or barred symbols, e.g.
   '(a b (c) \d |e| "f")  ===> (A B (C) |d| |e| "f")

 * End-of-line terminates a symbol name (unless it is a barred atom),
   and is ignored in all other cases...
   except in the case of strings, where an internal hex character (hex
   0D, carriage return) is added to the string to represent a newline.

 * There are two ways under ZIL to create symbol names with special
   characters.  Both methods always produce symbols even when
   they contain all numeric characters.

   An "escaped atom" is a name containing normal atom characters and
   backslashes \ (hex E0).  When a backslash is encountered, the
   character immediately following the backslash is treated as part of
   the atom being built, be it blank, semicolon, etc., with case
   preserved.

   A "barred atom" is a name containing normal atom characters and
   vetical bars (|).  All characters between two vertical bars are
   treated as part of the atom being built, be it blank, semicolon,
   etc., with case preserved - with the single exception that
   backslashes still function as escape characters.  Note that the bars
   DO NOT delimit the name itself, but merely the portion of the name
   being processed in this way.

   Note: Vertical bars have no such syntactic function in strings.

   The following all produce the symbol whose name is... Foo\ (Bar;)

   f\o\o\\\ \(b\a\r\;\)
   f|oo\\ (|b|ar;)|
   |Foo\\ (Bar;)|
   \F\o\o\\\ \(\B\a\r\;\)

 * Both the reader and the printer support a continuation character
   feature:  an object which occupies more than one line will be printed
   in pieces, with the ZIL continuation character (the cent sign) in the
   final position of each line.  The reader, when it sees the cent sign
   in the final position of a line, will process the characters on the
   following line as part of the object currently being read in, without
   any newlines.  (This does not apply to data read in from the
   terminal, although the continuation characters may appear when an
   object is printed out on the terminal.)

   With this feature, it is possible to print long strings, bignums,
   etc. out to a file and read them back in.

   For fixed-length records, the cent sign will be treated as a
   continuation character if it occupies the last data column.  For
   example, a RECFM=FB LRECL=80 data set will recognize the cent sign as
   a continuation character if it is in column 80 for unnumbered data
   sets, or column 72 for numbered data sets.

   For variable-length records, the cent sign will be treated as a
   continuation character if it occupies the last column of any record,
   even if it is not the maximum length.

   The cent sign will NOT be treated as a continuation if it is preceded
   by a backslash, or if it is part of a comment field or otherwise not
   part of a Lisp object being read in.

 * The following restrictions of ZIL 1.1 have been lifted in ZIL 1.2:

   (a) Null characters (hex 00) are permitted in symbol names.
   (b) A symbol name with a zero length (e.g. ||) is permitted and
       has a print name of "".
   (c) Symbol print names may be any length (like strings, this is
       subject to the amount of vector/string space available to
       build the string).

 Restrictions:

   (d) A numeric character sequence produces a symbol if it
       has an exponent with more than 4 decimal digits.

 *  The symbols NIL and T always evaluate to themselves,
    as do symbols whose print name begins with a colon ("keywords").
    Also, the symbols * ** *** + ++ +++ - have special meanings
    when they are evaluated.

