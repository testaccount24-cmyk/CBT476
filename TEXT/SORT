
Function: SORT

Syntax:   (SORT list1 &optional fun2)

 list1 (required, evaluated) - a proper list.
 fun2  (optional, evaluated) - a function that can be APPLY'ed.

Returns:

 A new list containing the elements of list1 in order according to the
 two-argument predicate specified by fun2.

Processing:

 A new list is built, using the predicate function specified by fun2.
 This must be a function that takes 2 arguments and returns NIL or
 something other than NIL to tell whether one argument is "less"
 than the other in the desired sequence.

 If fun2 is omitted or NIL, the comparison function defaults to LESSP.

 Note that ZIL's SORT does NOT alter the list in place; it always
 creates a new list.

Errors signaled:

 arg1 not a list (but see Notes).
 None, except for those signalled by fun2 or FUNCALLing of fun2.

Notes:

 Note that it is more efficient to use LESSP than <, and to use
 GREATERP than >, since < and > are defined to take any
 number of arguments, but LESSP and GREATERP are functional binary
 operators.  If you use LESSP, however, it is much more efficient
 to omit the second argument, since this allows SORT to call LESSP
 directly rather than using FUNCALL.

 The optionality of the second argument is a feature unique to ZIL,
 which can get away with this because in ZIL, LESSP works on
 character strings as well as numbers (but it doesn't work unless
 all the elements of the list are either strings or numbers!).

 This may not be a terribly fast implementation of SORT, but it gets the
 job done.  No error checking is done on the list argument beyond
 verifying that it is not an atom.  In other words, specify a list
 containing a dotted pair will have unpredictable results.

Examples:

 (SORT '(1 4 2 8 5 7))              ==> (1 2 4 5 7 8)
 (SORT '(F O O B A R))              ==> (A B F O O R)
 (SORT '(1 4 2 8 5 7) #'GREATERP)   ==> (8 7 5 4 2 1)
 (SORT '("the" "quick" "yellow" "wolf")
       #'(LAMBDA (X Y) (< (STRING-LENGTH X) (STRING-LENGTH Y))))
                              ==> ("the" "wolf" "quick" "yellow")

