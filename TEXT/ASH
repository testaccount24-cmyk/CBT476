
Function: ASH

Syntax:   (ASH arg1 arg2)

 arg1 (required, evaluated) - an integer.
 arg2 (required, evaluated) - an integer.

Returns:

 An integer containing the result of an arithmetic shift operation
 performed on arg1, with arg2 specifying the number of bits to shift
 (left if positive, right if negative).

Processing:

 An arithmetic shift operation is performed on the numeric contents of
 arg1 (not in place), with arg2 determining the amount and direction of
 the shift.

 If arg2 is positive, a left shift of N bits takes place, with N being
 the absolute value of the integer arg2.

 If arg2 is negative, a right shift of N bits takes place, with N being
 the absolute value of the integer arg2.

 If arg2 is zero, no shift takes place, but arg1 is returned.

 The arguments and the result are always integers.  This means that
 1-bits will be shifted out according to the rules of the IBM/370 SLA or
 SRA instruction - except if the result is a bignum, in which case it
 is treated as a two's-complement long integer.

Errors signaled:

 First argument not an integer.
 Second argument not an integer.

Notes:

 Compare LSH, which does a logical shift.  ASH and LSH differ when
 arg1 is negative and a right shift is performed; ASH propagates the
 sign bit while LSH fills in with zero bits on the left.
 Also, LSH is a fixnum-only function which never produces a bignum.

Examples:

 (ASH 10 0)      ==> 10
 (ASH 10 1)      ==> 20
 (ASH 10 2)      ==> 40
 (ASH 96 -3)     ==> 12
 (ASH -1 1)      ==> -2            ;  i.e. FFFFFFFF goes to FFFFFFFE
 (ASH -1 -1)     ==> -1            ;  i.e. FFFFFFFF goes to FFFFFFFF

