
Function: LSH

Syntax:   (LSH arg1 arg2)

 arg1 (required, evaluated) - a fixnum.
 arg2 (required, evaluated) - a fixnum.

Returns:

 A fixnum containing the result of a logical shift operation performed
 on arg1, with arg2 specifying the number of bits to shift (left if
 positive, right if negative).

Processing:

 A logical shift operation is performed on the numeric contents of arg1
 (not in place), with arg2 determining the amount and direction of the
 shift.

 If arg2 is positive, a left shift of N bits takes place, with N being
 the absolute value of the fixnum arg2.

 If arg2 is negative, a right shift of N bits takes place, with N being
 the absolute value of the fixnum arg2.

 If arg2 is zero, no shift takes place, but arg1 is returned.

 The arguments and the result are always fixnums.  This means that
 1-bits will be shifted out according to the rules of the IBM/370 SLL or
 SRL instruction.  A "bignum" is never produced by this function.

Errors signaled:

 First argument not a fixnum.
 Second argument not a fixnum.

Notes:

 Compare ASH, which does an arithmetic shift.  ASH and LSH differ when
 arg1 is negative and a right shift is performed; ASH propagates the
 sign bit while LSH fills in with zero bits on the left.

Examples:

 (LSH 10 0)      ==> 10
 (LSH 10 1)      ==> 20
 (LSH 10 2)      ==> 40
 (LSH 96 -3)     ==> 12
 (LSH -1 1)      ==> -2            ;  i.e. FFFFFFFF goes to FFFFFFFE
 (LSH -1 -1)     ==> 2147483647    ;  i.e. FFFFFFFF goes to 7FFFFFFF

