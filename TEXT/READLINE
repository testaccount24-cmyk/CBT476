
Function: READLINE

Syntax:   (READLINE &optional arg1)

 arg1 (optional, evaluated) - an input file name.

Returns:

 A string containing the contents of a single line (record) read from
 the input file specified by arg1, or NIL if end-of-file is encountered.
 while scanning for a character.

Processing:

 If the file specified by arg1 is in newline state, the next record
 is read; otherwise the current input record is used.  In either case,
 the result is a string whose length is equal to the length of the
 current input record and whose text is the contents of the record
 as is, with no character translation.

 If the file has fixed-length records, all values returned by READLINE
 will have the same length (the LRECL of the file).  For files with
 a variable-length record format, the value will have the length of
 the current record (the value in the RDW minus 4).

 READLINE always sets NEWLINEP to true.

 If end-of-file is encountered, NIL is returned (the EOF function will
 return T in this case).

 If the file is already in end-of-file status when READLINE is issued,
 an error is signalled.

Errors signaled:

 Invalid input file object (not a symbol 4 characters or less).
 Specified input file is not allocated or could not be opened.
 Read after end of file.

Notes:

 See member $FILE for more information on file names.

 READCH, READLINE, TYI and ZILRDCH are the only functions that can cause
 the "newline" indication to be set in an input file (see NEWLINEP).

Examples:

 #|
 Assume lines of input from file FOO, and that it has a variable-length
 record format:

  Four score and seven
  years ago
  our fathers
  brought forth

  |#


 (when (null (prefix))
       (tso ("profile prefix(" (userid) ")"))
       nil)                          ==> NIL

 (progn
  (with-open-file (file "$$foo.$$test" :out)
   (princ "Four score and seven" file)
   (terpri file)
   (princ "years ago" file)
   (terpri file)
   (princ "our fathers" file)
   (terpri file)
   (princ "brought forth" file)
   (terpri file)
  )
  (setq foo (open "$$foo.$$test" :in))
  t
 )                                  ==> T

 (defun readslime (x) (string-right-trim " " (readline x)))
                                    ==> READSLIME

 (READSLIME FOO)       ==> "Four score and seven"
 (READ FOO)            ==> YEARS
 (READSLIME FOO)       ==> "years ago"
 (READ FOO)            ==> OUR
 (READ FOO)            ==> FATHERS
 (READSLIME FOO)       ==> "our fathers"   ; those blanks did it
 (READSLIME FOO)       ==> "brought forth"
 (READSLIME FOO)       ==> "NIL" ; because READLINE returned NIL

