
 ZIL has a Maclisp-style array facility; it includes the *ARRAY, ARRAY,
 ARRAYP, STORE, ARRAYCALL, FILLARRAY, ARRAYDIMS and *REARRAY functions,
 as well as supporting the function-call syntax of array references.

 Arrays are not to be confused with vectors, which are native ZIL
 objects.  Vectors are always one-dimensional, and their elements are
 accessed via VREF and VSET.  Arrays may have any number of dimensions,
 and their elements must be accessed via the array functions documented
 herein.  Keep in mind, however, that vectors are far more efficient
 than arrays, at least in the current implementation of ZIL.  Arrays are
 present chiefly because Macsyma requires them.

 The array functions are autoloading, in that referencing one of
 them will cause them all to become defined under the interpreter.
 To compile code that uses any of these, however, you must include
 the following:

 (eval-when (compile)
  (zlarray)
 )

 A complete discussion of these functions, as they are implemented in
 Maclisp, may be found in the following manual:

  The Revised Maclisp Manual (Pitman) - MIT/LCS/TR-295

  p. 140 & ff.

 Herewith, a summary of the ZIL implementation, scarfed copiously
 from the above manual at times.

 An array object is a structure of type ZIL-ARRAY which is created via
 the ARRAY macro or the *ARRAY function.  An array has a fixed number of
 dimensions, and an array access requires the same number of subscripts
 as the array has dimensions.  Omitted subscripts do not default; it is
 an error not to provide the correct number of subscripts for an array
 reference.  In the ZIL implementation, there is no theoretical limit on
 the number of dimensions an array may have; however, more than two
 dimensions is not recommended as far as performance goes.

 Maclisp supports four basic kinds of arrays - FIXNUM, FLONUM, T and NIL
 - but in ZIL these are all processed identically, except for the way
 the array data is initialized.  A FIXNUM array has all its elements
 initialized to 0 when it is created; a FLONUM array has all its
 elements initialized to 0.0 when it is created.  All other kinds of
 arrays have all their elements initialized to NIL when they are
 created.  Note that when an array is *REARRAYed, the new array type
 has no effect on how the array data is reinitialized.

 A "named array" is a symbol which has an ARRAY property, the value of
 which is an array object.  Named arrays can be thought of as functions
 of a fixed number of fixnum arguments, which are its subscripts.  The
 form (F X), which normally refers to a function F called on an argument
 X, can also be a reference to a named array F with the single subscript
 X.  This is effected in ZIL by defining a SUBR property for F which
 implements the array access (any existing function definition is saved
 and then restored when the array is "un-defined").

 Array indices are ZERO-BASED.

 You can reference an element of an array in the following ways:

  (1) Like a function call:  (arrayname dim1 dim2 ...)
      e.g. (F 5) gets the 5th element of array F, analogous to the
      FORTRAN notation F(5)

  (2) Using the ARRAYCALL function (actually a macro):
      (ARRAYCALL T arrayobj dim1 dim2 ...)
      This form is usually used with unnamed arrays, since you can't
      use the other form.
      (e.g. (ARRAYCALL T F 5)

 An array is also a function that can be applied to arguments; or you
 can apply a named array by name.  For example, if you have a named
 array defined by

   (ARRAY FOO T 10 10)

 then you can get to element (2,2) of the array by any of the
 following means:

   (FOO 2 2)
   (ARRAYCALL T 'FOO 2 2)
   (FUNCALL 'FOO 2 2)
   (APPLY 'FOO '(2 2))

 The preferred way to access an array, however, is ARRAYCALL, which
 is the only one of the above that works (or is guaranteed to work)
 on unnamed arrays.


 The following functions and macros are available to process arrays:


 (ARRAY name1 type2 &rest dims)

  where name1 and type2 are NOT evaluated, or

 (*ARRAY name1 type2 &rest dims)

  where name1 and type2 ARE evaluated, are the functions used to
  create both named and unnamed arrays.  Either one creates an
  N-dimensional array (where N is the number of "dims") of the type
  specified by type1 (which is generally T, FIXNUM or FLONUM).
  If name1 is NIL, this creates an unnamed array object, which is
  returned.  Otherwise, name1 must be a symbol which is to designate
  a named array, in which case the newly created array object is made
  the value of name1's ARRAY property, any existing function and array
  definitions for name1 are saved, and name1 is returned as the value
  of the form.

  Each "dim" must be a positive integer specifying the length of the
  corresponding dimension.  The indices used are zero-origined, so
  the maximum index for a given dimension of length L is L-1.
  The array elements are initialized to NIL, unless the array type
  is FIXNUM (in which case they are initialized to 0) or FLONUM (in
  which case they are initialized to 0.0).

  The Maclisp array types OBARRAY and READTABLE are not supported by
  ZIL, and will be treated as type T.


 (ZIL-ARRAY array1)

  returns the array object associated with array1, which must be either
  a symbol that names a named array, or an unnamed array, or the value
  of the ARRAY property of another symbol.  If this object is not an
  array, an error is signalled.  This function is used by most of the
  other array functions to get hold of the actual array object that is
  to be processed.


 (ARRAYP arg1)

  returns T if arg1 is a Maclisp-style array, otherwise NIL.  arg1 can
  be a symbol that names an array or an unnamed array.


 (ARRAYCALL type1 array1 &rest dims)

  where type1 is NOT evaluated, or

 (*ARRAYCALL type1 array1 &rest dims)

  where type1 IS evaluated, accesses an element of the array specified
  by array1.  If the number of arguments following array1 is equal to
  the number of dimensions of the array, this returns the corresponding
  element of the array (unless all the dimension arguments are NIL, in
  which case the entire vector of array elements is returned).  If the
  number of arguments following array1 is one more than the number of
  dimensions of the array, the last argument is a value to which the
  corresponding element of the array is set, and that is also the
  returned value.

  As stated above, (foo dim1 dim2 ... {newvalue}) is equivalent to
  (arraycall t 'foo dim1 dim2 ... {newvalue}).  Note that for named
  arrays, the array1 argument must be quoted, or else it must be a
  form that evaluates to the NAME of the named array.


 (STORE arrayref1 val2)

  where arrayref1 is any form that can be used to access an element
  of an array as described above, sets the corresponding element of
  the array to val2.

  SETF may also be used to store array values.
  The following are equivalent:

  (FOO 2 2 'BAR)
  (STORE (FOO 2 2) 'BAR)
  (SETF (FOO 2 2) 'BAR)
  (ARRAYCALL T 'FOO 2 2 'BAR)
  (*ARRAYCALL T 'FOO 2 2 'BAR)
  (SETF (ARRAYCALL T 'FOO 2 2) 'BAR)
  (SETF (*ARRAYCALL T 'FOO 2 2) 'BAR)

  In fact, even the following is permitted:

  (STORE (APPLY 'FOO '(2 2)) 'BAR)

  That is a special case because it occurs in some Macsyma code.


 (*REARRAY name1 &optional type2 &rest dims)

  is used to "undefine" an array, or change the type or dimensions of
  an existing array.  In ZIL, name1 must be the name of a named array.

  (*REARRAY name1) gets rid of the array associated with name1.  Any
  previous function or array definition name1 had is restored.  name1 is
  returned.

  (*REARRAY name1 type2 dim3 ...) is like (*ARRAY name1 type2 dim3 ...)
  except that the contents of the previously existing array named by
  name1 are copied into a new array with the specified type and
  dimensions, and this new array is made the array associated with
  name1.  The array elements are copied as if a LISTARRAY followed by
  a FILLARRAY had been done, without regard to the new array type.


 (FILLARRAY array1 arg2)

  If arg2 is a list, this fills array1 (a named or unnamed array)
  sequentially with successive elements of arg2, of whi excess
  elements are ignored, and the LAST element of arg2 is used to fill
  any remaining array slots.

  If arg2 is another array, its successive elements are used to fill in
  the array the same as if arg2 were a list, except that if arg2 is too
  short, the remaining slots in array1 are unchanged.  Row-major order
  is observed.

  If arg2 is a ZIL vector, its successive elements are used to fill in
  the array the same as if arg2 were a list, except that if arg2 is too
  short, the remaining slots in array1 are unchanged.  Row-major order
  is observed.

  If arg2 is anything else, an error is signalled.

  array1 is returned as the value.

 (LISTARRAY array1)

  takes the elements of array1 and returns a list of those elements.
  The length of the list is the size of the array (the product of its
  dimensions) and the elements are present in the list in the same
  order as they are stored in the array, starting with the 0th element.
  Row-major order is observed.


 (ARRAYDIMS array1)

  Returns a list whose CAR is the array type and the rest of whose
  elements are the lengths of the dimensions of array1.


 (ARRAY-\#-DIMS array1)

  where the \ is not part of the function name, but present because
  that's how you have to type it, returns the number of dimensions
  of array1.


 (ARRAY-DIMENSION-N num1 array2)

  returns the length of dimension num1 of array array2.  num1 must be
  an integer.  If num1 is greater than the number of dimensions,
  NIL is returned.  If num1 is not positive, NIL is returned.


 (ARRAY-TYPE array1)

  returns the type of array1.

Examples:

 ; 1. Examples using named arrays.

 (ARRAY FOO T 2 3)          ==> FOO
 (ARRAYP 'FOO)              ==> T
 (ARRAYP (GET 'FOO 'ARRAY)) ==> T
 (ARRAYDIMS 'FOO)           ==> (T 2 3)
 (ARRAY-\#-DIMS 'FOO)       ==> 2
 (ARRAY-DIMENSION-N 1 'FOO) ==> 2
 (ARRAY-DIMENSION-N 2 'FOO) ==> 3
 (ARRAY-DIMENSION-N 3 'FOO) ==> NIL
 (ARRAY-TYPE 'FOO)          ==> T
 (FOO NIL NIL)              ==> #(NIL NIL NIL NIL NIL NIL)
 (PROGN
  (FILLARRAY 'FOO '(A B C))
  (FOO NIL NIL))            ==> #(A B C C C C)
 (PROGN
  (FILLARRAY 'FOO #(D E F))
  (FOO NIL NIL))            ==> #(D E F C C C)
 (LISTARRAY 'FOO)           ==> (D E F C C C)
 (DOTIMES (I 2)
  (DOTIMES (J 3)
   (FOO I J (LIST I J))))   ==> NIL
 (FOO 1 2)                  ==> (1 2)
 (ARRAYCALL T 'FOO 1 2)     ==> (1 2)
 (FUNCALL 'FOO 1 2)         ==> (1 2)
 (APPLY 'FOO '(1 2))        ==> (1 2)


 (FOO 1 2 'B1)                        ==> B1
 (FOO 1 2)                            ==> B1
 (STORE (FOO 1 2) 'B2)                ==> B2
 (FOO 1 2)                            ==> B2
 (SETF (FOO 1 2) 'B3)                 ==> B3
 (FOO 1 2)                            ==> B3
 (ARRAYCALL T 'FOO 1 2 'B4)           ==> B4
 (FOO 1 2)                            ==> B4
 (*ARRAYCALL T 'FOO 1 2 'B5)          ==> B5
 (FOO 1 2)                            ==> B5
 (SETF (ARRAYCALL T 'FOO 1 2) 'B6)    ==> B6
 (FOO 1 2)                            ==> B6
 (SETF (*ARRAYCALL T 'FOO 1 2) 'B7)   ==> B7
 (FOO 1 2)                            ==> B7
 (STORE (APPLY 'FOO '(1 2)) 'B8)      ==> B8
 (FOO 1 2)                            ==> B8

 (*ARRAY 'BAR 'FIXNUM 10)    ==> BAR
 (ARRAYP 'BAR)               ==> T
 (ARRAYDIMS 'BAR)            ==> (FIXNUM 10)
 (ARRAY-\#-DIMS 'BAR)        ==> 1
 (ARRAY-DIMENSION-N 1 'BAR)  ==> 10
 (ARRAY-DIMENSION-N 2 'BAR)  ==> NIL
 (ARRAY-DIMENSION-N 3 'BAR)  ==> NIL
 (ARRAY-TYPE 'BAR)           ==> FIXNUM
 (LISTARRAY 'BAR)            ==> (0 0 0 0 0 0 0 0 0 0)
 (FILLARRAY 'FOO 'BAR)       ==> FOO
 (LISTARRAY 'FOO)            ==> (0 0 0 0 0 0)
 (FILLARRAY 'FOO '(A B C D)) ==> FOO
 (LISTARRAY 'FOO)            ==> (A B C D D D)

 (*REARRAY 'FOO 'FIXNUM 10)  ==> FOO
 (ARRAYP 'FOO)               ==> T
 (ARRAYDIMS 'FOO)            ==> (FIXNUM 10)
 (ARRAY-\#-DIMS 'FOO)        ==> 1
 (ARRAY-DIMENSION-N 1 'FOO)  ==> 10
 (ARRAY-DIMENSION-N 2 'FOO)  ==> NIL
 (ARRAY-DIMENSION-N 3 'FOO)  ==> NIL
 (ARRAY-TYPE 'FOO)           ==> FIXNUM
 (LISTARRAY 'FOO)            ==> (A B C D D D D D D D)
 (DOTIMES (I 10)
   (FOO I (* I I)))          ==> NIL
 (LISTARRAY 'FOO)            ==> (0 1 4 9 16 25 36 49 64 81)
 (ARRAYCALL T 'FOO 3)        ==> 9


 ; 2. Examples using unnamed arrays.

 (PROGN
  (SETQ A (ARRAY NIL T 2 3))
  (ARRAYP A))               ==> T
 (ARRAYDIMS A)              ==> (T 2 3)
 (ARRAY-\#-DIMS A)          ==> 2
 (ARRAY-DIMENSION-N 1 A)    ==> 2
 (ARRAY-DIMENSION-N 2 A)    ==> 3
 (ARRAY-DIMENSION-N 3 A)    ==> NIL
 (ARRAY-TYPE A)             ==> T
 (PROGN
  (FILLARRAY A '(A B C))
  (LISTARRAY A))            ==> (A B C C C C)
 (PROGN
  (FILLARRAY A #(D E F))
  (LISTARRAY A))            ==> (D E F C C C)
 (DOTIMES (I 2)
  (DOTIMES (J 3)
   (*ARRAYCALL 'T A I J (LIST I J))))   ==> NIL
 (ARRAYCALL T A 1 2)        ==> (1 2)

 (FUNCALL A 1 2)            ==> (1 2)
 (APPLY A '(1 2))           ==> (1 2)


 (ARRAYCALL T A 1 2 'V1)              ==> V1
 (ARRAYCALL T A 1 2)                  ==> V1
 (*ARRAYCALL T A 1 2 'V2)             ==> V2
 (ARRAYCALL T A 1 2)                  ==> V2
 (SETF (ARRAYCALL T A 1 2) 'V3)       ==> V3
 (ARRAYCALL T A 1 2)                  ==> V3
 (SETF (*ARRAYCALL T A 1 2) 'V4)      ==> V4
 (ARRAYCALL T A 1 2)                  ==> V4

 (STORE (APPLY A '(1 2)) 'V5)         ==> V5
 (ARRAYCALL T A 1 2)                  ==> V5

 (PROGN
  (SETQ B (*ARRAY NIL 'FIXNUM 10))
  (ARRAYP B))                ==> T
 (ARRAYDIMS B)               ==> (FIXNUM 10)
 (ARRAY-\#-DIMS B)           ==> 1
 (ARRAY-DIMENSION-N 1 B)     ==> 10
 (ARRAY-DIMENSION-N 2 B)     ==> NIL
 (ARRAY-DIMENSION-N 3 B)     ==> NIL
 (ARRAY-TYPE B)              ==> FIXNUM
 (LISTARRAY B)               ==> (0 0 0 0 0 0 0 0 0 0)
 (PROGN
  (FILLARRAY A B)
  (LISTARRAY A))             ==> (0 0 0 0 0 0)
 (PROGN
  (FILLARRAY A '(A B C D))
  (LISTARRAY A))            ==> (A B C D D D)

