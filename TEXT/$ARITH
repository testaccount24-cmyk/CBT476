
 The following comments pertain to ZIL arithmetic functions in general
 (i.e. +, -, etc.).

 Type coercion is as follows:

     integer op integer            -->  integer
     integer op single-float       -->  single-float
     integer op double-float       -->  double-float
     single-float op integer       -->  single-float
     single-float op single-float  -->  single-float
     single-float op double-float  -->  double-float
     double-float op integer       -->  double-float
     double-float op single-float  -->  double-float
     double-float op double-float  -->  double-float

 Note that "integers" comprise fixnums and bignums, where the
 appropriate type of integer is generated depending on the
 magnitude.

 For functions that take more than 2 arguments, the binary operation
 is applied to the arguments in left-to-right order, following the
 coercion rules described above.

 For functions that take only one argument, the type of the result is
 the same as the type of the argument.  (Note that this is not true of
 the transcendental functions, for which an integer argument produces a
 double-float result.)

 In ZIL, the above coercion applies to division as it does to all
 other operations, meaning that dividing one integer by another
 will produce a (truncated) integer result.

 Errors will be signalled in the following circumstances:

  Non-numeric arguments.

  Integer (bignum) too large to convert to single-float or double-float
  as appropriate.

  Not enough vector/string space to build a bignum or double-float
  result.

 Floating-point overflow is not detected by the code,
 and may result in a program check (0CC) abend.

 Floating-point underflow is ignored and may produce a zero result.

