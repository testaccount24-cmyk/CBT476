
                 *** ZIL Function Tracing ***

The ZIL interpreter helps you to debug your code by providing a
tracing facility, invoked by the TRACE function, which shows the
execution of all or selected LISP functions as they are running.

The following functions (actually macros) are available in ZIL:

  TRACE   - activates tracing for all or selected LISP functions.

  UNTRACE - deactivates tracing for all or selected functions.

  AT      - specifies processing done on entry to or exit from function

  OFF     - cancels a previous AT request

  PUTDATA - displays value of a form (not strictly a tracing function)

Function calls that can be traced include:

  EXPR's (interpreted functions that evaluate their arguments)
  SUBR's (compiled functions, when called by interpretive code)

Function calls that CANNOT be traced include:

  FEXPR's (interpreted functions that don't evaluate their arguments)
  MACRO's (although the macro expansion process can be traced by
           tracing the individual functions invoked during
           macro expansion)
  Special forms (see member $SFORMS for a complete list of these)
  Compiled code invoked from other compiled code (unless it is
           invoked via FUNCALL)

For the exact syntax of TRACE, UNTRACE, AT, OFF and PUTDATA,
see the members of this document of those names.

The trace output takes the following form:

 When a function is about to be executed, its name is displayed
 next to the word ";Enter" along with its (evaluated) argument
 list.

 When a function is exited, its name is displayed next to the
 word ";Exit" along with the values that it is returning.

 Here is a sample session that illustrates tracing capabilities:

 (defun foo (x) (values (cons x x) t))
  FOO

 (foo 'bar)
  (BAR . BAR)
  T

 (trace foo cons)
  (FOO CONS)

 (foo 'bar)
  ;Enter FOO (BAR)
   ;Enter CONS (BAR BAR)
   ;Exit CONS: (BAR . BAR)
  ;Exit FOO: (BAR . BAR), T
  (BAR . BAR)
  T

 (untrace foo cons)
  (FOO CONS)

 (at foo)
  FOO

 ; Note that as soon as an AT is executed, normal tracing is activated
 ; for both entry and exit, and the particular AT that is specified
 ; overrides only that aspect of the tracing.

 (foo 'bar)
  ;At entry to FOO.
  ;Exit FOO: (BAR . BAR), T
 (BAR . BAR)
 T

 (at (foo entry) (&rest args) (putdata args))
 FOO

 (foo 1)
  ;At entry to FOO.
 ARGS=(1)
  ;Exit FOO: (1 . 1), T
 (1 . 1)
 T

 (at (foo :entry) (arg1) (putdata arg1))
 FOO

 (foo 1)
  ;At entry to FOO.
 ARG1=
  ;Exit FOO: (1 . 1), T
 (1 . 1)
 T

 (at (foo :entry t) (arg1) (putdata arg1))
 FOO

 (foo 1)
 ARG1=
  ;Exit FOO: (1 . 1), T
 (1 . 1)
 T

 (at (foo exit) (&rest values) (putdata values))
 FOO

 (foo 1)
 ARG1=
  ;At exit from FOO.
 VALUES=((1 . 1) T)
 (1 . 1)
 T

 (at (foo :exit t) (v1 v2) (putdata v1 v2))
 FOO

 (foo 1)
 ARG1=
 V1=(1 . 1),V2=T
 (1 . 1)
 T

 (off foo)
 FOO

 ; Note that OFF removes AT processing from either entry or exit, and
 ; restores normal tracing behavior for that aspect.  UNTRACE is still
 ; required to remove all tracing from the function.

 (foo 1)
  ;Enter FOO (1)
 V1=(1 . 1),V2=T
 (1 . 1)
 T

 (off (foo exit))
 FOO

 (foo 1)
  ;Enter FOO (1)
  ;Exit FOO: (1 . 1), T
 (1 . 1)
 T

 (untrace foo)
 (FOO)

 (foo 1)
 (1 . 1)
 T

