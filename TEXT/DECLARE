
Special Form: DECLARE

Syntax:   (DECLARE &rest args)

 arg (optional, not evaluated) - any LISP object.

Returns:

 NIL.

Processing:

 Under the ZIL interpreter, all DECLAREs except those for SPECIAL
 variables are ignored.  However, under the compiler DECLARE is used to
 convey information about a host of different things.

 Although there are many clauses that can occur within a DECLARE,
 many are ignored by the ZIL compiler (although they do not cause
 an error).  The ones recognized by ZIL include those below.

 DECLARE may occur at top level, or within a LAMBDA, DEFUN, PROG,
 LET, or other variable binding form, provided that the DECLARE
 form or forms be the first forms in the body; that is, they may
 not be preceded by other kinds of forms, with the possible
 exception of documentation strings.

 Within a form, the only recognized clauses are:

   (SPECIAL &rest vars) - this clause tells the compiler AND the
     interpreter that the variables (symbols) named herein are to be
     processed as "free" variables; i.e. other functions may refer to
     their dynamic bindings, these being true Common LISP "special"
     variables.

     A SPECIAL declaration at "top level" causes the affected variable
     bindings to be treated as SPECIAL everywhere they are found.

     A SPECIAL declaration within a form affects only those bindings
     done specifically by that form, unless the variables referenced
     are not bound in that form, in which case the declaration
     applies to references in the body of that form.  The actual
     details of how SPECIAL declarations work are quite involved.
     For the complete story, read the discussion in Steele's
     "Common LISP: The Language" in the section on declarations.


 At top level, the recognized DECLARE clauses are:

   (SPECIAL &rest vars) - this clause tells the compiler that the
     variables (symbols) named herein are to be compiled as "free"
     variables as for DECLARE inside a function.  The difference
     is that a top-level DECLARE SPECIAL causes ALL references to
     those variables in the file to be compiled as "free" variables.
     Under the interpreter, this declaration affects all future
     bindings of the variables affected.  This may produce unwanted
     results, so use top-level DECLARE under the interpreter with
     EXTREME CAUTION.

   (SEGMENT (func num) (func num) ...) tells the compiler to "segment"
     the body of function "func" into "num" parts.  The value of "num"
     must be an integer greater than zero.

     Segmenting is a way of solving the problem of compiling a function
     whose generated code would contain more than 16K of addressable
     code and data.

     When you specify, for example,

      (DECLARE (SEGMENT (FOO 8)))

     the compiler will automatically take the body of FOO and attempt
     to split it up into 8 segments of approximately equal size.  In
     fact, the number of segments may be different; the compiler tries
     to compute the size of each segment by dividing the total length
     of the function body by the requested segment count.

     When the compiler segments a function, it first "flattens out"
     the function body by fully macroexpanding it, splicing the
     contents of imbedded PROGN's into the function body, and
     discarding all atoms or constant forms except for the last
     form, which is the one that would be returned as a value.
     It then uses the number of forms in the body as the basis for
     determining how to segment it.

     After segmentation, the original function body is, in effect,
     replaced by a body which contains n calls to internally
     generated functions of no arguments (where n is less than or
     equal to the requested segment count).  The internally generated
     functions have names like |<function-name SEGMENT n|.
     If the segment count is greater than or equal to the length of
     the function body, then one segment is generated for each form
     in the body.

     You should choose the number of segments in such a way as to
     guarantee that the size of each segment will be within the 16K
     limit, so that the generated code for each will compile
     successfully.

     The function being segmented should have a null argument list.
     Otherwise, the variables in the argument list will become "free"
     variables in the segmented function code, and (even though they are
     lexically in the correct place) will generate overhead of creating
     non-local bindings.  The compiler will warn you when you segment a
     function with a non-null argument list.

     You should not use segmentation unless absolutely necessary,
     because of the additional function call overhead that result.

     Segmentation is particularly useful when compiling a MODULE, which
     may have a huge number of forms.  To use segmentation when
     compiling module FROB, for example, specify:

       (DECLARE (SEGMENT (FROB n)))

     Even though there is no explicit definition of FROB in the MODULE
     (in fact, an explicit definition would be illegal!), the compiler
     will segment the top-level surrounding function it builds to
     effect the loading of the code in the module.


   (NOCOMPILE funcspec ...) tells the compiler that the function
     represented by "funcspec" is to be loaded interpretively rather
     than compiled.

     Currently this is applicable only to definitions that occur in
     a file being compiled as a MODULE.

     One or more "funcspec"'s may be coded; each is either a symbol
     which is defined as a function name somewhere in the file being
     compiled, or a list (function-name function-property) such as
     can occur in a definition of the form (DEFUN (FOO BAR) ...).

     You may need this if the function in question contains code
     that the compiler doesn't like but works fine interpreted.

     Warning: If the function refers to "free" variables that are
              bound in other (compiled) functions but are not
              declared "special", they may wind up undefined when
              the uncompiled code is called.


    (DEFAULT-BINDING ...)
     specifies what the compiler is to do with a "free" variable
     reference that has not been subject to a declaration.  The
     default is (DEFAULT-BINDING SPECIAL), which means that the
     compiler assumes (like the interpreter in a similar situation)
     that the variable was meant to be SPECIAL, and is compiled
     thus.  It does not affect references to the variable in
     other environments.  You could specify (DEFAULT-BINDING NIL)
     to tell the compiler to treat such variable references as
     errors that terminate the compilation.


   (PDSIZE value) - valid for PROGRAM's only, this specifies the
     size of the push down stack to be allocated at initialization.
     This value may be specified as a fixnum or a value in the
     format nnnK or nnnM.  The default value is 65536 (64K).

     This space is allocated above 16 megabytes if possible.


   (CSSIZE value) - valid for PROGRAM's only, this specifies the total
     size of the CONS space to be allocated at initialization time.  If
     this is omitted, the default value of 4 megabytes (4096K) is used.

     Lists (conses), fixnums, single-floats, and the header portions
     of executable objects are allocated in this space.

     This value represents the TOTAL allocation, not to be confused
     with the initial ACTIVE size of the space - see ACSIZE below.

     This space is allocated above 16 megabytes if possible.

   (ACSIZE value) - valid for PROGRAM's only, this specifies the size of
     the CONS space to be considered active initially.  If this is
     omitted, the default value of 2 megabytes (2048K) is used.

     This value controls how much of the total CONS space (as specified
     by CSSIZE) is in use, until it is determined (by the garbage
     collector) that more space is needed, at which time the ACSIZE
     value is doubled, provided that it does not exceed the CSSIZE
     value.  Thus, this is the only one of the values described here
     that can change during execution.

   (VSSIZE value) - valid for PROGRAM's only, this specifies the size of
     vector/string space (the space used to build symbols, vectors,
     strings, double-floats, bignums and structures) to be allocated at
     initialization time.  If this is omitted, the default value of
     1024K is used.

     Note that this space is allocated in duplicate, due to the copying
     garbage collection scheme used for this space in ZIL.  Thus in
     actuality twice the specified virtual storage is required.

     This space is allocated above 16 megabytes if possible.


   (OSSIZE value) - This is no longer supported.  Valid for PROGRAM's
     only, this used to specify the size of memory to be reserved for
     the operating system at initialization time (i.e. NOT allocated to
     ZIL).  However, since ZIL now uses memory above the 16-megabyte
     line, it is not necessary to reserve room for OS functions as much
     as before.

 The following declarations are no longer present in ZIL 1.3:

     AUTOFUNCALL - all ZIL 1.3 code is compiled as if (AUTOFUNCALL T)
                   were specified.
     AUTOSPECIAL - all ZIL 1.3 code is compiled as if (AUTOSPECIAL T)
                   were specified.
     BASEREG     - the ZIL 1.3 compiler determines the correct
                   generation of code for functions up to 16K bytes
                   in length.  Beyond that, the compilation will
                   terminate with an error message, and you will
                   have to use segmentation (see above) to get your
                   function to compile.

Errors signaled:

 Invalid DECLARE clause (not a proper list).
 Misplaced DECLARE clause (found within a function in a place where
 its value would be used if it were evaluated).
 Miscellaneous errors within DECLARE clauses (for example, object
 other than a symbol found in a SPECIAL clause).

Notes:

Examples:

  (defun foo (x y z)
   (declare (special x y))
   (bar x y z))

  (declare (cssize 8M) (vssize 256K))

