
Function: PBIND

Syntax:   (PBIND arg1)

 arg1 (required, evaluated) - a symbol.

Returns:

 The contents of the value/binding cell of arg1.

Processing:

 If arg1 has no global value (even if it is dynamically bound),
 an object whose CDR is the "unbound marker" is returned.
 This could be the "unbound marker" itself - see ZILUNBND.

 If arg1 is self-evaluating (e.g. NIL, T or a "keyword"),
 arg1 is returned.

 Otherwise, a CONS whose CDR is the global value of the symbol
 is returned.

Errors signaled:

 Invalid argument (under the interpreter only).

Notes:

 No errors are detected in compiled code; results are unpredictable
 if an invalid argument is passed.

 The fact that (CDR (PBIND x)) returns the "unbound marker"
 does NOT means that x is unbound.  However, if (PBIND x) returns x,
 then x is self-evaluating.  This is a fair assumption that is used
 by many internal ZIL routines.

 This function is intended for internal use only, and is intimately
 tied up with ZIL's binding techniques.  Do not depend on it!

 See SETPBIND, which modifies the value/binding cell.  (Another
 function not to be used!)

Examples:

 ; Assume PBIND_A and PBIND_B have never been assigned values.

 (PBIND NIL)        ==> NIL
 (PBIND T)          ==> T
 (PBIND :FOO)       ==> :FOO

 (PBIND 'PBIND_A)         ==> #.(zilunbnd) ; the "unbound" marker
 (SETQ PBIND_A "foo")     ==> "foo"
 (PBIND 'PBIND_A)         ==> (PBIND_A . "foo")

 (MAKUNBOUND 'PBIND_A)    ==> PBIND_A
 (PBIND 'PBIND_A)    ==> (PBIND_A . #.(zilunbnd)) ; "bound" but no value

 (MAKUNBOUND 'PBIND_B)    ==> PBIND_B
 (PBIND 'PBIND_B)         ==> #.(zilunbnd) ; the "unbound" marker

 (LET ((PBIND_B 1)) (PBIND 'PBIND_B)) ==> #.(zilunbnd)
                                   ; Local binding makes no difference.

 (LET ((PBIND_B 1))
      (DECLARE (SPECIAL PBIND_B))
      (PBIND 'PBIND_B))  ==> #.(zilunbnd)
      ; Even SPECIAL binding makes no difference.

