
Function: MAKUNBOUND

Syntax:   (MAKUNBOUND arg1)
    or:   (MAKUNBOU   arg1)

 arg1 (required, evaluated) - a symbol.

Returns:

 arg1, after removing the current binding thereof (whether dynamic
 or global).

Processing:

 The variable specified by arg1 must have one of the following:

  (1) a current dynamic (special) binding.

  (2) a current global binding (as assigned by DEFVAR, for example).

 If it does, that binding is undone.  Global bindings are always
 undone, and only the current dynamic or DEFVAR binding, if one exists,
 is undone.

 What "undone" means in this context is NOT that the binding is removed;
 rather, the binding is made valueless.  This means that while the
 current binding remains active, the symbol will have no value.  If
 the current binding shadows another binding, then when the current
 binding scope is exited the previous binding will have effect again.

Errors signaled:

 Arg not a symbol.

Notes:

 Remember that the argument to MAKUNBOUND is evaluated.

 See BOUNDP, DEFVAR, SETQ and SYMEVAL for more information.

Examples:

(progn
 (setplist 'a nil)                ; Remove any funny properties.
 (makunbound 'a)
)                           ==> A ; Insure A not bound.

(boundp 'a)                 ==> NIL
(defvar a 'foo)             ==> A
a                           ==> FOO
(makunbound 'a)             ==> A
a                           ==> ("***ERROR***") ; Unbound variable - A

(let ((a 1) (b 2))
     (declare (special a))
     (boundp 'a))           ==> T

(let ((a 1) (b 2))
     (declare (special a))
     (makunbound 'a)
     (boundp 'a))           ==> NIL

(let ((a 1) (b nil))
     (declare (special a))
     (let ((a 2))
          (declare (special a))
          (push (if (boundp 'a) a nil) b)
          (makunbound 'a)
          (push (if (boundp 'a) a nil) b)
     )
     (push (if (boundp 'a) a nil) b)
     (makunbound 'a)
     (push (if (boundp 'a) a nil) b)
     (nreverse b)
)
                           ==> (2 nil 1 nil)

