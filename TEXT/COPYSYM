
Function: COPY-SYMBOL

Syntax:   (COPY-SYMBOL symbol1 arg2)
    or:   (COPYSYM symbol1 arg2)

 symbol1 (required, evaluated) - a symbol.
 arg2 (required, evaluated) - any LISP object, but generally T or NIL.

Returns:

 An uninterned symbol whose print name is the same as symbol1's, with
 a copy of its property list only if arg2 is non-NIL.

Processing:

 A new symbol is created with the same print name as that of symbol1.
 The new symbol is not interned on the oblist; therefore it will not
 be EQ to symbol1 or any other symbol.

 If arg2 is NIL, the new symbol will be given a null property list.
 Otherwise (arg2 is non-NIL), a copy of symbol1's property list (this
 is a top-level copy as made by APPEND) is made the property list of
 the new symbol.  Also if arg2 is non-NIL, the current SPECIAL
 variable value and function definition are copied to the new symbol.

Errors signaled:

 First argument not a symbol.

Notes:

 If the property list is copied, it is done in order to prevent
 property list operations from side-effecting the property list of
 the other symbol.

Examples:

 (SETPLIST 'FOO (LIST 'A 'B 'C 'D)) ==> FOO
 (SETQ A (COPY-SYMBOL 'FOO NIL))    ==> FOO ; but not interned
 (EQ A 'FOO)                        ==> NIL
 (PLIST A)                          ==> NIL

 (GET 'FOO 'A)                      ==> B
 (GET A 'A)                         ==> NIL

 (SETQ A (COPY-SYMBOL 'FOO T))      ==> FOO ; but not interned
 (EQ A 'FOO)                        ==> NIL
 (PLIST A)                          ==> (A B C D)

 (GET 'FOO 'A)                      ==> B
 (GET A 'A)                         ==> B

 (SETF (GET 'FOO 'A) 'C)            ==> C
 (GET 'FOO 'A)                      ==> C
 (GET A 'A)                         ==> B  ; not affected.

