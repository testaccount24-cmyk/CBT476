
Macro: MULTIPLE-VALUE-PROG1

Syntax:   (MULTIPLE-VALUE-PROG1 arg1 &rest args)

 argn (optional, evaluated) - any LISP object.
 At least 1 argument is required.

Returns:

 The values returned by the first of the arguments, after evaluating all
 of the arguments in sequence.

Processing:

 All of the arguments are evaluated; since only the values of the first
 are used, the others are generally specified for their effect only.
 The results of evaluating arg1 with the expectation that multiple
 values will be returned are passed as the values of this form.

 In other words, MULTIPLE-VALUE-PROG1 is identical to PROG1 except that
 if the first argument produces multiple values, all of these values
 will be returned.  PROG1 always returns a single value, as does PROG2.

Errors signaled:

 Too few arguments (at least one is required).

Notes:

 See VALUES and VALUES-LIST for information on how multiple values
 are returned from a function.

 See Guy Steele's "Common LISP: The Language", pp. 133-139, for
 an explanation of multiple values in LISP.  Although the constant
 MULTIPLE-VALUES-LIMIT is not defined in ZIL, returning more than
 4095 multiple values is not supported.

 In many cases, use of multiple values in ZIL is more expensive than
 just consing up a list of the values and extracting the values from
 the list via destructuring.  In any case, out of all the forms that
 request multiple values, only MULTIPLE-VALUE-BIND in compiled code
 is guaranteed not to cons in ZIL.

Examples:

 (MULTIPLE-VALUE-LIST (PROG1 (VALUES 1 2) 'A 'B))  ==> (1)
 (MULTIPLE-VALUE-LIST (MULTIPLE-VALUE-PROG1 (VALUES 1 2) 'A 'B))
                                                   ==> (1 2)

