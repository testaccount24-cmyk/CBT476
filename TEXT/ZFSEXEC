
Function: ZFSEXEC

Syntax:   (ZFSEXEC &key
                   panel-name
                   panel-library
                   long-appl
                   short-appl
                   terpri-exit-function
                   initialize-function
                   terminate-function
                   panel-init-function
                   echo-input-function
                   expr-list-function
                   refreshp-function
                   eval-expr-function
                   good-eval-function
                   bad-eval-function
                   post-eval-function
                   display-function
                   output-row-function)

 All of the below are optional keywords whose values are evaluated.

 :panel-name           - a string identifying an ISPF display panel
 :panel-library        - a string identifying a partitioned MVS dataset.
 :long-appl            - a string describing the application.
 :short-appl           - a string describing the application.
 :terpri-exit-function - a function of 1 argument.
 :initialize-function  - a function of 1 argument.
 :terminate-function   - a function of 0 arguments.
 :panel-init-function  - a function of 0 arguments.
 :echo-input-function  - a function of 1 argument.
 :expr-list-function   - a function of 2 arguments.
 :refreshp-function    - a function of 0 arguments.
 :eval-expr-function   - a function of 3 arguments.
 :good-eval-function   - a function of 2 arguments.
 :bad-eval-function    - a function of 0 arguments.
 :post-eval-function   - a function of 0 arguments.
 :display-function     - a function of 1 argument.
 :output-row-function  - a function of 1 argument.

 Defaults:

 :panel-name           - "ZFSEXEC"
 :panel-library        - (string-append "'" *zil-panel-library* "'")
 :long-appl            - "ZFSEXEC"
 :short-appl           - "ZFSEXEC"

 Defaults for all keywords that identify functions are NIL, meaning
 that that function will not be used.

Returns:

 NIL, after invoking an ISPF dialog which processes input and output,
 displaying it in scrollable full-screen mode, until the END key is
 pressed by the terminal user.

Processing:

 ZFSEXEC initializes an ISPF environment and then initiates an ISPF
 dialog loop which consists of:

  displaying the panel specified by the :panel-name keyword

  accepting input from the user, entered on the panel

  terminating if the END command is typed (or the END key is pressed)

  processing any dialog commands entered on the ISPF command line

  processing the dialog input in accordance with the functions
  specified by the caller, which will parse the input, process
  each expression in the input, and generate an output display.
  Part or all of this process will result in Lisp output which
  is captured and directed to the panel display, rather than
  being sent to the terminal as line-mode messages.

  The keywords are handled as follows:

 :panel-name

  is a string containing the name of the ISPF display panel, as would be
  specified in an ISPEXEC "DISPLAY PANEL(...)" request.  If this keyword
  is omitted, it defaults to "ZFSEXEC".  The panel must be similar to
  the default panel, a model of which is available in the data set
  'PROGLIB.ZIL.PANEL(ZFSEXEC)'.
  Associated tutorial panels for the basic full-screen interface are in
  'PROGLIB.ZIL.PANEL' beginning with the characters TZFSEX.

  See below under :panel-library for how the search for the panel name
  is done.

 :panel-library

  is a string containing the name (in TSO format) of a partitioned MVS
  data set, which is the panel data set where the panel lives.  If this
  keyword is omitted, it defaults to the panel library specified by
  *zil-panel-library*, with single quotes appended.  Note that single
  quotes must be included if the name is fully qualified (which it
  should be if you want this application to be independent of who runs
  it!).

  If the panel specified by :panel-name is already in the user's
  current ISPF panel setup, the :panel-library keyword is ignored.
  If it is not found there, however, the data set specified by the
  :panel-library keyword is hooked up (via the ISPF LIBDEF service)
  at ZFSEXEC initialization time, and the LIBDEF is undone at ZFSEXEC
  termination time.  Therefore, any pre-existing panel LIBDEFs will be
  CANCELLED during the session if this is the case.

 :long-appl

  is a string describing the application.  It is suggested that this
  string contain the name of the application together with a version
  number and/or other identifying information.  This value is what
  gets printed out on the header of SAVE files when the SAVE command
  is issued during the dialog.

 :short-appl

  is a string describing the application.  It should be brief,
  preferably a single word.  This value gets inserted in error messages
  and the like.

 :terpri-exit-function

  is a function of 1 argument, as follows:

  Arguments:

   (1) A string containing the last full line of output that has been
       generated by PRINT-type functions and captured by the dialog.

  Returns:  The return value is not used.

  When called:  This function is called whenever a TERPRI is executed
   and captured by the dialog's print trapper.  (Currently it does NOT
   get control whenever a CTERPRI is executed, even if the CTERPRI
   results in a TERPRI operation.)  Normally this is the point at
   which the line will get added to the captured output, so the exit
   gets called right before that is about to happen.

  Purpose:  Since ZFSEXEC does not intercept READ operations, it has no
   way of telling when the application will attempt to read input from
   the terminal, and when the application does read input from the
   terminal, it merely unlocks the keyboard without sending out any
   data.  Therefore, if the application has a means of determining
   at TERPRI time if a READ is likely to follow, or if for any other
   reason (e.g. tracing or echoing) it wants to do something with the
   output line, it can do it in the exit.  Note that the exit cannot
   change what ZFSEXEC does with the line (e.g. it cannot prevent it
   from becoming part of the output).

 :initialize-function

  is a function of 1 argument, as follows:

  Arguments:

   (1) An integer containing the maximum depth of the scrollable output
       section of the panel, as determined by the ISPF PQUERY service.

  Returns:  The return value is not used.

  When called:  This function is called following initialization of the
   ISPF environment when ZFSEXEC starts up.

  Purpose:  To perform additional initialization which may or may not
   pertain to the full-screen environment.  Knowledge of the depth of
   the screen is made available to allow the setting of parameters
   which may be dependent on this information.

 :terminate-function

  is a function of no arguments, as follows:

  Arguments:  None.

  Returns:  The return value is not used.

  When called:  This function is called following termination of the
   ISPF environment when ZFSEXEC winds down following the ISPF "END"
   command or PF key.

  Purpose:  To clean up anything which may have been done in the
   initialization function.

 :panel-init-function

  is a function of no arguments, as follows:

  Arguments:  None.

  Returns:  The return value is not used.

  When called:  This function is called each time the panel display
   is about to occur, after the contents of the input fields are
   regenerated but before the actual display.

  Purpose:  To perform additional panel INIT processing, such as
   regenerating the contents of a screen variable.  Note that this
   function plus ZFSEXEC's own code perform the tasks normally
   associated with an ISPF panel )INIT section.

 :echo-input-function

  is a function of 1 argument, as follows:

  Arguments:

   (1) A string containing the value typed in by the user on the
       second (non-ISPF-command) input field.

  Returns:

   The string to be echoed, in high intensity, in the scrollable
   output display.

  When called:  This function is called whenever the dialog is about to
   process the user's input string (NOT when an ISPF command is
   processed instead), and before the string, or the value returned by
   the function, is echoed on the output.  At the time this function is
   called, the input value as typed has already been stored for access
   by input-retrieval (LEFT/RIGHT key) processing.

  Purpose:  To modify the way the input is displayed when it is echoed
   on the output display, and/or to do additional processing (such as
   echoing or dribbling to an auxiliary file).  The contents of the
   input may also be converted to another format and saved by the
   application for ease of use in other functions (the return value
   from this function is NOT passed to other functions).

  If this function is not provided, the input string itself, without
  modification, is echoed in high intensity on the output display.

 :expr-list-function

  is a function of 2 arguments, as follows:

  Arguments:

   (1) A string containing the value typed in by the user on the
       second (non-ISPF-command) input field.

   (2) The ZFSEXEC print trapping function, used to capture all output.

  Returns:

   A list of expressions parsed from the input string, of which each
   element is a list of three objects:
    * The first object in each expression element is reserved, and
      should be set to NIL.
    * The second object in each expression element is a Lisp object that
      represents something to be processed by the :eval-expr-function.
    * The third object in each expression element is NIL if the "value"
      of the "evaluation" of the expression is NOT to be displayed (via
      the :display-function), and T (or any non-NIL value) if the
      "value" IS to be displayed.

  When called:  This function is called when the dialog needs to process
   the user's input, which are assumed to be (possibly more than one)
   input expressions typed in on the second input field.

  Purpose:  To convert the input into the format used by the application
   (much as the Lisp READ function converts disk or terminal input into
   S-expressions).  Since syntactically it may be possible to enter
   multiple expressions, a list of all the expressions needs to be
   returned, even though the input is retained as a single input string
   for purposes of input retrieval via the LEFT and RIGHT PF keys.

   If the code that parses the input prints messages (e.g. when a syntax
   error is detected), the output will go directly to the terminal,
   unless the code is executed under control of the "trapper" function
   passed as argument 2 to this function.  This should be done along
   the following lines:

    (defun my-expr-list-function (input-string trapper)
     (let (expression-list)
      ...
      (funcall trapper
        #'(lambda ()
            (setq expression-list ...code-to-parse-input...)))
      ...
      expression-list))

  If this function is not provided, a null list is returned, resulting
  in no expressions being processed.  In this case, only the input is
  echoed on the output display.

 :refreshp-function

  is a function of no arguments, as follows:

  Arguments:  None.

  Returns:

   NIL if an ISPF "CONTROL DISPLAY REFRESH" dialog service call is
   NOT to be executed before a redisplay of the panel following the
   processing of an input expression;  T (or any non-NIL value) if
   the refresh IS to be done.

  When called:  This function is called after a process-and-display
   has been completed for given user input, and before the panel
   is to be redisplayed with the new output.

  Purpose:  To allow the application to have control over the decision
   of the dialog to do a CONTROL DISPLAY REFRESH.  To save screen I/O,
   the screen is not refreshed unless deemed necessary.  For example,
   no refresh is done following scrolling or LOCATE or FIND operations.
   However, since arbitrary code may be invoked during the processing
   of an input expression, which may involve screen clears or TSO output
   that causes full-screen mode to be turned off, an ISPF screen refresh
   may be necessary in order to prevent the screen from being garbled.
   The application has the opportunity to override this to improve
   screen I/O, at the risk of screen destruction - in which case the
   user must press the PA2 key to view the correctly formatted screen.
   The application may, for example, maintain a global variable,
   settable by the user, which controls whether to do these screen
   refreshes; the recommended default value is to do the refresh.

  If this function is not provided, the refresh is always done, as if
  T was returned.

 :eval-expr-function

  is a function of 3 arguments, as follows:

  Arguments:

   (1) The object to be processed ("evaluated"), as taken from the
       second element of an entry on the expression list returned by
       the :expr-list-function.

   (2) A value taken from the third element of an entry on the
       expression list returned by the :expr-list-function, specifying
       whether output display is to be suppressed or not (NIL or a
       non-NIL value).

   (3) The ZFSEXEC print trapping function, used to capture all output.

  Returns:

   (1) A list of values returned by processing ("evaluating") the
       expression in question.  For example, if the expression is a Lisp
       S-expression that should be passed to EVAL, the list of multiple
       values returned by the expression might be returned.  Normally,
       however, a list of one value would be returned.

  When called:  This function is called for each expression taken from
   the list returned by the :expr-list-function, when the dialog needs
   to process ("evaluate") it.

  Purpose:  To "evaluate" the given expression.

   ZFSEXEC takes care of error and attention handling.  The caller need
   not worry about these.

   If the code that processes the expressions generates intermediate
   Lisp print output, the output will go directly to the terminal,
   unless the code is executed under control of the "trapper" function
   passed as argument 3 to this function.  This should be done along
   the following lines:

    (defun my-eval-expr-function (expression displayp trapper)
     (let (values)
      ...
      (funcall trapper
        #'(lambda ()
            (setq values ...code-to-process-expression...)))
      ...
      values))

  If this function is not provided, no processing is done, and thus
  no output is generated.

 :good-eval-function

  is a function of 2 arguments, as follows:

  Arguments:

   (1) The list of values returned by the :eval-expr-function.

   (2) A value specifying whether output display is to be suppressed or
       not (NIL or a non-NIL value).

  Returns:  The return value is not used.

  When called:  This function is called when a valid list of values has
   been returned from the :eval-expr-function (i.e. the second value
   therefrom is non-NIL), before the display of the values, if any,
   is to be done.

  Purpose:  To do processing associated with successful "evaluation"
   of an expression, such as setting application variables.

 :bad-eval-function

  is a function of no arguments, as follows:

  Arguments:  None.

  Returns:  The return value is not used.

  When called:  This function is called when it has been determined
   that "evaluation" done by the :eval-expr-function has not been
   successful (i.e. the second value returned
   therefrom is NIL).

  Purpose:  To do processing associated with unsuccessful "evaluation"
   of an expression, such as setting application variables.  There is
   no need to generate error messages, since an ISPF error message is
   generated by ZFSEXEC.

 :post-eval-function

  is a function of no arguments, as follows:

  Arguments:  None.

  Returns:  The return value is not used.

  When called:  This function is called after processing by the
   :eval-expr-function (whether successful or unsuccessful) and
   output by the :display-function.

  Purpose:  To do processing associated with finishing up the current
   input and output and preparing for the entry of the next input
   expression, such as setting application variables.

 :display-function

  is a function of 1 argument, as follows:

  Arguments:

   (1) The list of values returned by the :eval-expr function.

  Returns:  The return value is not used.

  When called:  This function is called when it is time to display
   the values generated by processing the input, after it has been
   insured that a new output line will start.

  Purpose:  To display the value or values returned by each
   expression that has been "evaluated" by the :eval-expr-function.

   Currently, the display is 100% under control of the print trapper.
   It is, therefore, not possible to have Lisp print output go to
   the terminal during this processing.

   Error handling is managed by ZFSEXEC in this case, and an ISPF error
   message is generated if an error occurs.

  If this function is not provided, no output is displayed, except for
  possible intermediate output generated during "evaluation" and a
  possible new line.

 :output-row-function

  is a function of 1 argument, as follows:

  Arguments:

   (1) A string which contains the contents of a new row which is
       to be added to the scrollable output display.

  Returns:

   A string which contains the contents of the new row which is to
   be added to the scrollable output display.  In other words, the
   same string or a modified version thereof.

  When called:  This function is called whenever a new row is to
   be added to the scrollable output display, before the row is
   padded out to 79 characters and the proper intensity attribute
   is added.

  Purpose:  To modify the contents of the output line on the display,
   e.g. to translate unprintable characters to some other format, or
   to echo or otherwise side-process the output lines.

   The input string may be of any length between 0 and 79.  It is
   padded with blanks to a length of 79 after it is passed through
   this function.

  If this function is not provided, the selfsame string is used to
  generate the output row, with padding and attribute assignment,
  as if an :output-row-function that merely returned the input
  argument were executed.

Errors signaled:

 ISPF environment not active.

Notes:

 ZIL-MVS only.  ISPF version 2 required.  If PDF is not installed
 along with ISPF, attempts to display error messages may fail.

 This is the underlying driver for ZIL-based interactive applications
 that wish to use the full-screen interface.

 If ZFSEXEC is invoked without keywords, a dummy dialog (using the
 panel named ZFSEXEC) is invoked which accepts input from the user and
 echoes it, but does not generate any additional output to display.
 All of the ISPF features (scrolling, input retrieval, FIND command)
 are available.  The END command terminates the dialog.

 Although ZFSEXEC is designed to intercept all Lisp print operations
 (except for low-level error messages or garbage collection messages),
 it does not intercept read operations, nor is it designed to.  The
 application essentially is designed to behave like a top-level
 interpreter.  Invocation of arbitrary Lisp code that issues read
 operations entails problems with the terminal interface that the
 :terpri-exit-function is provided to attempt to deal with (poorly).

Examples:

; Here's how ZFSEXEC is used inside an implementation of ISPF
; full-screen support for ZIL:

 (ZFSEXEC :panel-name           "XFSZIL"
          :panel-library        "'SEB1525.CMD.PANEL'"
          :short-appl           "Lisp"
          :long-appl            (string-append "ZIL Lisp " *version*)
          :terpri-exit-function nil
          :initialize-function  #'fszil-user-initialize
          :terminate-function   nil
          :panel-init-function  nil
          :echo-input-function  nil
          :expr-list-function   #'fszil-user-get-expression-list
          :refreshp-function    #'fszil-user-refreshp
          :eval-expr-function   #'fszil-user-eval-expr
          :good-eval-function   #'fszil-user-good-eval
          :bad-eval-function    nil
          :post-eval-function   nil
          :display-function     #'fszil-user-display-value
          :output-row-function  nil
 )
