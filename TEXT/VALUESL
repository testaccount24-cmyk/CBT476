
Function: VALUES-LIST

Syntax:   (VALUES-LIST list1)
    or:   (VALUESL     list1)

 list (required, evaluated) - a proper list.

Returns:

 The values specified by the elements of list1, as multiple values.  If
 multiple values are not being requested, the CAR of list1 is returned,
 or NIL if list1 is NIL.

Processing:

 If multiple values are being requested by a special form (like
 MULTIPLE-VALUE-LIST or MULTIPLE-VALUE-BIND, for example) that directly
 or indirectly calls VALUES-LIST, and the call to VALUES-LIST is in
 tail-recursive (value-returning) position, then all of the elements of
 list1 are returned as multiple values - or, more accurately, as many
 values as are being requested are returned.

 If there is no request for multiple values at the time that VALUES-LIST
 is executed, or if VALUES-LIST is being executed in other than
 tail-recursive position (e.g. as an argument to a function, as a
 predicate, or to set a variable to a value), then the value returned is
 the first element (CAR) of list1.  If list1 is NIL, NIL is returned as
 a single value (zero values would be returned as multiple values).

Errors signaled:

 list1 not a proper list.

Notes:

 Compare VALUES, which returns all of its arguments as multiple values.
 (VALUES-LIST list) is equivalent to (APPLY #'VALUES list).

 See Guy Steele's "Common LISP: The Language", pp. 133-139, for
 an explanation of multiple values in LISP.  Although the constant
 MULTIPLE-VALUES-LIMIT is not defined in ZIL, returning more than
 4095 multiple values is not supported.

 In many cases, use of multiple values in ZIL is more expensive than
 just consing up a list of the values and extracting the values from
 the list via destructuring.  In any case, out of all the forms that
 request multiple values, only MULTIPLE-VALUE-BIND in compiled code
 is guaranteed not to cons in ZIL.

Examples:

 (VALUES-LIST NIL)      ==> NIL
 (VALUES-LIST '(A))     ==> A
 (VALUES-LIST '(A B))   ==> A
 (VALUES-LIST '(A B C)) ==> A
 (MULTIPLE-VALUE-LIST (VALUES-LIST NIL))       ==> NIL
 (MULTIPLE-VALUE-LIST (VALUES-LIST '(1)))      ==> (1)
 (MULTIPLE-VALUE-LIST (VALUES-LIST '(1 2)))    ==> (1 2)
 (MULTIPLE-VALUE-LIST (VALUES-LIST '(1 2 3)))  ==> (1 2 3)

