
************************************************************************

 ZIL news entries are in chronological order, the latest first.

 Always check this member for updates and changes to the ZIL system.

************************************************************************

========================================================================
===                                                                  ===
===       ZIL CHANGES AVAILABLE IN NEW VERSION ONLY FOLLOW           ===
===                                                                  ===
========================================================================

------------------------------------------------------------------------

 02/23/89 - FLOOR, CEILING, TRUNCATE, ROUND RETURN MULTIPLE VALUES

------------------------------------------------------------------------

The FLOOR, CEILING, TRUNCATE, and ROUND functions now return two values
as documented in "Common LISP: The Language".  Note that the first value
is the same as it ever was.


========================================================================
===                                                                  ===
===       ZIL CHANGES INCORPORATED IN CURRENT VERSION FOLLOW         ===
===                                                                  ===
========================================================================

------------------------------------------------------------------------

 11/07/88 - ENHANCED TRACING FUNCTIONS

------------------------------------------------------------------------

The following new functions (actually macros) are available in ZIL:

  AT      - specifies processing done on entry to or exit from function

  OFF     - cancels a previous AT request

These make it easier to set "breakpoints" at functions from which you
can execute arbitrary code to see what is going on.
The PUTDATA function is particularly useful with these new functions.

See members $TRACE, AT and OFF in this document for more information
(type (HELP $TRACE) or (HELP AT) or (HELP OFF)).

------------------------------------------------------------------------

 09/16/88 - ISPF INTERFACE IMPROVEMENT

------------------------------------------------------------------------

 Normally the ZISEXEC function (and Macsyma's ISPEXEC function)
 translates the entire ISPF dialog service request buffer
 to uppercase.  Now, however, this translation to uppercase is
 bypassed if the requested dialog service is the SELECT service.

 If the first seven characters of the dialog request are "SELECT "
 (or "select "), the buffer is left as is with respect to case.
 This permits commands or program parameters with lowercase data
 to be executed using the SELECT service.  If there are leading
 blanks or other junk preceding the word SELECT, though, the
 uppercase translation is still done.

------------------------------------------------------------------------

 06/22/88 - MULTIPLE VALUES NOW SUPPORTED IN ZIL

------------------------------------------------------------------------

 ZIL now contains full support for multiple values, as documented in
 "Common LISP: The Language", pp. 133-139.  This consists of the
 following new functions, macros and special forms:

   MULTIPLE-VALUE-BIND
   MULTIPLE-VALUE-CALL
   MULTIPLE-VALUE-LIST
   MULTIPLE-VALUE-PROG1
   MULTIPLE-VALUE-SETQ
   VALUES
   VALUES-LIST

 As a ZIL-only extension, the argument list of MULTIPLE-VALUE-BIND
 may contain destructuring templates in place of variable names.
 As a degenerate case of this, NIL works as a placeholder in the
 MULTIPLE-VALUE-BIND arglist for values you don't care about.

 As a side effect of this upgrade, THROW is now a special form rather
 than a function.  This was necessary in order to allow THROW to return
 multiple values.  Existing code which has THROW compiled as a
 function need not be recompiled (since existing code never tried
 to return multiple values from anything!).

 Note that although all of these work exactly as documented in CLtL,
 they may not be implemented the same way internally.  In particular,
 MULTIPLE-VALUE-LIST and MULTIPLE-VALUE-BIND are special forms in ZIL,
 and MULTIPLE-VALUE-CALL is a macro.

 The constant MULTIPLE-VALUES-LIMIT does not exist in ZIL, since ZIL
 doesn't support DEFCONSTANTs, but up to 4095 multiple values can be
 safely passed at all times, and more may be used in many cases.

 Not all the functions defined in Common LISP as returning more than
 one value do so at this time, but support in this area is forthcoming.

 The reader supports the return of zero values from a reader macro
 as signifying the return of "nothing".  This should be used instead
 of the old (RMNIL) function where possible, to maintain Common LISP
 compatibility.

 One more point:  If you're interested in using multiple values to get
 rid of some consing and processing time, think again.  Only the use of
 MULTIPLE-VALUE-BIND in compiled code is guaranteed to avoid consing,
 and in many cases the CPU time required to determine if multiple values
 should be returned may be greater than the time to CONS up a list of
 values.

------------------------------------------------------------------------

 06/22/88 - NEW SPECIAL FORMS: BLOCK, TAGBODY, RETURN-FROM
            PROG, RETURN, PROG* (NEW) NOW MACROS, NOT SPECIAL FORMS

------------------------------------------------------------------------

 The Common LISP special forms BLOCK, TAGBODY and RETURN-FROM are
 now implemented in ZIL.  Refer to Common LISP documentation for
 details of how these work.  Note that using GO, RETURN or
 RETURN-FROM to transfer control in a TAGBODY or BLOCK
 across "funarg" boundaries works under the interpreter but not
 under the compiler.

 These special forms are designed to replace PROG, which is considered
 archaic and stylistically poor.  PROG and RETURN have been converted
 from special forms to macros.  In addition, PROG syntax has been
 enhanced to support the full variable list syntax of Common LISP,
 and PROG* (the "sequential binding" version of PROG) is available
 as well.
------------------------------------------------------------------------

 04/11/88 - NEW "PUTDATA" MACRO TO ASSIST IN DEBUGGING

------------------------------------------------------------------------

 A new macro, PUTDATA, has been added to ZIL.  This macro allows
 you to insert code in a LISP function to print out the values
 of any variables, function calls, or any other expressions that
 can be evaluated, in a format similar to that of the PL/1
 PUT DATA statement.  OK, it's not a real interactive debugger,
 but it helps a little.

 For more information, do (HELP PUTDATA), or see member PUTDATA
 of this documentation.

------------------------------------------------------------------------

 04/04/88 - "ASSOC" and "MEMBER" NOW 100% COMMON-LISP COMPATIBLE -
            SUPPORT KEYWORDS :TEST, :TEST-NOT, :KEY

------------------------------------------------------------------------

 The ASSOC and MEMBER functions now support the keyword syntax
 documented in the Common LISP manual.  Specifically, the :TEST,
 :TEST-NOT, and :KEY keywords work.  As part of this upgrade,
 ASSQ, MEMQ, ASSOC and MEMBER always compile into inline code
 (which they never did previously), and ASSQ and MEMQ have had
 minimal argument checking added in the interpretive versions.

 Note that the behavior of these functions under Macsyma has not
 changed, due to Maclisp compatibility requirements.

------------------------------------------------------------------------

 04/26/88 - "HAULONG" DEFINITION CORRECTED

------------------------------------------------------------------------

 (HAULONG 0) formerly returned 1.  This was inconsistent with Maclisp
 and NIL, and has been corrected.  (HAULONG 0) now returns 0.
 There is a small possibility that some Macsyma code may have been
 affected by this bug.  Anyhow, it should be correct now.

 The documentation for HAULONG has been corrected as well.

------------------------------------------------------------------------

 02/26/88 - "FORMAT" UPGRADED - NOW COMPLETE AND CORRECT

------------------------------------------------------------------------

 A new version of FORMAT has been installed.  This version is a 100%
 complete implementation of FORMAT as documented in Guy Steele's
 "Common LISP: The Language".  Furthermore, it corrects some errors
 in the old FORMAT's floating-point formatting routines.

 For more information, do (HELP FORMAT).

------------------------------------------------------------------------

 01/28/88 - "TSO" FUNCTION IMPROVED

------------------------------------------------------------------------

 A new version of the TSO function has been installed.  Features:

 * XCLIST is no longer used.  Instead, all processing is contained
   entirely within the ZIL code.

 * Commands that ABEND or are interrupted by attention result in
   TSO signalling an error, rather than just returning a useless
   return code.

 * There is no longer a problem with executing commands whose names
   conflict with ZIL module names (e.g. PRINT).  TSO will always
   search only the MVS link pack area and system link list for
   commands.  This also means that STEPLIB and task libraries
   are NOT searched for command names; use XCMD for that feature.

 * TSO commands that require APF authorization, as well as TEST,
   are supported.  CALL to an APF authorized program, however,
   will not.  Use XINVOKE or TSOEXEC in such cases.

 * The maximum length of a TSO command string is 32763, not 32767.
   This was probably always true, but now the error is flagged
   properly.

------------------------------------------------------------------------

 01/13/88 - NEW FUNCTIONS AND VARIABLES

------------------------------------------------------------------------

 The following new functions have been added to ZIL:

   (VCOPY x)             -  makes a copy of the vector or structure x.
   (STRING-CAPITALIZE x) -  makes a copy of the string x with all
                            words within the string capitalized.

   Refer to the ZIL documentation for VCOPY and SCAPITAL,
   or use the (HELP) function under ZIL, for more information.

 The following new global variables are present in ZIL:

   *ZIL-SOURCE-LIBRARY*  -  a string containing the fully-qualified
                            (but NOT single-quoted) name of the
                            partitioned data set containing the
                            source code for the ZIL system.

   *ZIL-HELP-LIBRARY*    -  a string containing the fully-qualified
                            (but NOT single-quoted) name of the
                            partitioned data set containing the
                            documentation for the ZIL system.

 Note that these variables return different values under the "new"
 (SYS=N) system and the current (SYS=) system.

 For more information, see member $SPECIAL of the ZIL documentation,
 or do (HELP $SPECIAL) under ZIL.

------------------------------------------------------------------------

 11/03/87 - ANNOUNCING ZIL 1.3
            MORE COMPATIBLE WITH COMMON LISP, BUT LESS COMPATIBLE
            WITH ZIL 1.2 - RECOMPILE EVERYTHING
            FULL LEXICAL SCOPING - CHECK USE OF VARIABLES
            DOUBLE PRECISION FLOATING POINT IS THE DEFAULT
            NEW INTERPRETER, COMPILER, OPS5, MACSYMA ALSO INSTALLED
------------------------------------------------------------------------

 ZIL 1.3 is here!  For more information, consult 'PROGLIB.ZIL.TEXT'.

 Member $CHANGES tells what's different.
 Type (HELP $CHANGES) under ZIL 1.3 to see this information.

