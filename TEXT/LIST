
Function: LIST, LIST*

Syntax:   (LIST &rest args)
  Also:   (LIST* &rest args)

 Any number of arguments may be specified.

 arg (evaluated) - any LISP object.

Returns:

 For LIST:   a proper list (arg1 arg2 ... argn).

 For LIST*:  a list (arg1 arg2 ... argm . argn), ending in a dotted
             pair of the last 2 args.

Processing:

 The arguments are CONS'ed in succession to build the list out of
 new cells.

 LIST always returns a proper list; (LIST) returns NIL.

 LIST* returns a list ending in a dotted pair; (LIST* a) returns a,
 but (LIST*) is an error.

Errors signaled:

 Errors detected by CONS (q.v.).
 No arguments on LIST*.

Notes:

 (LIST 'a 'b 'c) is equivalent to (QUOTE (a b c)) in the interpretive
 environment, but in the compiled environment the former builds a new
 list out of CONS cells each time it is executed, while the latter
 creates an in-line constant list in the load module whose address is
 loaded.  If the list may be modified during execution of the program,
 you MUST use the LIST form rather than the QUOTE form.

Examples:

 (LIST)                 ==> NIL
 (LIST NIL)             ==> (NIL)
 (LIST 'A)              ==> (A)
 (LIST 'A 'B)           ==> (A B)
 (LIST '(A B) 'C)       ==> ((A B) C)
 (LIST 'A '(B C))       ==> (A (B C))
 (LIST 1 2 3 4 5 6 7)   ==> (1 2 3 4 5 6 7)

 (LIST* NIL)            ==> NIL
 (LIST* 'A)             ==> A
 (LIST* 'A 'B)          ==> (A . B)
 (LIST* '(A B) 'C)      ==> ((A B) . C)
 (LIST* 'A '(B C))      ==> (A B C)    ; note same as (A . (B C))
 (LIST* 1 2 3 4 5 6 7)  ==> (1 2 3 4 5 6 . 7)

