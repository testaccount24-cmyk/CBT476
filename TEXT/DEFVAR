
Special Form: DEFVAR

Syntax:   (DEFVAR var1 &optional val2 doc3)

 var1    (required, not evaluated) - a symbol.
 val2    (optional, conditionally evaluated) - any LISP form.
 doc3    (optional, not evaluated) - a string.

Returns:

 var1, after it has been established as a global variable in the
 current LISP environment.

Processing:

 If val2 is not specified:

 If the variable specified by var1 is already currently bound, no action
 is taken and a warning message is issued; otherwise the variable is
 identified as a DEFVAR variable (this is done internally by creating a
 global binding for it with no value).  The variable does NOT become
 bound at this time.

 If val2 is specified:

 If the variable specified by var1 is already currently bound, no action
 is taken and a warning message is issued; otherwise the variable is
 added to the global binding environment and is assigned the value
 specified by evaluating val2.  If doc3 is present, it is considered to
 be a documentation string and is made the value of the DOCUMENTATION
 property of the symbol var1.

 var1 may not be NIL, T or a "keyword".

 DEFVAR is valid at top level only.  Bindings created by DEFVAR are
 always SPECIAL bindings.

 The compiler supports DEFVAR at top level only, and only when
 compiling a MODULE.  It is not permitted when compiling a FUNCTION.

Errors signaled:

 Not at top level.
 Missing argument, or too many arguments.
 Invalid first argument (must be a non-null symbol).
 Invalid documentation argument (must be a string).

Notes:

 DEFVAR may be issued more than once for the same variable name, but
 the value, if provided, is assigned only the first time, and then
 only if the variable is not bound yet.

 A DEFVAR variable may be subsequently assigned a new value via SETQ.
 As long as the SETQ is issued in an environment that does not have
 a shadowing dynamic binding for the same variable, the reassignment
 will affect that variable's global value.

Examples:

 (DEFVAR FOO)         ==> FOO
 FOO                  ==> ("***ERROR***") ; Unbound variable error.
 (DEFVAR FOO NIL)     ==> FOO
 FOO                  ==> NIL
 (DEFVAR FOO 'BAR)    ==> FOO
 FOO                  ==> NIL   ; note that the value is not changed.
 (SETQ FOO 'BAZ)      ==> BAZ
 FOO                  ==> BAZ   ; SETQ has changed the value.
 (DEFVAR FROB 'NICK "A variable set by DEFVAR.")
                      ==> FROB
 FROB                 ==> NICK
 (GET 'FROB 'DOCUMENTATION) ==> "A variable set by DEFVAR."

