
Function: TSO

Syntax:   (TSO &rest args)

 arg (required, evaluated) - a string (or symbol).

Returns:

 A fixnum containing the return code from the TSO command or CLIST
 specified by the command buffer bult from concatenating the text
 of the arguments.

Processing:

 The arguments are concatenated to form a character string buffer which
 is assumed to contain a valid TSO command or CLIST, and it is executed.

 If no arguments are specified, a null buffer is built and executed
 as a null command (at least at this time).

 The contents of the return code (register 15) when the command or CLIST
 returns control, which will be the command or CLIST return code, are
 used to build a fixnum containing the value to be returned as the TSO
 function value.  This should be 0 if the command completed
 successfully.

 Attention interrupts or system ABENDs will terminate the TSO
 command or CLIST, and ZIL will signal an error.

 You cannot execute the ISPEXEC command with this function, or a CALL to
 a program that requires APF authorization (like IEBCOPY).  (You can use
 the TSOEXEC command to invoke the CALL command if you want to
 accomplish the latter.)  CLIST's should not contain TERMIN or ATTN
 statements.

 The success of this function is dependent upon the amount of system
 memory available at the time that the TSO command is attempted to be
 executed.  If there is insufficient virtual storage, the TSO command
 requested will probably ABEND.

Errors signaled:

 Arguments that cannot be converted into strings (lists, vectors, etc.).
 Command text exceeds 32763 bytes.
 Requested command has abended or was attentioned out of.

Notes:

 TSO must be available for this function to work.  TSO/Extensions,
 however, is not required, except to invoke TEST or APF authorized
 commands.

 TSO commands may have the same names as compiled ZIL functions;
 however, they must reside in the system link pack area or system
 link list.  They will not be found if they reside only in a STEPLIB
 or task library.

Examples:

 (TSO 'TIME) ; will display the current time and return:
             ==> 0

;(TSO "alloc file(zilifoo) da(foobar.data) shr reuse")
;
;            ; will dynamically allocate ZIL input file FOO and return
;
;            ==> 0  ; if the allocation was successful,
;            ==> 12 ; if the allocation was unsuccessful.
;
;(LET ((A 'TSO))
;     (TSO "LIST 'PROGLIB.ZIL.TEXT(" A ")'"))
;
;           ...lists this documentation member.
;
