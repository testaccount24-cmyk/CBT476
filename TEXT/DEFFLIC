
Macro: DEFFLIC

Syntax:   (DEFFLIC arg1 arg2 &optional arg3 arg4)

 arg1 (required, not evaluated) - a function name.
 arg2 (required, not evaluated) - a data set name.
 arg3 (optional, not evaluated) - any LISP object, generally T or NIL.
 arg4 (optional, not evaluated) - any LISP object, generally T or NIL.

Returns:

 arg1, after building a function definition for it that evaluates all
 the forms contained in file arg2.

Processing:

 DEFFLIC generates a "Fast Loading Interpreted Code" file, i.e. a
 compiled load module containing interpretive forms.

 DEFFLIC is a macro that expands into a DEFUN, which defines arg1 as a
 function that evaluates a list of forms; this list of forms is
 essentially identical to the forms found in the data set specified by
 arg2.  The effect is as follows:

 Given a function FOO generated by:

  (DEFFLIC FOO "MY.LISP(STUFF)")

 when the function (FOO) is invoked inside the ZIL interpreter, code
 is executed to evaluate all the forms that appeared in MY.LISP(STUFF).
 However, these forms are not being read in from that file; rather,
 the forms exist as an in-line compiled list contained within the
 function definition of FOO.

 The forms themselves are not compiled.  To generate a load module that
 loads a file in compiled format, compile the file as a MODULE.

 Description of the optional args to DEFFLIC:

  If arg3 is specified and non-NIL, then the forms are macroexpanded
  before they are added to the function; the default is to add them
  as is without macroexpanding them.

  If arg4 is specified and non-NIL, code is added to the function to
  print out the values of the forms as they are evaluated when the
  function is executed; this is a debugging capability.

 The funcation generated by DEFFLIC has 2 optional args, as follows:

  (functionname &optional arg1 arg2)

  If arg1 is specified when the function is invoked, then
  the result of evaluating each form is printed (i.e. a read-eval-print
  loop is executed rather than just a read-eval loop).

  If arg2 is specified when the function is invoked, then
  each form itself is printed before evaluation is attempted on it.

  As you might imagine, DEFFLIC is primarily for use with the compiler;
  in general, you would compile a ZIL source member FOO which contained
  ONLY the DEFFLIC form pointing to another data set which contained
  the actual forms to be evaluated.

Errors signalled:

 Too few arguments.

Notes:

 "FLIC" stands for "Fast Loading Interpreted Code."
 DEFFLIC can be used to load interpretive DEFUN's et al. in a compiled
 form that bypasses the overhead associated with READ.  It is especially
 useful if the original file contained lots of read-time evaluation,
 conditionals, reader macros, etc.

 You may have to use DEFFLIC to create a compiled version of a module to
 be loaded if it is brought in by the compiler to define macros, for
 example.  Normal compilation of a file with macro definitions does not
 make them available to the requestor when the compiled file is
 executed.  The need for DEFFLIC is based, also, on the fact that on
 occasion there may be certain features of DEFUN that the ZIL compiler
 still does not support, preventing these kinds of function definitions
 from being compiled successfully.  But (DECLARE (NOCOMPILE ...))
 should handle these increasingly rare cases (there should be no such
 cases ideally!).


 DEFFLIC replaces DEFFASL, which is now obsolete.  The functionality
 is the same (except that the messages issued by DEFFLIC may be
 suppressed via (MSGLEVEL 2)), but the name more accurately describes
 the contents and usage.

