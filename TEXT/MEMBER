
Function: MEMBER

Syntax:   (MEMBER item1 list2 &key test test-not key)

 item1    (required, evaluated) - any LISP object.
 list2    (required, evaluated) - a proper list.
 test     (optional, evaluated) - a predicate function of two arguments.
 test-not (optional, evaluated) - a predicate function of two arguments.
 key      (optional, evaluated) - an accessor function of one argument.

Returns:

 The first sublist (CDR) of list2 whose CAR is equal to item1
 according to the test specified by the keywords;
 NIL if no such sublist exists.

Processing:

 The list specified by list2 is searched for an element that is equal
 to item1; when one is found, a pointer to the sublist of list2 of
 which item1 is the CAR is returned as the value.

 This enables the MEMBER caller to use the information, e.g. in an
 ordering test.  In a list L, element A precedes element B if
 (MEMBER B (MEMBER A L)) is non-NIL.

 If no keywords are specified, a match occurs when an element of
 list2 is found that item1 is EQL to.

 The keywords are processed as follows:

 :test (default #'eql)  - specifies a predicate function of two
                          arguments used when comparing item1 to each
                          element of list2.  If the function returns a
                          non-NIL value, a match occurs.  The first
                          argument is always item1, and the second
                          argument is always the current element of
                          list2 (with the :key function applied if :key
                          is specified).

 :test-not (no default) - specifies a predicate function of two
                          arguments used when comparing item1 to each
                          element of list2.  If the function returns
                          NIL, a match occurs.  The first argument is
                          always item1, and the second argument is
                          always the current element of list2 (with the
                          :key function applied if :key is specified).

 :key (no default)      - specifies an accessor function of one argument
                          that is applied to each element of list2
                          before comparing it to item1 via the :test or
                          :test-not function.  Note that the :key
                          function is applied only to the element of
                          list2, NOT to item1.

 The :test and :test-not keywords may not both be specified.

Errors signaled:

 list2 not a list.
 Both :test and :test-not keywords specified.
 Invalid keyword specification.

Notes:

 Unpredictable results will occur if list2 is not a proper list.

 MEMBER is, by default, implemented with an EQL test for Common LISP
 compatibility.  If Maclisp or Franz LISP compatibility is desired,
 MEMBER may be equated with ZIL function MEMQUAL via the DEFLOAD special
 form.  See MEMQ and MEMQUAL for more info.

 Under Macsyma, MEMBER performs an EQUAL test.

Examples:

 (MEMBER 'A NIL)                          ==> NIL
 (MEMBER 'A '(A B C D E F G))             ==> (A B C D E F G)
 (MEMBER 'D '(A B C D E F G))             ==> (D E F G)
 (MEMBER 'G '(A B C D E F G))             ==> (G)
 (MEMBER 'H '(A B C D E F G))             ==> NIL

 (MEMBER 'A '(A B C) :TEST #'EQL)         ==> (A B C)
 (MEMBER 'B '(A B C) :TEST #'EQL)         ==> (B C)
 (MEMBER 'C '(A B C) :TEST #'EQL)         ==> (C)
 (MEMBER 'D '(A B C) :TEST #'EQL)         ==> NIL

 (MEMBER 'A '(A B C) :TEST-NOT #'EQL)     ==> (B C)
 (MEMBER 'B '(A B C) :TEST-NOT #'EQL)     ==> (A B C)
 (MEMBER 'C '(A B C) :TEST-NOT #'EQL)     ==> (A B C)
 (MEMBER 'D '(A B C) :TEST-NOT #'EQL)     ==> (A B C)

 ;Sublists are NOT recursively searched, unless :KEY is specified.

 (MEMBER 'C '((A B) (C D) (E F)))             ==> NIL
 (MEMBER 'C '((A B) (C D) (E F)) :KEY #'CAR)  ==> ((C D) (E F))

 ;The default comparison test is EQL.

 (MEMBER 3 '(1 2 3 4 5 6 7))                   ==> (3 4 5 6 7)
 (MEMBER '(1 2) '((1 2) (3 4)))                ==> NIL
 (MEMBER '(1 2) '((1 2) (3 4)) :TEST #'EQUAL)  ==> ((1 2) (3 4))

