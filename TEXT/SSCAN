
Function: STRING-SCAN

Syntax:   (STRING-SCAN str1 &optional bag2 bag3 str4 str5 str6 list7)
    or:   (SSCAN       str1 &optional bag2 bag3 str4 str5 str6 list7)

 str1  (required, evaluated) - a string.
 bag2  (optional, evaluated) - a string.           Default: " " (blank)
 bag3  (optional, evaluated) - a string.           Default: ""  (null)
 str4  (optional, evaluated) - a string.           Default: ""  (null)
 str5  (optional, evaluated) - a string.           Default: ""  (null)
 str6  (optional, evaluated) - a string.           Default: ""  (null)
 list7 (optional, evaluated) - a list of strings.  Default: NIL

Returns:

  A list of strings, all of which are "words" or "tokens" in str1.

Processing:

  str1 is lexically scanned and broken up into "words" or "tokens"
  according to the specifications of the optional arguments as follows:

  bag2:  the whitespace specifier, which is a "bag" of string characters
         which act as whitespace (in other words, the occurrence of any
         of the characters in the "whitespace bag" marks the end of a
         word).

         For example, " ," would specify that blanks and commas act
         as whitespace characters.

         The default is " ", a bag containing the blank as the only
         whitespace character.

         None of the whitespace characters appear anywhere in the
         list returned by this function.

  bag3:  the singleton specifier, which is a "bag" of string characters
         to act as self-defined single characters.  Each character in
         str1 that is found in this "bag" gets
         returned as a one-character string in the resulting list.

         For example, "+-*/" would specify that the standard arithmetic
         operators should be tokenized as single-character strings.

         The default is "", a bag with no characters.

  str4:  either a null string, a one-character string, or a
         two-character string, which defines a "quote" character.  The
         first character of the string defines the character to be used
         to quote strings, and the second character determines the
         convention for embedding the quote character in the string.  If
         a one-character string is specified, or the second character is
         the same as the first, the quote character is specified by
         doubling it (e.g. 'don''t').  If the second character is a
         different character from the first, it is a "single escape"
         character, and any character following it is contained in the
         quoted string (e.g. "don\"t").

         The string is constructed including the enclosing quotes and
         doubled embedded quotes or escape characters.  In this way the
         caller can distinguish between quoted and unquoted strings,
         but is responsible for unquoting the string him/herself.

         An error is signalled if the ending quote of a string is not
         found, or if the escape character is not followed by something.

         If a null string is specified, no quote character is used.
         Only one quote character can be specified.

         For example, "'" or "''" specifies standard TSO or FORTRAN
         quoting conventions.  "\"\\" (which is a 2-character string
         containing a " character and a \ character) specifies the
         Common LISP string quoting convention.

         The default is "", the null string, meaning no quoting.

  str5:  a beginning-comment string (not a "bag") which signals the
         beginning of a comment.  Comments are terminated by
         end-of-string or the ending-comment string specified in
         argument 6 if it is specified.  Only one set of comment
         strings can be specified.

         For example, if str5 is ";" and str6 is "", this represents
         the Common LISP commenting convention.

         The default is "", the null string, meaning no commenting.

  str6:  an ending-comment string (not a "bag") which signals the
         end of a comment.

         For example, if str5 is "/*" and str6 is "*/", this represents
         standard TSO or PL/1 commenting conventions.

         The default is "", the null string, meaning that if str5 is
         specified, comments can be terminated only by end of string.

  list7: a list of multiple-character tokens (strings of length 2 or
         more).  Each of these, if encountered in the string being
         scanned, ends up as a token in the result, regardless of
         the functionality of the individual characters in the
         multiple-character token otherwise (an exception is if the
         beginning comment string occurs completely or partially in
         the string where the multiple-character token seems to
         appear, in which case the commenting takes precedence).
         Any null strings in the list7 list are ignored.

         For example, if list7 is ("**" "<=" ">=" "Â¬=" "->"), this
         causes some standard operators in PL/1 to be recognized
         as tokens.

         The default is NIL, the null list, meaning that no
         multiple-character tokens are recognized.

  Thus, if STRING-SCAN is specified with the required string
  argument only, it will be broken up into words separated by
  occurrences of one or more consecutive blanks (the blanks do
  not appear in the output list).  No quoting or commenting
  conventions or special tokens are recognized.

  If str1 is null or contains only whitespace characters or comment
  sequences, then NIL, the null list, is returned.

Errors signaled:

 Some argument not a string, or argument 7 not a proper list of strings.
 Argument 5 or 6 longer than 256 characters, or an element of argument 7
 longer than 256 characters.
 Missing quote character while scanning str1.
 Dangling escape character while scanning str1.

Notes:

 As for many functions that take strings as arguments, symbols are
 permitted; their print names are used in that case.  This is true of
 arguments 1 through 6, as well as individual elements of argument 7.
 However, this function always returns a list of strings.

 Unlike Common LISP, ZIL does not permit a list to be specified
 for "bags".  Since symbols are permitted, NIL is interpreted as a
 "character bag" of the characters N, I and L.  Note, however, that
 argument 7, being a list, may be specified as NIL, meaning no
 multiple-character tokens.

Examples:

 (STRING-SCAN "foo bar")            ==> ("foo" "bar")
 (SSCAN "a+b*c")                    ==> ("a+b*c")
 (SSCAN "a+b*c" " " "+*")           ==> ("a" "+" "b" "*" "c")
 (SSCAN "'foo bar'")                ==> ("'foo" "bar'")
 (SSCAN "'foo bar'" " " "" "'")     ==> ("'foo bar'")
 (SSCAN "'don''t'" " " "" "'")      ==> ("'don''t'")
 (SSCAN "'don/'t'" " " "" "'/")     ==> ("'don/'t'")
 (SSCAN "foo /* junk */ bar")       ==> ("foo" "/*" "junk" "*/" "bar")
 (SSCAN "foo /* junk */ bar"
        " " "" "" "/*" "*/")        ==> ("foo" "bar")
 (SSCAN "a:=if b=c then d else e")  ==>
                                  ("a:=if" "b=c" "then" "d" "else" "e")

 (SSCAN "a:=if b=c then d else e" " " "=" "" "" "")
                  ==> ("a:" "=" "if" "b" "=" "c" "then" "d" "else" "e")

 (SSCAN "a:=if b=c then d else e" " " "=" "" "" "" '(":="))
                  ==> ("a" ":=" "if" "b" "=" "c" "then" "d" "else" "e")

 (SSCAN "foo//*bar" " " "/" "" "" "")        ==> ("foo" "/" "/" "*bar")
 (SSCAN "foo//*bar" " " "/" "" "/*" "*/")    ==> ("foo" "/")
 (SSCAN "foo//*bar" " " "/" "" "/*" "*/" '("//"))==> ("foo" "/")
 (SSCAN "foo//*bar" " " "" "" "" "" '("//"))     ==> ("foo" "//" "*bar")
 (SSCAN "foo//*bar" " " "" "" "/*" "*/" '("//")) ==> ("foo/")

 (STRING-SCAN "'SYS1.LINKLIB(IEFBR14)'" "" "()'.") ==>
                       ("'" "SYS1" "." "LINKLIB" "(" "IEFBR14" ")" "'")

 (STRING-SCAN "'SYS1.LINKLIB(IEFBR14)'" "" "()'." "'") ==>
                       ("'SYS1.LINKLIB(IEFBR14)'")

