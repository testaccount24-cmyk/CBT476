
Function: STRING-CAPITALIZE

Syntax:   (STRING-CAPITALIZE string1)
    or:   (SCAPITAL string1)

 string1 (required, evaluated) - a string.

Returns:

 A string identical to string1, except that all words in the
 string are capitalized (see below for details).

Processing:

 The input argument is not altered.  A copy, if necessary, is returned
 as follows:

 Each word in the string is translated such that the first character
 is uppercased if it is a lowercase alphabetic, and the other
 characters are lowercased if they are uppercase alphabetic.

 A "word" is defined as a sequence of ALPHANUMERIC characters within
 the string, delimited by whitespace OR other non-alphanumerics.
 Note that the national characters (@,#,$) are considered
 non-alphanumeric for the purposes of STRING-CAPITALIZE.

 As with most string-handling functions, symbols are acceptable.
 However, the returned value is always a string.

Errors signaled:

 Invalid first argument (not a string).
 Insufficient vector/string space to build the result.

Notes:

 Compare STRING-UPCASE and STRING-DOWNCASE.

Examples:

 (STRING-CAPITALIZE "")      ==> ""
 (STRING-CAPITALIZE "a")     ==> "A"
 (STRING-CAPITALIZE "A")     ==> "A"
 (STRING-CAPITALIZE "foo")   ==> "Foo"
 (STRING-CAPITALIZE "FOO")   ==> "Foo"
 (STRING-CAPITALIZE NIL)     ==> "Nil"
 (STRING-CAPITALIZE '|Foo Bar|) ==> "Foo Bar"

; Examples from Steele's "Common LISP: The Language" follow.

 (string-capitalize " hello ") ==> " Hello "
 (string-capitalize
     "occlUDeD cASEmenTs FOreSTAll iNADVertent DEFenestraTION")
 ==> "Occluded Casements Forestall Inadvertent Defenestration"
 (string-capitalize 'kludgy-hash-search) ==> "Kludgy-Hash-Search"
 (string-capitalize "DON'T!")            ==> "Don'T!"   ; not "Don't!"
 (string-capitalize "pipe 13a, foo16c")  ==> "Pipe 13a, Foo16c"

