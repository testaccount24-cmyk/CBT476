
Function: ERROR

Syntax:   (ERROR &optional arg1 &rest args)

 arg1 (optional, evaluated) - any LISP object, but generally a string.
 args (optional, evaluated) - any LISP object.

Returns:

 Nothing; after arg1 (and the other arguments, if non-NIL) is printed to
 the standard output file, a THROW to tag NIL is issued.

Processing:

 If the first argument is omitted, or is a list, control is passed to
 ZERROR.  This is for compatibility with earlier ZIL versions of the
 ERROR function.  See ZERROR for more information.

 Similarly, if the first argument is a string that does not contain
 FORMAT directives (tildes), and there are additional arguments
 specified, control is passed to ZERROR to format the message with
 the additional arguments.  Note that the formatting is done in such
 a way as to provide an error prefix and appropriate indentation on
 each line of the error message.

 Otherwise, the first argument is assumed to be a FORMAT string with
 directives specifying how to format the error message with the
 arguments specified, and the message is written to the standard output
 file using FORMAT.  Control is then passed to ZERROR with no arguments
 to cause ZIL to signal an error.

 Generally, the first argument is an error message, and the other
 arguments are the objects in question that were in error.

 If the current message level is greater than 2, no writing to the
 standard output file takes place, but the error signalling still
 takes place.

Errors signaled:

 Errors in formatting the string.

Notes:

 See ZERROR for information on how error signalling is done in ZIL
 at a slightly lower (but not the lowest) level.

Examples:

 (SETQ A 'VALUE-OF-A)
 (ERROR "Invalid argument:  ~A" A)  will print:

  ;Error: Invalid argument:  VALUE-OF-A

 on the standard output file and signal an error.

 (ERROR "Invalid argument:~%~A~%Please enter another." A)  will print:

  ;Error: Invalid argument:
  ;       VALUE-OF-A
  ;       Please enter another.

 on the standard output file and signal an error.

