
Macro: DOLIST

Syntax:   (DOLIST arg1 &rest args)

 The first argument (a list of a local variable with an initialization
 and optional increment specifications) is required.

 At least one subsequent argument is required, but any number of
 arguments greater than two may be specified.

 arg1 (partially evaluated) - a local variable clause, i.e.
 a list of 2 or 3 elements, where the first element (not evaluated)
 is a symbol, the second (evaluated) is the value to which the symbol
 is to be initially bound, and the third (evaluated) is the value to
 be returned (this is optional and defaults to NIL).

 argn (conditionally evaluated) - any LISP object.

Returns:

 The third element of the list arg1, or NIL, after executing the
 body (args) with the first element of arg1 bound to successive
 CAR's of the second element of arg2.

Processing:

 The general format of DOLIST is:

   (DOLIST (var list &optional result) . body)

 DOLIST iterates over elements of "list".  First "list" is evaluated,
 which should produce a list.  Then the forms in "body" are evaluated;
 the entire body is executed once for each element (CAR) in the list, in
 order, with the variable "var" bound to the element.  Then "var" is
 bound to NIL, and "result" (a single form, NOT an implicit PROGN) is
 evaluated, and the result is the value returned from DOLIST.

 If "result" is omitted, DOLIST returns NIL after executing the body.

 A RETURN may be used within the body to terminate the loop and return
 a specified value.

Errors signaled:

 Invalid syntax (missing or invalid arguments).
 Invalid variable name (not a symbol).

Notes:

 The list argument is assumed to evaluate to a proper list.
 No error checking is done.

Examples:

 (LET ((FOO NIL))
      (DOLIST (X '(A B C D) FOO) (PUSH X FOO)))

          ==> (D C B A)

