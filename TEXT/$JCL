
***********************************************************************
*                                                                     *
*        If you have the required ISPF setup for ZIL (CLIST, HELP,    *
*        PANEL, MSG, SKEL), all you need to do to use ZIL is invoke   *
*        the XZIL clist (from inside or outside of ISPF) to get to    *
*        the ZIL primary option menu.  From there you can invoke      *
*        the interpreter, call a compiled LISP program, or do a       *
*        foreground or background compile.                            *
*                                                                     *
***********************************************************************

To run the ZIL interpreter in batch, you can use the following JCL:

 // ------- JOB statement ---
 //ZILPROC  JCLLIB ORDER=PROGLIB.ZIL.CNTL
 //MYRUN    EXEC   XZIL        (see optional parameters below)
 //SYSIN    DD *
  (include your Lisp input here)
 /*

You can specify the following optional parameters on the EXEC statement:

    INIT=        (name of INIT file)
    ACSIZE=      (nnnM, nnnK or nnn)
    CSSIZE=      (nnnM, nnnK or nnn)
    PDSIZE=      (nnnM, nnnK or nnn)
    VSSIZE=      (nnnM, nnnK or nnn)
    SUBRLIB=     (load library containing compiled user functions)
    SYS=         (SYS=N for new system, SYS=O for old system)

Note: You must include a JCLLIB JCL statement to pick up the
      XZILCO cataloged procedure, which resides in
      'PROGLIB.ZIL.CNTL'.

To compile a LISP top-level program using the ZIL compiler...

//AAA1234 JOB ...
//ZILPROC JCLLIB ORDER=PROGLIB.ZIL.CNTL
//PRGCMP  EXEC XZILCO,NAME=progname,PROG=P,
//             SOURCE='AAA1234.xxx.LISP(member)', <== member req if PDS
//             LOAD='AAA1234.xxx.LOAD'  <=== do not specify member name

To compile a LISP function using the ZIL compiler...

//AAA1234 JOB ...
//ZILPROC JCLLIB ORDER=PROGLIB.ZIL.CNTL
//FUNCMP  EXEC XZILCO,NAME=progname,PROG=F,LP=NCAL,
//             SOURCE='AAA1234.xxx.LISP(member)', <== member req if PDS
//             LOAD='AAA1234.xxx.LOAD'  <=== do not specify member name

To compile a LISP module using the ZIL compiler...

//AAA1234 JOB ...
//ZILPROC JCLLIB ORDER=PROGLIB.ZIL.CNTL
//FUNCMP  EXEC XZILCO,NAME=progname,PROG=M,LP=NCAL,
//             SOURCE='AAA1234.xxx.LISP(member)', <== member req if PDS
//             LOAD='AAA1234.xxx.LOAD'  <=== do not specify member name

Additional parameters optional:

// MAC1='AAA1234.xxx.LISP(mymacros)'
// MAC2='AAA1234.xxx.LISP(mymacros)'
// MAC3='AAA1234.xxx.LISP(mymacros)'
// MAC4='AAA1234.xxx.LISP(mymacros)'

define your own LISP macros (and compiler directives) to be used at
compilation time.  Member names are required if partitioned data sets
are specified.

// SUB1='AAA1234.xxx.LOAD'
// SUB2='AAA1234.xxx.LOAD'
// SUB3='AAA1234.xxx.LOAD'
// SUB4='AAA1234.xxx.LOAD'

define your own compiled LISP subroutine libraries to resolve external
references (i.e. compiled functions) in your source program at linkedit
time.  These must be load module libraries; member names are not
permitted.  The SUBn parameters are meaningful for compilations of
PROGRAMs only.

Note: You must include a JCLLIB DD statement to pick up the
      XZILCO cataloged procedure, which resides in
      'PROGLIB.ZIL.CNTL'.

