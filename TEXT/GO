
Special Form: GO

Syntax:   (GO arg1)

 arg1 (required,not evaluated) - a non-null symbol or integer.

Returns:

 There is no return value.  Instead, control transfers to the form
 following the symbol (tag) that is EQL to arg1 in the current PROG.

Processing:

 GO is valid only within a PROG.

 Control transfers to the form following the GO tag
 that is EQL to arg1 in the current PROG being evaluated.
 PROG evaluation continues with that form and subsequent forms.

 The tag must be a symbol or an integer;
 other types of atoms are not valid GO tags.

 GO may transfer control to a tag in a PROG which is not the
 immediately enclosing PROG.  Under the interpreter, this even works
 with lexical closures (FUNARGs), which may produce some bizarre
 results.  In compiled code, GO may transfer control to a tag in a
 PROG which is not the immediately enclosing PROG, as long as control
 is dynamically within that PROG - i.e. no branching out of FUNARGS.

 When GO transfers control from inside a form protected by
 UNWIND-PROTECT to outside that form, the UNWIND-PROTECT cleanup forms
 are executed before control is passed to the target of the GO.

Errors signaled:

 Missing or invalid tag argument
 GO tag not defined in current PROG
 GO outside of a PROG

Notes:

 GO and RETURN are valid as long as they are lexically apparent in
 the code.  This means that they will be processed as long as they
 are not the product of function evaluation.  The following are
 valid occurrences of GO and RETURN:

 (PROG (A B C) LOOP (DO 'SOMETHING) (GO LOOP) (RETURN T))
 (PROG (A B C) (COND ((EQ A T) (GO LOOP)))
               LOOP (PROG2 (PRINT A) (RETURN B)))

 The following is NOT valid:

 (DEFUN SUMFUNK () (GO LAB))
 (PROG (A) LAB (COND ((NULL A) (RETURN T))) (SUMFUNK))

 A "GO outside of PROG" error will be signalled.

Examples:

 (PROG (A B)
       (SETQ A '(1 2 3 4))
  LOOP (COND ((NULL A) (GO EXIT)))
       (SETQ B (CONS (ADD1 (CAR A)) B))
       (SETQ A (CDR A))
       (GO LOOP)
  EXIT (RETURN B)
 )                                ==> (5 4 3 2)

