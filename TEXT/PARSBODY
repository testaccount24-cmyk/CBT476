
Function: PARSE-BODY

Syntax:   (PARSE-BODY body1 &optional env2 docp3)
    or:   (PARSBODY   body1 &optional env2 docp3)

 body1 (required, evaluated) - a list of forms.
 env2  (optional, evaluated) - a macroexpansion environment.
 docp3 (optional, evaluated) - any LISP object, but generally T or NIL.

Returns:

 5 values:

   (1) A documentation string, or NIL.
   (2) A list of declaration specifications.
   (3) A list of body forms, not macroexpanded.
   (4) A macroexpanded form of the first element of (3), or NIL.
   (5) T if (4) is a valid macroexpansion of (3), otherwise NIL.

Processing:

 PARSE-BODY is used to parse the body of a LAMBDA or a macro with
 syntax similar to a LAMBDA into a documentation string, declarations,
 and the body without the documentation string or declarations.

 body1 is the body to be parsed.

 env2 is the macroexpansion environment.  Currently this argument is
 ignored, so you can specify anything you want, preferably NIL.

 docp3 is NIL if the body is not expected to contain a documentation
 string; otherwise a documentation string will be processed if present,
 as in the syntax of DEFUN.

Errors signaled:

 None.  If errors occur during macroexpansion, they are ignored.

Notes:

 PARSE-BODY must macroexpand forms in the body as it searches for
 declarations (into which macros can expand) and for documentation
 strings (into which macros CANNOT expand).

 Only one documentation string is permitted per body, although it
 can occur before, after, or between DECLARE forms.  Any other
 strings are assumed to be part of the body.

 Currently, if PARSE-BODY is used in the compiler (e.g. by a
 macroexpansion function that is taking apart the body of a
 macro form for compilation), it does not have access to any
 compile-time-only macros (CMACRO's).  This means that if you
 define any macros that expand into declarations, they must be
 made known at evaluation time as well (via EVAL-WHEN), just
 like SETF methods do.

 The caller of PARSE-BODY may use value 4 consed with the CDR of
 value 3 as the new body, provided that value 5 is non-NIL.  In
 this way, redundant macroexpansion may be avoided.

Examples:

 (MULTIPLE-VALUE-LIST
  (PARSE-BODY NIL))    ==>   (NIL NIL NIL NIL NIL)

 (MULTIPLE-VALUE-LIST
  (PARSE-BODY '((CAR X) (CDR X)) NIL T))
                       ==>   (NIL NIL ((CAR X) (CDR X)) (CAR X) T)

 (MULTIPLE-VALUE-LIST
  (PARSE-BODY '((DECLARE (SPECIAL X))
                (DECLARE (FIXNUM I) (FLONUM J))
                (IF A B)
                (IF C D)
                FOO
               )
               NIL
               T))
                       ==>   (NIL
                              ((SPECIAL X) (FIXNUM I) (FLONUM J))
                              ((IF A B) (IF C D) FOO)
                              (COND (A B))
                              T
                             )


 (MULTIPLE-VALUE-LIST
  (PARSE-BODY '("this is a doc string"
                (DECLARE (SPECIAL X))
                FOOBAR
               )
               NIL
               T))
                       ==>   ("this is a doc string"
                              ((SPECIAL X))
                              (FOOBAR)
                              FOOBAR
                              T
                             )


 (MULTIPLE-VALUE-LIST
  (PARSE-BODY '("this is a doc string"
                (DECLARE (SPECIAL X))
                FOOBAR
               )
               NIL
               NIL))
                       ==>   (NIL
                              NIL
                              ("this is a doc string"
                               (DECLARE (SPECIAL X))
                               FOOBAR)
                              "this is a doc string"
                              T
                             )

