
Function: TYIPEEK

Syntax:   (TYIPEEK &optional arg1 file2 eofval3 newlineval4)

 arg1  (optional, evaluated) - NIL, T or a fixnum between 0 and 255.
 file2 (optional, evaluated) - a file name.
 eofval3 (optional, evaluated) - any LISP object.
 newlineval4 (optional, evaluated) - any LISP object.

Returns:

 A fixnum representing a character read from file2, unless end of file
 is encountered on file2, in which case eofval3 is returned; or end of
 line is encountered on file2, in which case newlineval4 is returned.

Processing:

 The file specified by file2 is read from the current character position
 and logical record (the ENDREAD and ZPUTFPI functions can change
 these).  One character is returned and made into a fixnum, but the
 current character pointer is NOT updated to point to the next
 character.  Thus, repeated calls to TYIPEEK without an intervening
 READ, READCH, TYI or ZILRDCH will return the same value.

 Whether this character is returned immediately or the scan continues
 for a "wanted" character is determined by arg1.  If arg1 is NIL,
 which is the default if it is omitted, the first-peeked-at character
 is returned.  If arg1 is T, "whitespace" characters (normally blank,
 newline and carriage return) are skipped over and the first
 non-whitespace character to be "peeked" at is returned.  If arg1 is
 a character (i.e. an integer between 0 and 255), characters are
 skipped until a character matching arg1 is found.

 If the end of a line is encountered while reading the file, then if the
 optional newlineval3 argument was specified, it is returned; if the
 newlineval3 argument has not been specified, an EBCDIC CR (hex 0D) is
 returned (i.e. fixnum 13) (unless arg1 is T or a character other
 than CR, in which case the CR is skipped and the next character read).

 If end of file is encountered while reading the file, eofval2 is
 returned as the value.  If eofval2 was not specified, a fixnum -1 is
 returned.  This applies no matter what the value of arg1 is.

 If the file is already in end-of-file status when TYI is issued,
 an error is signalled.

 Compare TYI, which is identical to TYIPEEK except that it updates
 the current character pointer (and also causes "newline" to be set).

Errors signaled:

 Invalid input file object (not a symbol 4 characters or less).
 Specified input file is not allocated or could not be opened.
 Read after end of file.

Notes:

 See member $FILE for more information on file names.

 TYIPEEK is designed for applications that need to do scanning in such
 a way as not to "swallow up" a character in the input stream.  It is,
 however, not perfect at this time, and its interaction with READ,
 READCH and UNTYI has not been thoroughly examined.

 A TYI following a TYIPEEK should return the same character that
 TYIPEEK did (in the EQL sense only).

 TYIPEEK does not set NEWLINEP; only READCH, READLINE, TYI and ZILRDCH
 do that.

Examples:

 (when (null (prefix))
       (tso ("profile prefix(" (userid) ")"))
       nil)                          ==> NIL

 (progn
  (with-open-file (file "$$foo.$$test" :out)
   (format file "~&?foobar a b c~%")
  )
  (setq foo (open "$$foo.$$test" :in))
  t
 )                                  ==> T

 (TYIPEEK NIL FOO 'EOF 'NEWLINE)    ==> NEWLINE

 (TYI FOO)                          ==> #\CR ; swallow first newline
 (TYI FOO)                          ==> #\?  ; prime for a character

 (SETQ A (TYIPEEK NIL FOO 'EOF 'NEWLINE)) ==> #\f
 (TYI FOO 'EOF 'NEWLINE)     ==> #\f      ; Swallow the character.

 (SETQ A (TYIPEEK NIL FOO 'EOF 'NEWLINE)) ==> #\o
 (TYI FOO 'EOF 'NEWLINE)     ==> #\o      ; Swallow the character.

 (SETQ A (TYIPEEK NIL FOO 'EOF 'NEWLINE)) ==> #\o
 (TYI FOO 'EOF 'NEWLINE)     ==> #\o      ; Swallow the character.

 (SETQ A (TYIPEEK NIL FOO 'EOF 'NEWLINE)) ==> #\b
 (TYI FOO 'EOF 'NEWLINE)     ==> #\b      ; Swallow the character.

 (SETQ A (TYIPEEK NIL FOO 'EOF 'NEWLINE)) ==> #\a
 (TYI FOO 'EOF 'NEWLINE)     ==> #\a      ; Swallow the character.

 (SETQ A (TYIPEEK NIL FOO 'EOF 'NEWLINE)) ==> #\r
 (TYI FOO 'EOF 'NEWLINE)     ==> #\r      ; Swallow the character.

 (SETQ A (TYIPEEK T FOO 'EOF 'NEWLINE))   ==> #\a ; skip over blanks
 (TYI FOO 'EOF 'NEWLINE)     ==> #\a      ; Swallow the character.

 (SETQ A (TYIPEEK #\c FOO 'EOF 'NEWLINE)) ==> #\c ; skip until c
 (TYI FOO 'EOF 'NEWLINE)     ==> #\c      ; Swallow the character.

 (loop while (eql (TYIPEEK NIL foo) #\sp)
       do (TYI foo)
       finally (return t))   ==> T

  ;
  ; Now watch what happens when we get to a newline.
  ;

 (TYIPEEK NIL FOO)           ==> #\cr
 (TYIPEEK NIL FOO 'EOF)      ==> #\cr
 (TYIPEEK NIL FOO 'EOF 'NEWLINE) ==> NEWLINE
 (TYI FOO 'EOF 'NEWLINE)     ==> NEWLINE  ; Swallow the character.
 (TYI FOO 'EOF 'NEWLINE)     ==> EOF      ; Read the next one.


;
; Unfortunately, there seems to be no way to get TYIPEEK NIL to return
; EOF, due to problems with new-line-processing.
;

 (TYIPEEK NIL FOO)           ==> ("***ERROR***") ; Read after EOF.

