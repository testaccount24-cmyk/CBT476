
Function: SUBLIS

Syntax:   (SUBLIS arg1 arg2)

 arg1 (required, evaluated) - a list in association list format
                              (i.e. a list of dotted pairs).
 arg2 (required, evaluated) - a proper list.

Returns:

 A list consisting of the elements of argument 2, with all occurrences
 of arguments (at any level) replaced by other arguments if they
 occur in the alist specified by argument 1.

Processing:

 A new list is built (through repeated CONS'ing) from the elements of
 the list specified by the second argument.
 For each atom found at any level of the list, if it is EQL to the
 first element (CAR) of some pair in the association list specified
 by the first argument, the second element (CDR) of the alist pair is
 substituted for said atom in the new list.

 Thus, the alist acts as a list of "from"-to" mappings used to
 effect substitutions (a la SUBST) in the target list, which remains
 unaltered.

 Compare SUBLISQ, which uses an EQ test (i.e. ASSQ rather than ASSOC).

Errors signaled:

 None.

Notes:

 No checking is done as to the validity of the arguments.  Unpredictable
 results will occur if the second argument is not an atom or a proper
 list, or if the first argument is not NIL or a list of dotted pairs.

Examples:

 (SUBLIS '((THE . A) (FOX . WOLF) (DOG . CAT))
         '(THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG))

         ==> (A QUICK BROWN WOLF JUMPS OVER A LAZY CAT)

 (SUBLIS '((1 . A) (2 . HAVE) (3 . I))
         '(3 2 1 CONTACT))

         ==> (I HAVE A CONTACT)

 (SUBLIS '((1.0 . A) (2.0 . HAVE) (3.0 . I))
         '(3.0 2.0 1.0 CONTACT))

         ==> (I HAVE A CONTACT)

