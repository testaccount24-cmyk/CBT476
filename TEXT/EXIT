
Function: EXIT

Syntax:   (EXIT &optional arg1)

 arg1 (optional, evaluated) - a fixnum or NIL.

Returns:

 Nothing; processing is terminated and control returned to the system.

Processing:

 The LISP environment is terminated and control is returned to the
 operating system, TSO, or whoever invoked the LISP program.

 In the interpretive environment, the LISP program is the interpreter,
 so (EXIT) kills the interpreter without letting it put out its
 friendly "I ended" message.

 If the argument is non-NIL, it is assumed to be a fixnum and the
 return code from the LISP program is set to its contents.

 If the argument is NIL, the return code is not set (in practice this
 means that the return code is zero).

Errors signaled:

 None.

Notes:

 Since the argument is not checked for validity, the return code
 contents will be unpredictable if the argument is not a fixnum.
 However, the return to the system will be executed regardless.

 This function may be used in LISP programs to return non-zero return
 codes which may be tested in CLIST's or JCL.

 Invoked from within a LISP function (compiled or interpreted) running
 under the interpreter, EXIT causes immediate termination of the
 interpreter.  Compare QUIT, which stops the interpreter cleanly by
 forcing an end-of-data condition on the standard input file.

 Do not confuse this with the (END) function, which indicates end of
 source input to the compiler.

Examples:

 (EXIT)
 (EXIT NIL)
 (EXIT 0)     ...are all equivalent.

 (EXIT 12)       returns a code of 12 to the system.
 (EXIT -1)       returns a crazy return code, but returns nonetheless.
 (EXIT '(A B C)) returns a crazy return code, but returns nonetheless.

