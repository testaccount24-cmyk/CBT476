
Macro: LET, LET*

Syntax:   (LET arg1 arg2 ... argn)
  Also:   (LET* arg1 arg2 ... argn)

 The first argument (the list of local variable bindings) is required;
 at least one subsequent argument is required, but any number of
 arguments greater than one may be specified.

 arg1 (partially evaluated) - a list of local variable bindings, i.e.
 lists of two elements each, where the first element is a symbol
 (not evaluated) and the second is the value to which the symbol
 is to be bound (evaluated).

 argn (conditionally evaluated) - any LISP object.

Returns:

 The last of the arguments.

Processing:

 The general format of LET is:

   (LET ((var1 value1) (var2 value2) ... (varn valuen))
        form1
        form2
        ...
        formn
   )

 in which the "varn"'s must be variable names (symbols or destructuring
 templates) and are not evaluated, the "valuen"'s are any LISP objects
 and are evaluated when the corresponding variables are bound, and the
 "formn"'s are any LISP objects and are evaluated in sequence in the
 binding environment set up by the variable/value pairs.

 The first argument is a list of two-element lists (binding
 specifications), of which the CAR (first element) is the name of a
 variable to be local to the body to the LET.  For each of these,
 the variable is initially bound to the value specified as the CDR
 (second element) of the binding specification, and becomes unbound
 when the LET body terminates.

 The rest of the forms in the LET constitute the body of the
 LET, and are processed in succession, a la PROGN.  The value
 of the last form in the body is returned as the value of the LET.

 LET* is the same as LET, except that LET binds its variables
 sequentially whereas LET* does parallel binding.

 In summary:

 LET binds each variable in the environment present outside of the LET.

 LET* binds each variable in the environment present immediately before
 the variable-value pair, so that each binding can refer to previous
 (but not subsequent) LET variables.

Errors signaled:

 Invalid syntax (missing or invalid first argument).

Notes:

 Under the current implementation of ZIL, LET is a macro whose expansion
 involves a LAMBDA-expression, e.g.:

 (LET ((A VALUE-OF-A)
       (B (SOME FUNC)))
      (FORM 1)
      (FORM 2)
      (FORM 3))       -->   ((LAMBDA (A B)
                                     (FORM 1)
                                     (FORM 2)
                                     (FORM 3))
                              VALUE-OF-A
                              (SOME FUNC))

 LET* expands into a series of nested LET's (lambda-expressions).

 Declarations are processed so that they refer to the appropriate
 variable bindings.

 These techniques enforce the variable binding strategies.

Examples:


 (LET ((A '(1 2 3 4))
       (B '(5 6 7 8))
       (C NIL)
       (D NIL)
      )
      (SETQ C (CAR A))
      (SETQ D (CAR B))
      (+ C D)
 )                         ==>  6


 (SETQ A "a")          ==> "a"
 (SETQ B "b")          ==> "b"

 (LET  ((A (LIST A)) (B A)) (LIST A B))  ==>  (("a") "a")
 (LET* ((A (LIST A)) (B A)) (LIST A B))  ==>  (("a") ("a"))

