
Function: GETK

Syntax:   (GETK arg1 arg2 &optional arg3)

 arg1 (required, evaluated) - a proper list.
 arg2 (required, evaluated) - any LISP object, but generally a symbol.
 arg3 (required, evaluated) - any LISP object, but generally T or NIL.

Returns:

 The sublist of arg1 whose CAR is the "value" associated with the
 "keyword" arg2, i.e. the CDR of the sublist of arg1 whose CAR is EQ
 to arg2; NIL if no such keyword exists.

Processing:

 arg1 is not a "disembodied property list", but a list of alternating
 keywords and values.  The list is searched for a keyword-value "pair"
 for which the keyword is EQ to arg2.

 If such a value is present, the sublist of arg1 beginning with that
 value is returned; the CAR of this list is the value found.  If the
 specified keyword arg2 is not present on the list, NIL is returned.

 If arg1 is found to be an improper list or a list with an odd number of
 elements, then arg3 is consulted.  If arg3 is omitted or NIL, an error
 will be signalled in this case; if arg3 is specified and non-NIL, the
 function will just return NIL.

Errors signaled:

 Invalid list (see above for details on when an error is signalled).

Notes:

 GETK is similar to GET and GETL, but is designed to operate on
 keyword lists provided by callers of functions whose LAMBDA argument
 lists contain a &key specification.

Examples:

 (GETK '(:A X :B Y :C Z) ':A)     ==>  (X :B Y :C Z)
 (GETK '(:A X :B Y :C Z) 'X)      ==>  NIL
 (GETK '(:A X :B Y :C Z) ':B)     ==>  (Y :C Z)
 (GETK '(:A X :B Y :C Z) 'Y)      ==>  NIL
 (GETK '(:A X :B Y :C Z) ':C)     ==>  (Z)
 (GETK '(:A X :B Y :C Z) 'Z)      ==>  NIL
 (GETK '(:A X :B Y :C Z) ':D)     ==>  NIL
 (GETK '(A BAD LIST) 'X)          ==>  ("***ERROR***")
 (GETK '(A BAD LIST) 'X NIL)      ==>  ("***ERROR***")
 (GETK '(A BAD LIST) 'X T)        ==>  NIL

