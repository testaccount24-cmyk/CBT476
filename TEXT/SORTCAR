
Function: SORTCAR

Syntax:   (SORTCAR list1 &optional fun2)

 list1 (required, evaluated) - a proper list.
 fun2  (optional, evaluated) - a function that can be APPLY'ed.

Returns:

 A new list containing the elements of list1 in order, such that the
 CAR's of the list satisfy the two-argument predicate specified by fun2.

Processing:

 A new list is built, using the predicate function specified by fun2.
 This must be a function that takes 2 arguments and returns NIL or
 something other than NIL to tell whether the CAR of one argument is
 "less" than the CAR of the other in the desired sequence.

 If fun2 is omitted or NIL, the comparison function defaults to LESSP.

 Note that ZIL's SORTCAR does NOT alter the list in place; it always
 creates a new list.

Errors signaled:

 See SORT for errors.

Notes:

 See SORT for more information.

 Even though omitting the optional argument is more efficient that
 explicitly specifying LESSP, SORTCAR is less efficient than SORT
 (at least in the current implementation) because it invokes SORT
 using its own internal functional argument.  However, omitting
 the optional argument to SORTCAR insures that you won't have to
 do TWO FUNCALL's on each comparison.

Examples:

 (SORTCAR '((Q 1) (W 2) (E 3) (R 4))) ==> ((E 3) (Q 1) (R 4) (W 2))
 (SORTCAR '((F) (O) (O)) #'GREATERP) ==> ((O) (O) (F))

