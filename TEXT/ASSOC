
Function: ASSOC

Syntax:   (ASSOC item1 alist2 &key test test-not key)

 item1    (required, evaluated) - any LISP object.
 alist2   (required, evaluated) - a list in association list format
                                  (i.e. a list of dotted pairs).
 test     (optional, evaluated) - a predicate function of two arguments.
 test-not (optional, evaluated) - a predicate function of two arguments.
 key      (optional, evaluated) - an accessor function of one argument.

Returns:

 The first dotted pair in alist2 whose CAR is equal to item1
 according to the test specified by the keywords;
 NIL if no such pair exists.

Processing:

 alist2 (an association list) is searched for an element (dotted pair)
 whose CAR is equal to item1.  When the first such pair is found, the
 pointer to it is returned.

 The caller of ASSOC may use the CDR of the returned pair as the "value"
 of item1 as found on the alist2 association list, unless NIL is
 returned, indicating no value found.

 NIL may occur in place of a dotted pair anywhere within alist2; when
 this is the case, it is skipped over and the search continues.

 If no keywords are specified, a match occurs when an element of
 alist2 is found that item1 is EQL to the CAR of.

 The keywords are processed as follows:

 :test (default #'eql)  - specifies a predicate function of two
                          arguments used when comparing item1 to the CAR
                          of each element of alist2. If the function
                          returns a non-NIL value, a match occurs.  The
                          first argument is always item1, and the second
                          argument is always the CAR of the current
                          element of alist2 (with the :key function
                          applied if :key is specified).

 :test-not (no default) - specifies a predicate function of two
                          arguments used when comparing item1 to each
                          element of alist2. If the function returns
                          NIL, a match occurs.  The first argument is
                          always item1, and the second argument is
                          always the CAR of the current element of
                          alist2 (with the :key function applied if :key
                          is specified).

 :key (no default)      - specifies an accessor function of one argument
                          that is applied to the CAR of each element of
                          alist2 before comparing it to item1 via the
                          :test or :test-not function.  Note that the
                          :key function is applied after CAR, NOT
                          instead of CAR.

 The :test and :test-not keywords may not both be specified.

Errors signaled:

 alist2 not a list.
 Both :test and :test-not keywords specified.
 Invalid keyword specification.

Notes:

 ASSOC is, by default, implemented with an EQL test for Common LISP
 compatibility.  If Maclisp or Franz LISP compatibility is desired,
 ASSOC may be equated with ZIL function ASSQUAL via the DEFLOAD special
 form.  See ASSQ and ASSQUAL for more info.

 Under Macsyma, ASSOC performs an EQUAL test.

 Unpredictable results will occur if the second argument is not NIL or
 a list of dotted pairs.

Examples:

 (ASSOC 'A NIL)                           ==> NIL
 (ASSOC 'A '((A . 1) (B . 2) (C . 3)))    ==> (A . 1)
 (ASSOC 'D '((A . 1) (B . 2) (C . 3)))    ==> NIL
 (ASSOC 'BAZ '((FOO . BAR) (BAZ . FROB) (BAZ . NICATE)))
                                          ==> (BAZ . FROB)

 ;The following shows that the default comparison test is EQL.

 (ASSOC 1   '((1 . A) (2 . B) (3 . C)))     ==> (1 . A)
 (ASSOC 1.0 '((1 . A) (2 . B) (3 . C)))     ==> NIL

 (ASSOC 'A '((A) (B) (C)) :TEST #'EQL)      ==> (A)
 (ASSOC 'B '((A) (B) (C)) :TEST #'EQL)      ==> (B)
 (ASSOC 'C '((A) (B) (C)) :TEST #'EQL)      ==> (C)
 (ASSOC 'D '((A) (B) (C)) :TEST #'EQL)      ==> NIL

 (ASSOC 'A '((A) (B) (C)) :TEST-NOT #'EQL)  ==> (B)
 (ASSOC 'B '((A) (B) (C)) :TEST-NOT #'EQL)  ==> (A)
 (ASSOC 'C '((A) (B) (C)) :TEST-NOT #'EQL)  ==> (A)
 (ASSOC 'D '((A) (B) (C)) :TEST-NOT #'EQL)  ==> (A)

 (ASSOC 'C '(((A) B) ((C) D) ((E) F)))             ==> NIL
 (ASSOC 'C '(((A) B) ((C) D) ((E) F)) :KEY #'CAR)  ==> ((C) D)

 ;The default comparison test is EQL.

 (ASSOC '(2) '(((1) . A) ((2) . B)))                ==> NIL
 (ASSOC '(2) '(((1) . A) ((2) . B)) :TEST #'EQUAL)  ==> ((2) . B)

