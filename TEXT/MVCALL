
Macro: MULTIPLE-VALUE-CALL

Syntax:   (MULTIPLE-VALUE-CALL func1 &rest forms)

 func1 (required, evaluated) - a function.
 forms (optional, evaluated) - any LISP object.

Returns:

 The value returned by func1 when it is called with all the arguments
 generated by evaluating the forms and collecting all their multiple
 values together.

Processing:

 First func1 is evaluated to return an object which can be called as a
 function, in the usual LISP sense.  Then the forms are evaluated with
 the expectation that multiple values may be returned, and the values
 are all retained in succession and passed to the function, whose return
 value is the return value.  Thus, the number of arguments passed to
 the function is the total of the numbers of values returned from all
 the forms.

Errors signaled:

 Too few arguments.
 func1 not a valid function (errors signalled by APPLY).

Notes:

 See VALUES and VALUES-LIST for information on how multiple values
 are returned from a function.

 See Guy Steele's "Common LISP: The Language", pp. 133-139, for
 an explanation of multiple values in LISP.  Although the constant
 MULTIPLE-VALUES-LIMIT is not defined in ZIL, returning more than
 4095 multiple values is not supported.

 In many cases, use of multiple values in ZIL is more expensive than
 just consing up a list of the values and extracting the values from
 the list via destructuring.  In any case, out of all the forms that
 request multiple values, only MULTIPLE-VALUE-BIND in compiled code
 is guaranteed not to cons in ZIL.

Examples:

 (MULTIPLE-VALUE-CALL #'CONS (VALUES 1 2))    ==> (1 . 2)
 (MULTIPLE-VALUE-CALL #'LIST (VALUES) (VALUES 'A) (VALUES 'B 'C) 'D)
                                              ==> (A B C D)
