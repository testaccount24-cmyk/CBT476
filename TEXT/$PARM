
Processing of Run-time Parameters at Initialization Time


 You may pass a PARM string to your program; the GETPARM function will
 retrieve it and make a symbol out of it.  Note that if no PARM string
 is specified, GETPARM returns the null symbol (printed as ||).

 The parameter value may be passed as a JCL-style PARM string (in
 batch or via the CALL or XINVOKE command) or as TSO command operands
 via XCMD.  If it is passed in the latter fashion, any leading blanks,
 commas or /* ... */ sequences are ignored.  However, there is no
 100-character limitation imposed by MVS as there is for JCL-style
 PARM passing.

 If the parameter string begins with a backslash character "\", then
 special processing is done:  the portion of the parameter up to the
 second backslash character is ignored by GETPARM, and the information
 between the backslashes (if any) is processed at ZIL initialization
 time.  The syntax is as follows:

  \keyword=value,keyword=value...\

 For all keywords defined here, "value" must be a number, optionally
 ending in the letter K or M.  If it ends in K, it represents the
 value of the numeric portion multiplied by 1024; if it ends in M,
 it represents the value of the numeric portion multiplied by 1048576
 (e.g. 4K = 4096; 1M = 1024K).

 Keywords may be abbreviated to as little as 1 letter; e.g.
 V=2M is the same as VSS=2048K or VSSIZE=2097152.

 The following keywords are recognized:

  PDSIZE=value - specifies the size of the push down stack to be
     allocated at initialization time.  If this is omitted, the default
     value of 65536 (64K) is used.

     This space is allocated above 16 megabytes if possible.

  CSSIZE=value - specifies the size of the CONS space ("free list") to
     be allocated at initialization time.  If this is omitted, the
     default value of 4 megabytes (4096K) is used.

     Lists (conses), fixnums, single-floats, and the header portions
     of executable objects are allocated in this space.

     This value represents the TOTAL allocation, not to be confused
     with the initial ACTIVE size of the space - see ACSIZE below.

     This space is allocated above 16 megabytes if possible.

  ACSIZE=value - specifies the size of the CONS space ("free list") to
     be considered active initially.  If this is omitted, the
     default value of 2 megabytes (2048K) is used.

     This value controls how much of the total CONS space (as specified
     by CSSIZE) is in use, until it is determined (by the garbage
     collector) that more space is needed, at which time the ACSIZE
     value is doubled, provided that it does not exceed the CSSIZE
     value.  Thus, this is the only one of the values described here
     that can change during execution.

  VSSIZE=value - specifies the size of vector/string space (the space
     used to build symbols, vectors, strings, double-floats, bignums and
     structures) to be allocated at initialization time.  If this is
     omitted, the default value of 1 megabyte (1024K) is used.

     Note that this space is allocated in duplicate, due to the copying
     garbage collection scheme used for this space in ZIL.  Thus in
     actuality twice the specified value is required.

     This space is allocated above 16 megabytes if possible.

  Note:

     When ZIL runs in a non-XA system, for each DDNAME of the form
     ZILIxxxx or ZILOxxxx found to be allocated at ZIL initialization
     time, whether or not it is eventually referenced as a ZIL file, an
     additional 32K is reserved for operating system functions so that
     if the files need to be opened, sufficient memory will be
     available.

Examples:

 You could invoke the interpreter on TSO as follows:

  CALL 'PROGLIB.ZIL.LOAD(ZILIN)' '\C=3M,VSSIZE=800K,PD=65536\initfile'

 where initfile is the name of your INIT file.

 Or you could use the PDSIZE, CSSIZE, ACSIZE, and VSSIZE operands on the
 XZINT CLIST.

 If you want to be able to access your own compiled functions,
 you could do the following:

  ALLOC FILE(ZILLIB) DA(my.load.library) SHR REU
  XINV ZILIN '\CSSIZE=3072K,V=8192,PDS=64K\my.init.file' +
       LIB('PROGLIB.ZIL.LOAD') FILE(ZILLIB)

 In both of the above cases, the function call (GETPARM T) would
 return the symbol |my.init.file|.  The contents of the PARM string
 are used by the particular ZIL program in different ways;  the
 interpreter, the compiler, OPS5 and Macsyma all use the PARM string
 for their own purposes.
 See the help for GETPARM for more information.

 Note: These examples do not include redirection of standard input
       and output, or use of a dribble file.

