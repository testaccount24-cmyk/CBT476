
Function: MKFLONUM

Syntax:   (MKFLONUM fix1 &optional fix2)
    or:   (MAKE-FLONUM fix1 &optional fix2)

 fix1 (required, evaluated) - a fixnum.
 fix2 (optional, evaluated) - a fixnum.

Returns:

 If fix2 is omitted, a single-float created from fix1.
 If fix2 is specified, a double-float created from fix1 and fix2.

Processing:

 The values of fix1 and fix2 are NOT converted; rather, the bitwise
 contents of the fixnum values are used to create the floating-point
 number.  If fix2 is omitted, the value of fix1 is inserted into the
 newly created single-float.  Otherwise, the values of fix1 and fix2
 are concatenated to form a doubleword which is inserted into the
 newly created double-float.  In both cases, the leftmost 8 bits
 form the characteristic and the remaining bits form the mantissa
 (or is it the other way around?).

 The value is normalized by adding a normalized floating-point zero to
 it.  This is necessary to insure, among other things, the bitwise
 equality of all flonum zero values.  Therefore, the resulting flonum
 may not have the same bitwise configuration as the input fixnum;
 specifically, MKFIXNUM may not return fix1 (and fix2, if applicable)
 when applied to the result of (MKFLONUM fix1 {fix2}).

Errors signaled:

 Argument not a fixnum.

Notes:

 MKFIXNUM will turn the flonum back into fixnum(s).  Note, however,
 that it will not return the original fixnum(s) if MKFLONUM has had to
 normalize the value (see above).

Examples:

 (MKFLONUM #z41100000)        ==> 1.0F0
 (MKFIXNUM 1.0F0)             ==> #z
 (MKFLONUM #zC1180000)        ==> -1.5F0
 (MKFIXNUM -1.5F0)            ==> #zC1180000
 (MKFLONUM #z40000000)        ==> 0.0F0
 (MKFIXNUM 0.0F0)             ==> #z00000000  ; note: normalized!

 (MKFLONUM #z41100000 #z00000000) ==> 1.0D0
 (MKFIXNUM 1.0D0)             ==> (#z41100000 . #z00000000)
 (MKFLONUM #z40999999 #z99999999) ==> 0.6D0
 (MKFIXNUM 0.6D0)             ==> (#z40999999 . #z99999999)
 (MKFLONUM #z40000000 #z00000000) ==> 0.0D0
 (MKFIXNUM 0.0D0)             ==> (#z00000000 . #z00000000) ;normalized!

