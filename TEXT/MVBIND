
Special Form: MULTIPLE-VALUE-BIND

Syntax:   (MULTIPLE-VALUE-BIND list1 form2 &rest body)

 list1 (required, not evaluated) - a list of variables.
 form2 (required, evaluated)     - any LISP object.
 body  (optional, evaluated)     - a list of zero or more declarations
                                   and forms to be executed.

Returns:

 The value of the last form in the body, after setting up a binding
 environment containing the variables in list1, which are bound to
 the values returned from form2.

Processing:

 form2 is evaluated with the expectation that multiple values may be
 returned.  A local binding environment is then created with the
 variables in list1 (which may be symbols or destructuring templates).
 The values returned from form2 are assigned to these variables in
 order, according to the following rules:

  If there are fewer values than variables, the remaining variables
  are set to NIL.

  If there are more values than variables, the excess values are
  ignored.

 Note that if the form returns no values, all of the variables are
 set to NIL.  If the form returns a single value (for example, it
 is not a multiple-value-returning function at all), then the first
 variable in list1 receives the value and the others (if any) are
 set to NIL.

 The body is then executed in the new binding environment.  Note
 that declarations can occur at the beginning of the body, and may
 affect the binding of the variables in list1, particularly SPECIAL
 declarations.  The value of the last form in the body is returned
 as the value of the special form.

Errors signaled:

 Too few arguments.
 Invalid argument list (not a proper list, lambda list keywords
 found at a non-destructuring level, or other error detected by
 lambda list processing).

Notes:

 Compare MULTIPLE-VALUE-SETQ, which does assignment without creating
 new bindings.

 See VALUES and VALUES-LIST for information on how multiple values
 are returned from a function.

 See Guy Steele's "Common LISP: The Language", pp. 133-139, for
 an explanation of multiple values in LISP.  Although the constant
 MULTIPLE-VALUES-LIMIT is not defined in ZIL, returning more than
 4095 multiple values is not supported.

 In many cases, use of multiple values in ZIL is more expensive than
 just consing up a list of the values and extracting the values from
 the list via destructuring.  In any case, out of all the forms that
 request multiple values, only MULTIPLE-VALUE-BIND in compiled code
 is guaranteed not to cons in ZIL.

Examples:

 (MULTIPLE-VALUE-BIND (A    ) (VALUES 1 2 3 4) (LIST A    ))
     ==> (1)
 (MULTIPLE-VALUE-BIND (A B  ) (VALUES 1 2 3 4) (LIST A B  ))
     ==> (1 2)
 (MULTIPLE-VALUE-BIND (A B C) (VALUES 1 2 3 4) (LIST A B C))
     ==> (1 2 3)
 (MULTIPLE-VALUE-BIND (A B C D) (VALUES 1 2 3 4) (LIST A B C D))
     ==> (1 2 3 4)
 (MULTIPLE-VALUE-BIND (A B C D E) (VALUES 1 2 3 4) (LIST A B C D E))
     ==> (1 2 3 4 NIL)
 (MULTIPLE-VALUE-BIND (A B C) (VALUES)         (LIST A B C))
     ==> (NIL NIL NIL)
 (MULTIPLE-VALUE-BIND (A B C) (VALUES 1)       (LIST A B C))
     ==> (1 NIL NIL)
 (MULTIPLE-VALUE-BIND (A B C) (VALUES 1 2)     (LIST A B C))
     ==> (1 2 NIL)
 (MULTIPLE-VALUE-BIND (A B C) (VALUES 1 2 3)   (LIST A B C))
     ==> (1 2 3)
 (MULTIPLE-VALUE-BIND (A B C) (VALUES 1 2 3 4) (LIST A B C))
     ==> (1 2 3)
 (MULTIPLE-VALUE-BIND (A B C) 'FOOBAR          (LIST A B C))
     ==> (FOOBAR NIL NIL)
