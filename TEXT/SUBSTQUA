
Function: SUBSTQUA

Syntax:   (SUBSTQUA arg1 arg2 arg3)
    or:   (SUBSTQUAL arg1 arg2 arg3)

 arg1 (required, evaluated) - any LISP object.
 arg2 (required, evaluated) - any LISP object, but should be a symbol.
 arg3 (required, evaluated) - a proper list.

Returns:

 A list consisting of the elements of arg3, with all occurrences
 of arg2 (at any level) replaced by arg1.

Processing:

 If arg3 is an atom, it is returned as is.
 Otherwise...

 A new list is built (through repeated CONS'ing) from the elements of
 the list specified by arg3.  For each atom found within the list
 structure, if it is EQUAL to arg2 then arg1 is substituted for it in
 the new list.  Note that the CAR's of the list are recursively
 substituted.

 Compare SUBSTQ, which uses an EQ test; and SUBSTQL, which uses EQL.

Errors signaled:

 None.

Notes:

 (SUBSTQUA NIL NIL form) will NOT do a full copy of a list structure
 in ZIL.  Use COPYTREE for this purpose.

 Beware - if the third arg is a list ending in a sublist which matches
 the second arg, it will be substituted.  This is because the algorithm
 treats any CDR of the list as substitutable.  This is how Common LISP
 defines (SUBST ... :TEST #'EQUAL), and how it works in NIL.

 No checking is done as to the validity of the arguments.  Unpredictable
 results will occur if the third argument is not an atom or a proper
 list.

Examples:

 (SUBSTQUAL 'A 'THE '(THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG))
                          ==> (A QUICK BROWN FOX JUMPS OVER A LAZY DOG)

 (SUBSTQUAL '(FOO BAR) 'FOO '(FOO (FOO BAR) (FOO) FOO BAR))
            ==> ((FOO BAR) ((FOO BAR) BAR) ((FOO BAR)) (FOO BAR) BAR)

 (SUBSTQUAL '(NEW WINE) '(OLD BOTTLES)
             '(PUT (OLD BOTTLES) IN OLD BOTTLES))
             ==> (PUT (NEW WINE) IN NEW WINE)

 (SUBSTQUAL 2.0 1.0 '(1.0 2.0 3.0)) ==> (2.0 2.0 3.0)

