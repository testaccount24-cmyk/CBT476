
Macro: AT

Syntax:   (AT funspec)
    or:   (AT funspec arglist &rest body)

 funspec (required, not evaluated) - a symbol funname, list (funname),
         or a list (funname aspect) or (funname aspect quietp),
         where: funname is a symbol naming a function
                aspect is one of:  ENTRY, :ENTRY, EXIT, :EXIT
                quietp is any value, generally T or NIL

Returns:

 funname, after activating tracing for the function named by funname
 and associating the action specified by arglist and body with entry
 to or exit from the function.

Processing:

 First of all, tracing is activated for the function specified by
 funname in the normal way.  This means that the default "Entering"
 and "Exiting" displays will occur, where AT does not specify otherwise.

 What happens next depends on the aspect, which is either entry or exit.
 Entry specifies action to be taken immediately before calls to the
 function are entered; exit specifies action to be taken immediately
 after values are returned from the function.

 If no aspect is given, it defaults to entry.

 If no arglist or body is specified, then the only action is to
 display the message "At entry to {funname}" or "At exit from {funname}"
 at the appropriate point, and with the appropriate indentation.
 If an arglist and a body are specified, then a lambda-expression is
 created from the arglist and body which define a function to be
 executed at entry to or exit from the function in addition to the
 "At..." message.  If quietp is non-NIL, the "At..." message is
 suppressed, and only the action specified by arglist and body is
 performed.

 For entry, the arglist maps the arguments to the function.  They may
 be specified as for the function's normal argument list, or any other
 arglist format may be used.  A &rest argument may be used to get the
 entire argument list at once.

 For exit, the arglist maps the values returned by the function.  If
 the function returns a single value, an arglist of one variable is
 the norm.  A &rest argument may be used to get the list of all values
 returned (a list of one value for functions that do not return
 multiple values).


 The OFF macro may be used to cancel an AT for entry or exit to a
 function, or a subsequent AT may be used to replace an existing one.
 However, OFF merely reverts entry or exit processing to the default
 for tracing; UNTRACE must be used to cancel tracing entirely for
 the function.

Errors signaled:

 Invalid function name.
 Argument list but no body specified.
 Invalid aspect (not entry or exit).

Notes:

 See also OFF, TRACE, and UNTRACE.

 See member $TRACE of this document for a description of tracing,
 and for examples of use.

 The PUTDATA macro is useful for displaying values.  See PUTDATA.

 See ZILTRACE for technical details on how tracing and untracing
 are effected.

Examples:

;(AT FOO)
;(AT (FOO ENTRY))
;(AT (FOO :ENTRY))
;(AT (FOO ENTRY NIL))     all set a "breakpoint" at entry to FOO
;                         that prints "At entry to FOO" only.
;(AT FOO)
;(AT (FOO EXIT))
;(AT (FOO :EXIT))
;(AT (FOO EXIT NIL))      all set a "breakpoint" at exit from FOO
;                         that prints "At exit from FOO" only.
;
;(AT FOO (A) (PUTDATA A))       prints "At entry to FOO" and displays
;                               the value of the first argument to FOO.
;
;(AT FOO (&REST A) (PRINT A))   prints "At entry to FOO" and prints
;                               the value of the list of args to FOO.
;
;(AT (FOO ENTRY T) (A) (PUTDATA A))
;                               displays the value of arg 1 to FOO
;                               upon entry, but does not print any
;                               entry message.
;
;(AT (FOO EXIT) (V) (PRINT V))  prints "At exit from FOO" and prints
;                               the single value returned from FOO.
;
;(AT (FOO EXIT T) (&REST V) (PUTDATA V))
;                               displays the list of values returned by
;                               FOO at exit, but does not print any
;                               exit message.

; Here's a fancy use of AT to trace the inputs and outputs to a
; function.  Note how lexical scoping is taken advantage of.

(DEFUN FIB (X) (IF (< X 2) 1 (+ (FIB (1- X)) (FIB (- X 2)))))
  ==> FIB

(LET (A)
 (AT (FIB ENTRY T) (N) (PUSH `(IN ,N) A))
 (AT (FIB EXIT T) (V)
 (PUSH `( OUT ,V) A))
 (FIB 10)
 (REVERSE A))

  ==>

((IN 10) (IN 9) (IN 8) (IN 7) (IN 6) (IN 5) (IN 4) (IN 3) (IN 2) (IN 1)
 (OUT 1) (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1) (OUT 3) (IN 2) (IN 1)
 (OUT 1) (IN 0) (OUT 1) (OUT 2) (OUT 5) (IN 3) (IN 2) (IN 1) (OUT 1)
 (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1) (OUT 3) (OUT 8) (IN 4) (IN 3)
 (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1) (OUT 3)
 (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2) (OUT 5) (OUT 13) (IN 5)
 (IN 4) (IN 3) (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2) (IN 1)
 (OUT 1) (OUT 3) (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2) (OUT 5)
 (IN 3) (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1)
 (OUT 3) (OUT 8) (OUT 21) (IN 6) (IN 5) (IN 4) (IN 3) (IN 2) (IN 1)
 (OUT 1) (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1) (OUT 3) (IN 2) (IN 1)
 (OUT 1) (IN 0) (OUT 1) (OUT 2) (OUT 5) (IN 3) (IN 2) (IN 1) (OUT 1)
 (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1) (OUT 3) (OUT 8) (IN 4) (IN 3)
 (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1) (OUT 3)
 (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2) (OUT 5) (OUT 13) (OUT 34)
 (IN 7) (IN 6) (IN 5) (IN 4) (IN 3) (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1)
 (OUT 2) (IN 1) (OUT 1) (OUT 3) (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1)
 (OUT 2) (OUT 5) (IN 3) (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2)
 (IN 1) (OUT 1) (OUT 3) (OUT 8) (IN 4) (IN 3) (IN 2) (IN 1) (OUT 1)
 (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1) (OUT 3) (IN 2) (IN 1) (OUT 1)
 (IN 0) (OUT 1) (OUT 2) (OUT 5) (OUT 13) (IN 5) (IN 4) (IN 3) (IN 2)
 (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1) (OUT 3) (IN 2)
 (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2) (OUT 5) (IN 3) (IN 2) (IN 1)
 (OUT 1) (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1) (OUT 3) (OUT 8) (OUT 21)
 (OUT 55) (IN 8) (IN 7) (IN 6) (IN 5) (IN 4) (IN 3) (IN 2) (IN 1)
 (OUT 1) (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1) (OUT 3) (IN 2) (IN 1)
 (OUT 1) (IN 0) (OUT 1) (OUT 2) (OUT 5) (IN 3) (IN 2) (IN 1) (OUT 1)
 (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1) (OUT 3) (OUT 8) (IN 4) (IN 3)
 (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1) (OUT 3)
 (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2) (OUT 5) (OUT 13) (IN 5)
 (IN 4) (IN 3) (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2) (IN 1)
 (OUT 1) (OUT 3) (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2) (OUT 5)
 (IN 3) (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1)
 (OUT 3) (OUT 8) (OUT 21) (IN 6) (IN 5) (IN 4) (IN 3) (IN 2) (IN 1)
 (OUT 1) (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1) (OUT 3) (IN 2) (IN 1)
 (OUT 1) (IN 0) (OUT 1) (OUT 2) (OUT 5) (IN 3) (IN 2) (IN 1) (OUT 1)
 (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1) (OUT 3) (OUT 8) (IN 4) (IN 3)
 (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2) (IN 1) (OUT 1) (OUT 3)
 (IN 2) (IN 1) (OUT 1) (IN 0) (OUT 1) (OUT 2) (OUT 5) (OUT 13) (OUT 34)
 (OUT 89))

