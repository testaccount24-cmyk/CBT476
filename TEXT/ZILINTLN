
Function: INTEGER-LENGTH

Syntax:   (INTEGER-LENGTH arg1)
    or:   (ZILINTLN arg1)

 arg1 (required, evaluated) - an integer.

Returns:

 An integer containing the number of significant bits in arg1.

Processing:

 If arg1 is positive, the total number of bits required to represent the
 number is returned, assuming that all leading 0-bits are omitted.

 If arg1 is negative, the total number of bits in the two's-complement
 representation of the number is returned, assuming that all leading
 1-bits are omitted.

 If arg1 is zero, 0 is returned.

Errors signaled:

 arg1 not an integer.

Notes:

 Compare HAULONG, which is equivalent to (integer-length (abs x)).

Examples:

 (INTEGER-LENGTH 0) ==> 0
 (INTEGER-LENGTH 1) ==> 1
 (INTEGER-LENGTH 2) ==> 2
 (INTEGER-LENGTH 3) ==> 2
 (INTEGER-LENGTH 4) ==> 3
 (INTEGER-LENGTH 5) ==> 3
 (INTEGER-LENGTH -1) ==> 0
 (INTEGER-LENGTH -2) ==> 1
 (INTEGER-LENGTH -3) ==> 2
 (INTEGER-LENGTH -4) ==> 2
 (INTEGER-LENGTH -5) ==> 3
 (INTEGER-LENGTH #b1001001001) ==> 10
 (INTEGER-LENGTH #b0110110110) ==> 9
 (INTEGER-LENGTH 2147483647) ==> 31
 (INTEGER-LENGTH 2147483648) ==> 32
 (INTEGER-LENGTH 2147483649) ==> 32
 (INTEGER-LENGTH -2147483647) ==> 31
 (INTEGER-LENGTH -2147483648) ==> 31
 (INTEGER-LENGTH -2147483649) ==> 32
 (INTEGER-LENGTH (** 2 60))            ==> 61
 (INTEGER-LENGTH (+ (** 2 60) +1))     ==> 61
 (INTEGER-LENGTH (+ (** 2 60) -1))     ==> 60
 (INTEGER-LENGTH (- (** 2 60)))        ==> 60
 (INTEGER-LENGTH (- (+ (** 2 60) +1))) ==> 61
 (INTEGER-LENGTH (- (+ (** 2 60) -1))) ==> 60

