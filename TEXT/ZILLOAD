
Function: ZILLOAD

Syntax:   (ZILLOAD arg1)

 arg1 (required, evaluated) - a symbol (or string).

Returns:

 The compiled code object with the same name as arg1, if it exists in
 storage or on the system library; otherwise NIL.

Processing:

 ZILLOAD builds the 8-character load module name to be searched for from
 the first argument; if the first argument is not a string or a symbol,
 or if it is longer than 8 characters, an error is signalled.

 It first searches its own table of in-memory module names; this table
 contains pointers to selected commonly used modules that are likely
 to be linkedited with the interpreter.  If it finds it, it returns
 the address of the in-line or linkedited code.

 If the module is not found this way, ZILLOAD then searches active
 system storage for the load module to see if it has already been
 loaded.  If it finds it, it then proceeds to resolve the external
 references to other functions (since these functions, if not resolved
 the first time this function was loaded, may have been loaded in
 afterwards).

 If the module is not currently in memory, then the BLDL system service
 is invoked to locate the directory entry for the load module in the
 system library.  If BLDL returns a code of 8, meaning that either there
 was an I/O error searching the directory or not enough system storage
 was available, an error is signalled since processing probably cannot
 continue productively.  If BLDL could not find a directory entry for
 the module, meaning that no such compiled function exists, ZILLOAD
 returns NIL (if this is the primary level of function search).

 If BLDL finds the module successfully, then the LOAD system service is
 issued to load the module into storage, and the entry point address of
 the module is used to construct the compiled code object, which is the
 value returned by ZILLOAD.

 If the LOAD operation failed, ZILLOAD returns NIL to indicate that the
 function was not loaded.

 ZILLOAD now must resolve external references within the compiled code,
 which would have been resolved by the linkage editor had the code been
 included in a ZIL program.  Each section of code contains a list of
 function names to which references exists; these may refer to internal
 subroutines in the same code, which may in turn have lists of external
 calls, etc., etc.  ZILLOAD processes the entire tree of external
 references recursively, re-invoking the search-and-load process for
 each one, and sending a message to the user's TSO terminal whenever a
 module cannot be located in the system library.

 If an external reference cannot be resolved because the module cannot
 be found, ZILLOAD continues with the next one.  The pointer to the
 unresolved code in the compiled function is replaced with the address
 of a special in-line routine that signals an "call to unresolved
 compiled function" error if a path is taken through the code that
 attempts to execute that function.  This could be caused by an
 erroneous use of DEFARGS in a compiled function or module.

 When this process is complete, ZILLOAD has the entry point address of
 the originally requested module.  This is used to CONS up the compiled
 code object which is the return value.

Errors signaled:

 Invalid compiled function (the name of an internal ZIL routine was
 specified).
 BLDL error (the BLDL system service returned a code of 8).

Notes:

 ZILLOAD is the only function that can create a compiled code object
 dynamically under the interpreter.  The result is generally stored as
 the value of a symbol's SUBR property.

 ZILXSUB (or FUNCALL or APPLY) may be used to execute the compiled code
 object returned by ZILLOAD.

 When ZILLOAD is invoked by the interpreter to resolve a function, it is
 passed the function's AUTOLOAD property if it has one and it is a
 symbol.  The DEFLOAD special form is used to assign AUTOLOAD properties
 to functions under the interpreter.

 Special forms have no compiled code definitions associated with them;
 ZILLOAD cannot be used to load them.

 In the ZIL environment, the term "system library" refers to the task
 library under which the ZIL program was invoked, or the step library
 defined by a //STEPLIB DD statement in batch.  Thus, a zero return code
 from BLDL does not necessarily mean to ZILLOAD that the function was
 located; ZILLOAD must verify that the directory entry came from an
 acceptable library and not from the operating system link list or from
 the link pack area.

Examples:

 (ZILLOAD 'PUTPROP)  will locate the load module for the PUTPROP
                     compiled function and return a pointer to it.

 (ZILLOAD 'CAR)      will return a pointer to the compiled code
                     which implements the CAR function.

 (ZILLOAD 'COND)     will not find a load module named COND, since
                     COND is a special form, and will return NIL.

