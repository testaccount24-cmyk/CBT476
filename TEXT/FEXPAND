
Function: FEXPAND

Syntax:   (FEXPAND arg1)

 arg1 (required, evaluated) - an atom or proper list.

Returns:

 A form which is equivalent to the form specified by arg1, but
 completely macroexpanded - i.e. all macros have been expanded
 throughout the code until no macros are left.

Processing:

 A codewalk is done through the form, expanding all macros
 encountered until none are left.

 FEXPAND uses MACROEXPAND to expand forms that it knows occur in
 "evaluable" positions in the form.  To do this, it makes certain
 assumptions about the function calls in the form.  It knows about
 every special form and its syntax, and assumes that any function
 call that is not already defined as a macro, an FEXPR, or a CMACRO
 (a macro definition known to the compiler) is a function that
 evaluates its arguments.  In addition, function definitions inside
 LAMBDA lists and DEFUN's are expanded (note that '(LAMBDA ...),
 being a quoted list, will not be expanded, but #'(LAMBDA ...) will).

Errors signaled:

 Errors detected by macroexpansion.

Notes:

 Unpredictable results will occur if any form or subform is not an
 atom or a proper list.

Examples:

 (DEFMACRO FOO (X) `(BAR ,X))          ==> FOO

 (MACROEXPAND '(FOO (FOO X)))          ==> (BAR (FOO X))
 (FEXPAND '(FOO (FOO X)))              ==> (BAR (BAR X))

 (MACROEXPAND '(SETQ A (FOO 1)))       ==> (SETQ A (FOO 1))
 (FEXPAND '(SETQ A (FOO 1)))           ==> (SETQ A (BAR 1))

 (DEFMACRO M1 (X) `(M2 ,X))         ==> M1
 (DEFMACRO M2 (X) `(M3 ,X))         ==> M2

 (MACROEXPAND-1 '(M1 (M1 A)))           ==> (M2 (M1 A))
 (MACROEXPAND   '(M1 (M1 A)))           ==> (M3 (M1 A))
 (FEXPAND       '(M1 (M1 A)))           ==> (M3 (M3 A))

