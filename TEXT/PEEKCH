
Function: PEEKCH

Syntax:   (PEEKCH &optional file1 eofval2 newlineval3)

 file1       (optional, evaluated) - an input file name.
 eofval2     (optional, evaluated) - any LISP object.
 newlineval3 (optional, evaluated) - any LISP object.

Defaults:

 file1 defaults to standard input (NIL).
 eofval2 defaults to NIL.
 newlineval3 defaults to the symbol whose print name is hex 0D
             (carriage return).

Returns:

 An interned symbol whose print name is a character read from the input
 file specified by file1; or eofval2 if end-of-file is encountered while
 scanning for a character; or newlineval3 if end-of-line is encountered
 while scanning for a character.

Processing:

 The file specified by file1 is read from the current character position
 and logical record (the ENDREAD and ZPUTFPI functions can change
 these).  One character is returned and made into a symbol, but the
 current character pointer is NOT updated to point to the next
 character.  Thus, repeated calls to PEEKCH without an intervening READ
 or READCH will return the same value.

 Compare READCH, which is identical to PEEKCH except that it updates
 the current character pointer (and also causes "newline" to be set).

 The character always creates an interned symbol, and is never
 uppercased.

 If end-of-file (i.e. the current character pointer has reached the end
 of the file) is encountered, eofval2 (or NIL if not supplied) is
 returned instead of a character.

 If end-of-line (i.e. the current character pointer has reached the end
 of the line) is encountered, newlineval3 is returned instead of a
 character.

 If the file is already in end-of-file status when PEEKCH is issued,
 an error is signalled.

Errors signaled:

 Invalid input file object (not a symbol 4 characters or less).
 Specified input file is not allocated or could not be opened.
 Read after end of file.

Notes:

 See member $FILE for more information on file names.

 PEEKCH is designed for applications that need to do scanning in such
 a way as not to "swallow up" a character in the input stream.  It is,
 however, not perfect at this time, and its interaction with READ
 and READCH has not been thoroughly examined.

 A READCH following a PEEKCH should return the same symbol that
 PEEKCH did.

 PEEKCH does not set NEWLINEP.

 The PEEKCH provided in previous releases of ZIL, which had different
 syntax, is now called ZILPKCH.

Examples:

 (when (null (prefix))
       (tso ("profile prefix(" (userid) ")"))
       nil)                          ==> NIL

 (progn
  (with-open-file (file "$$foo.$$test" :out)
   (format file "~&?foobar~%")
  )
  (setq foo (open "$$foo.$$test" :in))
  t
 )                                  ==> T

 (PEEKCH FOO 'EOF 'NEWLINE)         ==> NEWLINE

 (TYI FOO)                          ==> #\CR ; swallow first newline
 (TYI FOO)                          ==> #\?  ; prime for a character

 (SETQ A (PEEKCH FOO 'EOF 'NEWLINE))  ==> |f|
 (EQ A                          '|f|)     ==> T
 (READCH FOO 'EOF 'NEWLINE)  ==> |f|      ; Swallow the character.

 (SETQ A (PEEKCH FOO 'EOF 'NEWLINE))  ==> |o|
 (EQ A                          '|o|)     ==> T
 (READCH FOO 'EOF 'NEWLINE)  ==> |o|      ; Swallow the character.

 (SETQ A (PEEKCH FOO 'EOF 'NEWLINE))  ==> |o|
 (EQ A                          '|o|)     ==> T
 (READCH FOO 'EOF 'NEWLINE)  ==> |o|      ; Swallow the character.

 (SETQ A (PEEKCH FOO 'EOF 'NEWLINE))  ==> |b|
 (EQ A                          '|b|)     ==> T
 (READCH FOO 'EOF 'NEWLINE)  ==> |b|      ; Swallow the character.

 (SETQ A (PEEKCH FOO 'EOF 'NEWLINE))  ==> |a|
 (EQ A                          '|a|)     ==> T
 (READCH FOO 'EOF 'NEWLINE)  ==> |a|      ; Swallow the character.

 (SETQ A (PEEKCH FOO 'EOF 'NEWLINE))  ==> |r|
 (EQ A                          '|r|)     ==> T
 (READCH FOO 'EOF 'NEWLINE)  ==> |r|      ; Swallow the character.

 (loop until (neq (peekch foo) '| |)
       do (readch foo)
       finally (return t))   ==> T

  ;
  ; Now watch what happens when we get to a newline.
  ;

 (PEEKCH FOO 'EOF 'NEWLINE)  ==> NEWLINE
 (READCH FOO 'EOF 'NEWLINE)  ==> NEWLINE  ; Swallow the character.
 (READCH FOO 'EOF 'NEWLINE)  ==> EOF      ; Read the next one.


;
; Unfortunately, there seems to be no way to get PEEKCH to return EOF,
; due to problems explained above with new-line-processing.
;

 (PEEKCH FOO)                ==> ("***ERROR***") ; Read after EOF.

