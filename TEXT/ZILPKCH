
Function: ZILPKCH

Syntax:   (ZILPKCH &optional arg1 arg2 arg3)

 arg1 (optional, evaluated) - a file name.
 arg2 (optional, evaluated) - any LISP object, but generally T or NIL.
 arg3 (optional, evaluated) - any LISP object, but generally T or NIL.

Returns:

 A symbol whose print name is a character read from the input file
 specified by arg1, or NIL if end-of-file or end-of-line is encountered
 while scanning for a character.

Processing:

 The file specified by arg1 is read from the current character position
 and logical record (the ENDREAD and ZPUTFPI functions can change
 these).  One character is returned and made into a symbol, but the
 current character pointer is NOT updated to point to the next
 character.  Thus, repeated calls to ZILPKCH without an intervening READ
 or ZILRDCH will return the same value.

 Compare ZILRDCH, which is identical to ZILPKCH except that it updates
 the current character pointer (and also causes "newline" to be set).

 If arg2 is specified and is non-NIL, the generated symbol is "interned"
 on the object list; otherwise it is not, in which case it will not be
 EQ to any other atom.

 If arg3 is specified and is non-NIL, the character returned from the
 file is translated to upper case before the symbol is built; otherwise
 it is used as is.

 If either end-of-file (i.e. the current character pointer has reached
 the end of the file) or end-of-line (i.e. the current character
 pointer has reached the end of the line) is encountered, NIL is
 returned instead of a character.

 If the file is already in end-of-file status when ZILPKCH is issued,
 an error is signalled.

Errors signaled:

 Invalid input file object (not a symbol 4 characters or less).
 Specified input file is not allocated or could not be opened.
 Read after end of file.

Notes:

 See member $FILE for more information on file names.

 ZILPKCH is designed for applications that need to do scanning in such
 a way as not to "swallow up" a character in the input stream.  It is,
 however, not perfect at this time, and its interaction with READ
 and ZILRDCH has not been thoroughly examined.

 In the case of end-of-line, ZILPKCH may return NIL following the last
 ZILRDCH that retrieved a character from the current line, and also
 following a ZILRDCH that resulted in a "newline" condition; thus it may
 seem that ZILPKCH, when executed in alternation with ZILRDCH, returns two
 NILs in succession.  This is, admittedly, rather dicey, but has to do
 with code in ZILRDCH designed to prevent it from unlocking the terminal
 keyboard when it doesn't really want any new data.

 A ZILRDCH following a ZILPKCH should return the same character that
 ZILPKCH did (but not the same atom if interning is not requested).

 ZILPKCH does not set NEWLINEP; only ZILRDCH and READLINE do that.

Examples:

 (when (null (prefix))
       (tso ("profile prefix(" (userid) ")"))
       nil)                          ==> NIL

 (progn
  (with-open-file (file "$$foo.$$test" :out)
   (format file "~&?foobar~%")
  )
  (setq foo (open "$$foo.$$test" :in))
  t
 )                                  ==> T

 (ZILPKCH FOO)                      ==> NIL ; newline

 (TYI FOO)                          ==> #\CR ; swallow first newline
 (TYI FOO)                          ==> #\?  ; prime for a character

 (SETQ   AT1 (ZILPKCH FOO NIL NIL)) ==> |f|
 (EQ     AT1 '|f|)                  ==> NIL
 (=      AT1 '|f|)                  ==> T

 (SETQ   AT2 (ZILPKCH FOO T  NIL))  ==> |f|
 (EQ     AT2 '|f|)                  ==> T
 (=      AT2 '|f|)                  ==> T

 (SETQ   AT3 (ZILPKCH FOO NIL T ))  ==> |F|
 (EQ     AT3 '|F|)                  ==> NIL
 (=      AT3 '|F|)                  ==> T

 (SETQ   AT4 (ZILPKCH FOO T   T ))  ==> |F|
 (EQ     AT4 '|F|)                  ==> T
 (=      AT4 '|F|)                  ==> T

