
Function: STRING-INDEX

Syntax: (STRING-INDEX string1 string2 &optional index3)
    or:        (INDEX string1 string2 &optional index3)

 string1 (required, evaluated) - a string.
 string2 (required, evaluated) - a string.
 index3  (optional, evaluated) - a positive fixnum.

Returns:

 The index of string2 within string1, with the search beginning at
 the offset specified by index3 (or the beginning of string1 if
 index3 is omitted); NIL if string2 does not occur within string1.

Processing:

 One-based indexing is used.

 String1 is searched from either the beginning (if index3 is omitted,
 i.e. defaults to 1) or the offset specified by index3; when the first
 substring thereof that is equal (in a case-sensitive character
 comparison) to string2 is located, the one-based offset of that
 substring within string1 is returned.  If string2 does not match any
 substring of string1, NIL is returned.

 If string2 is null, a fixnum 0 is returned.  Other than that case,
 NIL is always returned when string1 is null.

 The offset is always relative to the beginning of the entire string1,
 even when index3 is specified.

 As with most string-handling functions, symbols are acceptable for
 either of the first 2 arguments.

Errors signaled:

 Invalid first argument (not a string).
 Invalid second argument (not a string).
 Invalid third argument (not a positive fixnum).

Notes:

 This function is analogous to the PL/1 INDEX function; the optional
 third argument, while not present in PL/1, corresponds to a SHARE
 requirement for an optional third argument to PL/1 INDEX.

 Specifying the third arg is NOT equivalent to specifying a SUBSTR
 as the second arg.  Observe the examples.  This feature may be
 useful in parsing a string into a sequence of tokens.

Examples:

 (INDEX "" "non-null-string")   ==> NIL
 (INDEX "" "")                  ==> 0     ; Special case.
 (INDEX "any-string" "")        ==> 0     ; Special case.
 (INDEX "foobar" "f")           ==> 1
 (INDEX "foobar" "o")           ==> 2
 (INDEX "foobar" "r")           ==> 6
 (INDEX "foobar" "z")           ==> NIL
 (INDEX "foobar" "bar")         ==> 4
 (INDEX "foobar" "foobar")      ==> 1
 (INDEX "foobar" "foobarbaz")   ==> NIL

; The following examples show that (INDEX x y z) is NOT the same as
; (INDEX (SUBSTR x z) y).

 (INDEX "blah blah blah" "blah" 5)          ==> 6
 (INDEX (SUBSTR "blah blah blah" 5) "blah") ==> 2

 (INDEX "foobar" "o" 1)         ==> 2     ; Search "foobar".
 (INDEX "foobar" "o" 2)         ==> 2     ; Search  "oobar" only.
 (INDEX "foobar" "o" 3)         ==> 3     ; Search   "obar" only.
 (INDEX "foobar" "o" 4)         ==> NIL   ; Search    "bar" only.

