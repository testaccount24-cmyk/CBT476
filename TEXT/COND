
Special Form: COND

Syntax:   (COND clause1 clause2 ... clausen)

          where each clausex is of one of the following forms:
            (form1)
            (form1 form2)
            (form1 ... formn)

          Any number of clauses may be specified, but each clause
          must be a proper list of 1 or more elements.

 formx (conditionally evaluated) - any LISP object.

Returns:

 The final element of the first clause for which the first formx element
 evaluates to a non-NIL value; NIL if no clauses satisfy this condition.

Processing:

 Each clause is taken in succession.  The first element of the clause is
 evaluated.  If the result was NIL, the remaining elements (if any) of
 the clause are bypassed and processing continues with the next clause.
 If the result was non-NIL, then if this was the only element in the
 clause (i.e. the clause is a singleton list), that value is returned as
 the result of the COND; otherwise the remaining elements of the clause
 are evaluated in succession and the last such value is returned as the
 result; all following "pairs" are bypassed.

 This is known as "short-circuit" evaluation.

 If no clause is found with a first element that evaluates to non-NIL,
 NIL is returned as the value of the COND function.

 By convention, T is generally used as the first element of the
 final clause; since T always evaluates to non-NIL, this makes the
 final clause the "otherwise" or "ELSE" clause of the COND.

 (COND ((cond1 result1) (cond2 result2) ... (T resultn))
  is equivalent to
 (IF cond1 THEN result1 ELSE IF cond2 THEN result2 ... ELSE resultn).

Errors signaled:

 Invalid syntax (argument clause not a list).

Notes:

Examples:

 (COND ('A 'B) ('C 'D))     ==> B

 (COND (NIL 'B) ('C 'D))    ==> D

 (COND ((EQ 'A 'B) 'C))     ==> NIL

 (COND ((EQ 'A 'A) 'TRUE1)
       ((EQ 'A 'B) 'TRUE2)
       (T          'FALSE)) ==> TRUE1

 (COND ((EQ 'A 'B) 'TRUE1)
       ((EQ 'A 'A) 'TRUE2)
       (T          'FALSE)) ==> TRUE2

 (COND ((EQ 'A 'B) 'TRUE1)
       ((EQ 'A 'C) 'TRUE2)
       (T          'FALSE)) ==> FALSE

 (COND ((EQ 'A 'B) 'TRUE1)
       ((EQ 'A 'C) 'TRUE2)
       ((EQ 'A 'D) 'TRUE3)) ==> NIL

 (COND ('A) ('B 'C))        ==> A

 (COND ('A 'B 'C) ('D 'E))  ==> C

