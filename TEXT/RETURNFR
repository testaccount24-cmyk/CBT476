
Special Form: RETURN-FROM

Syntax:   (RETURN-FROM name1 &optional arg2)

 name1 (required, evaluated) - a symbol.
 arg2  (optional, evaluated) - any LISP object.

Returns:

 There is no return value.  The value of arg2 is the
 return value for the currently active BLOCK named name1.

Processing:

 arg2 is evaluated and the current BLOCK whose name is EQ to name1 is
 exited using that value as its return value.  If arg2 is omitted, NIL
 is used as the value.

 RETURN-FROM is valid only within a BLOCK.
 (Exception:  If name1 is NIL, then RETURN-FROM is valid within a
 PROG, which is like a BLOCK named NIL.)

 Under the interpreter, RETURN-FROM may exit a BLOCK even when it is
 executed from within a lexical closure (FUNARG), which may produce some
 bizarre results.  In compiled code, RETURN-FROM may not branch out of a
 FUNARG.

 When RETURN-FROM transfers control from inside a form protected by
 UNWIND-PROTECT to outside that form, the UNWIND-PROTECT cleanup forms
 are executed before the BLOCK is exited.

Errors signaled:

 Missing block name
 RETURN-FROM block name not active

Notes:

 RETURN-FROM is valid as long as it is lexically apparent in
 the code.  This means that it will be processed as long as it is
 not the product of function evaluation.  The following are
 valid occurrences of RETURN-FROM:

 (BLOCK FOO (DO 'SOMETHING) (RETURN-FROM FOO T))
 (BLOCK BAR1
        (BLOCK BAR2
               (COND ((EQ A T) (RETURN-FROM BAR2 A))
                     (T (PROGN (PRINT 1) (RETURN-FROM BAR1))))))


 The following is NOT valid:

 (DEFUN SUMFUNK () (RETURN-FROM NOGOOD 'Z))
 (BLOCK NOGOOD (SUMFUNK))

 A "No matching RETURN-FROM block name" error will be signalled.

Examples:

 (LET (X)
      (BLOCK FOO
            (SETQ X (CONS 'A X))
            (SETQ X (CONS 'B X))
            (SETQ X (CONS 'C X))
            (RETURN-FROM FOO X)
      ))                               ==> (C B A)

