
Function: UNTYI

Syntax:   (UNTYI char &optional file1 eofval2 newlineval3)

 char  (required, evaluated) - a fixnum between 0 and 255.
 file1 (optional, evaluated) - an input file name.
 eofval2 (optional, evaluated) - any LISP object.
 newlineval3 (optional, evaluated( - any LISP object.

Returns:

 A fixnum representing the character most recently read (via TYI or
 TYIPEEK) from file1, unless end of file was encountered on file1, in
 which case eofval2 is returned, or end of line was encountered on
 file1, in which case newlineval3 is returned.

Processing:

 The character most recently read by TYI or TYIPEEK from the input
 file specified by file1 is returned.  No I/O is done to that file.

 The next invocation of TYI or TYIPEEK will return the character
 "unread" by UNTYI, as if it had been magically placed back in the file.

 UNTYI can "unread" at most one character.  If UNTYI is invoked twice in
 succession without an intervening TYI or TYIPEEK, an error is
 signalled.

 The (required) character argument is used as a check to insure that
 you are "unreading" the character you think you are.  If the character
 does not match the most recently read one, an error is signalled.

Errors signaled:

 Invalid input file object (not a symbol 4 characters or less).
 Specified input file is not allocated or could not be opened.
 Invalid character argument.
 UNTYI called out of sequence (see above).

Notes:

 See member $FILE for more information on file names.

 The interaction between TYI and UNTYI is well defined, but the         se
 interaction between TYIPEEK and UNTYI is not.  Use at your own risk.

Examples:

 (when (null (prefix))
       (tso ("profile prefix(" (userid) ")"))
       nil)                          ==> NIL

 (progn
  (with-open-file (file "$$foo.$$test" :out)
   (format file "~&?foobar~%")
  )
  (setq foo (open "$$foo.$$test" :in))
  t
 )                                  ==> T

 (defun test-untyi (file &aux a)
  (list (setq a (tyi file 'eof 'newline))
        (untyi a file 'eof 'newline)
        (tyi file 'eof 'newline)))  ==> TEST-UNTYI

 (TEST-UNTYI FOO)          ==> (NEWLINE NEWLINE NEWLINE)
 (TEST-UNTYI FOO)          ==> (#\? #\? #\?)
 (TEST-UNTYI FOO)          ==> (#\f #\f #\f)
 (TEST-UNTYI FOO)          ==> (#\o #\o #\o)
 (TEST-UNTYI FOO)          ==> (#\o #\o #\o)
 (TEST-UNTYI FOO)          ==> (#\b #\b #\b)
 (TEST-UNTYI FOO)          ==> (#\a #\a #\a)
 (TEST-UNTYI FOO)          ==> (#\r #\r #\r)

