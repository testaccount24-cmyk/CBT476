
Function: TYPEP

Syntax:   (TYPEP arg1 &optional arg2)

 arg1 (required,evaluated) - any LISP object.
 arg2 (optional,evaluated) - a type specifier (see below).

Returns:

 If arg2 is omitted, a symbol identifying the type of arg1.
 If arg2 is specified, T if arg1 satisfies the type specification
 indicated by arg2, else NIL.

Processing:

 If arg2 is omitted, one of the following symbols is returned,
 depending on the type of arg1:

  LIST, SYMBOL, FIXNUM, BIGNUM, SINGLE-FLOAT, DOUBLE-FLOAT, STRING,
  VECTOR, SUBR, CLOSURE, FUNARG

 or:

  if arg1 is an instance of a flavor, the name of the flavor is returned

 or:

  if arg1 is a structure, then the type of the structure is returned
  (i.e. the zeroth element), provided that this is a valid symbol.
  If the structure type is not a valid symbol, STRUCT is returned.

 or:

  if the type cannot be determined as one of the above, ATOM is returned.

 If arg2 is present, it must be a valid type specifier as follows:

  *  A symbol.

  *  A list in one of the following formats:

     (OR type-specifier1 type-specifier2 ...)
     (AND type-specifier1 type-specifier2 ...)
     (NOT type-specifier)
     (MEMBER object1 object2 ...)
     (SATISFIES function-of-one-argument)

 TYPEP with two arguments will return T if:

  * arg2 is one of the following and arg1 is an object of that type:

      TYPEP arg2      Predicate to be satisfied
   ______________________________________________________

      ATOM                ATOM
      LIST                LISTP
      CONS                CONSP
      SYMBOL              SYMBOLP
      FIXNUM              FIXNUMP
      FLOAT, FLONUM       FLOATP
      FLOAT, FLONUM       FLOATP
      SINGLE-FLOAT        SFLOATP
      DOUBLE-FLOAT        DFLOATP
      BIGNUM              BIGP
      INTEGER             INTEGERP
      STRING              STRINGP
      VECTOR              VECTORP
      CODE                CODEP
      SUBR                SUBRP
      CLOSURE             CLOSUREP
      FUNARG              FUNARGP
      STRUCT, STRUCTURE   STRUCTP

  Note: For compatibility and convenience, the following are accepted:
        SHORT-FLOAT for SINGLE-FLOAT
        COMPILED-FUNCTION for CODE
        DEFSTRUCT for STRUCT


 * arg1 is a structure of type arg2 (i.e. the zeroth element of arg1
   is the symbol arg2)

 * arg2 is the symbol CHARACTER and arg1 is a fixnum between 0 and 255

 * arg1 is a list (NOT x) and (TYPEP arg1 x) is false

 * arg1 is a list (OR x1 x2 ... ) and (TYPEP arg1 xn) is true for ANY
   of the xn's

 * arg1 is a list (AND x1 x2 ... ) and (TYPEP arg1 xn) is true for ALL
   of the xn's

 * arg1 is a list (MEMBER x1 x2 ...) and arg1 is EQL to any of the
   xn's (remember, these are not evaluated, since they are already
   in an evaluated list)

 * arg1 is a list (SATISFIES x) and (FUNCALL x arg1) returns a non-NIL
   value

 If arg1 is a list whose CAR is not one of the listed keywords,
 a warning message is issued and TYPEP returns NIL.


Errors signaled:

 Invalid type specifier (not a symbol or a list).

Notes:

 arg2 specified as NIL is NOT the same as omitting arg2.  A type
 specifier of NIL satisfies no type, and (TYPEP anything NIL) will
 always return NIL.  On the other hand, if arg2 is T then TYPEP will
 always return T, since all objects are assumed to satisfy type T.

Examples:

 (TYPEP NIL)                        ==> SYMBOL
 (TYPEP 'A)                         ==> SYMBOL
 (TYPEP '(A B C))                   ==> LIST
 (TYPEP '(A . B))                   ==> LIST
 (TYPEP "foo")                      ==> STRING
 (TYPEP #(A B C))                   ==> VECTOR
 (TYPEP 1)                          ==> FIXNUM
 (TYPEP 1.0)                        ==> DOUBLE-FLOAT
 (TYPEP 1.0F0)                      ==> SINGLE-FLOAT
 (TYPEP 1.0D0)                      ==> DOUBLE-FLOAT
 (TYPEP 1000000000000000)           ==> BIGNUM
 (TYPEP (GET 'TYPEP 'SUBR))         ==> SUBR
 (TYPEP #'FOO)                      ==> FUNARG ; if interpreted
                                  ; ==> CLOSURE ; if compiled
 (TYPEP (STRUCTURE 'A 'B 'C))       ==> A

 (TYPEP NIL 'SYMBOL)                ==> T
 (TYPEP NIL 'LIST)                  ==> T
 (TYPEP NIL 'CONS)                  ==> NIL
 (TYPEP NIL 'ATOM)                  ==> T
 (TYPEP NIL 'STRING)                ==> NIL
 (TYPEP 'A '(AND ATOM SYMBOL))      ==> T
 (TYPEP 'A '(AND SYMBOL FIXNUM))    ==> NIL
 (TYPEP 'A '(OR SYMBOL FIXNUM))     ==> T
 (TYPEP 'A '(OR FIXNUM FLONUM))     ==> NIL
 (TYPEP 'A '(OR FIXNUM FLONUM))     ==> NIL
 (TYPEP 'A '(NOT SYMBOL))           ==> NIL
 (TYPEP 'A '(NOT FIXNUM))           ==> T

 (TYPEP 1.0F0 'FLOAT)               ==> T
 (TYPEP 1.0F0 'SINGLE-FLOAT)        ==> T
 (TYPEP 1.0F0 'DOUBLE-FLOAT)        ==> NIL
 (TYPEP 1.0D0 'FLOAT)               ==> T
 (TYPEP 1.0D0 'SINGLE-FLOAT)        ==> NIL
 (TYPEP 1.0D0 'DOUBLE-FLOAT)        ==> T

 (DEFSTRUCT FOO BAR BAZ)            ==> FOO
 (SETQ A (MAKE-FOO))                ==> #.(STRUCTURE 'FOO NIL NIL)
 (TYPEP A)                          ==> FOO
 (TYPEP A 'FOO)                     ==> T
 (TYPEP A 'STRUCTURE)               ==> T

 (DEFFLAVOR SHIP () () )            ==> SHIP
 (PROGN
  (SETQ A (MAKE-INSTANCE 'SHIP))
  (TYPEP A)
 )                                  ==> SHIP
 (TYPEP A 'SHIP)                    ==> T
 (TYPEP A 'ZIL-FLAVOR-INSTANCE)     ==> T
 (TYPEP A 'STRUCTURE)               ==> T

 (TYPEP 0 '(AND FIXNUM INTEGER (NOT FLONUM)))   ==> T
 (TYPEP 0 '(MEMBER 0 1 2 3 4))      ==> T
 (TYPEP 0 '(SATISFIES ZEROP))       ==> T

 (TYPEP 0.0 '(AND FIXNUM INTEGER (NOT FLONUM)))   ==> NIL
 (TYPEP 0.0 '(MEMBER 0 1 2 3 4))    ==> NIL
 (TYPEP 0.0 '(SATISFIES ZEROP))     ==> T

 (TYPEP   0 'CHARACTER)             ==> T
 (TYPEP 255 'CHARACTER)             ==> T
 (TYPEP  -1 'CHARACTER)             ==> NIL
 (TYPEP 999 'CHARACTER)             ==> NIL
 (TYPEP "a" 'CHARACTER)             ==> NIL
 (TYPEP #\a 'CHARACTER)             ==> T

