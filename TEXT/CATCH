
Special Form: CATCH

Syntax:   (CATCH tag1 &rest forms)

 tag1 (required, evaluated) - any LISP object, but usually an atom.
 forms (required, evaluated) - any LISP object.

Returns:

 The result of evaluating forms in sequence, returning the value of the
 last form, unless a THROW specifying a tag EQ to tag1 is executed
 during evaluation of one of the forms, in which case case the value
 returned by the THROW is returned.

Processing:

 tag1 is the "tag" and is evaluated first.  A catch frame is then
 created and the rest of the forms are evaluated like an implicit PROGN;
 if during the evaluation of any of these forms a THROW occurs with a
 first argument (tag) EQ to tag1, evaluation is immediately terminated
 and the value specified as the second argument of the THROW is returned
 as the value of the CATCH.  Otherwise the value returned by the last
 form in forms is returned from the CATCH.

 The catch frame stacked by CATCH is removed when the forms evaluation
 is complete (or when a THROW occurs).  This frame is used to store the
 current state of the ZIL environment, including the current variable
 binding environment; thus, variable bindings are restored to the status
 they possessed upon entry to the CATCH function.

 A CATCH may occur within the context of another CATCH; in this
 case, THROW will throw to the nearest (most recently created) CATCH
 with a matching tag.

 A CATCH may catch only a THROW to a tag that matches via EQ.
 Thus, the tag is generally a symbol, though it does not have to be.

 A THROW may occur in one of two ways:

 (1) The argument being evaluated is a function call that invokes
     a THROW function, directly or indirectly.

 (2) An error is signalled, either by the ERROR function or by a
     ZIL primitive (assembler language level function), which
     results in a THROW to tag NIL.

 (3) An attention interrupt is caused by the terminal user pressing
     the PA1 key (or equivalent), which results in a THROW to tag T.

 Thus, a CATCH with a tag of NIL will "capture" all signalled errors.

 There are two tags which have special meaning to ZIL:

 NIL - as described above, this catches all "signalled" LISP errors,
       including system ABENDs in ZIL code (the handling of which
       can be disabled via SETABEND NIL).

 T - this catches attention interrupts fielded by the ZIL attention
     handler (which can be disabled via SETATTN NIL).

 The ZIL top-level READ-EVAL-PRINT loop contains CATCHes for both
 of these tags.

Errors signalled:

 Invalid syntax (too few arguments to CATCH).

Notes:

 GO or RETURN may be issued from within a CATCH to outside the
 CATCH, if there is a PROG which will process it.

Examples:

 (CATCH 'A 'B)  ==> B ; Trivial case.

 (CATCH 'FOO (THROW 'FOO 'BAR) 'FROB)   ==> BAR

 (CATCH NIL
        (CATCH 'ZZZ (THROW 'FOO 'BAR) 'FROB))  ==> NIL

  ; No THROW matched the CATCH tag - an error was signalled,
  ; resulting in a THROW to NIL.
  ; In addition, an error message would appear at the user's terminal.

 (CATCH '(FOO) (THROW '(FOO) 'BAR) 'FROB)   ==> ("***ERROR***")

  ; The THROW tag was not EQ to the CATCH tag - error was signalled.

 (CATCH NIL (+ 'A 'B))                        ==> NIL

  ; An error was signalled, causing a THROW to NIL.
  ; In addition, an error message would appear at the user's terminal.

