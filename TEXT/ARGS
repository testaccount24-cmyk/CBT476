
Function: ARGS

Syntax:   (ARGS fun1 &optional arg2)

 fun1 (required, evaluated) - a symbol.
 arg2 (optional, evaluated) - anything you want; it's not used anyhow.

Returns:

 See under Processing.

Processing:

 If arg2 is omitted...

  If fun1 names a compiled function, then:
   a cons (NIL . n) if fun1 takes n required args and no &optional args
   a cons (m . n) if fun1 takes m required args and (n-m) &optional args
   a cons (m . 510) if fun1 takes m required args and any &rest args
   (the 510 is octal 776)

  If fun1 names an interpreted function, a warning is issued and NIL is
  returned.

  If fun1 does not have a function definition, an error is signalled.

 If arg2 is specified...

  A warning message is issued to the effect that changing the number of
  args of a function in ZIL is not possible, and fun1 is returned.

  In addition, if the value of the special variable *LOADFILE* is
  non-NIL, it is made the value of the LOADFILE property of fun1, to
  identify the file (if any) from which the ARGS request was issued
  (this is to identify translated Macsyma code files, which use ARGS in
  this manner).

Errors signaled:

 fun1 does not name a compiled function (see above).

Notes:

 This is a Maclisp function (which may explain the crazy return values)
 which exists in ZIL only to support Macsyma.

 Interpretive function definitions are not supported.

Examples:

 (ARGS 'CAR)              ==> (NIL . 1)
 (ARGS 'FLOAT)            ==> (1 . 2)
 (ARGS 'APPEND)           ==> (0 . 510)

