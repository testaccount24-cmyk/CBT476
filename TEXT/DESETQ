
Macro: DESETQ

Syntax:   (DESETQ &rest args)

 args occur in pairs: arg1 and arg2.

 arg1 (required, not evaluated) - a symbol or list.
 arg2 (required, evaluated) - any LISP object.

Returns:

 The last argument, after each argument pair is processed as a series of
 SETQ's generated through the interpretation of arg1 as a destructuring
 of the value of arg2.

Processing:

 For each arg1 and arg2 in the argument list...

 arg1 is treated as follows:
 If it is a non-NIL symbol, DESETQ is identical to SETQ.
 If it is a cons, the CAR of arg1 is DESETQ'd to the CAR of the value
 of arg2, and the CDR of arg1 is DESETQ'd to the CDR of the value of
 arg2.
 If it is NIL, the corresponding value of arg2 is ignored.  This
 permits "holes" in the destructuring assignment.

 The bindings are exactly like those done by SETQ (q.v.).

Errors signaled:

 Odd number of arguments.
 Errors detected by SETQ (q.v.).

Notes:

 Destructuring is the process of binding arguments according to a
 CAR/CDR structure of variable names; this process is used in
 DEFMACRO and DEFUN, and is available to LET and LET* as well as
 anonymous LAMBDAs.

 See the help for SETQ for more information.

 "&-keywords" are not supported by DESETQ.  If you need this sort
 of functionality, you must use the destructuring provided by
 DEFUN/LAMBDA/LET et al.

 DESETQ is a macro that generates calls to CAR and CDR.  If it is
 desired to generate calls to ZCAR for efficiency (meaning that you
 know that NIL will never be "carred"), then you must effect this by
 including

  (DEFLOAD CAR ZCAR)

 in the source file.

Examples:

 (DESETQ (A B (C D) E . F) '(1 2 (3 4) 5 6 7))  ==> (1 2 (3 4) 5 6 7)

                A ==> 1
                B ==> 2
                C ==> 3
                D ==> 4
                E ==> 5
                F ==> (6 7)

 (DESETQ ((A NIL B) NIL C) '((1 2 3) 4 5)) ==> ((1 2 3) 4 5)

                A ==> 1
                B ==> 3
                C ==> 5

 (DESETQ (A) '(1) (B) '(2) (C) '(3)) ==> (3)

                A ==> 1
                B ==> 2
                C ==> 3

