
========================================================================

      Before you read this, read member $COMPILE to understand the
      difference between a PROGRAM and a FUNCTION.  The following
      discussion pertains to PROGRAMs only.  Note, however, that
      the ZIL interpreter is a LISP PROGRAM, so the comments about
      file I/O pertain within the interpreter as well.

========================================================================

 A compiled LISP program can be invoked via the EXECPGM or CALL command
 under TSO, or via the // EXEC JCL statement in batch, as long as you
 have access to the following libraries:

  '(your.library.name)' - wherever your LISP program resides.
  'PROGLIB.ZIL.LOAD'    - contains ZIL execution-time routines, the
           compiler and interpreter, and LISP functions for evaluation.

 On TSO, you may allocate these libraries via the ALLOCATE command:

   ALLOC FI(ZILLIB) SHR REU DA(your.library.name 'PROGLIB.ZIL.LOAD')

 Then you can do one of the following:

 If you have the EXECPGM command (from file 183 of the SHARE CBT tape)
 on your system, you can do:

   EXECPGM myzilprogram PARM('optional parm string') TASKLIB(ZILLIB)

 Otherwise, if you have TSO/E 2.5 or later, and you are in READY mode
 (i.e. not under ISPF), you can do:

   TSOLIB ACT LIBRARY(ZILLIB)

 followed by

   CALL *(myzilprogram) 'optional parm string'

 or

   myzilprogram optional parm string

 since Zil programs are built to be invoked either as OS programs or
 TSO command processors.

 Otherwise, you can only invoke your program under ISPF, via CALL or an
 ISPEXEC SELECT dialog call (either PGM or CMD), and only if your
 library and 'PROGLIB.ZIL.LOAD' are available to it, either through
 being allocated to ISPLLIB or being the library in which the ZIL
 program resides.  Note that LIBDEF is not sufficient to allow this.

 In batch, you may include a //STEPLIB DD statement to define these
 libraries, as follows:

   //        EXEC PGM=myzilprogram,PARM='optional parm string'
   //STEPLIB DD DISP=SHR,DSN=userid.your.library.name
   //        DD DISP=SHR,DSN=PROGLIB.ZIL.LOAD

 Note:  In all cases, the parameter string is optional and may be
        omitted entirely.  See "Passing a Parameter at Run Time"
        below for more information.

 You can use ISPF ZIL option 6 to invoke a LISP PROGRAM - the proper
 run-time environment will be set up automatically for you, with
 standard input and output allocated to the terminal.

 Don't try to invoke a compiled PROGRAM under the interpreter;
 that's strictly for FUNCTIONs and MODULEs only.


Region Size Requirements:

 When running on an MVS/XA system, ZIL uses virtual storage above the
 16MB line for most data.  Load modules, however, reside below the 16MB
 line.  For most applications.  you should be able to run with a TSO
 region size of 6144K; running with a larger region size will not affect
 ZIL's memory usage, but will leave more room for ZIL to load its
 modules, reducing the likelihood of out-of-storage abends.

 If you are under ISPF, remember that split screen mode also uses a lot
 of storage (especially if the other screen is in EDIT).  A similar
 caveat applies to PIE/Sessions users who have many sessions active.


Passing a Parameter at Run Time:


 You may pass a PARM string to your program; the GETPARM function will
 retrieve it and make a symbol out of it.  Note that if no PARM string
 is specified, GETPARM returns the null symbol (printed as ||).

 The parameter value may be passed as a JCL-style PARM string (in
 batch or via the CALL or EXECPGM command) or as TSO command operands.
 If it is passed in the latter fashion, any leading blanks, commas or
 comment sequences of the form /* ... */ are ignored.

 If the parameter string begins with a backslash character "\", then
 special processing is done:  the portion of the parameter up to the
 second backslash character is ignored by GETPARM, and the information
 between the backslashes (if any) is processed at ZIL initialization
 time.  For an explanation of this information, see member $PARM of
 this documentation.


Files:


 You will need the following DD names if you run in batch:

  ZILI - the standard input file.
  ZILO - the standard output file.

 In foreground, these files are used if allocated; however, you do not
 need them, since if either one is missing, the TSO terminal is used
 as the input source or output destination.

 In addition, DDNAME ZILDRIBL is used as a "dribble" file; if this is
 allocated, ZIL will copy all terminal input and terminal output (with
 the exception of a few system messages) to this file.  If you are not
 using the terminal for input or output, dribbling will not take place.

 You need not pre-allocate other files you may need; you can use the
 OPEN function under ZIL to allocate input or output files.  However,
 files can be preallocated (they will be opened automatically by ZIL
 when an I/O function is executed against them) as follows:

  Any DD name (file name) of the format ZILIxxxx will be accessible
  to input functions (e.g. READ) that reference file "xxxx".

  Furthermore, any DD name of the format ZILOyyyy will be accessible
  to output functions (e.g. PRINT) that reference file "yyyy".

 On non-XA systems, it may be necessary to use this "pre-allocation"
 technique to insure the availability of sufficient virtual storage
 to open the files.

 Examples:

 You may enter the following TSO command:

      alloc fi(zilifoo) da(foobar.data) shr reuse

 (Note: The "REUSE" keyword is available only if TSO/E is installed.)

 You can also enter it while you are under ZIL, as follows:

      (tso "alloc fi(zilifoo) da(foobar.data) shr reuse")

    This establishes an input file called FOO.  When you are in LISP,
    the function call (READ 'FOO) will read an S-expression from the
    dataset FOOBAR.DATA.

 You can also enter the following TSO command:

      alloc fi(zilobar) da(foobar.data) old reuse

    which you can also enter while you are under ZIL, as follows:

      (tso "alloc fi(zilobar) da(foobar.data) old reuse")

    This establishes an output file called BAR.  When you are in LISP,
    the function call (PRINT 'HI 'BAR) will write the S-expression HI
    into the dataset FOOBAR.DATA.

 These files will not be opened until they are referenced by function
 calls; therefore, you need not worry about clobbering an output file
 that is allocated to a ZILO... DD name but is never used.

 Alternatively, you may access files under ZIL.  Examples:

     (setq a (open "'abc1234.foobar.data'" 'in)) ; returns a file name
     (setq b (read a))
     (close a 'in)

     (setq x (open "temp.data" 'out)) ; New file may or may not exist.
     (print 'foo x)
     (close x 'out)

 The recommended way to do this is to use WITH-OPEN-FILE.
 For example:

     (with-open-file (file "'abc1234.foobar.data'" 'in)
      (loop until (eof file)
            do (print (read file))))

     (with-open-file (outf "temp.data" 'out)
      (print *big-hairy-lisp-structure* outf))

 You can also load files of LISP source code into the interpreter:

     (load "'proglib.zil.source(init)'")

 Both fixed-length and variable-length records are supported for input
 and output file I/O, but only fixed-length records are supported for
 standard input and output (ZILI and ZILO), as well as the dribble file.

 You can use the XZIFILE and XZOFILE CLIST's to allocate files.  The
 following commands are equivalent:

 XZIFILE FOO FOOBAR.DATA  <=>  ALLOC FI(ZILIFOO) DA(FOOBAR.DATA) SHR

 XZOFILE BAR FOOBAR.DATA  <=>  ALLOC FI(ZILOBAR) DA(FOOBAR.DATA) OLD

 Notes: The REUSE keyword is optional on both of the above.
        XZOFILE will create the dataset as new if it does not exist.
        The XZIFREE and XZOFREE CLIST's will free ZIL files similarly.

 These clists reside in 'PROGLIB.ZIL.CLIST'.

