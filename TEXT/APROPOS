
Function: APROPOS

Syntax:   (APROPOS string1)

 string1 (required, evaluated) - a string or symbol.

Returns:

 A list of all the currently interned symbols that have string1
 as a substring.

Processing:

 All interned symbols are searched to find those whose print names
 have string1 as a substring.  If string1 is a symbol, its print name
 is used.

 This provides a kind of list of function or variable names that
 contain the requested string somewhere within them.

 A case-insensitive comparison is done; thus case is irrelevant to
 both the search string and the members of the oblist.

 If the string is null, all currently interned symbols will be returned.

Errors signaled:

 Argument not a string or symbol.

Notes:

 When a SYMBOL is typed in as the argument to APROPOS, it is interned
 automatically, and since every string is a substring of itself, such a
 symbol will always satisfy the search, and therefore will appear in the
 returned list.

 Not all ZIL-defined function names will appear; some become interned
 only when referenced.  Therefore, APROPOS is not an exhaustive
 way of determining what ZIL functions are available.

 APROPOS is equivalent to Common LISP APROPOS-LIST (Common LISP
 APROPOS is supposed to display detailed info about each symbol found
 but return no values).

Examples:

; Note: These are possible return values; the actual values will
;       vary depending on what has been loaded into the LISP system.

 'MEMBER  ==> MEMBER       ; Just to insure these symbols are interned.
 'MEMQ    ==> MEMQ         ;
 'MEMQL   ==> MEMQL        ;
 'MEMQUAL ==> MEMQUAL      ;

 (APROPOS "MEM")   ==> (MEMQUAL MEMQL MEMQ MEMBER ZIL-SOURCE-MEMBER)
 (APROPOS "mem")   ==> (MEMQUAL MEMQL MEMQ MEMBER ZIL-SOURCE-MEMBER)
 (APROPOS 'MEM)    ==> (MEM MEMQUAL MEMQL MEMQ MEMBER ZIL-SOURCE-MEMBER)


