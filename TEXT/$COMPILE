
Three kinds of sources can be compiled: FUNCTIONS, PROGRAMS and MODULES.

In JCL to run the compiler, PROG=F specifies a FUNCTION;
PROG=P specifies a PROGRAM; PROG=M specifies a MODULE.

(See member $JCL for details on JCL.)

You can use ISPF's XZIL option 4 to compile a FUNCTION, PROGRAM or
MODULE in the foreground, or ISPF's XZIL option 5 to submit a background
job to compile a FUNCTION, PROGRAM or MODULE.

A PROGRAM is a LISP "top-level", i.e. a series of LISP expressions
which are executed in sequence, optionally along with function and macro
definitions (DEFUN's).  This produces a top-level load module which
resides in a load library and can be called from TSO or batch in the
usual ways (see member $CALL for more details), or invoked from ISPF's
XZIL option 6.  The ZIL interpreter and compiler are examples of ZIL
PROGRAM's.

A FUNCTION is one or more DEFUN's - function and macro definitions - of
which one DEFUN must be a function definition whose name matches the
member name of the function you are compiling.  This produces an NCAL
load module suitable for linkediting into a compiled PROGRAM or being
invoked under the interpreter.  To execute the function under the
interpreter, you simply call it as if it were already defined; ZIL will
automatically load the function code when you need it (assuming that you
have made the load library available to the interpreter session).

A MODULE is a series of LISP expressions, including DEFUN's and anything
else you wish, which is compiled into a function whose purpose is to
load the contents of the source file you are compiling.  This produces
an NCAL load module which can be loaded under the interpreter by
invoking the module as a function with no arguments.
To execute any of the functions defined therein, you call the module
by typing (FOO) - where FOO is the name of the module - once only.
Subsequently you can reference any of the functions defined in that
module in the normal fashion.

Briefly, compiling a FUNCTION is analogous to the Common LISP
(COMPILE functionname) function; compiling a MODULE is analogous to
the Common LISP (COMPILE-FILE filename) function; compiling a PROGRAM
is analogous to compiling FORTRAN, PL/1, etc. programs that can be
called or invoked from TSO or batch.

Restrictions:

(Note: In this discussion, macro calls that expand into DEFUN's -
       like DEFMACRO - are considered equivalent to DEFUN's that you
       code yourself.  See items (7) and (8) below for more info.)

A PROGRAM cannot have a DEFUN defining a function or macro whose name
conflicts with the name of the program you are compiling.

A FUNCTION must have a DEFUN defining a function (not a macro -
compilation of macro code is not supported at this time) whose name
matches the name of the function you are compiling.  No top-level forms
other than expressions with DEFUN, DEFMACRO, DEFLOAD, DECLARE,
EVAL-WHEN, or PROGN's consisting of these forms, or macros which expand
into these forms, may occur in a file being compiled as a FUNCTION.

A MODULE cannot have a DEFUN defining a function or macro whose name
conflicts with the name of the module you are compiling.

Whether in a PROGRAM or in a FUNCTION, the following apply:

(1) DEFUN's et al. must be at top level, i.e. not embedded within
    another expression.  E.g. the following is illegal:

      (PROG () (DEFUN F (X) (PRINT X))
               (AAA BBB CCC)
               (DEFMACRO M (Y) `(FOO BAR ,Y))
      )

    Removing the PROG "shell" will make the above valid, but the
    DEFUN's are processed by the compiler, not executed at run time.

    Note: Top-level forms may be coded within a PROGN; they will be
          processed as if they were actually at top level.


(2) You may code the DEFLOAD special form to associate LISP function
    names with "IBM-style" external names for compilation (it performs
    a similar but different task under the interpreter).  DEFLOAD may
    be used to identify the main function or any external functions.

    For example:

      (DEFLOAD BIG-HAIRY-FUNCTION-NAME FUNNAME)

    will cause references to BIG-HAIRY-FUNCTION-NAME to be compiled
    using an external name of FUNNAME, which may be a separately
    compiled function.  If the source file name is FUNNAME, you may
    call the actual main function BIG-HAIRY-FUNCTION-NAME as long as
    you code the DEFLOAD telling the compiler about it.

    DEFLOAD, like DEFUN, must be at top level (but see (7) and (8)).

(3) The form (END), when coded with no arguments, indicates end of
    source input to the compiler.  This is obviously not required, but
    is present to permit compiler testing with input typed in from the
    terminal (as under ISPF's XZIL option 7).  (END) has a similar
    meaning to the READ-EVAL-PRINT loop used by the interpreter.

(4) The DECLARE special form is used for declarations, including
    compiler options.  See member DECLARE for a full explanation
    of what can be specified.

(5) Compiler directives may be coded via the EVAL-WHEN special form
    (see member EVALWHEN of this document for more information).
    The (EVAL-WHEN (COMPILE) ...) construct is used to specify
    LISP code that the compiler is to evaluate in its own
    environment.

    Compiler directives can occur at top level only.

    Example:  If you have the following in your source:

      (EVAL-WHEN (COMPILE)
        (PRINT "Hello, I'm compiling your program now!")
      )

    the compiler will print the message:

       "Hello, I'm compiling your program now!"


(6) The DEFARGS form tells the compiler about a function that you are
    invoking but are not defining in your code (i.e. an external user
    function).

    Normally, when the compiler finds a call to a function that is not
    defined in your code, and it is not a "standard" ZIL function as can
    be found in this documentation, the compiler converts the call to a
    FUNCALL, which will interpretively apply the function symbol to the
    specified arguments.  This enables compiled code to call interpreted
    code without having to explicitly code FUNCALL's.

    However, if you know that the function exists as a compiled SUBR and
    you want to tell the compiler about it (so that it can generate a
    direct branch to the code), you can use DEFARGS.  For example:

      (DEFARGS SOMEFUNC 1 2)

    tells the compiler that there is a function called SOMEFUNC
    with a definition something like:

      (DEFUN SOMEFUNC (A &OPTIONAL B) ...)

    So, if the compiler finds a function call like

      (DEFUN PIG (A B) (CONS (SOMEFUNC A) B))

    it is to treat SOMEFUNC as an EXPR (actually a SUBR since it will be
    a compiled load module in a link library) with at least 1 and at
    most 2 arguments required (any arguments omitted will be passed as
    unsupplied optional arguments and will be bound to their default
    values at execution time).  Note that the function name must conform
    to IBM naming standards since it will become an external reference
    (i.e.  1-8 alphameric characters, first one alphabetic or national).

    (The function SOMEFUNC will be linked with your PROGRAM if SOMEFUNC
    was previously compiled as a FUNCTION.  If SOMEFUNC is referenced by
    code in a separately compiled FUNCTION named OTHRFUNC, it will not
    be linked into OTHRFUNC when OTHRFUNC is compiled (FUNCTIONS are
    linkedited with NCAL), but if you compile a PROGRAM that calls
    OTHRFUNC, then both OTHRFUNC and SOMEFUNC will be linked into the
    PROGRAM when the PROGRAM is linkedited.)

    To tell the compiler that SOMEFUNC has a &REST argument, if it
    was defined externally with a &REST keyword in its lambda list,
    or if it has &KEY keywords in its lambda list,
    specify T as the fourth argument.  Here are some examples:

      (DEFARGS SOMEFUNC 2 5)   ; 2 required,  3 optional, no &rest
      (DEFARGS SOMEFUNC 2 2)   ; 2 required, no optional, no &rest
      (DEFARGS SOMEFUNC 2 5 T) ; 2 required,  3 optional,  1 &rest
      (DEFARGS SOMEFUNC 2 2 T) ; 2 required, no optional,  1 &rest

    It is NOT necessary to have a DEFARGS for any of the following:

      Macros.

      "Standard" functions (the ones every LISP user knows and loves).

      Functions invoked via APPLY or FUNCALL,
      if they are referenced as 'FOO rather than #'FOO.

      Functions defined in your source via DEFUN's (internal functions).

    Note: (DEFARGS funcname NIL) is a special case that makes the
          compiler think it doesn't know anything about "funcname".

(7) DECLARE(SPECIAL) may be used at top level to identify variables as
    "special" (dynamically bound) variables.  See member DECLARE of
    this documentation for more information.

    In a MODULE, DEFVAR is the preferred way of defining globally bound
    special variables.  Note: DEFVAR is not supported when compiling a
    FUNCTION.

(8) DEFUN's, EVAL-WHEN's, DECLARE's and other top-level forms may be
    generated by macro calls that occur at top level, provided that the
    macros which generate them are defined preceding their calls in the
    source.  For example, if you had a macro MYDEF which expanded into a
    (DEFUN ...) which you wanted the compiler to process, you would have
    to have the following, in this order:

      (DEFMACRO MYDEF ...
      ...
      (MYDEF ...

    The compiler would recognize the function (be it SUBR or MACRO)
    defined by the DEFUN that MYDEF expanded into, as if you had
    coded it at top level directly.

(9) PROGN can be used to get a series of DEFUN's or other top-level
    S-expressions treated by the compiler as if they were actually at
    top level, even though they are actually enclosed within a PROGN.
    This may be useful if you have a macro which generates a series of
    DEFUN's (perhaps something similar to a structure definition
    facility) which you want the compiler to recognize as top-level
    DEFUN's; a macro cannot generate more than one S-expression, but it
    can generate a single PROGN form to contain multiple forms.

    To use this, you enclose the forms within a PROGN special form.
    Note that this works equally well interpreted, since the
    interpreter makes no distinction about "top-levelness".

    The (PROGN ...) form may be generated by a macro call.

    For example:

    (PROGN
           (DEFUN FOO (X) (CONS X NIL))
           (DEFUN BAR (X) (CONS (FOO X) X))
    )

    is equivalent to specifying both of the above DEFUN's at top level.


(10) The (END) end-of-file indication may NOT be generated by a macro.

(11) Currently there is no support for external FEXPR's (or, for that
     matter, any FSUBR's, that is to say compiled FEXPR's).
     In a MODULE, any FEXPR definitions the compiler sees will be
     transformed into equivalent MACRO definitions.

     Macro definitions may not be compiled either at this time.

(12) For more notes about DEFUN usage under the compiler, see member
     $DEFUN of this document.

