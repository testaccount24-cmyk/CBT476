
Function: READCH

Syntax:   (READCH &optional file1 eofval2 newlineval3)

 file1       (optional, evaluated) - an input file name.
 eofval2     (optional, evaluated) - any LISP object.
 newlineval3 (optional, evaluated) - any LISP object.

Defaults:

 file1 defaults to standard input (NIL).
 eofval2 defaults to NIL.
 newlineval3 defaults to the symbol whose print name is hex 0D
             (carriage return).

Returns:

 An interned symbol whose print name is a character read from the input
 file specified by file1; or eofval2 if end-of-file is encountered while
 scanning for a character; or newlineval3 if end-of-line is encountered
 while scanning for a character.

Processing:

 The file specified by file1 is read from the current character position
 and logical record (the ENDREAD and ZPUTFPI functions can change
 these).  One character is returned and made into a symbol, and the
 current character pointer is updated to point to the next character.

 The character always creates an interned symbol, and is never
 uppercased.

 If end-of-file (i.e. the current character pointer has reached the end
 of the file) is encountered, eofval2 (or NIL if not supplied) is
 returned instead of a character.

 If end-of-line (i.e. the current character pointer has reached the end
 of the line) is encountered, newlineval3 is returned instead of a
 character.  In this case, the next call to READCH will return either
 the first character from the next line, or end-of-file (note that the
 end-of-file condition is always preceded by the end-of-line condition
 unless the file is empty).

 If the file is already in end-of-file status when READCH is issued,
 an error is signalled.

Errors signaled:

 Invalid input file object (not a symbol 4 characters or less).
 Specified input file is not allocated or could not be opened.
 Read after end of file.

Notes:

 See member $FILE for more information on file names.

 READCH, READLINE, TYI and ZILRDCH are the only functions that can cause
 the "newline" indication to be set in an input file (see NEWLINEP).

 Currently, if READCH is issued against a file allocated to the
 terminal (including standard input) which has never been accessed
 by READ or READCH before, it will return NIL and NEWLINEP will
 return true.  In other words, the first input from a terminal file
 is a "newline".

 Compare PEEKCH, which is like READCH but does not change the current
 character pointer.

 The READCH provided in previous releases of ZIL, which had different
 syntax, is now called ZILRDCH.

Examples:

 (when (null (prefix))
       (tso ("profile prefix(" (userid) ")"))
       nil)                          ==> NIL

 (progn
  (with-open-file (file "$$foo.$$test" :out)
   (format file "~&?foobar~%")
  )
  (setq foo (open "$$foo.$$test" :in))
  t
 )                                  ==> T

 (READCH FOO 'EOF 'NEWLINE)  ==> NEWLINE
 (READCH FOO 'EOF 'NEWLINE)  ==> |?|
 (READCH FOO 'EOF 'NEWLINE)  ==> |f|
 (READCH FOO 'EOF 'NEWLINE)  ==> |o|
 (READCH FOO 'EOF 'NEWLINE)  ==> |o|
 (READCH FOO 'EOF 'NEWLINE)  ==> |b|
 (READCH FOO 'EOF 'NEWLINE)  ==> |a|
 (READCH FOO 'EOF 'NEWLINE)  ==> |r|

 (loop for a = (readch foo 'eof 'newline)
       unless (eq a '| |)
       return a)             ==> NEWLINE
 (newlinep foo)              ==> T
 (READCH FOO 'EOF 'NEWLINE)  ==> EOF
