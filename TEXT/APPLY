
Function: APPLY

Syntax:   (APPLY fun1 &rest lists2)

 fun1   (required, evaluated) - an atom or proper list.
 lists2 (required, evaluated) - one or more arguments, of which the
                                last must be NIL or a list.

Returns:

 The result of applying the function specified by fun1 to the argument
 list made up of the elements of list2.

Processing:

 The first argument (fun1) must be one of the following:

   A compiled code SUBR or closure.
   An interpreted lexical closure (funarg).
   A symbol which is the name of a defined function.
   A LAMBDA-expression (a list whose CAR is the atom LAMBDA).
   A LABEL-expression (a list whose CAR is the atom LABEL).

   The FUNCTION form (to which the #' syntax is equivalent) returns a
   funarg under the interpreter, and a closure when compiled;
   either of these is valid as the first argument to APPLY.

   A symbol may represent a function as follows:

     The name of a function defined either as an EXPR (e.g. via DEFUN)
     or as a SUBR (a loaded compiled code function).

     Special forms, macros, and FEXPR's are not supported.
     This makes sense, since the second argument is assumed to
     consist of evaluated forms, which are not valid for these
     kinds of functions.

     If the symbol has no current function definition, it will be
     resolved via the ZEVAUTO function, which will use the AUTOLOAD
     property, if present, to try to load a definition for the function.
     If the symbol has no AUTOLOAD property, a compiled code function
     definition of the same name will be searched for; if it is found,
     it will be made the SUBR property of the symbol for future access.
     The compiled code is then executed as part of the APPLY process.

 The arguments specified by lists2 are made into a list by consing all
 but the last argument onto the last argument (as the LIST* function
 would do).  This list of arguments is considered to have been ALREADY
 EVALUATED.  These are passed to the function specified by the first
 argument, and the function is evaluated with this as its argument list.

 The most typical use of APPLY is probably the case where the name of
 a function is specified as a variable.
 For example:

   (DEFUN CALLFUNK (F) (APPLY F '(1 2 3)))

 When (CALLFUNK #'FOO) is executed, the local variable F is
 bound to the functional value of FOO, which is applied to the
 argument list (1 2 3).

 The following are equivalent:

  (APPLY F '(1 2 3))
  (APPLY F 1 '(2 3))
  (APPLY F 1 2 '(3))
  (APPLY F 1 2 3 NIL)

Errors signaled:

 Wrong number of arguments.
 Last argument not a list.
 Errors pertaining to applying the function definition.

Notes:

 You cannot pass an evaluation environment to APPLY.
 If you need to use one, you must use ZILAPPLY.

Examples:

 (APPLY 'CAR '((A B C)))            ==> A
 (APPLY #'CONS '(FOO (BAR BAZ)))    ==> (FOO BAR BAZ)
 (APPLY #'CONS '(A B))              ==> (A . B)
 (APPLY #'CONS 'A '(B))             ==> (A . B)
 (APPLY #'CONS 'A 'B NIL)           ==> (A . B)
 (APPLY #'(LAMBDA (X) (CONS X X))
         "value-of-x" NIL)          ==> ("value-of-x" . "value-of-x")

 ; The following illustrates lexical scoping.

 (LET ((A "value-of-a"))
      (APPLY #'(LAMBDA (X) (CONS X A))
             "value-of-x" NIL))     ==> ("value-of-x" . "value-of-a")

