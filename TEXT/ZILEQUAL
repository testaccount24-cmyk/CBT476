
Function: ZILEQUAL

Syntax:   (ZILEQUAL arg1 arg2)
  Also:   (= arg1 &rest args)

 arg1 (required, evaluated) - any LISP object.
 arg2 (required, evaluated) - any LISP object.
 args (optional, evaluated) - any LISP object.

Returns:

 T if the contents of all the args are identical, else NIL.

Processing:

 For ZILEQUAL, which takes exactly two args, the following holds.

  If the arguments are EQ, regardless of type, the result is
  always true (i.e. T is returned).

  If one argument is numeric and the other is not, an error is
  signalled, since the arguments cannot be compared.

  (Exception: If one argument is numeric and the other is NIL,
   the result is false.  This is a special case intended to handle
   certain operations on lists of characters.)

  If both arguments are numbers, a numeric comparison is performed.
  If the types differ, the appropriate conversion is performed (see
  member $ARITH for conversion rules) and the numeric compare is done.

  If both arguments are strings or symbols, a comparison is performed on
  the print name or string text of the atoms.  Note that case remains
  significant in this comparison.

  For all other types (including lists), an error is signalled, since
  the arguments cannot be compared.

 For =, which takes any number of args, the result is T if there is
 only one arg, or if all the args are ZILEQUAL to each other (only
 adjacent pairs are compared); otherwise the result is NIL.

Errors signaled:

 None.

Notes:

 See member $EQUAL for more information about equality predicates.

Examples:

 (ZILEQUAL 'FOO 'FOO)     ==> T
 (ZILEQUAL 'A 'B)         ==> NIL
 (ZILEQUAL (ADD1 1) 2)    ==> T
 (ZILEQUAL 1 1.0)         ==> T
 (ZILEQUAL "A" "A")       ==> T
 (ZILEQUAL "A" "a")       ==> NIL
 (ZILEQUAL "A" 'A )       ==> T

 (= 1.0)                  ==> T
 (= 1.0 1.0)              ==> T
 (= 1.0 1.0 1.0)          ==> T
 (= 1.0 2.0 3.0 4.0)      ==> NIL
 (= 1.0 2.0 1.0 1.0 1.0)  ==> NIL

 (ZILEQUAL 1 NIL)         ==> NIL
 (ZILEQUAL NIL 1.0)       ==> NIL

