
 The ZIL internal structure of bignums is as follows:

 A bignum is an object in vector/string space which looks much like
 a string, except for the type indicator.  The body of the bignum is
 a series of fullwords, each of which contains a digit of the bignum
 in base 31 (31-bit radix).  These words are stored in reverse order,
 least significant word first.

 Negative bignums are stored using their absolute value, with the
 high-order bit of the leftmost word set to 1.  All other high-order
 bits (in positive and negative bignums) are zero.

 Bignums are always normalized: this means that (1) a bignum can never
 have a value between -2147483648 and 2147483647 inclusive, as this is
 always forced to be held as a fixnum; (2) the most significant
 (rightmost) word is never zero, since leading zero "bigits" are always
 removed; and (3) the minimum number of 31-bit "bigits" in a bignum is
 2.  The combination (-2147483647 1) can never occur, since this would
 represent -2147483648, which must be a fixnum.

 For examples, see the documentation for the functions BIGLIST,
 BIGNUM and MKBIGNUM, which convert between bignums and lists of
 fixnums that make them up.

