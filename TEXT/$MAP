
  The following discussion pertains to the ZIL "mapping functions",
  which comprise the following:

  MAPAND, MAPC, MAPCAN, MAPCAR, MAPCON, MAPL, MAPLIST, MAPOR.

  ...and also to...

  SOME, EVERY, NOTANY, NOTEVERY


 The function specified by the first argument must be one of the
 following:

  A function name (a symbol with an EXPR or SUBR property).

  A functional object (e.g. the value of the form (FUNCTION ...),
  which can be written as #'...).

  A LAMBDA-expression (a list whose CAR is the atom LAMBDA).

 In both cases, the specified function must take the same number of
 arguments as the number of lists specified (it may have optional
 additional arguments, but an n-argument call must be permissible
 where n is the number of lists specified).
 The argument is always evaluated when the function is applied; hence
 special forms, MACRO's, FEXPR's, and FSUBR's are not permitted.

 The behavior of a mapping function when it is passed the name of a
 MACRO may differ in the interpreted and compiled environments, but
 is an error in either case, and the results should not be relied
 upon.  It is an error to pass a mapping function the name of an
 FEXPR or FSUBR under the interpreter; the compiler does not support
 these, so the question is moot in the compiled environment.

 In the interests of generating efficient code for the mapping
 functions wherever possible, the specifications for the first
 argument are implemented differently in the compiled and interpretive
 environments.  In the interpretive environment, the first argument
 always EVALUATES to a valid function as described above, and is
 executed via APPLY.  In the compiled environment, when the first
 argument is CODED as either (QUOTE x) - 'x - or (FUNCTION x) - #'x -
 where x is a valid function name or LAMBDA-expression as defined above,
 an inline code loop is generated; otherwise a call to a run-time
 routine is generated which APPLY's the value of the first argument as a
 function.

 This raises an interesting point:  Technically the use of '(LAMBDA ...
 inhibits lexical scoping of variables referenced within the quoted
 lambda that are bound outside of it.  However, when the form is
 compiled, the LAMBDA is expanded inline anyhow, so lexical scoping
 is not inhibited.  This might be considered illegal, but we do it
 anyhow.

 Currently the compiler makes no distinction between (QUOTE x) and
 (FUNCTION x) in the first argument of a mapping function.
 Therefore, specifying (FUNCTION f) does NOT create a closure or
 other type of compiled code object in this context.

 The following are valid for both the compiler and the interpreter:

 (MAPCAR 'PRINT SOME-LIST)
 (MAPCAR #'(LAMBDA (X) (PRINT X)) SOME-LIST)
 (MAPCAR (FUNCTION CONS) SOME-LIST OTHER-LIST)
 (MAPCAR (QUOTE (LAMBDA (X Y) (CONS X Y))) SOME-LIST OTHER-LIST)
 (LET ((FUN-NAME 'PRINT))
      (MAPCAR FUN-NAME SOME-LIST))

 The following are never valid (function takes wrong number of args):

 (MAPCAR 'CONS SOME-LIST)
 (MAPCAR #'(LAMBDA (X) (CONS X NIL)) SOME-LIST OTHER-LIST)

 All the arguments other than the function argument must be proper
 lists (NIL is permissible).  Atoms, dotted pairs and lists ending
 in dotted pairs are erroneous and may cause unpredictable results.
 Processing terminates as soon as the shortest list runs out.

