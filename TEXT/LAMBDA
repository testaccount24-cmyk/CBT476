
LAMBDA is not a function name, but a symbol that identifies an
interpretive function, such as can be created by a DEFUN.
A LAMBDA-expression can also occur where a function name is normally
used, e.g.:

  ((LAMBDA (X) (CONS X NIL)) 'FOO)
  (MAPCAR '(LAMBDA (X Y) (LIST Y X)) FOO BAR)
  (FUNCTION (LAMBDA (X) (BAZ X X)))
    ...the last being equivalent to #'(LAMBDA (X) (BAZ X X)).

A list whose CAR is the symbol LAMBDA can be executed as a function
by EVAL or APPLY, provided that its syntax is correct.  If a LAMBDA
expression appears by itself (anonymously), it is processed as an
EXPR (as if the name of an EXPR had been specified in its place),
i.e. all its arguments are evaluated and the body of the LAMBDA
expression is evaluated with the bindings set accordingly.

The syntax of a LAMBDA is as follows:

  (LAMBDA arg1 arg2 ... argn)

where arg1 is required and must be a valid argument list, and arg2
through argn (at least one required) comprise the body of the function.

The elements of the argument list (arg1) are generally symbols which
will be bound to the function arguments when the body is executed.  The
body is an "implicit PROGN", meaning that all the forms are evaluated
but only the last one returns a value to the invoker of the LAMBDA
expression.

In addition to symbols that will be bound to values, the following
keywords may occur in a LAMBDA expression (these are valid for
EXPR's and MACRO's only):

 &OPTIONAL - indicates that the symbols following are optional
 arguments, and need not be specified when the function is called.
 Any unspecified arguments in this list are bound to NIL (or an
 initialization form if one is provided).

 If there are fewer arguments passed to the function than are
 specified in the LAMBDA list prior to &OPTIONAL if any, an
 error is signalled.

 &REST - indicates that the symbol following (there must be one and
 only one symbol following) will be bound to the list of arguments
 "left over" after bindings for the others have been set up.  If
 &REST is not used and there are more arguments passed to the
 function than are defined in the LAMBDA list, an error is signalled.

 For example:

  (DEFUN FOO (A B &OPTIONAL C D &REST E) (LIST A B C D E))

  will result in the following:

  (FOO)               signals an error (too few arguments).
  (FOO 1)             signals an error (too few arguments).
  (FOO 1 2)           ==> (1 2 NIL NIL NIL)
  (FOO 1 2 3)         ==> (1 2 3 NIL NIL)
  (FOO 1 2 3 4)       ==> (1 2 3 4 NIL)
  (FOO 1 2 3 4 5)     ==> (1 2 3 4 (5))
  (FOO 1 2 3 4 5 6)   ==> (1 2 3 4 (5 6))
  (FOO 1 2 3 4 5 6 7) ==> (1 2 3 4 (5 6 7))

 See $COMPILE for details on compiling functions with &OPTIONAL or
 &REST arguments.

 Note: &BODY is synonymous with REST.

 &AUX - indicates that the symbols following are not arguments,
 and may not be passed as arguments, but are auxiliary variables
 that are bound to NIL (or an initialization form if one is
 provided).

 &KEY - allows the function to accept "keywords".  Keywords are
 values obtained from parsing the extra args to the function
 (which also go into the &REST arg if one is provided) as a
 list of alternating "keywords" and values.  In ZIL, a "keyword"
 is any symbol whose print name begins with a colon (this is to
 make them look like true Common LISP "keywords", which are
 ordinary symbols interned in the "keyword package").  Keywords
 are self-evaluating (unless currently bound), which means that
 it is not necessary to quote them.

 For detailed information on how to code the &OPTIONAL, &AUX and
 &KEY lambda list arguments, see any Common LISP reference.

 For more information (as well as additional features of LAMBDA
 lists), see member $DEFUN.

