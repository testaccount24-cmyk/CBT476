
Macro: ADJOIN

Syntax:   (ADJOIN item list2 &rest keywords)

 item1  (required, evaluated) - any LISP object.
 list2  (required, evaluated) - a list.

Returns:

 If item1 is not already a member of list2, then the list formed by
 CONSing item1 onto the front of list2; otherwise, list2.

Processing:

 If item1 is already a member of the list which is the value of list2,
 list2 is returned unaltered.   Otherwise, item1 is CONSed onto the
 front of the list specified by list2, and the augmented list is
 returned as the value.

 list2 is NOT modified.

 The member test is determined by the keywords, if any, specified on
 the call to ADJOIN (using Common LISP keyword syntax).
 The valid keywords are:

 :TEST   -  must be #'EQ, #'EQL or #'EQUAL
 :KEY    -  must be #'CAR

 Both are optional.  If :TEST is omitted, the default is #'EQL.

 The test is performed by one of the MEMBER functions if the :KEY
 keyword is omitted; by one of the ASSOC functions if the :KEY
 keyword is specified as #'CAR (or 'CAR).

 The MEMBER functions are:  MEMQ      for :TEST #'EQ    (or 'EQ)
                            MEMQL     for :TEST #'EQL   (or 'EQL)
                            MEMQUAL   for :TEST #'EQUAL (or 'EQUAL)

 The ASSOC  functions are:  ASSQ      for :TEST #'EQ    (or 'EQ)
                            ASSQL     for :TEST #'EQL   (or 'EQL)
                            ASSQUAL   for :TEST #'EQUAL (or 'EQUAL)

 If an ASSOC function is used, the CAR of item1 is compared with the
 CAR of each member of list2.   Otherwise, item1 is compared with
 each member of list2.

Errors signaled:

 Invalid keyword specification.
 Unsupported value for keyword.

Notes:

 Compare PUSHNEW, which SETF's its second argument but is otherwise
 identical to ADJOIN.

Examples:

 (ADJOIN 'A '(A B C))               ==> (A B C)
 (ADJOIN 'B '(A B C))               ==> (A B C)
 (ADJOIN 'C '(A B C))               ==> (A B C)
 (ADJOIN 'D '(A B C))               ==> (D A B C)

 (SETQ X '((A . 1)))                ==> ((A . 1))
 (ADJOIN '(A . 1) X :KEY #'CAR)     ==> ((A . 1))
 (ADJOIN '(A . 3) X)                ==> ((A . 3) (A . 1))
 (ADJOIN '(A . 3) X :KEY #'CAR)     ==> ((A . 1))
 (ADJOIN '(B . 2) X :KEY #'CAR)     ==> ((B . 2) (A . 1))

 (SETQ A '(2.0 1.0))          ==> (2.0 1.0)
 (ADJOIN 1.0 A)               ==> (2.0 1.0)
 (ADJOIN 1.0 A :TEST #'EQ)    ==> (1.0 2.0 1.0)
 (ADJOIN 1.0 A :TEST #'EQL)   ==> (2.0 1.0)
 (ADJOIN 1.0 A :TEST #'EQUAL) ==> (2.0 1.0)

