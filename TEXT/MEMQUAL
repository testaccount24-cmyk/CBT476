
Function: MEMQUAL

Syntax:   (MEMQUAL arg1 list2)

 arg1  (required, evaluated) - any LISP object.
 list2 (required, evaluated) - a proper list.

Returns:

 The first sublist (CDR) of list2 whose CAR is EQUAL to arg1;
 NIL if no such sublist exists.

Processing:

 The list specified by list2 is searched for an element that is EQUAL to
 arg1; when one is found, a pointer to the sublist of list2 of which
 arg1 is the CAR is returned as the value.

 This enables the MEMQUAL caller to use the information, e.g. in an
 ordering test.  In a list L, element A precedes element B if
 (MEMQUAL B (MEMQUAL A L)) is non-NIL.

Errors signaled:

 None.

Notes:

 Compare MEMQ, which is like MEMQUAL but uses an EQ test.
 and MEMQL, which is like MEMQL but uses an EQL test.

Examples:

 (MEMQUAL 'A NIL)                         ==> NIL
 (MEMQUAL 'A '(A B C D E F G))            ==> (A B C D E F G)
 (MEMQUAL 'D '(A B C D E F G))            ==> (D E F G)
 (MEMQUAL 'G '(A B C D E F G))            ==> (G)
 (MEMQUAL 'H '(A B C D E F G))            ==> NIL

 ;Sublists are NOT recursively searched.

 (MEMQUAL 'A '((A B) (C D) (E F)))        ==> NIL

 ;The comparison test is EQUAL, not EQ or EQL.

 (MEMQUAL 3 '(1 2 3 4 5 6 7))             ==> (3 4 5 6 7)
 (MEMQUAL '(1 2) '((1 2) (3 4)))          ==> ((1 2) (3 4))

