
 These are the distinctions between the various equality functions:

  EQ - tests if the two arguments have the same memory address
       (their pointers are numerically equal).

  EQL - like =, but the types of the arguments must match.
        Two lists are EQL only if they are EQ.

  EQUAL - tests if two lists have the same structure
          (true if their CAR's are EQUAL and their CDR's are EQUAL).
          Note that EQUAL for atoms is equivalent to EQL.

  = or
  ZILEQUAL - For symbols and strings, tests if their print names are
             identical, CASE INCLUDED.
             For numbers, tests if they are numerically equal.

  EQUALP - For symbols and strings, tests if their print names are
           identical WITHOUT REGARD TO CASE.
           For lists, true if the CAR's are EQUALP and the CDR's
           are EQUALP.
           For numbers, same as =.
           For vectors, true if they have the same number of elements
           and the elements are EQUALP.
           For all other objects, same as EQL.

  (EQUALP is the Common LISP EQUALP.  Note that the EQUALP available
  in earlier releases of ZIL was closer to ZILEQUAL.)

  EQL in ZIL differs from Common LISP EQL in that it can compare
  strings.  The philosophy behind this is that in ZIL, strings are
  unmodifiable entities, whereas Common LISP supports functions
  that change the contents of strings.

  Note that ZILEQUAL is the two-argument function underlying =.
  Furthermore, ZILEQUAL (or =) is the only equality predicate that
  will error out if argument types are passed to it that it cannot
  compare, much like GREATERP or LESSP will.

  Two integers with the same value may not be EQ, but they
  will always be EQL, EQUAL or =.

Examples:

 ;;; Comparing numbers

 (EQ     1 1.0) ==> NIL
 (EQL    1 1.0) ==> NIL
 (EQUAL  1 1.0) ==> NIL
 (EQUALP 1 1.0) ==> T
 (=      1 1.0) ==> T

 ;;; Comparing strings

 (EQ     "foo" (string-append "foo")) ==> NIL
 (EQL    "foo" (string-append "foo")) ==> T  ; not in Common Lisp!
 (EQUAL  "foo" (string-append "foo")) ==> T  ; not in Common Lisp!
 (EQUALP "foo" (string-append "foo")) ==> T
 (=      "foo" (string-append "foo")) ==> T

 (EQ     "FOO" "foo") ==> NIL
 (EQL    "FOO" "foo") ==> NIL
 (EQUAL  "FOO" "foo") ==> NIL
 (EQUALP "FOO" "foo") ==> T
 (=      "FOO" "foo") ==> NIL

 ;;; Comparing lists

 (EQ     '(A B) '(A B)) ==> NIL
 (EQL    '(A B) '(A B)) ==> NIL
 (EQUAL  '(A B) '(A B)) ==> T
 (EQUALP '(A B) '(A B)) ==> T
 (=      '(A B) '(A B)) ==> ("***ERROR***") ; = can't compare lists

 (EQ     '(1 2) '(1 2)) ==> NIL
 (EQL    '(1 2) '(1 2)) ==> NIL
 (EQUAL  '(1 2) '(1 2)) ==> T
 (EQUALP '(1 2) '(1 2)) ==> T
 (=      '(1 2) '(1 2)) ==> ("***ERROR***") ; = can't compare lists

 (EQ     '(1 2) '(1.0 2.0)) ==> NIL
 (EQL    '(1 2) '(1.0 2.0)) ==> NIL
 (EQUAL  '(1 2) '(1.0 2.0)) ==> NIL
 (EQUALP '(1 2) '(1.0 2.0)) ==> T
 (=      '(1 2) '(1.0 2.0)) ==> ("***ERROR***") ; = can't compare lists

 ;;; Comparing symbols to symbols

 (EQ     (MAKNAM  '(A B C)) 'ABC) ==> NIL
 (EQL    (MAKNAM  '(A B C)) 'ABC) ==> NIL
 (EQUAL  (MAKNAM  '(A B C)) 'ABC) ==> NIL
 (EQUALP (MAKNAM  '(A B C)) 'ABC) ==> NIL
 (=      (MAKNAM  '(A B C)) 'ABC) ==> T

 ;;; Comparing symbols to strings

 (EQ     (MAKNAM  '(A B C)) "ABC") ==> NIL
 (EQL    (MAKNAM  '(A B C)) "ABC") ==> NIL
 (EQUAL  (MAKNAM  '(A B C)) "ABC") ==> NIL
 (EQUALP (MAKNAM  '(A B C)) "ABC") ==> NIL
 (=      (MAKNAM  '(A B C)) "ABC") ==> T

 ;;; Comparing vectors

 (EQ     #(A B C) #(A B C)) ==> NIL
 (EQL    #(A B C) #(A B C)) ==> NIL
 (EQUAL  #(A B C) #(A B C)) ==> NIL
 (EQUALP #(A B C) #(A B C)) ==> T
 (=      #(A B C) #(A B C)) ==> ("***ERROR***") ; can't compare vectors

 (EQ     #(1 2 3) #(1.0 2.0 3.0)) ==> NIL
 (EQL    #(1 2 3) #(1.0 2.0 3.0)) ==> NIL
 (EQUAL  #(1 2 3) #(1.0 2.0 3.0)) ==> NIL
 (EQUALP #(1 2 3) #(1.0 2.0 3.0)) ==> T
 (=      #(1 2 3) #(1.0 2.0 3.0)) ==> ("***ERROR***") ; can't compare

