************************************************************************
***                                                  |               ***
***  ZZZZZZZZZZZZZZZZZ    IIIII   LLLLL              |               ***
***  ZZZZZZZZZZZZZZZZZ     III     LLL               |  L  I  S  P   ***
***  Z            ZZZ      III     LLL               |               ***
***              ZZZ       III     LLL               |               ***
***             ZZZ        III     LLL               |      ON       ***
***            ZZZ         III     LLL               |               ***
***           ZZZ          III     LLL               |               ***
***          ZZZ           III     LLL               |   M  V  S     ***
***         ZZZ            III     LLL               |               ***
***        ZZZ             III     LLL               |    _____      ***
***       ZZZ              III     LLL               |   |   | \     ***
***      ZZZ               III     LLL               |   |  ___ \    ***
***     ZZZ                III     LLL               |   | /...\ \   ***
***    ZZZ                 III     LLL               |   | |.o.| |   ***
***   ZZZ                  III     LLL               |   |_|...|-|   ***
***  ZZZ            Z      III     LLL            L  |   | \___/ /   ***
***  ZZZZZZZZZZZZZZZZ      III     LLLLLLLLLLLLLLLL  |   |   |  /    ***
***  ZZZZZZZZZZZZZZZZ     IIIII   LLLLLLLLLLLLLLLLL  |   |_____/     ***
***                                                  |               ***
************************************************************************


 ZIL - LISP for MVS - Version 1.3
 Copyright (c) 1989 The Charles Stark Draper Laboratory Inc.
 All Rights Reserved


 ZIL LISP runs on IBM 370 series mainframe computers under the MVS
 operating system.  Although not yet totally a dialect of Common LISP,
 it attempts to be as compatible with Common LISP and Maclisp as
 possible.

 The ZIL compiler and interpreter are written and compiled in ZIL.

 CREDITS

 Zil is the creation of:

  Steve "Batchman" Bacher <seb@draper.com> - the original conception,
  the compiler, the interpreter, and the bulk of the runtime, including
  the interfaces to TSO and ISPF and the Flavors object system.

  Kjeld "Sandy" Hvatum <kjeld@ultranet.com> - the runtime code that
  implements "bignum" arithmetic, symbol hashing and interning, the
  vectorizing garbage collector (available only if you have the
  370 Vector Facility), and thorough, exhaustive testing.

 Zil was developed at the Charles Stark Draper Laboratory (formerly the
 MIT Instrumentation Laboratory) in Cambridge, Massachusetts, starting
 in 1983.  Steve and Sandy have successfully ported a number of AI
 applications to it, notably OPS5 (an expert system builder) and
 DOE Macsyma (a symbolic algebra powerhouse).  In addition, some
 local applications were developed using Zil, including an expert
 system (under OPS5) to analyze and unload tapes on the mainframe.

 TUTORIAL INFORMATION

 This document is primarily a reference manual; it is not intended as an
 introduction to the LISP language.  One book that can be recommended as
 a good introductory text for the LISP user is:

   LISP (Third Edition) - Winston and Horn

 This book gives a good introduction to the language, along with
 numerous AI-oriented programming examples.

 There are, inevitably, differences between the LISP described in a
 commercially available book and a particular implementation like ZIL;
 nevertheless, the basic concepts of the language are generally the
 same.  When in doubt, you should always refer to this document for
 the actual behavior of a function in ZIL.

 There is a documentation member for each LISP function.



 For additional information, see the following members of this document:

 $ARITH   - Comments pertaining to ZIL arithmetic functions in general.
 $ARRAY   - ZIL's Maclisp-compatible array facility.
 $ATTN    - Attention interrupt processing.
 $BIGNUM  - Information on bignums (arbitrary precision integers).
 $CALL    - How to call your compiled LISP program.
 $CODES   - ZIL error codes and their associated messages.
 $COMPILE - What the compiler is looking for.
 $DEFUN   - Description of how functions are defined.
 $EQUAL   - The various equality functions.
 $FILE    - Information on how files work in ZIL functions.
 $FLAVORS - ZIL's implementation of FLAVORS object-oriented programming.
 $FORMS   - Formats of atoms, lists, and objects that can be typed in.
 $FORTRAN - Explanation of when ZIL uses the FORTRAN run-time library.
 $HELP    - One-line summary of available functions.
 $INIT    - How to use an INIT file.
 $INT     - How to run the interpreter on TSO.
 $JCL     - How to run the compiler in batch.
 $LEXPR   - Explanation of Maclisp-style LEXPR's.
 $MAP     - Explanation of how ZIL handles mapping functions.
 $NEWS    - Latest news about ZIL.
 $PARM    - Execution-time parameter options.
 $PRINTER - Explanation of the ZIL printer interface.
 $PROP    - Property lists.
 $RMACRO  - Available reader macro characters.
 $SPECIAL - Globally defined special variables.
 $SPF     - Using the ISPF interface.
 $TRACE   - Using the function trace facility.

