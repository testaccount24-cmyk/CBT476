
 PROPERTY LISTS

 A property list is a list of an even number of elements (zero or more)
 of alternating "indicators" and "values".  The indicators are, in
 general, symbols (although in theory they could be anything), while
 the values are any kind of LISP object.

 A property list is typically stored in the property list cell of a
 symbol; however, there are also "disembodied property lists", which
 are lists whose CDR is a property list as described above.  Thus,
 a disembodied property list always has an odd number of elements.

 Property lists are destructively updated by replacing the value
 elements associated with the preceding indicators, or by splicing a
 new indicator/value pair onto the end.  Therefore, using a constant
 (quoted) list as a property list is a very bad idea.

 If a property list processing function encounters an invalid
 property list (odd number of elements, or not a proper list),
 an error is signalled.

 In the descriptions of functions below, the term "place" refers to
 either a symbol, in which case the property list stored in the
 symbol's property list cell is used, or a list, in which case the
 list is treated as a disembodied property list (i.e. the CDR of
 the list).  If "place" is not a symbol or a list, then an error is
 signalled, except where otherwise indicated.

 The following functions are used to access property lists:

  (GET place indicator &optional defaultvalue)

   returns the value associated with "indicator" on the property list
   stored in "place".  If there is no "indicator" on the property list,
   "defaultvalue" (NIL if omitted) is returned.

  (PUTPROP place value indicator)

   modifies the property list stored in "place" by assigning the
   "indicator" the specified "value".  If "indicator" is already
   on the property list, its current value is replaced by "value".

  (SETF (GET place indicator) value) is equivalent to the above
   use of PUTPROP, and is the accepted Common Lisp way of setting
   properties.

  (REMPROP place indicator)

   removes the indicator-value pair specified by "indicator" from
   the property list stored in "place".  It does NOT assign a
   default value to "indicator".

  (SYMBOL-PLIST symbol)
   or
  (PLIST symbol)

   returns the entire property list stored in the property list cell
   of "symbol", which must be a symbol.

  (SETPLIST symbol plist)
   or
  (SETF (SYMBOL-PLIST symbol) plist)

   takes the property list "plist" and stores it in the property list
   cell of "symbol", which must be a symbol.  No validity checking
   is done on either the old or new property list.  This function
   should generally NOT be used.

  (GETL place indicator-list)

   searches the property list stored in "place" for one of the
   indicators specified in "indicator-list" and returns the
   sublist of the property list starting with that indicator.
   The found indicator is the CAR of the return value, and the
   associated value is the CADR thereof.

  (GETK place keyword)

   is a specialized form of GET that is used to search a function
   argument list for keyword values.  It is not generally used on
   property lists per se.

  For GET and GETL, if "place" is neither a symbol nor a list, a warning
  message is issued and the default value is returned.  This is
  necessary for compatibility with Maclisp, and is required for Macsyma
  to work.

  For more information on these and other functions that manipulate
  property lists, see the members of this documentation that describe
  the individual functions.

  The indicators on property lists may be, in general, any interned
  symbol.  However, the following property indicators are used by the
  ZIL system itself and have special meanings.  Using these as property
  indicators can have untoward outcomes.

   ARRAY  - the structure which implements the Maclisp-compatible-array
            definition of a symbol, placed there by *ARRAY, for example.

   ARRAY-SAVE-ARRAY - used to "push down" existing ARRAY properties
            when a Maclisp-compatible array is redefined.

   ARRAY-SAVE-SUBR - used to "push down" existing function definitions
            when a Maclisp-compatible array is redefined.

   AUTOLOAD - a value which tells the ZIL system how to locate the
              function definition of a symbol that doesn't have one yet.

   AUTOVALUE - a value which tells the ZIL system how to locate the
               global value of a symbol that doesn't have one.  This is
               known as "symbol-autoloading", a feature unique to ZIL.

   DOCUMENTATION - used to store the "documentation string" associated
             with a symbol via DEFVAR (but not DEFUN at this time).

   EXPR   - the interpreted definition of a function associated with
            a symbol, placed there by DEFUN, for example.

   FEXPR  - the interpreted definition of a FEXPR associated with
            a symbol, placed there by DEFUN, for example.

   FLAVOR - the structure which defines the symbol as a flavor, placed
            there by DEFFLAVOR, for example.

   LOADFILE - the name of the file from which a function definition was
            loaded, placed there by DEFUN, for example.

   MACRO  - the macro definition associated with a symbol, placed
            there by DEFMACRO, for example.

   SETFMETHOD - the function used by the SETF macro to transform SETF
            calls for that function into the appropriate code sequence.

   SHARPMACRO - a function used by the reader to process the "#"
            dispatch character for reader macro characters defined
            by the user.

   SPECIAL - if non-null, indicates that the symbol with this property
             has been declared SPECIAL under the interpreter.  This is
             not used by the compiler.

   |SPECIAL FORM| - if non-null, the symbol with this property is
            defined as a special form to ZIL.  You cannot create
            your own special forms; processing of special forms
            is embedded in various parts of the ZIL system.

   SUBR   - the compiled code definition of a function associated with
            a symbol, placed there automatically by the ZIL system.

   ZIL-NO-AUTOLOAD - if non-null, indicates that the symbol with this
              property has been determined to be undefined and that ZIL
              should not try to autoload it again.

   ... et al. ...

 The following properties are used by the ZIL compiler:

   CAUTOLOAD - a value which tells the compiler how to locate the
              function definition of a symbol that doesn't have one yet.

   CEXPR  - the function definition of a symbol placed there when the
            compiler sees a DEFUN.

   CMACRO - the macro definition of a symbol placed there when the
            compiler sees a DEFMACRO.

   COMPILER-TRANSFORM - the compiler transform function associated
            with a symbol, placed there by DEFTRANS, for example.

   DEFINED-BY - tells the compiler whether a function the compiler
                knows about is defined by the system or not.

   LEXPRARG - tells the compiler whether a function the compiler
              knows about is a LEXPR.

   MAXARGS - tells the compiler the maximum number of arguments
             that can be passed to a function the compiler knows about.

   MINARGS - tells the compiler the minimum number of arguments
             that can be passed to a function the compiler knows about.

   RESTARG - tells the compiler whether you can pass a &REST arg
             to a function the compiler knows about.

 In addition to the above, properties whose names begin with the
 characters DEFSTRUCT are reserved for use by DEFSTRUCT, and
 property names beginning with the characters ZIL are also
 reserved.  (In this context, "reserved" means you can use them
 but you're likely to break the system if you do.)

 Furthermore, many property names are used internally by the
 compiler.  If you execute code at compile time (i.e. using the
 EVAL-WHEN special form), you must be careful not to rely on
 specific property indicators, since these may conflict with the
 ones used by the compiler, and confuse the compiler.


 The following SYMBOLS use their property lists in system-dependent
 ways.  Putting properties on these symbols may affect the system
 in ways that you wouldn't expect.

  *FLAVORS*     - used by the FLAVORS system.
  *READERMACRO* - used to store reader macro definitions.
  *ZILCO*       - used to store compiler attributes.

