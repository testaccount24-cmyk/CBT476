
Macro: DEFSTRUCT

Syntax:   (DEFSTRUCT type1 &rest args)

 type1 (required, not evaluated) - a symbol.
 arg (optional) - see description below.

Returns:

 type1, after defining a type of structure by that name.

Processing:

 DEFSTRUCT is a Lisp way of creating new data structures (essentially
 new data types).  When DEFSTRUCT is issued, a series of macro
 definitions are created which define ways of creating an object
 (structure) of the specified type, of accessing slots in that
 structure, of updating slots in that structure, and of testing
 whether a given Lisp object is of that type.

 As an illustration, consider this definition:

  (DEFSTRUCT KONS KAR KDR)

 This form defines a type of object called a KONS, which consists of
 two slots, called KAR and KDR.  The following macros are defined
 when this DEFSTRUCT is executed:

  (MAKE-KONS &key KAR KDR)

   creates an object of type KONS, for which you can optionally
   specify initial values for the KAR and KDR slots.  For Maclisp
   compatibility, the "keywords" may be specified with or without
   leading colons - thus the syntax is not true &key syntax in the
   strict sense.

  (COPY-KONS object &key KAR KDR)

   makes a copy of an object of type KONS, for which you can optionally
   specify new values for the KAR and KDR slots.  For Maclisp
   compatibility, the "keywords" may be specified with or without
   leading colons - thus the syntax is not true &key syntax in the
   strict sense.

  (KONS-P arg1)

   returns T if arg1 is a KONS, and NIL otherwise.

  (KONS-KAR kons1)

   returns the value of the KAR slot of the KONS specified by kons1.

  (KONS-KDR kons1)

   returns the value of the KDR slot of the KONS specified by kons1.

  (SETF (KONS-KAR kons1) val2)

   sets the value of the KAR slot of KONS kons1 to val2.

  (SETF (KONS-KDR kons1) val2)

   sets the value of the KDR slot of KONS kons1 to val2.

 Although DEFSTRUCT defines objects that are structures by default, it
 may also be used to define objects as trees (i.e. conses) or
 Maclisp-style arrays.  There are many options; consult the Common Lisp
 or Maclisp manual for full details.  Not all of those options are
 currently implemented in Zil, however.

 The full available syntax of DEFSTRUCT is something like this:

  Minimal syntax: (DEFSTRUCT struct-name slot1 slot2 slot3 ... )

  Maximal syntax:

   (DEFSTRUCT
     struct-name | (struct-name
                    {ARRAY | TREE}
                    {CONC-NAME   | (CONC-NAME   {NIL | name})}
                    {CONSTRUCTOR | (CONSTRUCTOR {NIL | name} {arglist})}
                    {COPIER      | (COPIER      {NIL | name})}
                    {(EVAL-WHEN ({COMPILE} {LOAD} {EVAL}))}
                   )
     {slot | (slot {default-value})}*
   )

 The default for the EVAL-WHEN specification is (COMPILE EVAL).

 The symbols capitalized above (not including DEFSTRUCT, NIL, or values
 inside EVAL-WHEN) may optionally be prefixed with a colon.  E.g.,
 COPIER or :COPIER may be specified.

 Again, for more details, consult a Common Lisp or Maclisp manual.

 See STRUCTUR for more information about structures.

Errors signaled:

 Lots of syntax errors.

Notes:

 DEFSTRUCT itself does NOT allocate any objects; it merely defines the
 operations that you would use to create and manipulate them.  It does
 this inside an EVAL-WHEN so that it can be used freely in both compiled
 and interpreted code.

 (TYPEP object type) will return T for "object" created by DEFSTRUCT of
 a type name "type", unless the ARRAY or TREE option was specified.

