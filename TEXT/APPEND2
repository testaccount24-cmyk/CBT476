
Function: APPEND2

Syntax:   (APPEND2 list1 list2)

 list1 (required, evaluated) - a proper list.
 list2 (required, evaluated) - any LISP object, but generally a list.

Returns:

 A list consisting of the elements of argument 1 followed by the
 elements of argument 2.

Processing:

 The first argument list is copied (via repeated CONS) and the second
 argument is RPLACD'd onto the last CAR of the copy of the first
 argument.

 (APPEND2 list NIL) creates a new copy of "list", with each CAR of
 "list" re-CONS'ed.

 Compare NCONC2, which destructively alters the first argument.

Errors signaled:

 list1 not a proper list.

Notes:

 APPEND2 is the two-argument form of APPEND, used to implement
 calls to APPEND in most compiled code.

 If the second argument is an atom, a list ending in a dotted pair
 will result.

 As a special case, (APPEND2 atom NIL), where atom is not a list,
 returns the selfsame atom.

Examples:

 (APPEND2 NIL NIL)           ==> NIL
 (APPEND2 NIL '(A B C))      ==> (A B C)
 (APPEND2 '(A B C) NIL)      ==> (A B C)
 (APPEND2 '(A) '(B))         ==> (A B)
 (APPEND2 '(A) 'B)           ==> (A . B)
 (APPEND2 '(A B) '(C D))     ==> (A B C D)
 (APPEND2 '(A B C) 'D)       ==> (A B C . D)

;The following shows how a new copy of a list is made using APPEND2.

 (SETQ X '(A B C))           ==> (A B C)
 (SETQ Y (APPEND2 X NIL))    ==> (A B C)
 (EQ X Y)                    ==> NIL
 (EQUAL X Y)                 ==> T

;The following shows how the second argument to APPEND2 is NOT copied.

 (SETQ X '(A))               ==> (A)
 (SETQ Y '(B C))             ==> (B C)
 (SETQ Z (APPEND2 X Y))      ==> (A B C)
 (EQ (CDR Z) Y)              ==> T

