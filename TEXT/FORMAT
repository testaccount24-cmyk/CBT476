
Function: FORMAT

Syntax:   (FORMAT dest1 string2 &rest args)

 dest1   (required, evaluated) - T, NIL, a file name (symbol), or a
                                 string.
 string2 (required, evaluated) - a string.
 arg     (optional, evaluated) - any LISP object.

Returns:

 If dest1 is T, NIL after printing a formatted line to the standard
 output file.  If dest1 is NIL, a string containing the formatted line.
 If dest1 is a string, a string containing the formatted line
 string-appended to dest1.  Otherwise, NIL after printing the formatted
 line to the file dest1.

Processing:

 FORMAT takes a string with "format directives" indicated by embedded
 tildes "~", formats the args into the string according to the
 specifications of the directives, and either prints the resultant
 string to the standard output file (if dest1 is T), returns the
 formatted data as a string (if dest1 is NIL), string-appends the data
 to string dest1 (nondestructively, of course), or prints the string to
 the output file specified by dest1.

 In other words, use (FORMAT T "format-string" format-args ...) to
 actually print something;
 use (FORMAT NIL "format-string" format-args ...) to return a string
 that has been formatted.

 For a complete description of FORMAT, refer to Guy Steele's
 "Common LISP: The Language", pp. 385 & ff.

 The ZIL implementation of FORMAT is 100% complete and correct with
 respect to the Common LISP specification.

 All modifier syntax discussed in the Common LISP guide (@, :, padchar,
 V, #, etc.) is available, and is supported for all the format
 directives above.  Note that in cases where a character may be
 specified as a prefix modifier (by a preceding quote), a number is not
 permitted, and vice versa.

 Here is a summary of the FORMAT directives:

 ~<newline> - causes following newline and/or whitespace to be ignored,
              depending on modifiers.
 ~<carriage return>
            - same as <newline>.  End of line is also equivalent.
 ~<left bracket>...~<right bracket>
            - selects one of a series of elements to be formatted.
              Note that cent sign may be used in place of left bracket,
              and broken vertical bar may be used in place of right
              bracket, on IBM 3270 keyboards.
 ~{...~}    - iterates over the elements of a list.
 ~<...~>    - does text justification.
 ~(...~)    - does case conversion.
 ~|         - generates a formfeed (hex 2c).  Useless on MVS.
 ~&         - conditionally generates a newline.
 ~$         - formats in dollar-sign-suitable floating-point.
 ~*         - ignores or backs up in format arguments.
 ~;         - used to separate elements in a ~< or ~<left bracket> group
 ~¬         - escape, used to exit a formatting sequence.
 ~%         - generates a newline.
 ~?         - indirect format string processing.
 ~~         - generates a tilde.
 ~A         - formats like PRINC prints.
 ~B         - formats in binary.
 ~C         - formats as a character where possible.
 ~D         - formats in decimal.
 ~E         - formats in exponential floating-point.
 ~F         - formats in fixed-format floating-point.
 ~G         - formats in general-format floating-point.
 ~O         - formats in octal.
 ~P         - formats plural endings.
 ~R         - formats in the specified radix, or English or Roman.
 ~S         - formats like PRIN1 prints.
 ~T         - relative or absolute tabulation.
 ~X         - formats in hexadecimal.  Note that X does NOT generate
              spaces like it does in Maclisp.

The following extensions are unique to the ZIL implementation:

 ~Z         - generates debugging output during the formatting process.

  As stated above, tilde + cent sign is functionally equivalent to tilde
  + left bracket, and tilde + broken vertical bar (hex 6A) is
  functionally equivalent to tilde + right bracket.  Do not confuse this
  with the unbroken vertical bar (hex 4F), which is the "formfeed"
  directive.

The following differences may be observed in the ZIL implementation:

  The exponent character used by the ~E directive defaults to D for
  double-precision floats and F for single-precision floats, not E
  as in many Common LISPs.

  Where the current column needs to be computed (e.g. for a tabulation
  request), the current output column is used when formatting to a file,
  and the number of characters output since the last newline (plus 1) is
  used when formatting to a string.

  The line length, used by the ~:; directive inside a ~<...~> group,
  always defaults to 72, regardless of the output destination.

Errors signaled:

 Syntax errors - invalid FORMAT directives, etc.

 Note - not all errors are signalled.  Undefined modifiers, for
        example, may cause errors or may simply be ignored.

Notes:

 FORMAT is also discussed in the following manuals:

  The Revised Maclisp Manual (K. Pitman)
  NIL Reference Manual (Burke, Carrette, Eliot)

 However, ZIL follows the Common LISP specifications.

Examples:

 (FORMAT NIL "foo ~A bar" 'frob) ==> "foo FROB bar"

 (FORMAT NIL "X'~X'" 4095)        ==> "X'FFF'"

; The following examples are taken from CLtL, pp. 385&ff.

(progn
 (declare (special x y n))
 (setq x 5)
 (setq y "elephant")
 (setq n 3)
 t
) ==> T

(format nil "foo")                     ==> "foo"
(format nil "The answer is ~D." x)     ==> "The answer is 5."
(format nil "The answer is ~3D." x)    ==> "The answer is   5."
(format nil "The answer is ~3,'0D." x) ==> "The answer is 005."
(format nil "The answer is ~:D." (expt 47 x))
                                       ==> "The answer is 229,345,007."
(format nil "Look at the ~A!" y)       ==> "Look at the elephant!"

(format nil "Type ~:C to ~A."  #\D "delete all your files")
        ==> "Type D to delete all your files."

(format nil "~D item~:P found." n)
        ==> "3 items found."

(format nil "~R dog~:¢s are~; is~¦ here." n (= n 1))
        ==> "three dogs are here."

(format nil "~R dog~:*~¢s are~; is~:;s are~¦ here." n)
        ==> "three dogs are here."

(format nil "Here ~¢are~;is~:;are~¦ ~:*~R pupp~:@p." n)
        ==> "Here are three puppies."

(format nil "~D tr~:@p/~D win~:P" 7 1) ==> "7 tries/1 win"
(format nil "~D tr~:@p/~D win~:P" 1 0) ==> "1 try/0 wins"
(format nil "~D tr~:@p/~D win~:P" 1 3) ==> "1 try/3 wins"

(defun foo (x)
 (format nil "~6,2F|~6,2,1,'*F|~6,2,,'?F|~6F|~,2F|~F"
         x x x x x x))   ==> FOO

(foo 3.14159)     ==>  "  3.14| 31.42|  3.14|3.1416|3.14|3.14159"
(foo -3.14159)    ==>  " -3.14|-31.42| -3.14|-3.142|-3.14|-3.14159"
(foo 100.0)       ==>  "100.00|******|100.00| 100.0|100.00|100.0"
(foo 1234.0)      ==> "1234.00|******|??????|1234.0|1234.00|1234.0"
(foo 0.006)       ==>  "  0.01|  0.06|  0.01| 0.006|0.01|0.006"

(defun foo (x)
 (format nil
         "~9,2,1,,'*E|~10,3,2,2,'?,,'$E|~9,3,2,-2,'%@e|~9,2E"
         x x x x))       ==>  FOO

(foo 3.14159)    ==>  "  3.14D+0| 31.42$-01|+.003D+03|  3.14D+0"
(foo -3.14159)   ==>  " -3.14D+0|-31.42$-01|-.003D+03| -3.14D+0"
(foo 1100.0)     ==>  "  1.10D+3| 11.00$+02|+.001D+06|  1.10D+3"
(foo 1.1E13)     ==>  "*********| 11.00$+12|+.001D+16| 1.10D+13"

(defun foo (x)
 (format nil
         "~9,2,1,,'*G|~9,3,2,3,'?,,'$G|~9,3,2,0,'%G|~9,2G"
         x x x x))       ==>  FOO

(foo 0.0314159)  ==>  "  3.14D-2|314.2$-04|0.314D-01|  3.14D-2"
(foo 0.314159)   ==>  "  0.31   |0.314    |0.314    | 0.31    "
(foo 3.14159)    ==>  "   3.1   | 3.14    | 3.14    |  3.1    "
(foo 31.4159)    ==>  "   31.   | 31.4    | 31.4    |  31.    "
(foo 314.159)    ==>  "  3.14D+2| 314.    | 314.    |  3.14D+2"
(foo 3141.59)    ==>  "  3.14D+3|314.2$+01|0.314D+04|  3.14D+3"
(foo 3.14E12)    ==>  "*********|314.0$+10|0.314D+13| 3.14D+12"

(format nil "The winners are:~{ ~S~}." '(fred harry jill))

  ==> "The winners are: FRED HARRY JILL."

(format nil "Pairs:~{ <~S,~S>~}." '(a 1 b 2 c 3))

  ==> "Pairs: <A,1> <B,2> <C,3>."

(format nil "Pairs:~:{ <~S,~S>~}." '((a 1) (b 2) (c 3)))

  ==> "Pairs: <A,1> <B,2> <C,3>."

(format nil "Pairs:~:@{ <~S,~S>~}." '(a 1) '(b 2) '(c 3))

  ==> "Pairs: <A,1> <B,2> <C,3>."

(let ((*print-level* nil) (*print-length* 5))
     (declare (special *print-level* *print-length*))
     (format nil
             "~@¢ print level = ~D~¦~@¢ print length = ~D~¦"
             *print-level* *print-length*))

  ==> " print length = 5"

 (progn
  (declare (special foo))
  (setq foo
        "Items:~#¢ none~; ~S~; ~S and ~S~:;~@{~#¢~; and~¦ ~S~¬,~}~¦.")
  t) ==> T

 (format nil foo)                 ==> "Items: none."
 (format nil foo 'foo)            ==> "Items: FOO."
 (format nil foo 'foo 'bar)       ==> "Items: FOO and BAR."
 (format nil foo 'foo 'bar 'baz)  ==> "Items: FOO, BAR, and BAZ."
 (format nil foo 'foo 'bar 'baz 'quux)
                                  ==> "Items: FOO, BAR, BAZ, and QUUX."

 (format nil "~10<foo~;bar~>")    ==> "foo    bar"
 (format nil "~10:<foo~;bar~>")   ==> "  foo  bar"
 (format nil "~10:@<foo~;bar~>")  ==> "  foo bar "
 (format nil "~10<foobar~>")      ==> "    foobar"
 (format nil "~10:<foobar~>")     ==> "    foobar"
 (format nil "~10@<foobar~>")     ==> "foobar    "
 (format nil "~10:@<foobar~>")    ==> "  foobar  "

 (format nil "~? ~D" "<~A ~D>" '("Foo" 5) 7)     ==>  "<Foo 5> 7"
 (format nil "~? ~D" "<~A ~D>" '("Foo" 5 14) 7)  ==>  "<Foo 5> 7"

 (format nil "~@? ~D" "<~A ~D>" "Foo" 5 7)       ==>  "<Foo 5> 7"
 (format nil "~@? ~D" "<~A ~D>" "Foo" 5 14 7)    ==>  "<Foo 5> 14"

 (format nil "~@R ~(~@R~)" 14 14)                ==>  "XIV xiv"

 (defun f (n) (format nil "~@(~R~) error~:P detected." n))  ==> F

 (f 0)    ==>  "Zero errors detected."
 (f 1)    ==>  "One error detected."
 (f 23)   ==>  "Twenty-three errors detected."

 (progn
  (declare (special donestr))
  (setq donestr "Done.~¬ ~D warning~:P.~¬ ~D error~:P.")
  t) ==> T

 (format nil donestr)             ==> "Done."
 (format nil donestr 3)           ==> "Done. 3 warnings."
 (format nil donestr 3 5)         ==> "Done. 3 warnings. 5 errors."

 (ok (setq tellstr "~@(~@¢~R~¦~¬ ~A.~)")) ==> t
 ;
 ; CLtL is wrong when it says this returns "Twenty-three."
 ;
 (format nil tellstr 23)           ==> "Twenty-three"
 ;
 ; CLtL is wrong when it says this returns "Losers."
 ;
 (format nil tellstr nil "losers") ==> " Losers."
 (format nil tellstr 23 "losers")  ==> "Twenty-three losers."

 (format nil "~15<~S~;~¬~S~;~¬~S~>" 'foo)       ==> "            FOO"
 (format nil "~15<~S~;~¬~S~;~¬~S~>" 'foo 'bar)  ==> "FOO         BAR"
 (format nil "~15<~S~;~¬~S~;~¬~S~>" 'foo 'bar 'baz)
                                                ==> "FOO   BAR   BAZ"

