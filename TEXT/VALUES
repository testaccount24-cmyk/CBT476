
Function: VALUES

Syntax:   (VALUES &rest args)

 Any number of arguments may be specified.

 arg (evaluated) - any LISP object.

Returns:

 The values specified by the arguments, as multiple values.  If
 multiple values are not being requested, the first argument is
 returned, or NIL if no arguments are specified.

Processing:

 If multiple values are being requested by a special form (like
 MULTIPLE-VALUE-LIST or MULTIPLE-VALUE-BIND, for example) that directly
 or indirectly calls VALUES, and the call to VALUES is in tail-recursive
 (value-returning) position, then all of the arguments to VALUES are
 returned as multiple values - or, more accurately, as many values as
 are being requested are returned.

 If there is no request for multiple values at the time that VALUES is
 executed, or if VALUES is being executed in other than tail-recursive
 position (e.g. as an argument to a function, as a predicate, or to set
 a variable to a value), then the value returned is the first of the
 arguments.  If there are no arguments, NIL is returned as a single
 value (zero values would be returned as multiple values).

Errors signaled:

 None.

Notes:

 Compare VALUES-LIST (VALUESL), which returns all the elements of
 an existing list as multiple values.

 See Guy Steele's "Common LISP: The Language", pp. 133-139, for
 an explanation of multiple values in LISP.  Although the constant
 MULTIPLE-VALUES-LIMIT is not defined in ZIL, returning more than
 4095 multiple values is not supported.

 (VALUES form), with one argument, is equivalent to specifying form
 by itself, except that in value-returning position it forces the
 return of a single value; this is useful in cases where form is
 a call to a function that normally returns more than one value
 but you want to return exactly one value only.

 In many cases, use of multiple values in ZIL is more expensive than
 just consing up a list of the values and extracting the values from
 the list via destructuring.  In any case, out of all the forms that
 request multiple values, only MULTIPLE-VALUE-BIND in compiled code
 is guaranteed not to cons in ZIL.

Examples:

 (VALUES)               ==> NIL
 (VALUES 'A)            ==> A
 (VALUES 'A 'B)         ==> A
 (VALUES 'A 'B 'C)      ==> A
 (MULTIPLE-VALUE-LIST (VALUES))           ==> NIL
 (MULTIPLE-VALUE-LIST (VALUES 1))         ==> (1)
 (MULTIPLE-VALUE-LIST (VALUES 1 2))       ==> (1 2)
 (MULTIPLE-VALUE-LIST (VALUES 1 2 3))     ==> (1 2 3)

