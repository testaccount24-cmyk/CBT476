
Function: EXPT

Syntax:   (EXPT num1 num2)
    or:   (** num1 num2)

 num1 (required,evaluated) - an integer or flonum.
 num2 (required,evaluated) - a fixnum or flonum.

Returns:

 num1 raised to the power of num2 (num1 ** num2).

Processing:

 When num2 is a negative integer, a result is returned equivalent to 1
 divided by num1 ** abs(num2).  If num1 is an integer, this will be a
 (truncated) integer result.

 (EXPT 0 0) returns 1.

 See member $ARITH for more information.

Errors:

 Invalid exponent (only fixnums and flonums, no bignums).
 See member $ARITH for other errors.

Notes:

 See member $ARITH for more information.

 Flonum exponents are computed as follows:

    Y     Y log(X)
   X  =  e

 (i.e. using the LOG and EXP functions).  Therefore, flonum
 exponentiation requires the FORTRAN subroutine library interface
 to be available.  See member $FORTRAN of this documentation for
 further information.

Examples:

 (EXPT 2 3)     ==> 8
 (EXPT 4 2)     ==> 16
 (EXPT 4.0 2)   ==> 16.0
 (EXPT 4 -2)    ==> 0     ;  i.e. (/ 1 16)
 (EXPT 4.0 -2)  ==> 0.0625
 (EXPT 2 31)    ==> 21
 (EXPT 2 32)    ==> 42
 (EXPT 99 0)    ==> 1
 (EXPT 99 1)    ==> 99
 (EXPT 0 0)     ==> 1
 (EXPT 0 1)     ==> 0
 (EXPT 0 2)     ==> 0

 ; Beware of using EXPT as a substitute for SQRT.

 (SQRT 25)         ==> 5.0
 (EXPT 25 0.5)     ==> 4.99999999
 (EXPT 25.0 0.5)   ==> 4.99999999
 (EXPT .25 0.5)    ==> 0.5

 ; As you can see, certain inaccuracies creep in.
 ; But this will illustrate the type coercion.

 (EXPT 2     3    )  ==> 8
 (EXPT 2     3.0F0)  ==> 8.0000038F0
 (EXPT 2     3.0D0)  ==> 7.9999999999999984D0
 (EXPT 2.0F0 3    )  ==> 8.0F0
 (EXPT 2.0F0 3.0F0)  ==> 8.0000038F0
 (EXPT 2.0F0 3.0D0)  ==> 8.0000000457117033D0
 (EXPT 2.0D0 3    )  ==> 8.0D0
 (EXPT 2.0D0 3.0F0)  ==> 7.9999999999999984D0
 (EXPT 2.0D0 3.0D0)  ==> 7.9999999999999984D0

