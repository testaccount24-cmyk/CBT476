
Function: MAPCAN

Syntax:   (MAPCAN arg1 arg2 ... argn)

 At least 2 arguments must be specified.

 arg1 (required, evaluated) - a symbol or LAMBDA-expression.
 arg2 (optional, evaluated) - a proper list.
 argn (optional, evaluated) - a proper list.

Returns:

 A list of values generated by NCONC'ing the results of the applications
 of the function specified by the first argument to the elements of the
 lists specified by the other arguments.

Processing:

 The function specified by the first argument is applied to each of
 the elements (CAR's) of the lists specified by the other arguments;
 it is assumed that a list (which may be NIL) is returned by each
 application.  The results are destructively attached via NCONC to
 create a list of all the values as they are generated, and returned
 as the value of the MAPCAN call.

 Processing ends as soon as one of the lists is exhausted
 (i.e. becomes NIL).

Errors signaled:

 Invalid number of arguments (function and at least 1 list required).

Notes:

 See member $MAP of this documentation for more information on what
 may be coded on a mapping function.

 Results are unpredictable (and likely to be disastrous) if the
 function, when applied to an element of the list, returns an atom
 rather than NIL or a proper list.

 Since NCONC is applied to the results of the function calls, be
 careful not to specify a function - such as CDR or (LAMBDA (X) X) -
 that returns the actual element or a sublist thereof; such usage
 will corrupt the elements of the list.

Examples:

 (MAPCAN #'(LAMBDA (X) (APPEND X NIL)) '((A B C) (D E) (F) NIL (G H)))
                         ==>  (A B C D E F G H)

 (mapcan #'(lambda (x y) (if (eq x y) nil (list x y)))
         '(the quick brown fox) '(the slow brown ooze))
           ==> (quick slow fox ooze)

