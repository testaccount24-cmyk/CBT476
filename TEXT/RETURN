
Macro: RETURN

Syntax:   (RETURN &optional arg1)

 arg1 (optional, evaluated) - any LISP object.

Returns:

 There is no return value.  The value of the first argument is the
 return value for the currently active PROG, or BLOCK named NIL.

Processing:

 RETURN is valid only within a PROG, or a BLOCK named NIL.

 The argument is evaluated and the current PROG (or BLOCK named NIL) is
 exited using that value as its return value.  If the argument is
 omitted, NIL is used as the value.

 Under the interpreter, RETURN may exit a PROG even when it is
 executed from within a lexical closure (FUNARG), which may produce
 some bizarre results.  In compiled code, RETURN may not branch out
 of a FUNARG.

 When RETURN transfers control from inside a form protected by
 UNWIND-PROTECT to outside that form, the UNWIND-PROTECT cleanup forms
 are executed before the PROG is exited.

Errors signaled:

 Missing argument
 RETURN outside of a PROG or BLOCK named NIL

Notes:

 RETURN used to be a special form, but is now a macro that expands
 into a (RETURN-FROM NIL ...).  See PROG, which is now a macro that
 expands into a BLOCK named NIL, among other things.

 GO and RETURN are valid as long as they are lexically apparent in
 the code.  This means that they will be processed as long as they
 are not the product of function evaluation.  The following are
 valid occurrences of GO and RETURN:

 (PROG (A B C) LOOP (DO 'SOMETHING) (GO LOOP) (RETURN T))
 (PROG (A B C) (COND ((EQ A T) (GO LOOP)))
               LOOP (PROG2 (PRINT A) (RETURN B)))

 The following is NOT valid:

 (DEFUN SUMFUNK (A) (RETURN A))
 (PROG (B) LAB (COND ((NULL A) (SUMFUNK T))) (SUMFUNK NIL))

 A "RETURN outside of PROG" error will be signalled.

Examples:

 (PROG (X)
       (SETQ X (CONS 'A X))
       (SETQ X (CONS 'B X))
       (SETQ X (CONS 'C X))
       (RETURN X)
 )                                ==> (C B A)

