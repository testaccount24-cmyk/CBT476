
Function: LDIFF

Syntax:   (LDIFF arg1 arg2)

 arg1 (required, evaluated) - a list.
 arg2 (required, evaluated) - a list.

Returns:

 A list containing all the elements of the part of arg1 that is not
 part of arg2, in the sense that arg2 is a sublist of arg1.

Processing:

 LDIFF is "list difference".

 The elements of arg1 are collected by cdr'ing down arg1 until it
 becomes EQ to arg2 (i.e. arg2 is found to be a sublist of arg1),
 or until the end of list arg1 is reached, and these elements are
 consed into a new list.

 If arg2 is not a sublist of arg1, then a copy of arg1 is created.

Errors signaled:

 None.

Notes:

Examples:

 (PROGN
  (SETQ X '(A B C D E F . G) Y (CDDDR X))
  NIL)                                      ==> NIL

 X ==> (A B C D E F . G)
 Y ==> (D E F . G)

 (LDIFF X Y)              ==> (A B C)
 (LDIFF X '(D E F . G))   ==> (A B C D E F . G)   ; EQUAL but not EQ
 (LDIFF X X)              ==> NIL
 (LDIFF X NIL)            ==> (A B C D E F . G)
 (LDIFF X (CDR X))        ==> (A)
 (LDIFF X (CDDR X))       ==> (A B)
 (LDIFF X 'G)             ==> (A B C D E F)

