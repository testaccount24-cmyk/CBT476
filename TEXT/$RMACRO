
    The ZIL reader macro facility defines special syntaxes for
    particular special characters.  The RDRMACRO and
    DEFRDMAC functions may be used to define new reader macros.

 Reader macro definitions for the following characters are predefined:

 ' (single quote)
 ` (backquote)
 , (comma)
 # (sharp sign)

 The sharp sign (#) reader macro dispatches on the character following
 in the input stream.  The functions for the following combinations
 are predefined.

 (Note:  Where it says that something "returns" something, that means
         that it is returned to the reader, as if you had typed in
         that value directly; the resulting form is then processed by
         the interpreter.  Thus, #'A --> (FUNCTION A) --> <#FUNARG A>.)

  #' (single quote) - #'A returns (FUNCTION A).
  #. (period)       - #.A returns the result of evaluating A.
  #+ (plus sign)    - #+A reads the next object if A is a "feature".
  #- (minus sign)   - #-A skips the next object if A is a "feature".
  #\ (backslash)    - #\A returns the fixnum equivalent of A.
  #/ (slash)        - #/A is the same as #\A, for Maclisp compatibility.
  #| (vertical bar) - #| ... |# is a comment sequence (can be nested).
  #( (left paren)   - #(foo etc) returns a vector containing foo, etc.
  #x, #X            - #xnnn returns an integer equal to hex nnn.
  #o, #O            - #onnn returns an integer equal to octal nnn.
  #b, #B            - #bnnn returns an integer equal to binary nnn.
  #r, #R            - #mmrnnn returns an integer equal to what nnn means
                      in radix mm.
  #z, #Z            - #znnn returns a FIXNUM equal to hex nnn, where nnn
                      might be two's complement value.

  Note: #¬ (ASCII control-<char>) and #, (load-time evaluation)
        are quasi-supported but do not generate anything useful.

 Other "dispatching" characters may be activated by placing a function
 (something that can be APPLY'ed) on the SHARPMACRO property of the
 character.  The function works the same way as one used for DEFRDMAC,
 except that the (RMCHAR) function will return # and not the
 dispatching character.


    The following system-defined reader macros are available:


    ' (quote mark) - wraps (QUOTE ...) around the next item read.
                     Examples:    'FOO --> (QUOTE FOO)
                                  '(A B C) --> (QUOTE (A B C))


    ` (backquote)  - the Common LISP backquote syntax, complete
                     with commas.  The , ,@ ,. syntaxes are all
                     supported.  Useful with macro definitions.
                     Refer to any Maclisp or Common LISP manual
                     for a complete description of backquoting.

     The form that the backquote generates is significant when
     it is EVALUATED.  What it generates at READ time should not
     be depended upon, and is not relevant.

     Examples:  (assume the value of B is the list (FOO BAR))
                `(A B C) evaluates to the list (A B C).
                `(A ,B C) evaluates to the list (A (FOO BAR) C).
                `(A ,@B C) evaluates to the list (A FOO BAR C).

     Backquotes (along with commas) are extremely useful in coding
     macro expansion functions or other functions that build LISP
     programs or other lists where most of the elements are constant.


    , (comma) - valid only within a backquoted form (see above).


    # (sharp sign) - the currently predefined uses for this are:

       #' (with quote mark) - wraps (FUNCTION ...) around the next
                              item read.  Examples:

            #'FOO --> (FUNCTION FOO)
            #'(LAMBDA (X) X) --> (FUNCTION (LAMBDA (X) X))

       #.  (with period) - evaluates the next item read and returns
                           its value, as if the value had been in
                           the input stream.

           Example:  #.(LIST 'A 'B 'C) --> (A B C)

       The following two syntaxes are used to select items based on
       the presence or absence of a "feature".  A feature FOO is
       said to be present if the symbol FOO is on the list which
       is the value of the symbol *FEATURES*.

       This is intended to be used with code ported to multiple
       LISP installations; you must activate the desired feature(s)
       using PUTPROP or SETF yourself.

       #+  (with plus sign)  - if the next item read is a "feature",
                               then returns the item after that,
                               otherwise returns nothing.

       #-  (with minus sign) - if the next item read is NOT a feature,
                              then returns nothing,
                              otherwise returns the item after it.

       A "feature" in this context is one of the following:

       (1) An atom which is a member of the value of *FEATURES*.
       (2) A list (OR feat1 feat2 feat3 ...), such that at least one
           of the "featn"'s is a "feature".
       (3) A list (AND feat1 feat2 feat3 ...), such that all of the
           "featn"'s are "features".
       (4) A list (NOT feat1) where feat1 is NOT a "feature".

       The following features are currently present in ZIL:

       ZIL ZIL13 GC BIGNUM MULTIPLE-VALUES DESTRUCTURING FLAVORS LOOP

       ... and, depending on the installation, some or all of:

       CSDL DRAPER TSO MVS XA VF

       In addition, under the interpreter, there is a ZILIN feature;
       under the compiler, there is a ZILCO feature;
       under OPS5, there is an OPS5 feature;
       under MACSYMA, there is a MACSYMA feature.

       #/  (with slash) or
       #\  (with backslash) - returns the fixnum equivalent of whatever
                              follows.  If it is one of the following,
                              it returns the corresponding fixnum:

          NULL             0     (i.e. hex 00)
          HT, TAB          5     (i.e. hex 05)
          DEL, RUBOUT      7     (i.e. hex 07)
          VT              11     (i.e. hex 0B)
          CR, RETURN      13     (i.e. hex 0D)
          NL, NEWLINE     21     (i.e. hex 15)
          BS, BACKSPACE   22     (i.e. hex 16)
          LF, LINEFEED    37     (i.e. hex 25)
          FF, FORM, PAGE  44     (i.e. hex 2C)
          SP, SPACE       64     (i.e. hex 40)
          ALT, ALTMODE   256     (an "invalid" value)

           Otherwise, the EBCDIC equivalent of the character
           immediately following the / or \ is returned.

      Examples:    #/a     is the same as the fixnum 129
                   #/A     is the same as the fixnum 193
                   #/SPACE is the same as the fixnum 64

      #¬ (with logical not sign) - returns 256 plus the EBCDIC
                                   equivalent of the character
                                   immediately following.

                                   (This is subject to change.)

      This is supposed to provide an approximation of the ASCII
      (control-{character}) character type, which of course has no
      meaning in EBCDIC.  It is provided to make LISP code developed on
      ASCII systems portable.

      #| ... |# - denotes a comment sequence.  This is similar to PL/1's
      /* ... */, EXCEPT that the #| ... |# syntax can be NESTED.  This
      makes it easier to surround blocks of code (which may already
      contain comments) with a bigger comment block.

      The following syntaxes all return INTEGERS, but allow them to
      be specified in a base other than 10.

      #o or #O - treats the following characters as octal digits
                 (0 through 7 only) and builds an integer.

      #x or #X - treats the following characters as hexadecimal digits
                 (0-9, a-f, A-F) and builds an integer.

      #b or #B - treats the following characters as binary digits
                 (0 and 1 only) and builds an integer.

      #36r or #36R - treats the following characters as base-36
                 digits (0-9, a-z, A-Z) and builds an integer.
                 Any numeric base between 2 and 36 inclusive may
                 be specified using this syntax, and only the
                 appropriate alphanumeric digits may be used.

      In other words, #b... is equivalent to #2r...
                      #o... is equivalent to #8r...
                      #x... is equivalent to #16r...

      The following holds for all the above:

        Alphanumeric characters which are not valid in the specified
        base are flagged as errors.  The digits must be terminated by
        a valid delimiter character (or end of line).

        An optional + or - sign can occur between the radix
        specification and the digits.

        Overflow cannot occur.  Since the result may be any precision
        (i.e. a "bignum" is possible), #xFFFFFFFF reads as 4294967295,
        not -1.  However, #x-FF (for example) would read in as the
        integer -255.

        Note:  The above is a major difference between ZIL 1.2 and
               ZIL 1.3, and is consistent with Common Lisp.

      #z or #Z - is like #X except that it always builds a FIXNUM.
                 A maximum of 8 hex digits can be specified, and
                 a sign is not permitted.  The value may be in
                 two's complement notation.  This format, a ZIL-only
                 extension, is used to type in hex fixnums, and works
                 the way #x used to do in ZIL 1.2.

      For example, #xFFFFFFFF = the integer 42
               but #zFFFFFFFF = the integer -1

      #( (left parenthesis) - returns a vector.  The vector can contain etc.
                              any number of elements from zero to the
                              maximum for which vector/string space is
                              available to build the vector.  The
                              dimension of the vector is equal to the
                              number of elements in the vector.  The
                              elements can be any LISP object, including
                              other vectors.

       The values within the vector are not evaluated.

       Example: #(1 2 (A B) #(C) "foo") returns a vector of 5 elements.

       Note:  This construct cannot be compiled.  Vectors must be
              built dynamically using the VECTOR or MKVECTOR function
              in compiled code.


       Other "dispatching" characters may be activated by placing a
       function (something that can be APPLY'ed) on the SHARPMACRO
       property of the character.  The function works the same way as
       one used for DEFRDMAC, except:

       (1) it takes 2 arguments - the file object and the numeric
           modifier (NIL if none) between the # and the character.

       (2) the (RMCHAR) function will return # and not the dispatching
           character.

       Note that the dispatch character in question will be the first
       character read by READ/READCH/TYI.  If you wish to ignore it,
       just issue (TYI f), where f is the 1st argument to the function,
       as the first form, and it will be thrown away.


 If you wish to define your own reader macros, you may refer to the
 documentation for the functions DEFRDMAC, RDRMACRO, RMCHAR and RMNIL
 for more information.


