
Function: SETBRACK

Syntax:   (SETBRACK arg1 arg2 &optional arg3)

 arg1 (required, evaluated) - a fixnum between 0 and 255 inclusive.
 arg2 (required, evaluated) - a fixnum between 0 and 255 inclusive.
 arg2 (optional, evaluated) - any LISP object, but generally T or NIL.

Returns:

 NIL, after changing the default characters used for printout of
 left and right square brackets for files with tab expansion active
 and no slashification.

Processing:

 Since IBM does not support square brackets consistently, ZIL's
 default initial behavior when printing them is as follows:

 (1) For files without the tab expansion feature, square brackets are
     sent as is.

 (2) For files with the tab expansion feature, square brackets are
     translated to curly braces so they can be browsed easily.

 The above applies only to output generated by PRINC, i.e. without
 slashification.  For PRIN1 output, square brackets are always sent
 as is for read-print consistency.

 If the file in question is the TSO terminal, ZIL attempts to determine
 how best to send square brackets so that they look like brackets.
 It does this via a terminal output translate table, which is
 initialized based on terminal type (for example, the characters
 hex 41 and hex 42 display as brackets on a 3180, whereas the
 characters hex BA and hex BB display as brackets on a 3179).

 Sometimes, however, this is not sufficient, as for a remote terminal
 emulating a 3270.  In these cases the brackets will end up being
 sent as garbage characters.

 SETBRACK tells ZIL to use the characters arg1 and arg2 as left and
 right square brackets respectively whenever writing to a file via PRINC
 if tab expansion is active for that file, whether the file is a dataset
 or the terminal.

 Argument 1 is the character to be output for left square brackets.
 Argument 2 is the character to be output for right square brackets.

 Argument 3, if specified and non-NIL, requests that the change be
 made to the terminal output translate table as well.  This will
 cause the exact characters specified to be sent to the terminal as
 desired.  The default (i.e. arg3 NIL or omitted) is to let ZIL try to
 determine the best way of sending square brackets to the terminal,
 which may be invalid for certain kinds of terminal connections.

 For example, to tell ZIL to send square brackets to a VT220 which
 is connected to MVS via a 7171 controller, do:

  (setbrack #XAD #XBD T)  ; print "real" brackets, even to terminal

 For a 3278 model 4, a 3279, a 3179 or a 3180:

  (setbrack #XAD #XBD NIL); print "real" brackets, let ZIL translate
                          ; to correct terminal code

 For this case, if you were to do:

  (setbrack #X41 X42)

 for example, terminal printout would be correct, but file printout
 would be incorrect.  This is why the former is preferred.  Use
 (setbrack <weird hex char> <other weird hex char>) only in cases
 when you want square brackets at your terminal but there is no
 other way to get them, and remember that file output will be bad
 if the tab expansion feature is used in the file.

 For a 3278 model 2:

  (setbrack #XAD #XBD NIL); send "real" brackets.  There's no way
                          ; to print them on the terminal, so let
                          ; it display as garbage.

 To restore default operation, which sends curly braces:

  (setbrack #XC0 #XD0 NIL)
   or
  (setbrack #\{ #\} NIL)

 NIL may be omitted where specified in all examples above.

Errors signaled:

 arg1 not a fixnum between 0 and 255.
 arg2 not a fixnum between 0 and 255.

Notes:

 Terminal and file input are completely unaffected by this function,
 as are display of curly braces.  However, whenever ZIL displays
 square brackets correctly to the terminal, the line may be
 overtyped and the brackets will be transmitted properly as input.

Examples:

 See in processing description above.

