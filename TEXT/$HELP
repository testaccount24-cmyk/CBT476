Function Name #Args   Returns/Description
___________________________________________
<             1-any#  T if args are all < (monotonically decreasing).
<=            1-any#  Inverse of >.
+             any#    Adds args together.
*             any#    Multiplies args together.
**            2       Same as EXPT.
-             any#    Unary minus, or subtracts all args in sequence.
/             any#    Reciprocal, or divides all args in sequence.
//            any#    Same as REMAINDER.
/=            2       T if args are not numerically equal, else NIL.
>             1-any#  T if args are all > (monotonically increasing).
>=            1-any#  Inverse of <.
=             1-any#  T if args are all numerically equal, else NIL.
ABS           1       Absolute value of its argument.
ACOS          1       Arccosine of arg1.
ADD1          1       Sum of argument + 1.
ADJOIN        2-any#  CONSes arg 1 onto list arg 2 if not already there.
ALPHA-CHAR-P  1       T if arg1 is an alphabetic character, else NIL.
AND           any#    NIL if any args are NIL, else returns last arg.
APPEND        any#    (APPEND '(A B) '(C D)) ===> (A B C D)
APPLY         2-any#  Applies function to list of arguments.
APROPOS       1       List of all known symbols with arg1 as substring.
ARG           0-1     Accesses arguments of a LEXPR.
ASH           2       Arith. shift left (right if neg) of arg1 by arg2.
ASIN          1       Arcsine of arg1.
ASSOC         2       (ASSOC '1 '((1 . A) (2 . B))) ===> (1 . A)
ASSQ          2       (ASSQ 'X '((A . B) (X . Y))) ===> (X . Y)
AT            any#    Sets a tracing breakpoint for function entry/exit.
ATAN          2       Arctangent of arg1/arg2.
ATOM          1       T if arg is any kind of atom, else NIL.
BIGP          1       T if argument is a bignum, else NIL.
BLOCK         any#    Evaluate a named block of forms or RETURN-FROM it.
BOOLE         3-any#  Applies Boolean op defined by arg1 to args 2, 3.
BOUNDP        1       T is symbol is bound (has a value) else NIL.
BUTLAST       1-2     List of all but the last arg2 element(s) of arg1.
CAAAR         1       CAR of CAR of CAR of arg 1.
CAADR         1       CAR of CAR of CDR of arg 1.
CAAR          1       CAR of CAR of arg 1.
CADAR         1       CAR of CDR of CAR of arg 1.
CADDDR        1       CAR of CDR of CDR of CDR of arg 1.
CADDR         1       CAR of CDR of CDR of arg 1.
CADR          1       CAR of CDR of arg 1.
CAR           1       (CAR '(A B C)) ===> A
CASE          any#    LISP's contribution to structured programming.
CATCH         2-any#  Evaluates arg2 with arg1 as THROW tag (see THROW).
CDAAR         1       CDR of CAR of CAR of arg 1.
CDADR         1       CDR of CAR of CDR of arg 1.
CDAR          1       CDR of CAR of arg 1.
CDDAR         1       CDR of CDR of CAR of arg 1.
CDDDR         1       CDR of CDR of CDR of arg 1.
CDDR          1       CDR of CDR of arg 1.
CDR           1       (CDR '(A B C)) ===> (B C)
CEILING       1-2     Converts floating point to integer.
CHAR          2       Returns fixnum character in arg1 indexed by arg2.
CHARACTERP    1       T if arg is a fixnum between 0 and 255, else NIL.
CHAR-DOWNCASE 1       (CHAR-DOWNCASE #/A) ==> #/a
CHAR-UPCASE   1       (CHAR-UPCASE #/a) ==> #/A
CLOSE         1-2     Closes a file that was opened for input or output.
CLOSUREP      1       T if arg is a compiled code closure, else NIL.
CLRSCRN       0       Clears the screen of your 3270 terminal.
CODEP         1       T if arg is a SUBR or compiled closure, else NIL.
COMMENT       any#    All args are comments, returns 'COMMENT.
CONCAT        any#    (CONCAT 'FOO 'BAR) ===> FOOBAR ; interned symbol.
CONCATL       1-2     (CONCATL '(A B C)) ===> ABC
COND          any#    Args in pairs, returns CADR of 1st whose CARÂ¬=NIL.
CONS          2       (CONS 'A '(B C D)) ===> (A B C D)
CONSP         1       T if arg is a non-null list or dotted pair.
COPYSYMBOL    2       Makes an uninterned copy of a symbol.
COPYTREE      1       Makes a copy of its arg which shares no CONSes.
COS           1       Cosine of arg1.
CTERPRI       0-1     Conditionally forces new line on output file.
CURDATE       0       Returns year, month and day as list of 3 numbers.
CURJDATE      0       Returns year and Julian day as list of 2 numbers.
CURTIME       0       Returns current time of day as list of 3 numbers.
DECF          1-2     Decrements arg 1 by arg 2 (default 1).
DEFLOAD       2       Associates an external name with a function name.
DEFMACRO      any#    Defines a macro.
DEFRDMAC      2       Defines a reader macro.
DEFSTRUCT     1-any#  Defines a structure type.
DEFUN         any#    Defines a function.
DEFVAR        2       Defines a global variable.
DELETE        2-3     Destructive REMOVE (alters second argument).
DESETQ        any#    "Destructuring" SETQ.
DFLOATP       1       T if argument is a double-float, else NIL.
DIFFERENCE    any#    Difference of all arguments (a - b - c - ...)
DIGIT-CHAR-P  1-2     The numeric weight of arg1 as a digit, else NIL.
DO, DO*       any#    Various kinds of iteration.
DOLIST        2-any#  Iterates over a list.
DOTIMES       2-any#  Iterates over a sequence of integers.
EBCDIC        1-2     Takes fixnum and returns EBCDIC character.
ECHO          1-3     Sets input file arg1 to echo to output file arg2.
ED            0-1     Edits a file or a function definition under ISPF.
END           0       Indicates end of input to compiler or interpreter.
ENDP          1       T if arg is empty list, false if non-empty list.
ENDREAD       0-1     Forces end of current record of input file.
EOF           0-1     T if end of file reached on input file, else NIL.
EQ            2       T if arguments identical (same addr), else NIL.
EQL           2       T if args have same type and contents, else NIL.
EQUAL         2       T if arguments have same structure, else NIL.
EQUALP        2       T if 2 arguments are similar, else NIL.
ERROR         0-any#  Prints error message and throws to tag NIL.
EVAL          1-2     Evaluates argument.
EVAL-WHEN     any#    Evaluates in specific env. (compile/load/eval)
EVENP         1       T if integer is divisible by 2, else NIL.
EVERY         2-any#  T if every application of arg1 to lists is true.
EXIT          0-1     Terminates ZIL program, with optional return code.
EXP           2       E to the arg1'th power.
EXPLODE       1       (EXPLODE "abc") ===> (|"| |a| |b| |c| |"|)
EXPLODEC      1       (EXPLODEC "abc") ===> (|a| |b| |c|)
EXPLODEN      1       (EXPLODEN "abc") ===> (129 130 131)
EXPT          2       Arg 1 to power of arg 2.
FBOUNDP       1       T is symbol has a function definition, else NIL.
FEATUREP      1       T if arg 1 is a "feature", else NIL.
FEXPAND       1       Performs complete macro expansion of a form.
FIRSTN        2       List of the first arg1 elements of list arg2.
FIX           1       Converts floating point arg 1 to integer.
FIXNUMP       1       T if argument is a fixnum, else NIL.
FIXP          1       T if argument is a fixnum or bignum, else NIL.
FLATC         1       Returns number of chars in object when PRINC'd.
FLATSIZE      1       Returns number of chars in object when PRIN1'd.
FLOAT         1-2     Converts integer arg 1 to floating point.
FLOATP        1       T if argument is a floating point atom, else NIL.
FLOOR         1-2     Converts floating point to integer.
FMAKUNBOUND   1       "Undefines" a function.
FORMAT        2-any#  Formats and/or prints messages with variable data.
FUNARGP       1       T if arg is an interpreted closure (see FUNCTION).
FUNCALL       1-any#  Applies function arg 1 to other args.
FUNCTION      1       Creates an interpreted lexical closure (funarg).
GC            0       Causes a garbage collection.
GCD           0-any   Greatest common denominator of its args.
GCMSG         1       Sets display of garbage collection messages.
GCTIME        0       Returns total garbage collection time in millisec.
GENSYM        0-1     Returns a unique uninterned symbol.
GENTEMP       0-1     Returns a unique interned symbol.
GET           2-3     Returns property value of arg 1's indicator arg 2.
GETCHAR       2       Returns arg2'th character of arg1 as symbol.
GETCHARN      2       Returns arg2'th character of arg1 as fixnum.
GETL          2       Returns subplist of arg1 whose CAR is in list arg2
GETPARM       0-2     Makes an atom out of PARM field passed to program.
GO            1       Used in PROG: branches to label arg 1.
GREATERP      2       T if argument 1 is greater than arg 2, else NIL.
HAIPART       2       An integer from the high-order arg2 bits of arg1.
HAULONG       1       Number of significant bits in integer abs(arg1).
HELP          0-2     Obtain on-line help info from ZIL documentation.
IF            any#    (IF A B C) = (COND (A B) (T C))
IFILEP        1       T if specified input file exists, else NIL.
IMPLODE       1       (IMPLODE '(A B C)) ===> ABC (interned symbol)
INCF          1-2     Increments arg 1 by arg 2 (default 1).
INCLUDE       1       Includes executable code from dataset arg 1.
INCLUDEF      1       Includes executable code from dataset arg 1.
INTEGER-LENGTH 1      Number of significant bits in integer arg1.
INTEGERP      1       T if argument is a fixnum or bignum, else NIL.
INTERSECTION  2       Set intersection of two lists using EQL test.
INTRQ         2       Set intersection of two lists using EQ test.
INVOKE        1 2     Calls program arg1 with parameter string arg2.
LAST          1       (LAST '(A B C)) ===> (C)
LDIFF         2       List of elements of a list not in a sublist of it.
LENGTH        1       (LENGTH '(A B (C1 C2) D)) ===> 3
LESSP         2       T if argument 1 is less than argument 2, else NIL.
LET, LET*     any#    Sets up local variables and evaluates arguments.
LIST          any#    (LIST 'A 'B 'C) ===> (A B C)
LIST*         any#    (LIST* 'A 'B 'C) ===> (A B . C)
LISTIFY       0-1     Returns a list of arguments to a LEXPR.
LISTP         1       T if arg is NIL, a list or dotted pair, else NIL.
LOAD          1-any#  Read-eval-prints a dataset into ZIL environment.
LOCALLY       any#    Associates declarations with forms to evaluate.
LOG           1-2     Logarithm of arg1 to base arg2 (default base E).
LOGAND        any#    Logical AND of all its arguments.
LOGBITP       2       T if the arg1'th bit of arg2 is 1, else NIL.
LOGCOUNT      1       Number of 1-bits in integer (# of 0-bits if neg).
LOGIOR        any#    Logical inclusive OR of all its arguments.
LOGNOT        1       Logical complement (NOT) of its argument.
LOGTEST       2       T if any of arg1's 1-bits are 1 in arg2, else NIL.
LOGXOR        any#    Logical exclusive OR of all its arguments.
LOOP          any#    Various kinds of iteration.
LSH           2       Logical shift left (right if neg) of arg1 by arg2.
MACROEXPAND   1       Expands a macro call repeatedly.
MACROEXPAND-1 1       Expands a macro call once.
MAKNAM        1-3     (MAKNAM '(A B C)) ===> ABC (uninterned symbol)
MAKUNBOUND    1       "Undefines" a variable.
MAPAND        2-any#  AND of all applies of arg 1 to elements of arg 2-n
MAPC          2-any#  Applies function arg 1 to all elements of arg 2-n.
MAPCAN        2-any#  Like MAPCAR but NCONC's all the results together.
MAPCAR        2-any#  Like MAPC but returns list of all the results.
MAPCON        2-any#  Like MAPLIST but NCONC's all the results together.
MAPL          2-any#  Applies function arg 1 to all sublists of arg 2-n.
MAPLIST       2-any#  Like MAPL but returns list of all the results.
MAPOR         2-any#  OR of all applies of arg 1 to elements of arg 2-n.
MAX           1-any#  Returns the greatest of its arguments.
MEMBER        2       (MEMBER '2 '(1 2 3)) ===> (2 3)
MEMQ          2       (MEMQ 'B '(A B C)) ===> (B C)
MIN           1-any#  Returns the smallest of its arguments.
MINUS         1       Returns the argument times -1.
MINUSP        1       T if atom is negative, else NIL.
MKATOM        1-3     Makes an atom (symbol or number) out of arg1.
MKLIST        1-2     Makes a list of (arg 1) elements.
MKVECTOR      1-2     Makes a vector of (arg 1) elements.
MSGLEVEL      0-1     Returns or sets current message level.
MULTIPLE-VALUE-BIND   Binds args to multiple values and executes body.
MULTIPLE-VALUE-CALL   Calls function with all values of forms passed.
MULTIPLE-VALUE-LIST   Returns list of multiple values of form.
MULTIPLE-VALUE-PROG1  Like PROG1 but passes multiple values through.
MULTIPLE-VALUE-SETQ   Sets variables to multiple values of a form.
NCONC         any#    Destructive APPEND (alters its arguments).
NCONS         1       (NCONS FOO) <=> (CONS FOO NIL)
NEQ           2       (NEQ A B) <=> (NOT (EQ A B))
NEWLINEP      0-1     T if end of line reached on input file, else NIL.
NOT           1       T if argument is NIL, else NIL.
NOTANY        2-any#  T if all applications of arg1 to lists are false.
NOTEVERY      2-any#  T if some application of arg1 to lists is false.
NRECONC       2       (NRECONC X Y) is same as (NCONC (NREVERSE X) Y).
NREVERSE      1       Destructive REVERSE (alters its argument).
NTH           2       The "n'th" element of a list, counting from zero.
NTHCDR        2       The "n'th" sublist of a list, counting from zero.
NULL          1       Same as NOT.
NUMBERP       1       T if argument is fixnum/flonum/bignum, else NIL.
OBLIST        0       Returns the object list of all interned symbols.
ODDP          1       NIL if integer is divisible by 2, else T.
OFF           1       Removes an AT tracing breakpoint.
OFILEP        1       T if specified output file exists, else NIL.
OK            any#    Returns T if args evaluate without error, else NIL
OPEN          1-2     Takes a dsname, opens it, returns a file.
OR            any#    Returns first non-NIL argument or NIL.
PAIRLIS       2-3     Add pairs from arg1 and arg2 onto alist arg3.
PBIND         1       Returns contents of value/binding cell of symbol.
PEEK          1       Returns word from memory using arg 1 as pointer.
PEEKB         1       Returns byte from memory using arg 1 as pointer.
PEEKC         1-2     Returns char from memory using arg 1 as pointer.
PEEKCH        0-3     Like READCH but does not update character pointer.
PEEKL         2-3     Invokes PEEKC to build list of chars from memory.
PLIST         1       Same as SYMBOL-PLIST.
PLUS          any#    Sum of all arguments.
PLUSP         1       T if atom is positive, else NIL.
PM            1-2     Pretty-prints the macro expansion of its arg.
PM1           1-2     Pretty-prints the macro expansion of its arg.
PNAME         1       Same as SYMBOL-NAME.
POP           1-2     Removes object from front of list and returns it.
PP            any#    Pretty-prints a function definition.
PPDATE        0-1     A string containing formatted date.
PPRINT        1-2     Pretty-prints a LISP object.
PPTIME        0-1     A string containing formatted time.
PRINC         1-2     Prints arg 1 as is to output file, no TERPRI.
PRINC-TO-STRING 1     PRINC's arg 1 into a string.
PRINT         1-2     Prints arg 1 "readably" to output file & TERPRI's.
PRINTC        1-2     Prints arg 1 as is to output file and TERPRI's.
PRINTS        1-1     Prints arg 1 into a string.
PRIN1         1-2     Prints arg 1 "readably" to output file, no TERPRI.
PRIN1-TO-STRING 1     PRIN1's arg 1 into a string.
PROBE-FILE    1       Same as PROBEF.
PROBEF        1       Returns arg1 if it's an existing dsname, else NIL.
PROG          any#    Has arg list, labels, GO and RETURN statements.
PROGN         any#    Evaluates all arguments, returns the last.
PROGV         any#    Evaluates body with vars specified at runtime.
PROG1         any#    Evaluates all arguments, returns the first.
PROG2         any#    Evaluates all arguments, returns the second.
PSETQ         any#    Assigns values to local variables in parallel.
PUSH          2       Sets arg2 to (CONS list1 arg2).
PUSHNEW       2-any#  PUSHes arg 1 onto list arg 2 if not already there.
PUTDATA       any#    Displays values of LISP forms for debugging.
PUTPROP       3       Assigns arg 2 as value of property arg 3 to arg 1.
QUIT          0-1     Forces EOF on input file; ends the interpreter.
QUOTE         1       Returns argument 1 unevaluated.
QUOTIENT      any#    Quotient of all arguments (a / b / c / ...)
RANDOM        0-1     Returns a random fixnum or flonum between 0 & arg1
READ          0-2     Returns S-expression from input file.
READ-EVAL-PRINT 0-3   Read-eval-print loop over an entire input file.
READCH        0-3     Returns a single character from input file.
READLINE      0-1     Returns a line from input file as a string.
REMAINDER     any#    Remainder of all arguments (a // b // c // ...)
REMOVE        2-3     (REMOVE '2 '(1 2 2 3 4 5)) ===> (1 3 4 5)
REMOVE-DUPLICATES 1   (REMOVE-DUPLICATES '(F O O B A R)) ==> (F O B A R)
REMPROP       2       Removes property arg 2 from arg 1.
REMQ          2-3     (REMQ   'O '(F O O B A R)) ===> (F B A R)
RETURN        0-1     Exits from PROG with evaluated arg 1 as value.
RETURN-FROM   1-2     Exits from BLOCK of matching name with a value.
REVAPPEND     2       (REVAPPEND X Y) is same as (APPEND (REVERSE X) Y).
REVERSALL     1       (REVERSALL '(A (B C) D)) ===> (D (C B) A)
REVERSE       1       (REVERSE  '(A (B C) D)) ===> (D (B C) A)
ROT           2       Bitwise rotate of fixnum arg1 by arg2.
ROUND         1-2     Argument rounded to the nearest integer.
RPLACA        2       Replaces the CAR of arg 1 with arg 2.
RPLACD        2       Replaces the CDR of arg 1 with arg 2.
RUNTIME       0       Returns session CPU time in milliseconds.
SCRSIZE       0       Current terminal number of rows and # of columns.
SET           2       Assigns argument 2 to local variable argument 1.
SETABEND      1       Controls whether ABENDS are to terminate ZIL.
SETARG        2       Replaces arguments of a LEXPR.
SETATTN       1       Controls whether attentions are to terminate ZIL.
SETBRACK      2-3     Controls how square brackets are printed.
SETDEBUG      1       Control debugging mode.
SETF          any#    Various kinds of assignments or alterations.
SETFEAT       1       Makes argument 1 a "feature".
SETNFEAT      1       Makes argument 1 NOT a "feature".
SETPLIST      2       Sets the property list of arg 1 to arg 2.
SETQ          any#    Assigns values to local variables sequentially.
SFLOATP       1       T if argument is a single-float, else NIL.
SIN           1       Sine of arg1.
SLEEP         1       Puts ZIL in wait state for specified # of seconds.
SOME          2-any#  True if some application of arg1 to lists is true.
SORT          1-2     Sorts list arg1 by function arg2, makes new list.
SORTCAR       1-2     Sorts list arg1 by comparing CAR's using fun arg2.
SPECIAL-ALIST 0       Returns current SPECIAL variable binding env.
SQRT          1       Square root of arg1.
STRING-APPEND any#    Makes a string out of a bunch of other strings.
STRING-APPENDL 1      Makes a string out of a list of other strings.
STRING-CAPITALIZE 1   Capitalizes words in a string.
STRING-DOWNCASE 1     Translates a string to all lowercase.
STRING-INDEX  2-3     (STRING-INDEX "foobar" "bar") ===> 4 (like PL/1)
STRING-LEFT-TRIM 2    Trims characters from arg1 off beginning of arg2.
STRING-LENGTH 1       Returns the length of a string.
STRING-REMOVE 2       Returns a string like arg2 but without arg1 chars.
STRING-REVERSE 1      Reverses a string.
STRING-RIGHT-TRIM 2   Trims characters from arg1 off the end of arg2.
STRING-SCAN   1-7     Converts a string into a list of tokens.
STRING-SUBSTR 1-3     (STRING-SUBSTR "foobar" 2 3) ===> "oob"
STRING-TRANSLATE 3    Translates a string from some chars to others.
STRING-TRIM   2       Trims characters from arg1 from both ends of arg2.
STRING-UPCASE 1       Translates a string to all uppercase.
STRING-VERIFY 2-3     (STRING-VERIFY "123X4" "12345") ===> 4 (like PL/1)
STRING        1       Takes string, symbol or fixnum and returns string.
STRINGP       1       T if arg 1 is a string, else NIL.
STRUCTP       1       T if arg 1 is a structure, else NIL.
STRUCTURE     any#    (STRUCTURE 'A 'B ...) makes a structure of type A.
SUBLIS        2       Executes SUBST using elements of association list.
SUBLISQ       2       Like SUBLIS but uses EQ test instead of EQL.
SUBRP         1       T is arg is a compiled code SUBR object, else NIL.
SUBST         3       (SUBST '1 '2 '(1 2 3)) ===> (1 1 3)
SUBSTQ        3       (SUBSTQ 'A 'B '(A B C)) ===> (A A C)
SUB1          1       Difference of argument - 1.
SXHASH        1       The unique hash code for argument 1.
SYMBOL-NAME   1       Returns symbol's print name string.
SYMBOL-PLIST  1       Returns symbol's property list.
SYMBOLP       1       T if argument is a symbol, else NIL.
SYMEVAL       1-2     EVAL for dynamically bound atoms only.
TABS          1-2     Sets tabs mode on or off in output file arg2.
TAGBODY       any#    Evaluate forms with tags (labels) you can GO to.
TAN           1       Tangent of arg1.
TERPRI        0-1     Forces new line on output file.
THROW         2       Exits to CATCH that had tag arg1, returning arg2.
TIME          any#    Displays CPU time used in evaluating forms.
TIMES         any#    Product of all arguments.
TOSTRING      1-2     Coerces arg 1 to a string.
TRACE         any#    Activates tracing for selected functions.
TRUNCATE      1-2     Converts floating point to integer.
TSO           any#    Executes argument(s) as TSO command or CLIST.
TTAB          1-2     Sets output file column to (arg 1 + 1).
TYI           0-3     Reads a character from a file, returned as fixnum.
TYIPEEK       0-4     Like TYI but does not update character pointer.
TYO           1-2     Outputs character represented by fixnum arg2.
TYPEP         1-2     Returns type of arg1, or T if arg1 is type arg2.
UCONCAT       any#    (UCONCAT 'FOO 'BAR) ==> FOOBAR;uninterned symbol.
UNEBCDIC      1       Takes EBCDIC character and returns fixnum.
UNION         2       Set union of two lists.  Uses EQL test.
UNIONQ        2       Set union of two lists.  Uses EQ test.
UNLESS        2-any#  If arg 1 is NIL, evaluates all the other args.
UNTRACE       0-any#  Deactivates tracing for all or selected functions.
UNTYI         1-3     "Unreads" a character from a file read by TYI.
UNWIND-PROTECT 1-any# Evaluates arg1 and forces execution of other args.
UNWORD        1       Converts a 4-character symbol to a fixnum.
USERID        0       A string containing your TSO userid.
VALUES        any#    Returns any number of multiple values.
VALUES-LIST   1       Returns the elements of a list as multiple values.
VCOPY         1       Copies a vector or structure.
VECP          1       T if arg 1 is a vector, structure or funarg.
VECTOR        any#    (VECTOR 'A 'B) makes a vector with elements A, B.
VECTORP       1       T if arg 1 is a vector, else NIL.
VFILL         2       Sets all elements of vector arg1 to arg2.
VLENGTH       1       Number of elements (dimension) of a vector.
VLIST         1       Makes a list out of a vector.
VREF          2       Extracts an element from a vector.
VSET          3       Updates an element of a vector.
WARN          1-any#  Prints warning message.
WHEN          2-any#  If arg 1 is not NIL, evaluates all the other args.
WITH-OPEN-FILE any#   Opens a file, executes forms, closes the file.
WORD          1-2     Converts a fixnum to a 4-character symbol.
XCONS         2       (XCONS A B) <=> (CONS B A)
XTAB          1-2     Increments output file column by arg 1.
ZEROP         1       T if atom is zero, else NIL.
ZGETFPI       0-1     Returns current column in input file.
ZGETFPO       0-1     Returns current column in output file.
ZPUTFPI       1-2     Sets current column to arg 1 in input file.
ZPUTFPO       1-2     Sets current column to arg 1 in output file.
1+            1       Same as ADD1
1-            1       Same as SUB1.
