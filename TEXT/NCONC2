
Function: NCONC2

Syntax:   (NCONC2 arg1 arg2)

 arg1 (required, evaluated) - a proper list.
 arg2 (required, evaluated) - any LISP object, but generally a list.

Returns:

 A list consisting of the elements of arg1 followed by the elements of
 arg2.

Processing:

 If arg1 is NIL, arg2 is returned.  Otherwise, arg1 is destructively
 altered; arg2 is RPLACD'd onto the last CAR of arg1.

 If arg2 is atomic, a list ending in a dotted pair will result.

 Compare APPEND2, which makes a copy of its first argument.

Errors signaled:

 Argument 1 not a proper list.

Notes:

 NCONC2 is the two-argument form of NCONC, used to implement calls to
 NCONC in most compiled code.

 As with all the "destructive" functions, NCONC2 should not be used
 on an in-line compiled list, i.e. a list derived from compiling the
 construct (QUOTE (form1 form2 ...)).  This will cause further
 references to the in-line constant list to be incorrect.

 Do not depend upon NCONC2's altering of the first argument if the
 first argument may be NIL.  Use SETQ to insure updating of the
 first argument, as follows:

  (SETQ X (NCONC2 X Y))

Examples:

 (NCONC2 NIL NIL)            ==> NIL
 (NCONC2 NIL '(A B C))       ==> (A B C)
 (NCONC2 '(A B C) NIL)       ==> (A B C)
 (NCONC2 '(A) '(B))          ==> (A B)
 (NCONC2 '(A) 'B)            ==> (A . B)
 (NCONC2 '(A B) '(C D))      ==> (A B C D)
 (NCONC2 '(A B C) 'D)        ==> (A B C . D)

;The following shows how the list is altered by NCONC2.

 (SETQ X '(A B C))           ==> (A B C)
 X                           ==> (A B C)
 (SETQ Y (NCONC2 X '(D E)))  ==> (A B C D E)
 X                           ==> (A B C D E)
 Y                           ==> (A B C D E)
 (EQ X Y)                    ==> T

;The following shows how the second argument to NCONC2 is not copied.

 (SETQ X '(A))               ==> (A)
 (SETQ Y '(B C))             ==> (B C)
 (SETQ Z (NCONC2 X Y))       ==> (A B C)
 (EQ (CDR Z) Y)              ==> T

