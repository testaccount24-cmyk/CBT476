
Function: SET

Syntax:   (SET var1 val2)

 var1 (required, evaluated) - a symbol.
 val2 (required, evaluated) - any LISP object.

Returns:

 val2, after the variable specified by var1 has been bound
 to the value specified by val2.

Processing:

 SET performs a similar function to SETQ, except that the first
 argument is evaluated (it must return a valid symbol).

 The current dynamic (SPECIAL) binding of the variable specified by the
 first argument is altered to refer to the (evaluated) second argument;
 in other words, the "value" of var1 is set to val2.

 This is NOT a new binding; the previous binding is not saved but
 is overlaid.

 If the variable is not currently bound, a global binding is created
 using the specifed value.

 The symbol may not be self-evaluating (NIL, T or a keyword).

 SET does not affect lexical (non-SPECIAL) bindings.

Errors signaled:

 Invalid first argument.

Notes:

 SET is rarely used; SETQ is the usual assignment function for
 local variables.

 The extent of a local SET assignment is limited to the extent of the
 binding itself; when the binding disappears, the SET assignment also
 disappears.  If a previous binding of the variable was "shadowed" by
 the other, the previous binding is "uncovered" in the same way as if
 the SET had never been issued.  A SET assignment to a globally bound
 variable affects the global binding.

 Although SET assigns a dynamic binding to a variable, it does not
 automatically cause that variable to become globally declared
 SPECIAL.

Examples:

 (let ((a 'z))
      (setq a 'Z)             ; This sets local value of A.
      (set 'a 'set-quote-a)   ; This sets global value of A.
      (set a  'set-a)         ; This sets global value of Z.
      a)              ==> Z
 A                    ==> SET-QUOTE-A
 Z                    ==> SET-A

