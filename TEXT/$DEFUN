
The DEFUN function is the basic function-defining technique.
Note that in a compiled program or function, it does not generate
executable code to perform the DEFUN a la interpretive mode,
but causes a compiled function to be created.  For that reason,
it must occur at top level in compiled code.


In the interpretive environment, you can define EXPR's, FEXPR's,
LEXPR's, or MACRO's on the fly (EXPR is the default format).

In a compiled PROGRAM or FUNCTION, you can define EXPR's or MACRO's.
EXPR's become part of the compiled code as SUBR's; MACRO's become
known to the compiler so that they can be expanded when they are
encountered in the source code. FEXPR's are not supported
by the compiler; neither are direct calls to FEXPR's or LEXPR's,
although LEXPR's may be invoked via APPLY.

In a compiled MODULE, all kinds of DEFUN's are permitted.  However,
FEXPR's are converted by the compiler into equivalent MACRO definitions
that are available at both compile time and run time.

The default function type is EXPR.


In the following descriptions, "func" is the name given to the function
being defined, "var1"..."varn" are symbols that represent variables
which are bound at function evaluation time, and the forms "form1",
"form2", etc., constitute the body of the function, which is evaluated
under the binding environment established in accordance with the other
operands.


To define an EXPR...


(DEFUN func (var1 var2 ... varn) (form1) (form2) ... (formn))

or

(DEFUN func EXPR (var1 var2 ... varn) (form1) (form2) ... (formn))

which are equivalent, and create an EXPR named "func" (under the
interpreter) or define a SUBR named "func" to the compiler.  Each
"varn" is evaluated and bound to the corresponding parameter in the
invocation of the function.

Any number of "varn"'s, including none, can be specified.

"Lambda list keywords" like &OPTIONAL, &REST, &AUX and &KEY can be
embedded in the argument list (see member LAMBDA of this documentation
for more information).

"varn"'s must be symbols that do not normally evaluate to themselves,
or lists (destructuring templates) of valid variable names.
In other words, T and symbols whose print names begin with colons
are not legal variable names.  Note that NIL is permissible as a
stand-in for an unused argument.  This interpretation is consistent
with lambda-list destructuring, where the argument is destructured
into the empty list (i.e. no variables inherit a value from that
actual parameter).

Special case:  If the argument list is a single non-null symbol,
 this is a definition of a LEXPR, in which case the symbol is bound
 to the number of arguments passed, and the (evaluated) arguments
 themselves are accessible via the ARG function.

In addition to Common LISP features, the following features of lambda
lists are supported by both the interpreter and the compiler, for DEFUNs
and DEFMACROs:

* Destructuring arguments (e.g. (LAMBDA ((A B) (C . D)) ...))

* LEXPR definitions

The following are not supported in ZIL at this time:

 &WHOLE, &ENV


To define a FEXPR...


(DEFUN func FEXPR (firstvar alistvar) (form1) (form2) ... (formn))

which is valid only under the interpreter (in general) and creates a
FEXPR, where "firstvar" is bound to the list of (unevaluated) arguments
and "alistvar" becomes bound to the current evaluation environment
(which contains the variable bindings in effect when the function is
invoked - this provides a dynamic rather than a lexical evaluation
environment if it is referenced).  You would use the environment
argument to pass to EVAL if you want to evaluate some of your
arguments, since arguments to FEXPR's are not evaluated.

Although "firstvar" is required, "alistvar" is optional.

If "alistvar" is omitted, a dummy second argument is generated
internally in the function definition, which cannot be referenced
in the body of the FEXPR.

"&-keywords" are not valid in the argument list of a FEXPR.


To define a MACRO...


(DEFUN func MACRO (var) (form))

which creates a MACRO (under the interpreter) or defines a MACRO to
the compiler (the compiler will expand macro calls and compile
the expanded code as if you had coded it directly).  "var" is bound
to the entire macro call form; the CAR of it is the macro name, and
the CDR of it is the list of (unevaluated) arguments.

Exactly one argument "var" must be specified.

(Note: DEFMACRO, which is implemented as a macro that expands into
       a DEFUN, may also be used to define macros.  See the DEFMACRO
       documentation member for more info.)


Note that for all uses of DEFUN, any number of "formn"'s may be
specified, as long as at least one form is present.  Only the last
one, however, returns a value to the caller of the function; the
others are evaluated for their "side effects" only.  This is known
as an "implicit PROGN".


Examples:

(DEFUN FIRST (X) (CAR X))

If you type (FIRST FOO), X will be bound to the value of FOO.

(DEFUN FIRST FEXPR (X A) (CAR (EVAL (CAR X) A)))

If you type (FIRST FOO), X will be bound to the list (FOO).

(DEFUN FIRST MACRO (X) (LIST 'CAR (CADR X)))

If you type (FIRST FOO), X will be bound to the list (FOO) and
the macro will expand to:

   (CAR FOO)

This will be evaluated in turn.

(Note: (DEFMACRO FIRST (A) (LIST 'CAR A))
       produces the same result as (DEFUN FIRST MACRO ... ) above.)

Note that all of the above will return the same value - namely,
the CAR of the object currently bound to the symbol FOO.


 LEXPR's - these are functions which are defined like EXPR's, except
           that the argument list is not a list but a symbol (other
           than NIL), which is bound to the number of (evaluated)
           arguments passed to the function.  The arguments themselves
           may be extracted via the ARG special form.


 The syntax (DEFUN (funcname fprop) ...) tells the interpreter to
 take the body of the function (wrapped in the appropriate LAMBDA)
 and make it the "fprop" property of the "funcname" symbol.  The
 compiler supports this syntax only if you are compiling a MODULE.


 Default arguments for &OPTIONAL values, and predicates telling
 whether an argument was supplied, may be specified on a DEFUN
 lambda list.  For example:

    (DEFUN FOO (A &OPTIONAL (B 'BAR) (C 'BAZ C-SUPPLIED-P))

 sets arg B to BAR if it was omitted; sets args C to BAZ and
 C-SUPPLIED-P to NIL if C was omitted.  If a value for arg C was
 given on a call to FOO, C-SUPPLIED-P is bound to T.


 Destructuring of arguments...e.g. (DEFUN FOO ((A B) C) ...)
 results in the first argument in a call to FOO being "destructured"
 into args A and B, i.e. the CAR goes into A and the CADR goes into B.
 This works equally well with dotted pairs, and the destructuring may
 be nested.

 Note:  Destructuring and all the other lambda-list features are also
        available on DEFMACRO.


