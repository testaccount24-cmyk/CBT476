
Special Form: THROW

Syntax:   (THROW arg1 arg2)

 arg1 (required, evaluated) - any LISP object, but usually a symbol.
 arg2 (required, evaluated) - any LISP object.

Returns:

 arg2, but not to the caller.  THROW causes control to pass back to the
 most recently established CATCH that specified a tag EQ to arg1.

Processing:

 arg1 is the "tag"; both arguments are evaluated.  The stack is then
 searched for a catch frame containing a tag EQ to arg1.  When one is
 found, control passes to the end of the CATCH and arg2 from THROW is
 returned as the value of the CATCH.

 If no catch frame is found with a matching tag, an error is signalled.
 Since the signalling of an error causes a THROW to NIL, a CATCH with
 a tag of NIL will catch such a THROW if one exists.

 The catch frame stacked by CATCH is removed when the forms evaluation
 is complete (or when a THROW occurs).  This frame is used to store the
 current state of the ZIL environment, including the current variable
 binding environment; thus, variable bindings are restored to the status
 they possessed upon entry to the CATCH function.

 If there are pending UNWIND-PROTECT cleanup forms, these forms are
 executed before control is returned to the end of the CATCH.  If
 a THROW or error occurs during execution of one of these cleanup
 forms, it is NOT protected by the same CATCH.

 A THROW may catch only a THROW to a tag that matches via EQ.
 Thus, the tag is generally a symbol, though it does not have to be.

 A THROW may occur in one of the following ways:

 (1) Directly via the THROW function.

 (2) When an error is signalled, either by the ERROR function or by a
     ZIL primitive (assembler language level function), which results
     in a THROW to tag NIL.

 (3) When an attention interrupt is caused by the terminal user pressing
     the PA1 key (or equivalent), which results in a THROW to tag T.

 Thus, a CATCH with a tag of NIL will "capture" all standard
 signalled errors; a CATCH with a tag of T will catch attention
 interruptions.

 If no CATCH is active for a tag of NIL, this is considered to be a
 fatal error and the ZIL program is abended with a user code.  If the
 error message issued by the module calling THROW begins with the
 characters ZILnnnn, where nnnn is a 4-digit number between 0001 and
 4095, that number is used as the user abend code; otherwise a user
 abend code of zero is issued.

 Thus, a THROW to any tag when no CATCH exists either for that tag
 or for NIL will result in the abending of the ZIL program.

Errors signaled:

 No CATCH found with specified tag.

Notes:

Examples:

 See CATCH for examples.

