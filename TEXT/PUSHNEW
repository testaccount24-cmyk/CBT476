
Macro: PUSHNEW

Syntax:   (PUSHNEW item place2 &rest keywords)

 item1  (required, evaluated) - any LISP object.
 place2 (required           ) - a form acceptable to SETF which
                                evaluates to a list.

Returns:

 place2, after item1 has been CONSed to the front of it if it is not
 already a member of place2.

Processing:

 place2 is typically a variable, but in general is any form acceptable
 as the first argument to SETF.
 If item1 is already a member of the list which is the value of place2,
 place2 is returned unaltered.  Otherwise, item1 is CONSed onto the
 front of the list specified by place2, and the augmented list is stored
 back into place2 and returned as the value.

 The member test is determined by the keywords, if any, specified on
 the call to PUSHNEW (using Common LISP keyword syntax).
 The valid keywords are:

 :TEST   -  must be #'EQ, #'EQL or #'EQUAL
 :KEY    -  must be #'CAR

 Both are optional.  If :TEST is omitted, the default is #'EQL.

 The test is performed by one of the MEMBER functions if the :KEY
 keyword is omitted; by one of the ASSOC functions if the :KEY
 keyword is specified as #'CAR (or 'CAR).

 The MEMBER functions are:  MEMQ      for :TEST #'EQ    (or 'EQ)
                            MEMQL     for :TEST #'EQL   (or 'EQL)
                            MEMQUAL   for :TEST #'EQUAL (or 'EQUAL)

 The ASSOC  functions are:  ASSQ      for :TEST #'EQ    (or 'EQ)
                            ASSQL     for :TEST #'EQL   (or 'EQL)
                            ASSQUAL   for :TEST #'EQUAL (or 'EQUAL)

 If an ASSOC function is used, the CAR of item1 is compared with the
 CAR of each member of place2.  Otherwise, item1 is compared with
 each member of place2.

Errors signaled:

 Invalid keyword specification.
 Unsupported value for keyword.

Notes:

 Compare ADJOIN, which is similar but does not SETF the second arg,
 just returns a CONS of arg1 and arg2.

 Conceptually, this is an operation which adds an element to a set.
 Compare PUSH and POP.

 At the present time, the macro expansion does not guarantee 100%
 clean one-time evaluation of the second argument.  Thus, if you
 code something like

  (PUSHNEW 'a (GET (foo) (bar)))

 (which expands into some stuff), (foo) and (bar) may be
 evaluated twice each.  This may be fixed some day; if it is,
 you may or may not be informed of the upgrade.

Examples:

 (SETQ A NIL)           ==> NIL
 (PUSHNEW 'FOO A)       ==> (FOO)
 (PUSHNEW 'BAR A)       ==> (BAR FOO)
 (PUSHNEW 'FOO A)       ==> (BAR FOO)
 (PUSHNEW 'BAR A)       ==> (BAR FOO)
 (PUSHNEW 'BAZ A)       ==> (BAZ BAR FOO)
 A                      ==> (BAZ BAR FOO)

 (PUTPROP 'A '(V) 'P)         ==> (V)
 (GET 'A 'P)                  ==> (V)
 (PUSHNEW 'W (GET 'A 'P))     ==> (W V)
 (GET 'A 'P)                  ==> (W V)

 (SETQ X NIL)                       ==> NIL
 (PUSHNEW '(A . 1) X :KEY #'CAR)    ==> ((A . 1))
 (PUSHNEW '(B . 2) X :KEY #'CAR)    ==> ((B . 2) (A . 1))
 (PUSHNEW '(A . 3) X :KEY #'CAR)    ==> ((B . 2) (A . 1))
 X                                  ==> ((B . 2) (A . 1))

 (SETQ A NIL)                ==> NIL
 (PUSHNEW 1.0 A)             ==> (1.0)
 (PUSHNEW 2.0 A)             ==> (2.0 1.0)
 (PUSHNEW 1.0 A)             ==> (2.0 1.0)
 (PUSHNEW 1.0 A :TEST #'EQ)  ==> (1.0 2.0 1.0)
 (PUSHNEW 2.0 A :TEST #'EQL) ==> (1.0 2.0 1.0)
 (PUSHNEW 2.0 A :TEST #'EQ)  ==> (2.0 1.0 2.0 1.0)
 A                           ==> (2.0 1.0 2.0 1.0)

