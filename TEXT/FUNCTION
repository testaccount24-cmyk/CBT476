
Special Form: FUNCTION

Syntax:   (FUNCTION arg1)

 arg1 (required, not evaluated) - a symbol or LAMBDA-expression.

Returns:

 Under the compiler:

 A compiled-code closure object, built from arg1 (the function) and the
 current evaluation environment.  CLOSUREP is true of this object.

 Under the interpreter:

 An interpreted lexical closure object (known in ZIL as a funarg), built
 from arg1 (the function) and the current evaluation environment.
 FUNARGP is true of this object.

Processing:

 The current evaluation environment is obtained and used, together
 with arg1, to build a compiled-code closure object (in compiled code),
 or a funarg object (under the interpreter).  This expression defines a
 closure when it occurs in a position where a function name or
 LAMBDA-expression is expected, including:

  The CAR of a form to be evaluated by EVAL.
  The first argument of the FUNCALL or APPLY function.
  The first argument of a mapping function (MAPCAR, MAPC, etc.).

 A closure is an instance of a function invocation with its own
 "local" binding environment, independent of the environment under
 which the function invocation occurs.  This implements non-local
 "lexical scoping".

Errors signaled:

 Invalid function name (not a symbol or a valid LAMBDA or LABEL expr).
 Function name is a macro or a special form.

 Note that these errors may not be signalled until the function is
 actually used, depending on the implementation.

Notes:

 The reader macro call #'x expands into (FUNCTION x), e.g.:

  #'FOO                   --> (FUNCTION FOO)
  #'(LAMBDA (X) (FOO X))  --> (FUNCTION (LAMBDA (X) (FOO X)))

 See $MAP for information pertaining to the use of FUNCTION and QUOTE
 in the mapping functions.

