
Function: SETQ

Syntax:   (SETQ &rest args)

 args occur in pairs: arg1 and arg2.

 arg1 (required, not evaluated) - a symbol.
 arg2 (required, evaluated) - any LISP object.

Returns:

 The last argument, after the variable specified by the first argument
 of each pair has been bound to the value specified by the second
 argument of the pair.

Processing:

 For each consecutive pair of arguments, the current binding of the
 variable specified by the first argument is altered to refer to the
 (evaluated) second argument; in other words, the "value" of arg1 is set
 to arg2.

 This is NOT a new binding; the previous binding is not saved but
 is overlaid.

 In the interpretive environment, or in a compiled MODULE, if the
 variable is not currently bound, a warning message is issued and a
 DEFVAR is issued to create a globally bound variable and set its value.
 The same situation would cause a run-time error in a compiled code
 FUNCTION or PROGRAM.

 The symbol may not be NIL or T.

 The bindings occur sequentially, meaning that each variable is
 bound to its value before the next value is determined.
 Compare PSETQ, where all the values are extracted before any
 assignments are done.

Errors signaled:

 Invalid syntax (an even number of arguments required).
 Invalid first argument.

Notes:

 Although SETQ may be used on lambda-list variables, this use is not
 common; SETQ is primarily useful in PROG's to act in the way that
 normal variables do in conventional programming languages.

 SETQ is supposed to be used only on variables bound locally somewhere;
 however, under the interpreter or in a MODULE it will do an automatic
 DEFVAR of the variable if it is not currently bound.

 The extent of a local SETQ assignment is limited to the extent of the
 binding itself; when the binding disappears, the SETQ assignment
 also disappears.  If a previous binding of the variable was
 "shadowed" by the other, the previous binding is "uncovered" in
 the same way as if the SETQ had never been issued.

 Global SETQ or DEFVAR assignments are like permanent bindings;
 they may be shadowed by local bindings, but they remain until undone
 via MAKUNBOUND (not recommended!).

 In the interpretive environment, the "alist", or association list,
 which is used to implement bindings for local variables and to
 effect "dynamic scoping", is a list of dotted pairs of which the
 CAR of a pair is a symbol and the CDR is its value.  Variable
 bindings on entry to a function or PROG are effected by pushing
 new CONS'es onto the alist; the previous alist pointer becomes
 effective again upon exit from the function or PROG.

 The compiled environment mechanism is different with local variables,
 but basically the same with respect to "free" variables, so that the
 semantics of variable access are the same in the interpretive and
 compiled environments.

Examples:

 (DEFUN F (A B C D)
     (SETQ A '(HI THERE))        ; ==> (HI THERE)
     (SETQ B (CAR A))            ; ==> HI
     (SETQ C (CDR A))            ; ==> (THERE)
     (SETQ D
      (PROG (A B C)
            (SETQ A 1
                  B (ADD1 A)
                  C (+ A B))     ; ==> 3
            (RETURN (LIST A B C))
      ))                         ; ==> (1 2 3)
     (SETQ C A)                  ; ==> (HI THERE)
     (LIST A B C D)              ; ==> ((HI THERE) HI (HI THERE))
)           ==> F

(F 1 2 3 4) ==> ((HI THERE) HI (HI THERE) (1 2 3))

;Note that if function G calls F with arguments X Y Z, the values of
;X, Y and Z remain unchanged.

 (DEFUN G ()
  (PROG (X Y Z)
   (SETQ X 'XX)
   (SETQ Y 'YY)
   (SETQ Z 'ZZ)
   (F X Y Z "junk")
   (RETURN (LIST X Y Z))))        ==> G

  (G)                             ==> (XX YY ZZ)

; The following illustrates how the SETQ bindings are sequential,
; as opposed to the parallel bindings of PSETQ.

 (LET ((A 1) (B 2) (C 3))
      (SETQ A 0 B A C B)
      (LIST A B C))        ==>  (0 0 0)

 (LET ((A 1) (B 2) (C 3))
      (PSETQ A 0 B A C B)
      (LIST A B C))        ==>  (0 1 2)

