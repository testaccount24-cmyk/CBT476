
Function: GETPARM

Syntax:   (GETPARM arg1 arg2)

 arg1 (optional, evaluated) - any LISP object, but generally T or NIL.
 arg2 (optional, evaluated) - any LISP object, but generally T or NIL.

Returns:

 A symbol whose print name is taken from the parameter
 string passed to the currently running ZIL program.

Processing:

 A ZIL program may be invoked in background via JCL like the following:

  //stepname EXEC PGM=progname,PARM='parm string'

 (See the JCL manual for variations on this format.)

 A ZIL program may be invoked from TSO in the following manner:

  CALL MY.LOAD(MYPROG) 'parm string'

 or it may be invoked as a command processor, e.g.:

  MYCMD parm string

 (Other TSO commands that invoke user programs, such as TEST,
  pass parameter strings in similar format.)

 In all cases, the string "parm string" is accessed by the GETPARM
 function, which builds a symbol from this string.

 If no parm string is passed to the program, or a null parm string
 is passed, GETPARM returns a symbol with a null print name.

 If the ZIL program was invoked as a TSO command processor, GETPARM
 returns the parameters starting with the first non-delimiter character
 following the command name; the data is returned asis (not folded to
 upper case), in contrast to the other methods which cause unconditional
 translation to upper case, thanks to the operating system.

 If the first character of the parm string is a backslash "\", where
 the first character is determined by the scanning method described
 in the above paragraph, then GETPARM skips over all characters between
 this backslash and the next backslash, inclusive, returning the
 substring of the parm field starting from the character following the
 second backslash (if there is no second backslash, a null string is
 used).  This is because the data between the backslashes, if any, is
 reserved for ZIL initialization-time option specifications.

 If the first argument is non-NIL, the resulting atom is interned on the
 oblist; otherwise it is not interned (this is the default behavior),
 meaning that it will not be EQ to any other atom.

 If the second argument is non-NIL, the atom building routine will
 attempt to convert the atom to a numeric type, according to its syntax
 as the READ function would interpret it.  If the second argument is
 NIL, the atom is always treated as a symbol (this is the default
 behavior).  When a non-NIL second argument is specified, handling is
 the same as for the MKATOM function (q.v.).

Errors signaled:

 None, except for those associated with failure to build the result.

Notes:

 The contents of the PARM string are used by each ZIL program in
 different ways;  the interpreter, the compiler, OPS5 and Macsyma all
 use the PARM string for their own purposes.

 Under the interpreter, GETPARM returns the name of the INIT file
 that was specified (the "null symbol", ||, is returned when no INIT
 file is in use).

Examples (cannot be run unless you invoke the interpreter as shown):

 ;If the parameter passed to ZILIN was:  ''

 (GETPARM)                    ==> ||

 ;If the parameter passed to ZILIN was:  '(HI, THERE.)'

 (GETPARM)                    ==> |(HI, THERE.)| ; note - 1 symbol.

 ;If the parameter passed to ZILIN was:  'FOO'

 (SETQ A (GETPARM NIL))       ==> FOO ; not interned.
 (SETQ B (GETPARM T))         ==> FOO ; interned.
 (EQ A 'FOO)                  ==> NIL
 (EQ B 'FOO)                  ==> T

 ;If the parameter passed to ZILIN was:  '007'

 (GETPARM NIL NIL)            ==> 007 ; note - symbol, not fixnum.
 (GETPARM NIL T)              ==> 7 ; note - fixnum, not symbol.

 ;If ZILIN was invoked via XCMD (i.e. as a command processor) with
 ; the following input line:
 ;
 ; ZILIN foo bar

 (GETPARM)                    ==> |foo bar|

 ;If ZILIN was invoked via XINV (i.e. as a program) with
 ; the following input line:
 ;
 ; XINV ZILIN 'foo bar'

 (GETPARM)                    ==> |FOO BAR|

 ;
 ; Examples with backslashes:
 ;

 ; XINV ZILIN '\VSSIZE=1024K\foo bar'

 (GETPARM)                    ==> |FOO BAR|

 ; XINV ZILIN '\VSSIZE=1024K'

 (GETPARM)                    ==> ||

 ; XINV ZILIN '\\This - \ - is a backslash'

 (GETPARM)                    ==> |THIS - \\ - IS A BACKSLASH|

 ; XCMD ZILIN  \VSSIZE=1024K\foo bar

 (GETPARM)                    ==> |foo bar|

 ; XCMD ZILIN  \VSSIZE=1024K

 (GETPARM)                    ==> ||

 ; XINV ZILIN  '    This preserves leading blanks but not case.'

 (GETPARM)       ==> |    THIS PRESERVES LEADING BLANKS BUT NOT CASE.|

 ; XCMD ZILIN       This does not preserve leading blanks.

 (GETPARM)       ==> |This does not preserve leading blanks.|

 ; XCMD ZILIN  \\   This is a way to preserve leading blanks.

 (GETPARM)       ==> |   This is a way to preserve leading blanks.|

 ; XCMD ZILIN  , /* comment */ Leading delimiters and comments are lost.

 (GETPARM)       ==> |Leading delimiters and comments are lost.|

 ; XCMD ZILIN  \\, /* comment */ Everything is retained.

 (GETPARM)       ==> |, /* comment */ Everything is retained.|

