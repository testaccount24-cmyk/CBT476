
Macro: DEFARGS

Syntax:   (DEFARGS fun1 minargs2 &optional maxargs3 restarg4)

 fun1     (required, not evaluated) - a symbol.
 minargs2 (required, not evaluated) - an integer or NIL.
 maxargs3 (optional, not evaluated) - an integer.
 restarg4 (optional, not evaluated) - T or NIL.

Returns:

 Who knows?

Processing:

 This does nothing under the interpreter.  But it tells the compiler
 about a function that you are invoking but are not defining in your
 code (i.e. an external user function).

 Normally, when the compiler finds a call to a function that is not
 defined in your code, and it is not a "standard" ZIL function as can
 be found in this documentation, the compiler converts the call to a
 FUNCALL, which will interpretively apply the function symbol to the
 specified arguments.  This enables compiled code to call interpreted
 code without having to explicitly code FUNCALL's.

 However, if you know that the function exists as a compiled SUBR and
 you want to tell the compiler about it (so that it can generate a
 direct branch to the code), you can use DEFARGS.  For example:

   (DEFARGS SOMEFUNC 1 2)

 tells the compiler that there is a function called SOMEFUNC
 with a definition something like:

   (DEFUN SOMEFUNC (A &OPTIONAL B) ...)

 So, if the compiler finds a function call like

   (DEFUN PIG (A B) (CONS (SOMEFUNC A) B))

 it is to treat SOMEFUNC as an EXPR (actually a SUBR since it will be
 a compiled load module in a link library) with at least 1 and at
 most 2 arguments required (any arguments omitted will be passed as
 unsupplied optional arguments and will be bound to their default
 values at execution time).  Note that the function name must conform
 to IBM naming standards since it will become an external reference
 (i.e.  1-8 alphameric characters, first one alphabetic or national).

 To tell the compiler that SOMEFUNC has a &REST argument, if it
 was defined externally with a &REST keyword in its lambda list,
 or if it has &KEY keywords in its lambda list,
 specify T as the fourth argument.  Here are some examples:

   (DEFARGS SOMEFUNC 2 5)   ; 2 required,  3 optional, no &rest
   (DEFARGS SOMEFUNC 2 2)   ; 2 required, no optional, no &rest
   (DEFARGS SOMEFUNC 2 5 T) ; 2 required,  3 optional,  1 &rest
   (DEFARGS SOMEFUNC 2 2 T) ; 2 required, no optional,  1 &rest

 You can also use this format:

       (DEFARGS funcname NIL)

 This will make the compiler "not know about" funcname.  Any
 calls to funcname will be compiled as FUNCALLs.

 See member $COMPILE for more details about how to use this.

Errors signaled:

 None.

Notes:

