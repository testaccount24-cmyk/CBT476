
 ZIL File System

 A file is an object, not directly accessible from ZIL code, which
 describes a currently open file.

 Files are specified on ZIL I/O functions as symbols of from 1 to 4
 characters.  The symbol name is used to construct a file name (as
 explained below), and is used to locate the file via an EQ test.  Note
 that a symbol name of more than 4 characters cannot be used as a file
 name.

 There are two types of files:  input files and output files.  Whether
 a file is an input file or an output file depends wholly upon the
 context, i.e. what function is using it.  Thus, the same symbol
 may be simultaneously an input and an output file while referencing
 two totally separate data sets or allocations.

 A file name may be one of the following:

  NIL - in which case the standard input or output file is used
        (the DDNAME is ZILI for standard input or ZILO for standard
        output).  Note that either one of these DDNAMES need not
        be allocated; if ZILI is missing, the terminal will be used
        for standard input, and if ZILO is missing, the terminal will
        be used for standard output.  Thus, both of these DDNAMES
        are required in batch since there's no terminal there.

  T   - in which case the TSO terminal is used (the DDNAME is ZILIT
        for input and ZILOT for output).  If either ZILIT or ZILOT is
        allocated, it will be used.  If you run in batch, then
        if ZILIT is missing, standard input (ZILI) will be used;
        and if ZILOT is missing, standard output (ZILO) will be used.

  xxxx (where xxxx is a symbol whose name is from 1 to 4 characters) -
        if the context requires an input file, a DDNAME ZILIxxxx must
        have been allocated and will be opened for input when it is
        used in a function call.  If the context demands an output
        file, a DDNAME ZILOxxxx must have been allocated and will be
        opened for output when it is used in a function call.  All
        such files are automatically closed at ZIL program
        termination time.

 In addition, file names may be generated by the OPEN function,
 and files are removed from the ZIL system by the CLOSE function.

 In nearly all cases, the file name operand of a function is optional
 (and defaults to NIL), except where otherwise indicated.


 The following functions operate on both input and output files:

 OPEN     - allocates a data set to a file and opens it.
 CLOSE    - closes a file.

 (Note that OPEN does NOT take a file name as an argument, but
  returns one.  Also note that ZIL is probably the only system
  around which uses a type operand on CLOSE.)

 Examples:

    Under TSO, you may enter:

      alloc fi(zilifoo) da(foobar.data) shr reuse

    (Note: The "REUSE" keyword is available only if TSO/Extensions is
           installed on your system.)

    This establishes an input file called FOO.  When you are in LISP,
    the function call (READ 'FOO) will read an S-expression from the
    dataset FOOBAR.DATA.

      alloc fi(zilobar) da(foobar.data) old reuse

    This establishes an output file called BAR.  When you are in LISP,
    the function call (PRINT 'HI 'BAR) will write the S-expression HI
    into the dataset FOOBAR.DATA.

 These files will not be opened until they are referenced by function
 calls; therefore, you need not worry about clobbering an output file
 that is allocated to a ZILO... DD name but is never used.

 At Draper Lab, if you are hooked up to PROGLIB via XSETUP, then you can
 use the XZIFILE and XZOFILE CLIST's to allocate files.   The following
 commands are equivalent:

 XZIFILE FOO FOOBAR.DATA   <=>  ALLOC FI(ZILIFOO) DA(FOOBAR.DATA) SHR

 XZOFILE BAR FOOBAR.DATA   <=>  ALLOC FI(ZILOBAR) DA(FOOBAR.DATA) OLD

 Notes: The REUSE keyword is optional on both.
        XZOFILE will create the dataset as new if it does not exist.
        The XZIFREE and XZOFREE CLIST's will free ZIL files similarly.

 Alternatively, you may enter under ZIL:

  (setq foo (open "foobar.data" 'input))

 This sets the value of the variable FOO to the file name returned
 by OPEN, which may then be used in subsequent statements like
 READ and CLOSE.

 Both fixed-length and variable-length records are supported for input
 and output file I/O; however, only fixed-length records are supported
 for standard input and output (file NIL).  Input and output data sets
 must be sequential (although a PDS with a member name is OK).

 Currently, if a new dataset is created for an output request, the
 DCB attributes RECFM=FB, LRECL=80, BLKSIZE=6160 are assigned.

 For input files, ZIL determines dynamically whether the file is line
 numbered, as follows:

 1.  If the file is allocated to the terminal, it is never considered
     to be line numbered.  This allows continuous typing of input
     across terminal rows.

 2.  If the file is allocated to a data set, the presence of numerics in
     the appropriate columns is used to determine whether the entire
     file is line-numbered or not.  If ZIL thinks it is, the line number
     field is NOT ACCESSIBLE by any ZIL function.  As usual for TSO, the
     last 8 columns of fixed-length records and the first 8 columns of
     variable-length records are presumed to be the line number field.
     Note that in the case of concatenated data sets, the first record
     of the first data set in the concatenation establishes the number
     mode for the whole concatenation.  Most ZIL source is unnumbered.

File I/O notes:

 If a file is allocated to the terminal, special processing takes place
 that is a bit different from what happens with non-LISP programs:

  (1) Input data is not necessarily folded to upper case; processing of
  case follows exactly the same rules as input from a data set.

  (2) /* is NOT an EOF indication.  Your program will have to have its
  own logic to determine when you want to get out of an interactive
  loop, or else you may be stuck talking to your program forever (of
  course, you can always attention out).

 To test whether an input file exists, use (IFILEP filename).

 To test whether an output file exists, use (OFILEP filename).

