
Function: STRING-REMOVE

Syntax:   (STRING-REMOVE bag1 str2)
    or:   (SREMOVE bag1 str2)

 bag1 (required, evaluated) - a string.
 str1 (required, evaluated) - a string.

Returns:

 A string built by removing all characters present in bag1 from str2.

Processing:

 bag1 is treated as a "character bag", and str2 is scanned for
 characters which are part of that bag.  The result is a new string
 which contains only the characters in str2 which are not part of that
 bag.

Errors signaled:

 bag1 not a string.
 arg2 not a string.

Notes:

 STRING-REMOVE is different from STRING-TRIM, etc., in that it removes
 ALL occurrences of characters, not just those at either end.

 As for many functions that take strings as arguments, symbols are
 permitted; their print names are used in that case.  However, this
 function always returns a string.

 Unlike Common LISP, ZIL does not permit a list to be specified for
 bag1.  (Not that this matters for STRING-REMOVE, which isn't even a
 Common LISP function anyhow.)  Since symbols are permitted, NIL is
 interpreted as a "character bag" of the characters N, I and L.

Examples:

 (STRING-REMOVE "ar" "foobar")     ==> "foob"
 (STRING-REMOVE "" "foobar")       ==> "foobar"
 (STRING-REMOVE "xy" "foobar")     ==> "foobar"
 (STRING-REMOVE "fr" "foobar")     ==> "ooba"
 (STRING-REMOVE "fobra" "foobar")  ==> ""
 (STRING-REMOVE 'FAR 'FOOBAR )     ==> "OOB"
 (STRING-REMOVE " " " a b c ")     ==> "abc"
 (STRING-REMOVE "farbo" "foobar")  ==> ""

