
Function: DELQL

Syntax:   (DELQL arg1 list2 &optional count3)

 arg1   (required, evaluated) - any LISP object.
 list2  (required, evaluated) - a proper list.
 count3 (optional, evaluated) - an integer.

Returns:

 A list consisting of all the elements of list2 except for those
 which are EQL to arg1.

Processing:

 list2 is destructively altered.  Each atom found within list2 that is
 EQL to arg1 is deleted from list2.

 If count3 is omitted or NIL, all occurrences of arg1 are removed from
 list2.  Otherwise, only the first count3 occurrences of arg1 are
 removed.  If count3 is less than 1, no elements are removed.

 Compare REMQL, which is the non-destructive equivalent of DELQL.

 Note that only top-level elements of the list are considered;
 non-atomic elements are NOT recursively processed by DELQL.

Errors signaled:

 Invalid count argument (not a fixnum or NIL).

Notes:

 Compare DELQ, which is like DELQL but uses an EQ test;
 and DELQUAL, which is like DELQL but uses an EQUAL test.

 No checking is done as to the validity of the arguments.  Unpredictable
 results will occur if the second argument is not an atom or a proper
 list.

 As with all the "destructive" functions, DELQL should not be used
 on an in-line compiled list, i.e. a list derived from compiling the
 construct (QUOTE (form1 form2 ...)).  This will cause further
 references to the in-line constant list to be incorrect.

 Do not depend upon DELQL's altering of list2 if the CAR of list2
 matches arg1.  Use SETQ to insure updating of list2, as follows:

  (SETQ Y (DELQL X Y))

Examples:

 (DELQL 'THE '(THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG))
                          ==> (QUICK BROWN FOX JUMPS OVER LAZY DOG)

 (DELQL '(FOO BAR) '(FOO (FOO BAR) (FOO) FOO BAR))
            ==> (FOO (FOO BAR) (FOO) FOO BAR) ; Test is EQL, not EQUAL.

 (DELQL 2 '(1 2 3 4 5)) ==> (1 3 4 5)         ; Test is EQL, not EQ.

 (DELQL 1 '(1 2 1 2 1) 0) ==> (1 2 1 2 1)
 (DELQL 1 '(1 2 1 2 1) 1) ==> (2 1 2 1)
 (DELQL 1 '(1 2 1 2 1) 2) ==> (2 2 1)
 (DELQL 1 '(1 2 1 2 1) 3) ==> (2 2)

;The following shows how the list is altered by DELQL.

 (SETQ X '(A B C D E))       ==> (A B C D E)
 X                           ==> (A B C D E)
 (SETQ Y (DELQL 'A X))       ==> (B C D E)
 X                           ==> (A B C D E)
 Y                           ==> (B C D E)
 (EQ X Y)                    ==> NIL
 (SETQ Y (DELQL 'C X))       ==> (A B D E)
 X                           ==> (A B D E)
 Y                           ==> (A B D E)
 (EQ X Y)                    ==> T

