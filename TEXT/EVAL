
Function: EVAL

Syntax:   (EVAL arg1 &optional arg2)

 arg1 (required, evaluated) - an atom or proper list.
 arg2 (optional, evaluated) - a list in association list format
                              (i.e. a list of dotted pairs).

Returns:

 The result of evaluating arg1, with the variable binding environment
 specified by arg2 being used to resolve variable bindings.

Processing:

 Note that it will appear to the interpreter user that two evaluations
 of the first argument occur:  the first as part of normal argument
 evaluation, and the second as performed by the EVAL function specified.

 arg2 is designed for use of EVAL inside FEXPR definitions, and is not
 recommended for use otherwise.
 arg2, if not specified, defaults to NIL, in which case the current
 interpretive lexical variable binding environment (alist) is used.
 If a non-NIL value is specified, interpretive lexical variable bindings
 will be determined from the association list specified by this
 argument; if a variable encountered during the evaluation process is
 not present in this list and not dynamically bound, it will be unbound
 and will signal an error.

Errors signaled:

 Too numerous to detail.

Notes:

 Unpredictable results will occur if the second argument is not NIL or
 a list of dotted pairs.

 To pass a complete evaluation environment to EVAL, you must use
 ZILEVAL instead.

Examples:

 (PROGN
  (SETPLIST 'A NIL)                  ; Remove any funny properties.
  (MAKUNBOUND 'A)
 )                                   ==> A ; Insure A not bound.

 (EVAL '(CAR '(A B C)))              ==> A
 (EVAL '(QUOTE FOO))                 ==> FOO

 (LET ((A "no-value"))
      (EVAL 'A))                     ==> ("***ERROR***") ; unbound
 (LET ((A "no-value"))
      (EVAL 'A '((FOO . BAR))))      ==> ("***ERROR***") ; unbound
 (LET ((A "no-value"))
      (EVAL 'A '((A . 1) (B . 2) (C . 3)))) ==> 1

