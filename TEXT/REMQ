
Function: REMQ

Syntax:   (REMQ arg1 list2 &optional count3)

 arg1   (required, evaluated) - any LISP object, but generally a symbol.
 list2  (required, evaluated) - a proper list.
 count3 (optional, evaluated) - an integer.

Returns:

 A list consisting of all the elements of argument 2 except for those
 which are EQ to argument 1.

Processing:

 A new list is built (through repeated CONS'ing) from the elements
 of the list specified by the second argument.  Each atom found
 within the list structure that is EQ to the first argument is
 omitted from the new list.

 If count3 is omitted or NIL, all occurrences of arg1 are removed from
 list2.  Otherwise, only the first count3 occurrences of arg1 are
 removed.  If count3 is less than 1, no elements are removed.

 When count3 is used, some list structure may be shared between list2
 and the return value.

 Note that only top-level elements of the list are considered;
 non-atomic elements are NOT recursively processed by REMQ.

 Compare REMOVE, which is like REMQ but uses an EQL test;
 and DELQ, which is the destructive equivalent of REMQ.
 REMQ is equivalent to Common LISP (REMOVE ... :TEST #'EQ).

Errors signaled:

 Invalid count argument (not a fixnum or NIL).

Notes:

 No checking is done as to the validity of the arguments.  Unpredictable
 results will occur if the second argument is not an atom or a proper
 list.

 Keep in mind that EQ, not EQL, is used for the comparisons.
 Thus, only symbols, in general, will work as the first argument.

Examples:

 (REMQ 'THE '(THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG))
                          ==> (QUICK BROWN FOX JUMPS OVER LAZY DOG)

 (REMQ '(FOO BAR) '(FOO (FOO BAR) (FOO) FOO BAR))
            ==> (FOO (FOO BAR) (FOO) FOO BAR) ; Test is EQ, not EQUAL.

 (REMQ '3.0 '(1.0 2.0 3.0 4.0 5.0))
            ==> (1.0 2.0 3.0 4.0 5.0)   ; Test is EQ, not EQL.

 (REMQ 'X '(X Y X Y X) 0) ==> (X Y X Y X)
 (REMQ 'X '(X Y X Y X) 1) ==> (Y X Y X)
 (REMQ 'X '(X Y X Y X) 2) ==> (Y Y X)
 (REMQ 'X '(X Y X Y X) 3) ==> (Y Y)

