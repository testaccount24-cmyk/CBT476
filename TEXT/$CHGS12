************************************************************************
*                                                                      *
*                      ZIL 1.2 - CHANGES FROM 1.1                      *
*                                                                      *
************************************************************************

    ZIL 1.2 code is INCOMPATIBLE with ZIL 1.1 code because:

    (a) A new, more efficient internal architecture is used for
        symbols, fixnums and flonums.

    (b) Many common functions have different definitions - this has
        been done in cases where the ZIL 1.1 definition did not agree
        with the typical usage and/or Common LISP.

    (c) Some features of ZIL 1.1 have been dropped, most notably the
        "logical" atom type.

    Your ZIL 1.1 code should run just as well interpretively under ZIL
    1.2 as long as it does not have dependencies on the function
    definitions that work differently now; most code will not run into a
    problem since such dependencies are usually negative (for example,
    depending on fixnums NOT to succeed in a MEMBER test).  Also, since
    values will print out differently, output may look somewhat
    different; you may wish to recode your programs to use PRINC instead
    of PRIN1/PRINT if this is not acceptable to you.

    However, ALL compiled code must be recompiled to run under the
    new ZIL.

    If you need to run code under both versions of ZIL, you can use
    the "read conditionalization" facility in your source.  Any
    form preceded by #+ZIL12 will be read under ZIL 1.2 only; any
    form preceded by #-ZIL12 will be read under ZIL 1.1 only.

I.  NO LONGER AVAILABLE IN ZIL 1.2

    A. "LOGICAL" DATA TYPE REMOVED - LOGP FUNCTION DOES NOT EXIST

       Functions that formerly accessed and created "logical" atoms
       now work on and return fixnums.  The nnnQ and nnnB syntaxes,
       while still supported, now create fixnums.  In any case, the
       Common LISP #Xnnn, #Bnnn and #Onnn syntaxes are preferred
       for source-level compatibility (these also create integers).

    B. CSETQ INVALID IN COMPILED CODE

       The old "global variable" feature was never useful, and
       limited ZIL's extensibility, so it has been removed.
       CSETQ is still available under the interpreter, but its
       use is definitely not recommended.  The Common LISP DEFVAR
       special form is the preferred way to create global variables.

    C. SPECIAL MEANINGS OF "OBLIST" AND "ALIST" SYMBOLS NOT
       AVAILABLE (AT LEAST IN COMPILED CODE) - USE NEW FUNCTIONS
       (OBLIST) AND (ALIST)

       The lists returned by (OBLIST) and (ALIST) are identical to
       what OBLIST and ALIST return, but it may not be feasible to
       print them - use these function with extreme caution.

    D. "SLASHIFY" OBSOLETE - USE "MAKE-STRING" WITH NEW 2ND ARG

       Slashification is now built into the ZIL atom dumping and
       printing routines.

    E. "PPATOM" OBSOLETE - "PRIN1" NOW DOES THE JOB

       PRIN1 now supports slashification, as above.

    F. "CLCAR" AND "CLCDR" REMOVED, NO LONGER NEEDED

       Since the CAR and CDR of NIL return NIL by default in ZIL 1.2,
       these are not needed; furthermore, the compiler generates
       more efficient code for CAR and CDR than for CLCAR and CLCDR.
       If you need the old functionality (for whatever reason), use
       the "secret" ZIL functions ZCAR and ZCDR, new in 1.2.

    G. "SETARGS" REMOVED, USE "DEFARGS"

       This function was meaningful under the compiler only, so now
       there is a special form just for that purpose, which means
       that you don't have to quote the arguments.

    H. The following functions and facilities are still available
       under the ZIL 1.2 interpreter but are officially obsolete,
       and will some day be removed:

       CSET and CSETQ (replaced by DEFVAR)
       Constants OBLIST and ALIST (replaced by (OBLIST) and (ALIST))
       % for compile-time directives (replaced by EVAL-WHEN)


II. FUNCTIONS REDEFINED

    A. PRIN1, PRINT NOW PRINT OUT IN "READABLE-BACK-IN" FORMAT.

       Also, these functions, as well as PRINC, now return the
       object they print, not NIL.

    B. ASSOC, MEMBER, DELETE, REMOVE, INTERSECTION,
       UNION, SUBLIS, SUBST, EQUAL NOW USE AN "EQL" TEST;
       ASSQ, MEMQ, DELQ, REMQ, INTRQ, UNIONQ, SUBLISQ, SUBSTQ
       USE AN "EQ" TEST

       This default was chosen for Common LISP compatibility.
       Since many other dialects of LISP use an EQUAL test for
       these functions, however, a means has been provided to
       switch to this other mode for ASSOC, DELETE, MEMBER and
       REMOVE.

    C. UNARY "-" AND "/" NOW PERFORM NEGATION AND RECIPROCATION

       This was the screwiest incompatibility of all.

    D. "=" IS NOW THE SAME AS EQUALP, NOT EQUAL

       What's more, the functions =, < and > now take multiple
       arguments.  So do <= and >=, for that matter, although
       /= doesn't (too much of a pain to implement).

    E. MAPC AND MAPL NOW RETURN FIRST INPUT LIST, NOT VALUE OF LAST
       FUNCTION APPLICATION

       This is not that important since these are usually executed
       for effect.

    F. EXPLODE TAKES ONLY 1 ARGUMENT, ALWAYS INTERNS SYMBOLS,
       USES PRIN1 FORMAT; NEW FUNCTION "EXPLODEC" USES PRINC FORMAT

       Just like the Maclisp one.  Also see IMPLODE.

    G. GETPARM RETURNS NULL SYMBOL INSTEAD OF NIL WHEN NO PARM PRESENT

       The only reason ZIL1.1 returned NIL in this case was that it
       didn't support symbols with null print names.  Now that these
       are legal, GETPARM works the way it was supposed to in the
       first place.  By the way, it also works in "command processor"
       environments.

    H. IMPLODE TAKES FIRST CHARACTERS ONLY OF ARGS, ALWAYS INTERNS
       SYMBOLS; NEW FUNCTION "CONCATL" CREATED FOR COMPATIBILITY WITH
       OLD IMPLODE

       Just like the Maclisp one.  Also see EXPLODE.
       Some of the functions that replaced the old IMPLODE were
       designed with Franz LISP semicompatibility in mind.

    I. PP TAKES MULTIPLE UNEVALUATED ARGUMENTS, NOT AN EVALUATED
       (QUOTED) SYMBOL PLUS OPTIONAL FILE NAME - USE ZILPP FOR THE
       OLD BEHAVIOR

       Debuggers should prefer this behavior.  Also, PP will print
       out SETQ's of symbols that have values.  This makes it more
       like the NIL version of PP.

    J. TRACE AND UNTRACE TAKE MULTIPLE UNEVALUATED ARGUMENTS,
       NOT AN EVALUATED (QUOTED) LIST
       TRACE WITH NO OPERANDS RETURNS LIST OF TRACED FUNCTIONS -
       USE NEW "TRACEALL" FUNCTION TO DO GLOBAL TRACING

       That's how most LISPs do it.

    In addition, functions that used to accept or return logical
    atoms now accept or return fixnums in their place.

III. NEW DATA TYPES

    Some of these data types were introduced during ZIL 1.1's reign,
    but are given full support now.

    A. STRINGS

    B. VECTORS

    D. FUNARGS (INTERPRETED LEXICAL CLOSURES)

    There is an infinite precision integer (bignum) package under
    development - it will be announced when it is ready.

IV. NEW FUNCTIONS

    See $HELP.  There are lots of these.

V.  UPWARD COMPATIBLE CHANGES TO OLD FUNCTIONS

    A. CAR,CDR - (CAR NIL) AND (CDR NIL) RETURN NIL

    At long last!  Use ZCAR and ZCDR for the old, fast ones.
    Note that CLCAR and CLCDR are dead.

    B. CATCH - TAKES MULTIPLE FORMS (IMPLICIT PROGN)

    We also have UNWIND-PROTECT now.

    C. ERROR - TAKES &REST ARGS

    Just throw them on - they'll all come out somewhere.

    D. GETPARM - WORKS WHEN ZIL PROGRAM IS INVOKED AS A TSO
                 COMMAND PROCESSOR

    Like I told you above.

    E. FIXP - TRUE FOR FIXNUMS AND BIGNUMS; USE NEW PREDICATES
              "BIGP", "FIXNUMP", AND "INTEGERP" - THE LAST IS
              EQUIVALENT TO FIXP

    This won't matter much now, but wait until the full bignum
    support is available.

    F. MKSTRING - NEW OPTIONAL ARG SPECIFIES SLASHIFICATION

    Also called MAKE-STRING.

    G. MKVECTOR - NEW OPTIONAL ARG SPECIFIES INITIAL ELEMENT

    Also called MAKE-VECTOR.

    H. READ   - TAKES 2 OPTIONAL ARGS, SECOND IS EOF VALUE

    Just like Franz LISP, etc.

    I. RETURN - VALUE IS OPTIONAL, DEFAULTS TO NIL

    Makes PROG-ramming easier.

    J. TSO - TAKES ANY NUMBER OF STRINGS

    Now you can build TSO commands out of anything you want
    without worrying about exactly how to stick it all together.
    TSO with no args currently does nothing, just smiles at you.

VI.  IMPROVED USABILITY FEATURES

    A. EXTENDED AUTOLOADING

    The AUTOLOAD property of a symbol may be a string representing
    a data set name to be loaded automatically, or a list which is
    a form to be evaluated, in order to make the symbol become a
    defined function.  This allows all sorts of creative
    autoloading schemes to be implemented.

    B. PRETTY-PRINTING, DRIBBLING, EDITING OF FUNCTION DEFINITIONS

    Should make life under the interpreter a lot easier.
    "Dribbling" just means having a hard copy of your entire ZIL
    session (on file or SYSOUT), input and output included.

    C. NEW SPECIAL VARIABLES: * ** *** - + ++ +++

    Using these variables, you can recall the previous values
    returned, typed in, etc.  Saves lots of typing.

VII. RESTRICTIONS REMOVED

    A. Symbol names may now be of any length; there is no maximum.
       A null symbol name (read in as ||) is now permissible.
       Strings are not limited to 32767 bytes; both strings and
       symbol names are limited in size only by the available
       amount of vector/string space to hold them.

    B. With the advent of infinite precision arithmetic (bignums),
       the traditional 2**31-1 limitation on fixed arithmetic is gone
       for most operations.

VIII.  INTERNAL ENHANCEMENTS

    A. The internal format of symbols has changed; symbol print names
       are now true strings rather than chains of CONSes.  Fixnums
       and flonums are also more space-efficient, each taking one
       CONS cell rather than two.  This has the following results:

       1. Garbage collections are less frequent and faster.
       2. Fixnum and flonum arithmetic is faster.

       Because of these changes, less CONS space is required in a
       typical ZIL session.  On the other hand, vector/string space
       is used more heavily.  We plan to fine tune the allocation
       of these respective spaces as time goes on, and the amount
       of vector/string space is controllable at compile time for
       a top-level ZIL program such as the interpreter.

    B. Many ZIL routines that were originally written in LISP and
       compiled have been rewritten in assembler and optimized for
       speed.  In many cases this gave us breathing space to insert
       additional validity checking; all the functions that access
       property lists, for example, now signal an error if the format
       of the property list is invalid.

    C. The compiler has been changed to generate fewer relocatable
       address constants in load modules; relocation of most pointers
       is performed dynamically when a compiled ZIL function is first
       executed.  This has the following benefits:

       1. Compiled ZIL load modules take up less disk space, since
          the RLD (relocation dictionary) records should be shorter
          and fewer in number.

       2. Loading of ZIL modules should take less time.

       In addition, the process of interning symbols on the oblist
       has been improved and should be faster.  This will also
       reduce load time for ZIL functions.

IX. MISCELLANEOUS CHANGES

     A. CSETQ ("global") variables under the interpreter now maintain
        their values on the property list via the VALUE indicator as
        a CONS of the symbol name itself with the actual value; thus
        the value is the CDR of the VALUE property, not the CAR.
        This was done to be parallel with the binding entries on the
        alist, for (future???) access from compiled code.

     B. PUTPROP inserts new properties at the head of the property
        list, not at the end as before.

     C. SET and SETQ now automatically invoke DEFVAR, not CSET/CSETQ,
        when an unbound variable is specified.

     D. The ZIL compilation procedures now use the faster H assembler
        instead of the F assembler.

     E. It is no longer necessary to specify DCB information for file
        ZILO when used (e.g. in batch).

     And lots more - just print off this help library and read it.

