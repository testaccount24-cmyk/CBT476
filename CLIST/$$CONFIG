/* REXX.  Fix all members of ZIL distribution for installation. */

/* This exec must be run under ISPF.  If you run it in batch, you must
   run it under ISPF in batch.  I should add code to run it either way
*/

trace off
signal on novalue
address ispexec

z = 0

/* For all entries other than the "doitqual" entry,                 */
/* change only the "new" text values to be changed in this section. */
/* If something is not to be changed, make the newstring the same   */
/* as the oldstring.                                                */

/* Base of libraries as extracted from the received XMIT file by    */
/* CBTxxx.FILExxx.PDS($RECEIVE) job (after editing).                */

doitqual = "YOURHLQ?ZIL."

/* Base of libraries to be created for production ZIL use.          */

z = z + 1
oldstring.z = "PROGLIB.ZIL."
newstring.z = "SYS8.LISP."

/* High level qualifier of other libraries to be used at run time.  */

z = z + 1
oldstring.z = "PROGLIB"
newstring.z = "SYS8"

/* The name of the linkedit-time library containing the             */
/* Fortran math subroutines (SQRT, DSIN, etc., etc.).  If you do    */
/* not have these Fortran routines, you will not be able to use     */
/* the transcendental math functions in Zil.                        */

z = z + 1
oldstring.z = "SYS1.VSF2FORT"
newstring.z = "SYS1.FORTLIB"

/* The name of the assembler on your system.                        */

z = z + 1
oldstring.z = "SYS1.LINKLIB(IEV90)"
newstring.z = "SYS1.ASMLIB(ASMBLR)"

/* The name of the primary assembler macro library.                 */

z = z + 1
oldstring.z = "SYS1.MACLIB"
newstring.z = "SYS1.IBM.MACLIB"

/* The name of the secondary assembler macro library.               */

z = z + 1
oldstring.z = "SYS1.MODGEN"
newstring.z = "SYS1.AMODGEN"

/* JOB card parameter for ZIL compiler JCL.                         */

z = z + 1
oldstring.z = "REGION=6144K"
newstring.z = "REGION=6144K"

/* JOB card parameter for ZIL compiler JCL.                         */
/* Should match the value of HELDSYSOUTCLASS below.                 */

z = z + 1
oldstring.z = "MSGCLASS=H"
newstring.z = "MSGCLASS=H"

/* Held SYSOUT class for foreground Zil options.                    */

z = z + 1
oldstring.z = "HELDSYSOUTCLASS = H"
newstring.z = "HELDSYSOUTCLASS = H"

/* If the EXECPGM utility (from the CBT tape) is available on       */
/* your system by default, say Y.  Otherwise say N.                 */

z = z + 1
oldstring.z = "EXECPGM_IS_AVAILABLE = N"
newstring.z = "EXECPGM_IS_AVAILABLE = Y"

/* If you add features here, they must be uppercase versions       */
/* of the ones you activate in CNTL member $$ZILSET.               */
/* And don't forget the trailing blank after the last one!!!       */

z = z + 1
oldstring.z = "CSDL DRAPER "         /* This one is for FEATURES.  */
newstring.z = ""                     /* Add local features here.   */

/* End of text section. */

stringcount = z

if doitqual = "YOURHLQ?ZIL." then do
 say "You must edit this exec before running it."
 say "Please see the instructions in the source code of the exec."
 exit
end

call doit "'"doitqual"CLIST'"    , 0 , "/*"
call doit "'"doitqual"CNTL'"     , 1 , "//*"
call doit "'"doitqual"HELP'"     , 1 , ""
call doit "'"doitqual"MSG'"      , 0 , ""
call doit "'"doitqual"PANEL'"    , 0 , ""
call doit "'"doitqual"SKEL'"     , 1 , ""
call doit "'"doitqual"TEXT'"     , 0 , ""

/* No need to "do it" to the ASM or MACLIB libraries,
   or LISP, for that matter, since it's all compiled already
   for your convenience.
*/

return

/* ------------------------------------------------------------------ */

doit: parse arg pds, numbered, comstr

membercount = 0
badmembers = 0
member =

call listdsi pds
if result <> 0 then do
 say "Error, cannot update" pds":"
 say sysmsglvl1
 say sysmsglvl2
 return
end

recfm = left(sysrecfm,1)
lrecl = syslrecl

"LMINIT DATAID(DATAID) DATASET("pds") ENQ(EXCLU)"
if rc <> 0 then do
 call ispf_error
 return
end

"LMOPEN DATAID("dataid") OPTION(INPUT)"
if rc <> 0 then call ispf_error
else do
 say "---"
 say "Processing library:" pds
 say "---"
 do forever
  "LMMLIST DATAID("dataid") OPTION(LIST) MEMBER(MEMBER) STATS(NO)"
  lmrc = rc
  if lmrc > 8 then call ispf_error
  else if lmrc > 0 then leave
  else if left(member,2) = "$$" then iterate
  else do
   say "Processing member" member
   dmemid = ""
   "LMINIT DATAID(DMEMID) DATASET("pds") ENQ(EXCLU)"
   if rc > 0 then call ispf_error
   "LMOPEN DATAID("dmemid") OPTION(INPUT)"
   if rc > 0 then call ispf_error
   "LMMFIND DATAID("dmemid") MEMBER("member")"
   if rc > 0 then call ispf_error
   l.  = ""
   l.0 = 0
   i   = 0
   do forever
    line = ""
    len = 0
    "LMGET DATAID("dmemid") MODE(INVAR)"  ,
    "DATALOC(LINE) DATALEN(LEN) MAXLEN(80)"
    if rc = 8 then leave
    if rc > 0 then call ispf_error
    i = i + 1
    l.i = line
   end
   l.0 = i
   "LMCLOSE DATAID("dmemid")"
   if rc > 0 then call ispf_error
   changed = 0
   do i = 1 to l.0
    l.i = update(l.i,i,comstr)   /* may set "changed" flag */
   end
   if changed then do
    "LMOPEN DATAID("dmemid") OPTION(OUTPUT)"
    if rc > 0 then call ispf_error
    do i = 1 to l.0
     line = l.i
     if line = "" then line = " " /* bleaugh */
     len = length(line)
     "LMPUT DATAID("dmemid") MODE(INVAR)"  ,
     "DATALOC(LINE) DATALEN("len")"
     if rc > 0 then call ispf_error
    end
    "LMMREP DATAID("dmemid") MEMBER("member") STATS(NO)"
    if rc > 8 then call ispf_error
    else if rc = 8 then say "Member" member "did not exist. Added."
    else say "Member" member "replaced."
    "LMCLOSE DATAID("dmemid")"
    if rc > 0 then call ispf_error
   end
   else do
    say "Member" member "was not changed."
   end
  end
 end
end

"LMCLOSE DATAID("dataid")"
if rc > 0 then call ispf_error

say "*** Compressing" pds "***"
"LMCOMP DATAID("dataid")"
if rc > 0 then call ispf_error
say "Compress complete."

"LMFREE DATAID("dataid")"
if rc <> 0 then call ispf_error

return

/* ------------------------------------------------------------------ */

ispf_error:

 zerrlm1 = zerrlm
 "DISPLAY PANEL(ISPTERM)"

return

/* ------------------------------------------------------------------ */

update: parse arg line, eye, commentprefix

line  = strip(line,"T")
cline = line
nline = line

if commentprefix <> "" then do
 if left(cline,length(commentprefix)) = commentprefix then return nline
end

do j = 1 to stringcount
 if oldstring.j = newstring.j then iterate j
 if numbered then do
  linepart = strip(left(cline,72),"T")
  linerest = substr(cline,73,8)
 end
 else do
  linepart = strip(cline,"T")
  linerest = ""
 end
 nl = change(linepart,oldstring.j,newstring.j)
 if numbered then do
  if length(nl) > 72 then do
   say
   say "*** Error: Line" eye "was truncated.  Not changed:"
   say
   say cline
   say
   nline = cline
  end
  else do
   nline = left(nl,72) || linerest
  end
 end
 else do
  if length(nl) > lrecl then do
   say
   say "*** Error: Line" eye "was truncated.  Not changed:"
   say
   say cline
   say
   nline = cline
  end
  else do
   nline = nl
  end
 end
 cline = nline
end

if nline <> line then do
 say
 say "Line" eye "changed from:"
 say left(line,79)
 say "to:"
 say left(nline,79)
 changed = 1
end

return nline

/* ------------------------------------------------------------------ */

change: parse arg string,from,to

fl = length(from)
newline = ""
ix = 1
do forever
 ix = pos(from,string)
 if ix = 0 then return newline || string
 part1 = substr(string, 1, ix-1)
 part2 = substr(string, ix+fl)
 newline = newline || part1 || to
 string = part2
end

return newline

