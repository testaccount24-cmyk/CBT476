        PROC 0 XTRACE
        /**********************************************************************
        /*                                                                    *
        /* ZIL VERSION 1.3 - SEB1525 - 02/88                                  *
        /*                                                                    *
        /* ISPF ZIL option 4                                                  *
        /*                                                                    *
        /**********************************************************************

        NGLOBAL DEBUG LIBRARIES LIBRARY LISPMACS MACLIB TEMPPFX
        NGLOBAL ACSIZE CSSIZE PDSIZE VSSIZE TRACE SYSPARM
        NGLOBAL EXECPGM_IS_AVAILABLE SYSMACLIB ASSEMBLER ASMTHRESHOLD

        IF &XTRACE = XTRACE THEN DO
         CONTROL CONLIST SYMLIST LIST
         ISPEXEC CONTROL DISPLAY LINE
        END
        SET TRACE = &XTRACE
        CONTROL NOFLUSH NOCAPS
        /* Configuration section. */
        SET EXECPGM_IS_AVAILABLE = N
        SET SYSMACLIB = &STR('SYS1.MACLIB')
        SET ASSEMBLER = &STR('SYS1.LINKLIB(IEV90)')
        SET SYSPARM   = XA
        SET ASMTHRESHOLD = 0 /* 4 if you still get USING warnings */
        /* End configuration section. */
        SET CURSOR = XZILMEM
        ISPEXEC VGET (ZTEMPF ZSCREEN) /* ZTEMPF = some_prefix.SPFTEMPn.CNTL
        /* This code for PIE/TSO Sessions installations. */
        SET SESSNO = &SUBSTR(&LENGTH(&STR(&ZTEMPF)),&ZTEMPF)
        IF &SESSNO ¬= L THEN +
         SET TEMPPFX = &STR(&SYSUID..SPFPIE&SESSNO..SPFTEMP&ZSCREEN)
        ELSE +
         SET TEMPPFX = &SUBSTR(1:&LENGTH(&STR(&ZTEMPF))-5,&ZTEMPF)
        /* End code for PIE/TSO Sessions installations. */
        LOOP:+
        ISPEXEC CONTROL DISPLAY REFRESH
        ISPEXEC DISPLAY PANEL(XZIL4) CURSOR(&CURSOR)
        IF &LASTCC ¬= 0 THEN EXIT
        IF &XTRACE = XTRACE THEN ISPEXEC CONTROL DISPLAY LINE
        SET XZZZSRC = &STR(&XZILSRC)
        SET XZZZLNK = &STR(&XZILLNK)
        SYSCALL QUALIFY XZZZSRC
        SYSCALL QUALIFY XZZZLNK
        IF &XZILSEL = E THEN DO
         SYSCALL EDIT ZILMEM('&XZILMEM') ZILSRC('&XZZZSRC')
         GOTO LOOP
        END
        SET LIBRARY = PROGLIB.ZIL.&XZILSYS.LOAD
        SET MACLIB  = PROGLIB.ZIL.&XZILSYS.MACLIB
        IF &STR(&XZILACSZ) ¬= THEN SET ACSIZE = &STR(A=&XZILACSZ)
        ELSE SET ACSIZE =
        IF &STR(&XZILCSSZ) ¬= THEN SET CSSIZE = &STR(C=&XZILCSSZ)
        ELSE SET CSSIZE =
        IF &STR(&XZILPDSZ) ¬= THEN SET PDSIZE = &STR(P=&XZILPDSZ)
        ELSE SET PDSIZE =
        IF &STR(&XZILVSSZ) ¬= THEN SET VSSIZE = &STR(V=&XZILVSSZ)
        ELSE SET VSSIZE =

        SET DEBUG = &XZILDBG

        SET LISPMACS = &STR(&XZILMAC1 &XZILMAC2 &XZILMAC3 &XZILMAC4)

        SET LIBRARIES = &XZILSUB1 &XZILSUB2 &XZILSUB3 &XZILSUB4

        IF &STR(&LIBRARIES) NE THEN DO
         IF &EXECPGM_IS_AVAILABLE = N THEN DO
          ISPEXEC SETMSG MSG(XZIL020)
          SET CURSOR = XZILSUB1
          GOTO LOOP
         END
         SET SUBMETHOD = EXECPGM
        END
        ELSE SET SUBMETHOD =

        IF &TRACE = THEN CONTROL NOMSG
        FREE F(SYSIN SYSLIN SYSPRINT SYSLIB SYSUT1 SYSTERM)
        CONTROL MSG

        IF &STR(&XZILSEL) ¬= THEN DO

         SYSCALL COMPILE ZILSEL ('&XZILSEL') +
                         ZILMEM ('&XZILMEM') +
                         ZILNAME('&XZILNAM') +
                         ZILSRC ('&XZZZSRC') +
                         ZILLINK('&XZZZLNK') +
                         ZILTRN ('&XZILTRN') +
                         ZILBZL ('&XZILBZL') +
                         ZILBAL ('&XZILBAL') +
                         ZILBLL ('&XZILBLL')

          /*  500: cursor --> XZILMEM
          /* 1000: cursor --> XZILMEM
          /* 2000: cursor --> XZILMEM
          /* 3000: cursor --> XZILMEM
          /* 4000: cursor --> XZILMAC1

         SELECT &LASTCC
          WHEN (0)
          WHEN (4)    SET CURSOR = XZILMEM
          WHEN (4000) SET CURSOR = XZILMAC1
          WHEN (1)    SET CURSOR = XZILLNK
          OTHERWISE   SET CURSOR = XZILSRC
         END

        END

        ELSE DO

        /* process member list */

         ISPEXEC CONTROL ERRORS RETURN

         ISPEXEC LMINIT DATAID(DATAID) DATASET('&XZZZSRC')
         IF &LASTCC >= 8 THEN GOTO ERROR
         ISPEXEC LMOPEN DATAID(&DATAID)
         IF &LASTCC >= 8 THEN GOTO ERROR

         SET MLCURSOR = ZCMD
         SET MLTOP    = &STR(&XZILMEM)

         MLOOP:+
         ISPEXEC LMMDISP DATAID(&DATAID) OPTION(DISPLAY) MEMBER(&XZILMEM) +
                         COMMANDS(ANY) +
                         CURSOR(&MLCURSOR) +
                         TOP(&MLTOP) +
                         PANEL(XZIL4M)
         SELECT &LASTCC
          WHEN (0)
          WHEN (4) GOTO NO_MEMBERS
          WHEN (8) GOTO MFINISH
          OTHERWISE GOTO ERROR
         END

        /**********************************************************************/
        /*                                                                    */
        /* Selection variables returned:                                      */
        /*                                                                    */
        /* ZLMEMBER - name of selected member                                 */
        /* ZCMD     - primary command                                         */
        /* ZLLCMD   - line command used to select the member                  */
        /* ZLUDATA  - user data area on member list                           */
        /*                                                                    */
        /**********************************************************************/

         SET PROCESSED_OK = N

         SET SYSDVAL = &NRSTR(&ZCMD)
         READDVAL ZCMDVERB ZCMDOPERAND
         SELECT (&NRSTR(&ZCMDVERB))
          WHEN ()
          WHEN (E | EDIT) DO
           IF &SYSINDEX(*,&ZCMDOPERAND) ¬= 0 THEN DO
            ISPEXEC SETMSG MSG(ISRM053) /* "*" not valid */
            GOTO MLOOP
           END
           SYSCALL EDIT ZILMEM('&NRSTR(&ZCMDOPERAND)') ZILSRC('&XZZZSRC')
           SET CC = &LASTCC
           IF &CC > 8 THEN SET MLCURSOR = ZCMD
           ELSE DO
            SET ZCMD =
            SET MLTOP = &NRSTR(&ZCMDOPERAND)
            IF &CC = 0 THEN DO
             ISPEXEC LMMDISP DATAID(&DATAID) OPTION(ADD) +
                             MEMBER(&NRSTR(&ZCMDOPERAND)) +
                             ZLUDATA (*ADDED)
             IF &LASTCC > 8 THEN GOTO ERROR
             /* if lastcc = 8 then member already exists, not added */
            END
           END
           GOTO MLOOP
          END
          OTHERWISE DO
           ISPEXEC SETMSG MSG(ISPZ001)
           GOTO MLOOP
          END
         END

         SET MLTOP = &STR(&ZLMEMBER)

         PROCESS_A_MEMBER:+
         SET PROCESSED_OK = N

         SYSCALL BACKSCAN ZLUDATA
         SYSCALL BACKSCAN ZLMEMBER

         IF &SUBSTR(1,&ZLUDATA ) = &STR(*) THEN SET NEWNAME =
         ELSE SET NEWNAME = &STR(&ZLUDATA)

         SELECT &ZLLCMD
          WHEN (F|P|M) DO
                    SYSCALL COMPILE ZILSEL ('&ZLLCMD'  ) +
                                    ZILMEM ('&ZLMEMBER') +
                                    ZILNAME('&NEWNAME' ) +
                                    ZILSRC ('&XZZZSRC' ) +
                                    ZILLINK('&XZZZLNK' ) +
                                    ZILTRN ('&XZILTRN' ) +
                                    ZILBZL ('&XZILBZL' ) +
                                    ZILBAL ('&XZILBAL' ) +
                                    ZILBLL ('&XZILBLL' )
                    SELECT &LASTCC
                     WHEN (0)    DO
                                  SET ZLUDATA = &STR(*COMLNKD)
                                  SET PROCESSED_OK = Y
                                 END
                     WHEN ( 500)  SET ZLUDATA = &STR(*COMFAIL)
                     WHEN (1000)  SET ZLUDATA = &STR(*ASMFAIL)
                     WHEN (2000)  SET ZLUDATA = &STR(*LNKFAIL)
                     OTHERWISE    SET ZLUDATA = &STR(*ALCFAIL)
                    END
                    SET ZLLCMD =
                   END
          WHEN (E) DO
                    SYSCALL EDIT ZILMEM('&ZLMEMBER') ZILSRC('&XZZZSRC')
                    IF &LASTCC = 0 THEN +
                     SET ZLUDATA = &STR(*SAVED)
                    ELSE +
                     SET ZLUDATA =
                    SET ZLLCMD =
                    SET PROCESSED_OK = Y
                   END
          OTHERWISE DO
                     ISPEXEC SETMSG MSG(XZIL019) /* invalid selection code
                     SET MLTOP = &STR(&ZLMEMBER)
                    END
         END

         ISPEXEC LMMDISP DATAID(&DATAID) OPTION(PUT) +
                         MEMBER(&ZLMEMBER) ZLLCMD(&ZLLCMD) ZLUDATA(&ZLUDATA)
         IF &LASTCC > 8 THEN GOTO ERROR

         IF &PROCESSED_OK = Y THEN DO
          ISPEXEC LMMDISP DATAID(&DATAID) OPTION(GET)
          SET CC =  &LASTCC
          IF &CC > 8 THEN GOTO ERROR
          IF &CC = 0 THEN GOTO PROCESS_A_MEMBER
          SET MLCURSOR = ZCMD
         END
         ELSE DO
          SET MLCURSOR = ZLLCMD
         END

         GOTO MLOOP

         NO_MEMBERS: ISPEXEC SETMSG MSG(XZIL018)
         SET CURSOR = XZILMEM
         GOTO LOOP

         MFINISH:+
         ISPEXEC LMMDISP DATAID(&DATAID) OPTION(FREE)
         IF &LASTCC >= 8 THEN GOTO ERROR
         ISPEXEC LMCLOSE DATAID(&DATAID)
         IF &LASTCC >= 8 THEN GOTO ERROR
         ISPEXEC LMFREE DATAID(&DATAID)
         IF &LASTCC >= 8 THEN GOTO ERROR

        END

        GOTO LOOP

        ERROR:ISPEXEC CONTROL ERRORS CANCEL
        ISPEXEC DISPLAY PANEL(ZILTERM)
        GOTO LOOP

        COMPILE: PROC 0 ZILSEL()  ZILMEM()  ZILNAME() +
                        ZILSRC()  ZILLINK()  +
                        ZILTRN()  ZILBZL()  ZILBAL()  ZILBLL()

        SET COMPILED = 0
        SET ASSEMBLED = 0
        SET LINKEDITED = 0
        SET COMPILER_ERROR = 0
        SET ASSEMBLY_ERROR = 0
        SET LINKEDIT_ERROR = 0
        SET ISAPROG = &ZILSEL
        IF &ISAPROG = P THEN DO
         SET ALONE =
         SET NCAL =
        END
        ELSE DO
         SET ALONE = ALONE
         SET NCAL = NCAL
        END
        IF &STR(&ZILNAME) ¬= THEN SET THENAME = &STR(&ZILNAME)
        ELSE SET THENAME = &STR(&ZILMEM)
        SET PARM = &STR(&ISAPROG&DEBUG&THENAME)
        %XZCHECK '&ZILSRC(&ZILMEM)' SETMSG
        SET CHKCC = &LASTCC
        IF &CHKCC ¬= 0 THEN DO
         RETURN CODE(&CHKCC)
        END
        %XZCHECK '&ZILLINK(&THENAME)' SETMSG
        SELECT &LASTCC
         WHEN (0) DO
                  END
         WHEN (4) DO
                   ISPEXEC SETMSG MSG(XZIL014)  /* the only way to "SETNOMSG"
                  END
         OTHERWISE DO
          RETURN CODE(1)
         END
        END
        ISPEXEC CONTROL DISPLAY LINE START(1)
        SET ASMCODE = &STR('&TEMPPFX..ASM')
        SET OBJCODE = &STR('&TEMPPFX..OBJ')
        SET ZILLIST = &STR('&TEMPPFX..ZILLIST')
        SET ASMLIST = &STR('&TEMPPFX..ASMLIST')
        SET LNKLIST = &STR('&TEMPPFX..LNKLIST')
        SET TRNLIST = &STR('&TEMPPFX..TRNLIST')
        WRITE ZIL LISP source code input to compiler in: '&ZILSRC(&ZILMEM)'
        WRITE Generated ZIL LISP compilation listing to: &ZILLIST
        WRITE Generated assembler source code output to: &ASMCODE
        IF &ZILTRN = Y THEN DO
        WRITE Compilation internal transform listing to: &TRNLIST
        END
        IF &SYSDSN(&ASMCODE) ¬= OK THEN %XZMAKE DS &ASMCODE ASM SIZE(5)
        ALLOC F(ZILOCODE) DA(&ASMCODE) REU
        ALLOC F(SYSIN) DA(&ASMCODE) REU
        IF &SYSDSN(&ZILLIST) ¬= OK THEN %XZMAKE DS &ZILLIST LISTF120
        ALLOC F(ZILO) DA(&ZILLIST) REU
        IF &ZILTRN = Y THEN DO
         IF &SYSDSN(&TRNLIST) ¬= OK THEN %XZMAKE DS &TRNLIST LISTF120
         ALLOC F(ZILOCTRN) DA(&TRNLIST) REU
        END
        ELSE DO
         IF &TRACE = THEN CONTROL NOMSG
         FREE F(ZILOCTRN)
         CONTROL MSG
        END
        ALLOC F(ZILISRC) SHR REU DA('&ZILSRC(&ZILMEM)')
        IF &LASTCC ¬= 0 THEN DO
         ISPEXEC SETMSG MSG(XZIL005)  /* Allocation error */
         RETURN CODE(3000)
        END
        IF &STR(&LISPMACS) = THEN DO
         ALLOC F(ZILICMAC) DUMMY REU
        END
        ELSE DO
         ALLOC F(ZILICMAC) SHR REU DA(&LISPMACS)
         IF &LASTCC ¬= 0 THEN DO
          ISPEXEC SETMSG MSG(XZIL005)  /* Allocation error */
          RETURN CODE(4000)
         END
        END
        ALLOC F(ZILI) DA(*) REU
        IF &LASTCC ¬= 0 THEN DO
         ISPEXEC SETMSG MSG(XZIL005)  /* Allocation error */
         RETURN CODE(3000)
        END
        WRITE ZIL LISP compilation in progress for &THENAME
        SET ZILCOPARMS = &NRSTR(\&ACSIZE,&CSSIZE,&PDSIZE,&VSSIZE\&PARM)
        IF &SUBMETHOD = EXECPGM THEN DO
         ALLOC FI(ZILLIB) SHR REU +
               DA(&LIBRARIES '&LIBRARY')
         EXECPGM ZILCO PARM('&NRSTR(&ZILCOPARMS)') TASKLIB(ZILLIB)
         SET XZILCC = &LASTCC
         FREE FI(ZILLIB)
        END
        ELSE DO
         CALL '&LIBRARY(ZILCO)' '&NRSTR(&ZILCOPARMS)'
         SET XZILCC = &LASTCC
        END
        SET COMPILED = 1
        FREE F(ZILISRC ZILICMAC ZILI ZILO)
        IF &ZILTRN = Y THEN FREE F(ZILOCTRN)
        IF &XZILCC ¬= 0 THEN DO
         SET COMPILER_ERROR = 1
         ISPEXEC SETMSG MSG(XZIL008)  /* Compilation failed */
         GOTO BROLIST
        END
        ELSE WRITE &THENAME compiled into &ASMCODE
        IF &ZILBAL = Y THEN DO
         IF &SYSDSN(&ASMLIST) ¬= OK THEN %XZMAKE DS &ASMLIST ASMLIST SIZE(10)
        END
        IF &SYSDSN(&OBJCODE) ¬= OK THEN %XZMAKE DS &OBJCODE OBJ
        ALLOC F(SYSLIN)     REU DA(&OBJCODE)              DSORG(PS)
        IF &ZILBAL = Y THEN DO
         ALLOC F(SYSPRINT)  REU DA(&ASMLIST)              DSORG(PS)
        END
        ELSE DO
         ALLOC F(SYSPRINT)  REU DUMMY                     DSORG(PS)
        END
        ALLOC F(SYSLIB) SHR REU DA(&SYSMACLIB '&MACLIB') DSORG(PO)
        ALLOC F(SYSUT1)     REU T SP(50 50) DEL REL
        ALLOC F(SYSTERM)    REU DA(*)
        WRITE Assembly object output to: &OBJCODE
        IF &ZILBAL = Y THEN DO
         WRITE Assembly print output to: &ASMLIST
        END
        WRITE Assembly in progress for &THENAME
        CALL &ASSEMBLER +
         'LIST,TERM,ESD,NORLD,NOXREF,OBJECT,NODECK,SYSPARM(&SYSPARM)'
        SET XZILCC = &LASTCC
        FREE F(ZILOCODE SYSIN SYSLIN SYSPRINT SYSLIB SYSUT1 SYSTERM)
        SET ASSEMBLED = 1
        IF &XZILCC > &ASMTHRESHOLD THEN DO
         SET COMPILER_ERROR = 1
         SET ASSEMBLY_ERROR = 1
         ISPEXEC SETMSG MSG(XZIL009)  /* Assembly failed */
         GOTO BROLIST
        END
        CONTROL MSG
        IF &ZILBLL = Y THEN DO
         IF &SYSDSN(&LNKLIST) ¬= OK THEN %XZMAKE DS &LNKLIST LINKLIST
         WRITE Linkage editor print output to: &LNKLIST
         SET LINKPRINT = &STR(PRINT(&LNKLIST))
        END
        ELSE DO
         SET LINKPRINT = NOPRINT
        END
        WRITE Linkedit in progress for &THENAME
        LINK &OBJCODE +
           LOAD('&ZILLINK(&THENAME)') +
            LIB('&ZILLINK' &LIBRARIES '&LIBRARY') +
             &LINKPRINT +
              LIST MAP LET TERM &NCAL
        SET XZILCC = &LASTCC
        SET LINKEDITED = 1
        IF &XZILCC > 4 THEN DO
         WRITE Possible linkedit error, RC=&XZILCC
         SET COMPILER_ERROR = 1
         SET ASSEMBLY_ERROR = 1
         SET LINKEDIT_ERROR = 1
        END
        IF &XZILCC < 12 THEN +
         WRITE Load module is in: '&ZILLINK(&THENAME)'.
        BROLIST:+
        ISPEXEC CONTROL ERRORS RETURN
        IF &ZILTRN = Y THEN DO
         ISPEXEC BROWSE DATASET(&TRNLIST)
         IF &LASTCC > 12 THEN ISPEXEC DISPLAY PANEL(ZILTERM)
        END
        IF &ZILBZL = Y | &COMPILER_ERROR = 1 THEN DO
         ISPEXEC BROWSE DATASET(&ZILLIST)
         IF &LASTCC > 12 THEN ISPEXEC DISPLAY PANEL(ZILTERM)
        END
        IF &ASSEMBLED = 1 THEN DO
         IF &ZILBAL = Y /* | &ASSEMBLY_ERROR = 1 */ THEN DO
          ISPEXEC BROWSE DATASET(&ASMLIST)
          IF &LASTCC > 12 THEN ISPEXEC DISPLAY PANEL(ZILTERM)
         END
        END
        IF &LINKEDITED = 1 THEN DO
         IF &ZILBLL = Y /* | &LINKEDIT_ERROR = 1 */ THEN DO
          ISPEXEC BROWSE DATASET(&LNKLIST)
          IF &LASTCC > 12 THEN ISPEXEC DISPLAY PANEL(ZILTERM)
         END
        END
        ISPEXEC CONTROL ERRORS CANCEL
        IF      &COMPILER_ERROR = 1 THEN RETURN CODE( 500)
        ELSE IF &ASSEMBLY_ERROR = 1 THEN RETURN CODE(1000)
        ELSE IF &LINKEDIT_ERROR = 1 THEN RETURN CODE(2000)
        ELSE RETURN CODE(0)
        END /* COMPILE */

        EDIT: PROC 0 ZILMEM() ZILSRC()
         ISPEXEC CONTROL ERRORS RETURN
         ISPEXEC EDIT DATASET('&ZILSRC(&ZILMEM)')
         SET CC = &LASTCC
         SELECT &CC
          WHEN (0) SYSCALL SETMSG_XZIL015 &ZILSRC &ZILMEM
          WHEN (4)  /* nothing */
          OTHERWISE ISPEXEC SETMSG MSG(&ZERRMSG)
         END
         ISPEXEC CONTROL ERRORS CANCEL
         RETURN CODE(&CC)
        END /* EDIT */

        QUALIFY: PROC 1 VAR
        SYSREF VAR
        SET L = &LENGTH(&STR(&VAR))
        IF &SUBSTR(1,&VAR ) = ' THEN +
         SET VAR = &SUBSTR(2:&L-1,&VAR)
        ELSE +
         SET VAR = &STR(&SYSPREF..&VAR)
        END /* QUALIFY

        BACKSCAN: PROC 1 WORD
         SYSREF WORD
         SET I = &SYSINDEX( ,&NRSTR(&WORD))
         IF &I = 1 THEN SET WORD =
         ELSE IF &I ¬= 0 THEN SET WORD = &SUBSTR(1:&I-1,&NRSTR(&WORD))
        END /* BACKSCAN

        /* Subprocedure to isolate the XZILMEM variable. */

        SETMSG_XZIL015:PROC 2 XZZZSRC XZILMEM
        ISPEXEC SETMSG MSG(XZIL015)
        RETURN
        END

